"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-mdx-jsx";
exports.ids = ["vendor-chunks/mdast-util-mdx-jsx"];
exports.modules = {

/***/ "(ssr)/./node_modules/mdast-util-mdx-jsx/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/mdast-util-mdx-jsx/lib/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxJsxFromMarkdown: () => (/* binding */ mdxJsxFromMarkdown),\n/* harmony export */   mdxJsxToMarkdown: () => (/* binding */ mdxJsxToMarkdown)\n/* harmony export */ });\n/* harmony import */ var ccount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ccount */ \"(ssr)/./node_modules/ccount/index.js\");\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var parse_entities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! parse-entities */ \"(ssr)/./node_modules/parse-entities/lib/index.js\");\n/* harmony import */ var stringify_entities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! stringify-entities */ \"(ssr)/./node_modules/stringify-entities/lib/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unist-util-stringify-position */ \"(ssr)/./node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vfile-message */ \"(ssr)/./node_modules/vfile-message/lib/index.js\");\n/**\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, OnEnterError, OnExitError, Token} from 'mdast-util-from-markdown'\n * @import {Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State, Tracker} from 'mdast-util-to-markdown'\n * @import {Point} from 'unist'\n * @import {MdxJsxAttribute, MdxJsxAttributeValueExpression, MdxJsxExpressionAttribute, MdxJsxFlowElement, MdxJsxTextElement} from '../index.js'\n */ /**\n * @typedef Tag\n *   Single tag.\n * @property {string | undefined} name\n *   Name of tag, or `undefined` for fragment.\n *\n *   > ðŸ‘‰ **Note**: `null` is used in the AST for fragments, as it serializes in\n *   > JSON.\n * @property {Array<MdxJsxAttribute | MdxJsxExpressionAttribute>} attributes\n *   Attributes.\n * @property {boolean} close\n *   Whether the tag is closing (`</x>`).\n * @property {boolean} selfClosing\n *   Whether the tag is self-closing (`<x/>`).\n * @property {Token['start']} start\n *   Start point.\n * @property {Token['start']} end\n *   End point.\n *\n * @typedef ToMarkdownOptions\n *   Configuration.\n * @property {'\"' | \"'\" | null | undefined} [quote='\"']\n *   Preferred quote to use around attribute values (default: `'\"'`).\n * @property {boolean | null | undefined} [quoteSmart=false]\n *   Use the other quote if that results in less bytes (default: `false`).\n * @property {boolean | null | undefined} [tightSelfClosing=false]\n *   Do not use an extra space when closing self-closing elements: `<img/>`\n *   instead of `<img />` (default: `false`).\n * @property {number | null | undefined} [printWidth=Infinity]\n *   Try and wrap syntax at this width (default: `Infinity`).\n *\n *   When set to a finite number (say, `80`), the formatter will print\n *   attributes on separate lines when a tag doesnâ€™t fit on one line.\n *   The normal behavior is to print attributes with spaces between them\n *   instead of line endings.\n */ \n\n\n\n\n\nconst indent = \"  \";\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX JSX.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX JSX.\n *\n *   When using the syntax extension with `addResult`, nodes will have a\n *   `data.estree` field set to an ESTree `Program` node.\n */ function mdxJsxFromMarkdown() {\n    return {\n        canContainEols: [\n            \"mdxJsxTextElement\"\n        ],\n        enter: {\n            mdxJsxFlowTag: enterMdxJsxTag,\n            mdxJsxFlowTagClosingMarker: enterMdxJsxTagClosingMarker,\n            mdxJsxFlowTagAttribute: enterMdxJsxTagAttribute,\n            mdxJsxFlowTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n            mdxJsxFlowTagAttributeValueLiteral: buffer,\n            mdxJsxFlowTagAttributeValueExpression: buffer,\n            mdxJsxFlowTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker,\n            mdxJsxTextTag: enterMdxJsxTag,\n            mdxJsxTextTagClosingMarker: enterMdxJsxTagClosingMarker,\n            mdxJsxTextTagAttribute: enterMdxJsxTagAttribute,\n            mdxJsxTextTagExpressionAttribute: enterMdxJsxTagExpressionAttribute,\n            mdxJsxTextTagAttributeValueLiteral: buffer,\n            mdxJsxTextTagAttributeValueExpression: buffer,\n            mdxJsxTextTagSelfClosingMarker: enterMdxJsxTagSelfClosingMarker\n        },\n        exit: {\n            mdxJsxFlowTagClosingMarker: exitMdxJsxTagClosingMarker,\n            mdxJsxFlowTagNamePrimary: exitMdxJsxTagNamePrimary,\n            mdxJsxFlowTagNameMember: exitMdxJsxTagNameMember,\n            mdxJsxFlowTagNameLocal: exitMdxJsxTagNameLocal,\n            mdxJsxFlowTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n            mdxJsxFlowTagExpressionAttributeValue: data,\n            mdxJsxFlowTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n            mdxJsxFlowTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n            mdxJsxFlowTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n            mdxJsxFlowTagAttributeValueLiteralValue: data,\n            mdxJsxFlowTagAttributeValueExpression: exitMdxJsxTagAttributeValueExpression,\n            mdxJsxFlowTagAttributeValueExpressionValue: data,\n            mdxJsxFlowTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n            mdxJsxFlowTag: exitMdxJsxTag,\n            mdxJsxTextTagClosingMarker: exitMdxJsxTagClosingMarker,\n            mdxJsxTextTagNamePrimary: exitMdxJsxTagNamePrimary,\n            mdxJsxTextTagNameMember: exitMdxJsxTagNameMember,\n            mdxJsxTextTagNameLocal: exitMdxJsxTagNameLocal,\n            mdxJsxTextTagExpressionAttribute: exitMdxJsxTagExpressionAttribute,\n            mdxJsxTextTagExpressionAttributeValue: data,\n            mdxJsxTextTagAttributeNamePrimary: exitMdxJsxTagAttributeNamePrimary,\n            mdxJsxTextTagAttributeNameLocal: exitMdxJsxTagAttributeNameLocal,\n            mdxJsxTextTagAttributeValueLiteral: exitMdxJsxTagAttributeValueLiteral,\n            mdxJsxTextTagAttributeValueLiteralValue: data,\n            mdxJsxTextTagAttributeValueExpression: exitMdxJsxTagAttributeValueExpression,\n            mdxJsxTextTagAttributeValueExpressionValue: data,\n            mdxJsxTextTagSelfClosingMarker: exitMdxJsxTagSelfClosingMarker,\n            mdxJsxTextTag: exitMdxJsxTag\n        }\n    };\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function buffer() {\n        this.buffer();\n    }\n    /**\n   * Copy a point-like value.\n   *\n   * @param {Point} d\n   *   Point-like value.\n   * @returns {Point}\n   *   unist point.\n   */ function point(d) {\n        return {\n            line: d.line,\n            column: d.column,\n            offset: d.offset\n        };\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function data(token) {\n        this.config.enter.data.call(this, token);\n        this.config.exit.data.call(this, token);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function enterMdxJsxTag(token) {\n        /** @type {Tag} */ const tag = {\n            name: undefined,\n            attributes: [],\n            close: false,\n            selfClosing: false,\n            start: token.start,\n            end: token.end\n        };\n        if (!this.data.mdxJsxTagStack) this.data.mdxJsxTagStack = [];\n        this.data.mdxJsxTag = tag;\n        this.buffer();\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function enterMdxJsxTagClosingMarker(token) {\n        const stack = this.data.mdxJsxTagStack;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(stack, \"expected `mdxJsxTagStack`\");\n        if (stack.length === 0) {\n            throw new vfile_message__WEBPACK_IMPORTED_MODULE_1__.VFileMessage(\"Unexpected closing slash `/` in tag, expected an open tag first\", {\n                start: token.start,\n                end: token.end\n            }, \"mdast-util-mdx-jsx:unexpected-closing-slash\");\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function enterMdxJsxTagAnyAttribute(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        if (tag.close) {\n            throw new vfile_message__WEBPACK_IMPORTED_MODULE_1__.VFileMessage(\"Unexpected attribute in closing tag, expected the end of the tag\", {\n                start: token.start,\n                end: token.end\n            }, \"mdast-util-mdx-jsx:unexpected-attribute\");\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function enterMdxJsxTagSelfClosingMarker(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        if (tag.close) {\n            throw new vfile_message__WEBPACK_IMPORTED_MODULE_1__.VFileMessage(\"Unexpected self-closing slash `/` in closing tag, expected the end of the tag\", {\n                start: token.start,\n                end: token.end\n            }, \"mdast-util-mdx-jsx:unexpected-self-closing-slash\");\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTagClosingMarker() {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        tag.close = true;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTagNamePrimary(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        tag.name = this.sliceSerialize(token);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTagNameMember(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        tag.name += \".\" + this.sliceSerialize(token);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTagNameLocal(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        tag.name += \":\" + this.sliceSerialize(token);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function enterMdxJsxTagAttribute(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        enterMdxJsxTagAnyAttribute.call(this, token);\n        tag.attributes.push({\n            type: \"mdxJsxAttribute\",\n            name: \"\",\n            value: null,\n            position: {\n                start: point(token.start),\n                // @ts-expect-error: `end` will be patched later.\n                end: undefined\n            }\n        });\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function enterMdxJsxTagExpressionAttribute(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        enterMdxJsxTagAnyAttribute.call(this, token);\n        tag.attributes.push({\n            type: \"mdxJsxExpressionAttribute\",\n            value: \"\"\n        });\n        this.buffer();\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTagExpressionAttribute(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        const tail = tag.attributes[tag.attributes.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tail.type === \"mdxJsxExpressionAttribute\");\n        const estree = token.estree;\n        tail.value = this.resume();\n        if (estree) {\n            tail.data = {\n                estree\n            };\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTagAttributeNamePrimary(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        const node = tag.attributes[tag.attributes.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === \"mdxJsxAttribute\");\n        node.name = this.sliceSerialize(token);\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.position !== undefined);\n        node.position.end = point(token.end);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTagAttributeNameLocal(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        const node = tag.attributes[tag.attributes.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === \"mdxJsxAttribute\");\n        node.name += \":\" + this.sliceSerialize(token);\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.position !== undefined);\n        node.position.end = point(token.end);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTagAttributeValueLiteral(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        const node = tag.attributes[tag.attributes.length - 1];\n        node.value = (0,parse_entities__WEBPACK_IMPORTED_MODULE_2__.parseEntities)(this.resume(), {\n            nonTerminated: false\n        });\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.position !== undefined);\n        node.position.end = point(token.end);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTagAttributeValueExpression(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        const tail = tag.attributes[tag.attributes.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tail.type === \"mdxJsxAttribute\");\n        /** @type {MdxJsxAttributeValueExpression} */ const node = {\n            type: \"mdxJsxAttributeValueExpression\",\n            value: this.resume()\n        };\n        const estree = token.estree;\n        if (estree) {\n            node.data = {\n                estree\n            };\n        }\n        tail.value = node;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tail.position !== undefined);\n        tail.position.end = point(token.end);\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTagSelfClosingMarker() {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        tag.selfClosing = true;\n    }\n    /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */ function exitMdxJsxTag(token) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        const stack = this.data.mdxJsxTagStack;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(stack, \"expected `mdxJsxTagStack`\");\n        const tail = stack[stack.length - 1];\n        if (tag.close && tail.name !== tag.name) {\n            throw new vfile_message__WEBPACK_IMPORTED_MODULE_1__.VFileMessage(\"Unexpected closing tag `\" + serializeAbbreviatedTag(tag) + \"`, expected corresponding closing tag for `\" + serializeAbbreviatedTag(tail) + \"` (\" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_3__.stringifyPosition)(tail) + \")\", {\n                start: token.start,\n                end: token.end\n            }, \"mdast-util-mdx-jsx:end-tag-mismatch\");\n        }\n        // End of a tag, so drop the buffer.\n        this.resume();\n        if (tag.close) {\n            stack.pop();\n        } else {\n            this.enter({\n                type: token.type === \"mdxJsxTextTag\" ? \"mdxJsxTextElement\" : \"mdxJsxFlowElement\",\n                name: tag.name || null,\n                attributes: tag.attributes,\n                children: []\n            }, token, onErrorRightIsTag);\n        }\n        if (tag.selfClosing || tag.close) {\n            this.exit(token, onErrorLeftIsTag);\n        } else {\n            stack.push(tag);\n        }\n    }\n    /**\n   * @this {CompileContext}\n   * @type {OnEnterError}\n   */ function onErrorRightIsTag(closing, open) {\n        const stack = this.data.mdxJsxTagStack;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(stack, \"expected `mdxJsxTagStack`\");\n        const tag = stack[stack.length - 1];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        const place = closing ? \" before the end of `\" + closing.type + \"`\" : \"\";\n        const position = closing ? {\n            start: closing.start,\n            end: closing.end\n        } : undefined;\n        throw new vfile_message__WEBPACK_IMPORTED_MODULE_1__.VFileMessage(\"Expected a closing tag for `\" + serializeAbbreviatedTag(tag) + \"` (\" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_3__.stringifyPosition)({\n            start: open.start,\n            end: open.end\n        }) + \")\" + place, position, \"mdast-util-mdx-jsx:end-tag-mismatch\");\n    }\n    /**\n   * @this {CompileContext}\n   * @type {OnExitError}\n   */ function onErrorLeftIsTag(a, b) {\n        const tag = this.data.mdxJsxTag;\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(tag, \"expected `mdxJsxTag`\");\n        throw new vfile_message__WEBPACK_IMPORTED_MODULE_1__.VFileMessage(\"Expected the closing tag `\" + serializeAbbreviatedTag(tag) + \"` either after the end of `\" + b.type + \"` (\" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_3__.stringifyPosition)(b.end) + \") or another opening tag after the start of `\" + b.type + \"` (\" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_3__.stringifyPosition)(b.start) + \")\", {\n            start: a.start,\n            end: a.end\n        }, \"mdast-util-mdx-jsx:end-tag-mismatch\");\n    }\n    /**\n   * Serialize a tag, excluding attributes.\n   * `self-closing` is not supported, because we donâ€™t need it yet.\n   *\n   * @param {Tag} tag\n   * @returns {string}\n   */ function serializeAbbreviatedTag(tag) {\n        return \"<\" + (tag.close ? \"/\" : \"\") + (tag.name || \"\") + \">\";\n    }\n}\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX JSX.\n *\n * This extension configures `mdast-util-to-markdown` with\n * `options.fences: true` and `options.resourceLink: true` too, do not\n * overwrite them!\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX JSX.\n */ function mdxJsxToMarkdown(options) {\n    const options_ = options || {};\n    const quote = options_.quote || '\"';\n    const quoteSmart = options_.quoteSmart || false;\n    const tightSelfClosing = options_.tightSelfClosing || false;\n    const printWidth = options_.printWidth || Number.POSITIVE_INFINITY;\n    const alternative = quote === '\"' ? \"'\" : '\"';\n    if (quote !== '\"' && quote !== \"'\") {\n        throw new Error(\"Cannot serialize attribute values with `\" + quote + \"` for `options.quote`, expected `\\\"`, or `'`\");\n    }\n    mdxElement.peek = peekElement;\n    return {\n        handlers: {\n            mdxJsxFlowElement: mdxElement,\n            mdxJsxTextElement: mdxElement\n        },\n        unsafe: [\n            {\n                character: \"<\",\n                inConstruct: [\n                    \"phrasing\"\n                ]\n            },\n            {\n                atBreak: true,\n                character: \"<\"\n            }\n        ],\n        // Always generate fenced code (never indented code).\n        fences: true,\n        // Always generate links with resources (never autolinks).\n        resourceLink: true\n    };\n    /**\n   * @type {ToMarkdownHandle}\n   * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n   */ // eslint-disable-next-line complexity\n    function mdxElement(node, _, state, info) {\n        const flow = node.type === \"mdxJsxFlowElement\";\n        const selfClosing = node.name ? !node.children || node.children.length === 0 : false;\n        const depth = inferDepth(state);\n        const currentIndent = createIndent(depth);\n        const trackerOneLine = state.createTracker(info);\n        const trackerMultiLine = state.createTracker(info);\n        /** @type {Array<string>} */ const serializedAttributes = [];\n        const prefix = (flow ? currentIndent : \"\") + \"<\" + (node.name || \"\");\n        const exit = state.enter(node.type);\n        trackerOneLine.move(prefix);\n        trackerMultiLine.move(prefix);\n        // None.\n        if (node.attributes && node.attributes.length > 0) {\n            if (!node.name) {\n                throw new Error(\"Cannot serialize fragment w/ attributes\");\n            }\n            let index = -1;\n            while(++index < node.attributes.length){\n                const attribute = node.attributes[index];\n                /** @type {string} */ let result;\n                if (attribute.type === \"mdxJsxExpressionAttribute\") {\n                    result = \"{\" + (attribute.value || \"\") + \"}\";\n                } else {\n                    if (!attribute.name) {\n                        throw new Error(\"Cannot serialize attribute w/o name\");\n                    }\n                    const value = attribute.value;\n                    const left = attribute.name;\n                    /** @type {string} */ let right = \"\";\n                    if (value === null || value === undefined) {\n                    // Empty.\n                    } else if (typeof value === \"object\") {\n                        right = \"{\" + (value.value || \"\") + \"}\";\n                    } else {\n                        // If the alternative is less common than `quote`, switch.\n                        const appliedQuote = quoteSmart && (0,ccount__WEBPACK_IMPORTED_MODULE_4__.ccount)(value, quote) > (0,ccount__WEBPACK_IMPORTED_MODULE_4__.ccount)(value, alternative) ? alternative : quote;\n                        right = appliedQuote + (0,stringify_entities__WEBPACK_IMPORTED_MODULE_5__.stringifyEntitiesLight)(value, {\n                            subset: [\n                                appliedQuote\n                            ]\n                        }) + appliedQuote;\n                    }\n                    result = left + (right ? \"=\" : \"\") + right;\n                }\n                serializedAttributes.push(result);\n            }\n        }\n        let attributesOnTheirOwnLine = false;\n        const attributesOnOneLine = serializedAttributes.join(\" \");\n        if (// Block:\n        flow && // Including a line ending (expressions).\n        (/\\r?\\n|\\r/.test(attributesOnOneLine) || // Current position (including `<tag`).\n        trackerOneLine.current().now.column + // -1 because columns, +1 for ` ` before attributes.\n        // Attributes joined by spaces.\n        attributesOnOneLine.length + // ` />`.\n        (selfClosing ? tightSelfClosing ? 2 : 3 : 1) > printWidth)) {\n            attributesOnTheirOwnLine = true;\n        }\n        let tracker = trackerOneLine;\n        let value = prefix;\n        if (attributesOnTheirOwnLine) {\n            tracker = trackerMultiLine;\n            let index = -1;\n            while(++index < serializedAttributes.length){\n                // Only indent first line of of attributes, we canâ€™t indent attribute\n                // values.\n                serializedAttributes[index] = currentIndent + indent + serializedAttributes[index];\n            }\n            value += tracker.move(\"\\n\" + serializedAttributes.join(\"\\n\") + \"\\n\" + currentIndent);\n        } else if (attributesOnOneLine) {\n            value += tracker.move(\" \" + attributesOnOneLine);\n        }\n        if (selfClosing) {\n            value += tracker.move((tightSelfClosing || attributesOnTheirOwnLine ? \"\" : \" \") + \"/\");\n        }\n        value += tracker.move(\">\");\n        if (node.children && node.children.length > 0) {\n            if (node.type === \"mdxJsxTextElement\") {\n                value += tracker.move(// @ts-expect-error: `containerPhrasing` is typed correctly, but TS\n                // generates *hardcoded* types, which means that our dynamically added\n                // directives are not present.\n                // At some point, TS should fix that, and `from-markdown` should be fine.\n                state.containerPhrasing(node, {\n                    ...tracker.current(),\n                    before: \">\",\n                    after: \"<\"\n                }));\n            } else {\n                tracker.shift(2);\n                value += tracker.move(\"\\n\");\n                value += tracker.move(containerFlow(node, state, tracker.current()));\n                value += tracker.move(\"\\n\");\n            }\n        }\n        if (!selfClosing) {\n            value += tracker.move((flow ? currentIndent : \"\") + \"</\" + (node.name || \"\") + \">\");\n        }\n        exit();\n        return value;\n    }\n}\n// Modified copy of:\n// <https://github.com/syntax-tree/mdast-util-to-markdown/blob/a381cbc/lib/util/container-flow.js>.\n//\n// To do: add `indent` support to `mdast-util-to-markdown`.\n// As indents are only used for JSX, itâ€™s fine for now, but perhaps better\n// there.\n/**\n * @param {MdxJsxFlowElement} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {ReturnType<Tracker['current']>} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */ function containerFlow(parent, state, info) {\n    const indexStack = state.indexStack;\n    const children = parent.children;\n    const tracker = state.createTracker(info);\n    const currentIndent = createIndent(inferDepth(state));\n    /** @type {Array<string>} */ const results = [];\n    let index = -1;\n    indexStack.push(-1);\n    while(++index < children.length){\n        const child = children[index];\n        indexStack[indexStack.length - 1] = index;\n        const childInfo = {\n            before: \"\\n\",\n            after: \"\\n\",\n            ...tracker.current()\n        };\n        const result = state.handle(child, parent, state, childInfo);\n        const serializedChild = child.type === \"mdxJsxFlowElement\" ? result : state.indentLines(result, function(line, _, blank) {\n            return (blank ? \"\" : currentIndent) + line;\n        });\n        results.push(tracker.move(serializedChild));\n        if (child.type !== \"list\") {\n            state.bulletLastUsed = undefined;\n        }\n        if (index < children.length - 1) {\n            results.push(tracker.move(\"\\n\\n\"));\n        }\n    }\n    indexStack.pop();\n    return results.join(\"\");\n}\n/**\n * @param {State} state\n * @returns {number}\n */ function inferDepth(state) {\n    let depth = 0;\n    let index = state.stack.length;\n    while(--index > -1){\n        const name = state.stack[index];\n        if (name === \"blockquote\" || name === \"listItem\") break;\n        if (name === \"mdxJsxFlowElement\") depth++;\n    }\n    return depth;\n}\n/**\n * @param {number} depth\n * @returns {string}\n */ function createIndent(depth) {\n    return indent.repeat(depth);\n}\n/**\n * @type {ToMarkdownHandle}\n */ function peekElement() {\n    return \"<\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-mdx-jsx/lib/index.js\n");

/***/ })

};
;