"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-eth-accounts";
exports.ids = ["vendor-chunks/web3-eth-accounts"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/account.js":
/*!***********************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/account.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   hashMessage: () => (/* binding */ hashMessage),\n/* harmony export */   parseAndValidatePrivateKey: () => (/* binding */ parseAndValidatePrivateKey),\n/* harmony export */   privateKeyToAccount: () => (/* binding */ privateKeyToAccount),\n/* harmony export */   privateKeyToAddress: () => (/* binding */ privateKeyToAddress),\n/* harmony export */   privateKeyToPublicKey: () => (/* binding */ privateKeyToPublicKey),\n/* harmony export */   recover: () => (/* binding */ recover),\n/* harmony export */   recoverTransaction: () => (/* binding */ recoverTransaction),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   signTransaction: () => (/* binding */ signTransaction)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_aes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/aes.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/aes.js\");\n/* harmony import */ var ethereum_cryptography_pbkdf2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/pbkdf2.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/pbkdf2.js\");\n/* harmony import */ var ethereum_cryptography_scrypt_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereum-cryptography/scrypt.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/scrypt.js\");\n/* harmony import */ var web3_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-errors */ \"(ssr)/./node_modules/web3-errors/lib/esm/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var web3_validator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! web3-validator */ \"(ssr)/./node_modules/web3-validator/lib/esm/index.js\");\n/* harmony import */ var _tx_constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tx/constants.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/constants.js\");\n/* harmony import */ var _schemas_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./schemas.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/schemas.js\");\n/* harmony import */ var _tx_transactionFactory_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tx/transactionFactory.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/transactionFactory.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * The web3 accounts package contains functions to generate Ethereum accounts and sign transactions & data.\n *\n * For using accounts functions, first install Web3 package using `npm i web3` or `yarn add web3` based on your package manager usage.\n * After that, Accounts functions will be available as mentioned in following snippet.\n * ```ts\n * import {Web3} from 'web3';\n *\n * const web3 = new Web3();\n * const account = web3.eth.accounts.create();\n * const result = web3.eth.accounts.hashMessage(\"Test Message\");\n *\n * ```\n *\n * For using individual package install `web3-eth-accounts` package using `npm i web3-eth-accounts` or `yarn add web3-eth-accounts` and only import required functions.\n * This is more efficient approach for building lightweight applications.\n * ```ts\n * import {create,hashMessage} from 'web3-eth-accounts';\n *\n * const account = create();\n * const result = hashMessage(\"Test Message\");\n *\n * ```\n * @module Accounts\n *\n */ \n\n\n\n\n\n\n\n\n/**\n * Get the private key Uint8Array after the validation.\n * Note: This function is not exported through main web3 package, so for using it directly import from accounts package.\n * @param data - Private key\n * @param ignoreLength - Optional, ignore length check during validation\n * @returns The Uint8Array private key\n *\n * ```ts\n * parseAndValidatePrivateKey(\"0x08c673022000ece7964ea4db2d9369c50442b2869cbd8fc21baaca59e18f642c\")\n *\n * > Uint8Array(32) [\n * 186,  26, 143, 168, 235, 179,  90,  75,\n * 101,  63,  84, 221, 152, 150,  30, 203,\n *   8, 113,  94, 226,  53, 213, 216,   5,\n * 194, 159,  17,  53, 219,  97, 121, 248\n * ]\n *\n * ```\n */ const parseAndValidatePrivateKey = (data, ignoreLength)=>{\n    let privateKeyUint8Array;\n    // To avoid the case of 1 character less in a hex string which is prefixed with '0' by using 'bytesToUint8Array'\n    if (!ignoreLength && typeof data === \"string\" && (0,web3_validator__WEBPACK_IMPORTED_MODULE_5__.isHexStrict)(data) && data.length !== 66) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.PrivateKeyLengthError();\n    }\n    try {\n        privateKeyUint8Array = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.isUint8Array)(data) ? data : (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToUint8Array)(data);\n    } catch (_a) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.InvalidPrivateKeyError();\n    }\n    if (!ignoreLength && privateKeyUint8Array.byteLength !== 32) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.PrivateKeyLengthError();\n    }\n    return privateKeyUint8Array;\n};\n/**\n *\n * Hashes the given message. The data will be `UTF-8 HEX` decoded and enveloped as follows:\n * `\"\\x19Ethereum Signed Message:\\n\" + message.length + message` and hashed using keccak256.\n *\n * @param message - A message to hash, if its HEX it will be UTF8 decoded.\n * @returns The hashed message\n *\n * ```ts\n * web3.eth.accounts.hashMessage(\"Hello world\")\n *\n * > \"0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede\"\n *\n * web3.eth.accounts.hashMessage(web3.utils.utf8ToHex(\"Hello world\")) // Will be hex decoded in hashMessage\n *\n * > \"0x8144a6fa26be252b86456491fbcd43c1de7e022241845ffea1c3df066f7cfede\"\n * ```\n */ const hashMessage = (message)=>{\n    const messageHex = (0,web3_validator__WEBPACK_IMPORTED_MODULE_5__.isHexStrict)(message) ? message : (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToHex)(message);\n    const messageBytes = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(messageHex);\n    const preamble = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)((0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.fromUtf8)(`\\x19Ethereum Signed Message:\\n${messageBytes.byteLength}`));\n    const ethMessage = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.uint8ArrayConcat)(preamble, messageBytes);\n    return (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.sha3Raw)(ethMessage); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different\n};\n/**\n * Signs arbitrary data with a given private key.\n * :::info\n * The value passed as the data parameter will be UTF-8 HEX decoded and wrapped as follows: \"\\\\x19Ethereum Signed Message:\\\\n\" + message.length + message\n * :::\n\n * @param data - The data to sign\n * @param privateKey - The 32 byte private key to sign with\n * @returns The signature Object containing the message, messageHash, signature r, s, v\n *\n * ```ts\n * web3.eth.accounts.sign('Some data', '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318')\n * > {\n * message: 'Some data',\n * messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',\n * v: '0x1c',\n * r: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd',\n * s: '0x6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a029',\n * signature: '0xb91467e570a6466aa9e9876cbcd013baba02900b8979d43fe208a4a4f339f5fd6007e74cd82e037b800186422fc2da167c747ef045e5d18a5f5d4300f8e1a0291c'\n * }\n * ```\n */ const sign = (data, privateKey)=>{\n    const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n    const hash = hashMessage(data);\n    const signature = _tx_constants_js__WEBPACK_IMPORTED_MODULE_6__.secp256k1.sign(hash.substring(2), privateKeyUint8Array);\n    const signatureBytes = signature.toCompactRawBytes();\n    const r = signature.r.toString(16).padStart(64, \"0\");\n    const s = signature.s.toString(16).padStart(64, \"0\");\n    const v = signature.recovery + 27;\n    return {\n        message: data,\n        messageHash: hash,\n        v: (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(v),\n        r: `0x${r}`,\n        s: `0x${s}`,\n        signature: `${(0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(signatureBytes)}${v.toString(16)}`\n    };\n};\n/**\n * Signs an Ethereum transaction with a given private key.\n *\n * @param transaction - The transaction, must be a legacy, EIP2930 or EIP 1559 transaction type\n * @param privateKey -  The private key to import. This is 32 bytes of random data.\n * @returns A signTransactionResult object that contains message hash, r, s, v, transaction hash and raw transaction.\n *\n * This function is not stateful here. We need network access to get the account `nonce` and `chainId` to sign the transaction.\n * This function will rely on user to provide the full transaction to be signed. If you want to sign a partial transaction object\n * Use {@link Web3.eth.accounts.sign} instead.\n *\n * Signing a legacy transaction\n * ```ts\n * import {signTransaction, Transaction} from 'web3-eth-accounts';\n *\n * signTransaction(new Transaction({\n *\tto: '0x118C2E5F57FD62C2B5b46a5ae9216F4FF4011a07',\n *\tvalue: '0x186A0',\n *\tgasLimit: '0x520812',\n *\tgasPrice: '0x09184e72a000',\n *\tdata: '',\n *\tchainId: 1,\n *\tnonce: 0 }),\n * '0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318')\n *\n * > {\n * messageHash: '0x28b7b75f7ba48d588a902c1ff4d5d13cc0ca9ac0aaa39562368146923fb853bf',\n * v: '0x25',\n * r: '0x601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5',\n * s: '0x690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',\n * rawTransaction: '0xf869808609184e72a0008352081294118c2e5f57fd62c2b5b46a5ae9216f4ff4011a07830186a08025a00601b0017b0e20dd0eeda4b895fbc1a9e8968990953482214f880bae593e71b5a0690d984493560552e3ebdcc19a65b9c301ea9ddc82d3ab8cfde60485fd5722ce',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * ```\n *\n * Signing an eip 1559 transaction\n * ```ts\n * import {signTransaction, Transaction} from 'web3-eth-accounts';\n *\n * signTransaction(new Transaction({\n *\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n *\tmaxPriorityFeePerGas: '0x3B9ACA00',\n *\tmaxFeePerGas: '0xB2D05E00',\n *\tgasLimit: '0x6A4012',\n *\tvalue: '0x186A0',\n *\tdata: '',\n *\tchainId: 1,\n *\tnonce: 0}),\n * \"0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318\")\n * > {\n *  messageHash: '0x5744f24d5f0aff6c70487c8e85adf07d8564e50b08558788f00479611d7bae5f',\n * v: '0x25',\n * r: '0x78a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347',\n * s: '0x9cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',\n * rawTransaction: '0xf8638080836a401294f0109fc8df283027b6285cc889f5aa624eac1f55830186a08025a078a5a6b2876c3985f90f82073d18d57ac299b608cc76a4ba697b8bb085048347a009cfcb40cc7d505ed17ff2d3337b51b066648f10c6b7e746117de69b2eb6358d',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * }\n * ```\n *\n * Signing an eip 2930 transaction\n * ```ts\n * import {signTransaction, Transaction} from 'web3-eth-accounts';\n *\n * signTransaction(new Transaction ({\n *\tchainId: 1,\n *\tnonce: 0,\n *\tgasPrice: '0x09184e72a000',\n *\tgasLimit: '0x2710321',\n *\tto: '0xF0109fC8DF283027b6285cc889F5aA624EaC1F55',\n *\tvalue: '0x186A0',\n *\tdata: '',\n *\taccessList: [\n *\t\t{\n *\t\t\taddress: '0x0000000000000000000000000000000000000101',\n *\t\t\tstorageKeys: [\n *\t\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000000',\n *\t\t\t\t'0x00000000000000000000000000000000000000000000000000000000000060a7',\n *\t\t\t],\n *\t\t},\n *\t],\n * }),\"0x4c0883a69102937d6231471b5dbb6204fe5129617082792ae468d01a3f362318\")\n *\n * > {\n * messageHash: '0xc55ea24bdb4c379550a7c9a6818ac39ca33e75bc78ddb862bd82c31cc1c7a073',\n * v: '0x26',\n * r: '0x27344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098e',\n * s: '0x519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',\n * rawTransaction: '0xf86a808609184e72a000840271032194f0109fc8df283027b6285cc889f5aa624eac1f55830186a08026a027344e77871c8b2068bc998bf28e0b5f9920867a69c455b2ed0c1c150fec098ea0519f0130a1d662841d4a28082e9c9bb0a15e0e59bb46cfc39a52f0e285dec6b9',\n * transactionHash: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n * }\n * ```\n */ const signTransaction = (transaction, privateKey)=>__awaiter(void 0, void 0, void 0, function*() {\n        const signedTx = transaction.sign((0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(privateKey));\n        if ((0,web3_validator__WEBPACK_IMPORTED_MODULE_5__.isNullish)(signedTx.v) || (0,web3_validator__WEBPACK_IMPORTED_MODULE_5__.isNullish)(signedTx.r) || (0,web3_validator__WEBPACK_IMPORTED_MODULE_5__.isNullish)(signedTx.s)) throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.TransactionSigningError(\"Signer Error\");\n        const validationErrors = signedTx.validate(true);\n        if (validationErrors.length > 0) {\n            let errorString = \"Signer Error \";\n            for (const validationError of validationErrors){\n                errorString += `${errorString} ${validationError}.`;\n            }\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.TransactionSigningError(errorString);\n        }\n        const rawTx = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(signedTx.serialize());\n        const txHash = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.sha3Raw)(rawTx); // using keccak in web3-utils.sha3Raw instead of SHA3 (NIST Standard) as both are different\n        return {\n            messageHash: (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(signedTx.getMessageToSign(true)),\n            v: `0x${signedTx.v.toString(16)}`,\n            r: `0x${signedTx.r.toString(16).padStart(64, \"0\")}`,\n            s: `0x${signedTx.s.toString(16).padStart(64, \"0\")}`,\n            rawTransaction: rawTx,\n            transactionHash: (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(txHash)\n        };\n    });\n/**\n * Recovers the Ethereum address which was used to sign the given RLP encoded transaction.\n *\n * @param rawTransaction - The hex string having RLP encoded transaction\n * @returns The Ethereum address used to sign this transaction\n * ```ts\n * web3.eth.accounts.recoverTransaction('0xf869808504e3b29200831e848094f0109fc8df283027b6285cc889f5aa624eac1f55843b9aca008025a0c9cf86333bcb065d140032ecaab5d9281bde80f21b9687b3e94161de42d51895a0727a108a0b8d101465414033c3f705a9c7b826e596766046ee1183dbc8aeaa68');\n * > \"0x2c7536E3605D9C16a7a3D7b1898e529396a65c23\"\n * ```\n */ const recoverTransaction = (rawTransaction)=>{\n    if ((0,web3_validator__WEBPACK_IMPORTED_MODULE_5__.isNullish)(rawTransaction)) throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.UndefinedRawTransactionError();\n    const tx = _tx_transactionFactory_js__WEBPACK_IMPORTED_MODULE_8__.TransactionFactory.fromSerializedData((0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(rawTransaction));\n    return (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.toChecksumAddress)(tx.getSenderAddress().toString());\n};\n/**\n * Recovers the Ethereum address which was used to sign the given data\n *\n * @param data - Either a signed message, hash, or the {@link signatureObject}\n * @param signature - The raw RLP encoded signature\n * @param signatureOrV - signature or V\n * @param prefixedOrR - prefixed or R\n * @param s - S value in signature\n * @param prefixed - (default: false) If the last parameter is true, the given message will NOT automatically be prefixed with `\"\\\\x19Ethereum Signed Message:\\\\n\" + message.length + message`, and assumed to be already prefixed.\n * @returns The Ethereum address used to sign this data\n *\n * ```ts\n * const data = 'Some data';\n * const sigObj = web3.eth.accounts.sign(data, '0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728')\n *\n * > {\n *   message: 'Some data',\n *   messageHash: '0x1da44b586eb0729ff70a73c326926f6ed5a25f5b056e7f47fbc6e58d86871655',\n *   v: '0x1b',\n *   r: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f9',\n *   s: '0x53e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb150',\n *   signature: '0xa8037a6116c176a25e6fc224947fde9e79a2deaa0dd8b67b366fbdfdbffc01f953e41351267b20d4a89ebfe9c8f03c04de9b345add4a52f15bd026b63c8fb1501b'\n * }\n *\n * // now recover\n * web3.eth.accounts.recover(data, sigObj.v, sigObj.r, sigObj.s)\n *\n * > 0xEB014f8c8B418Db6b45774c326A0E64C78914dC0\n * ```\n */ const recover = (data, signatureOrV, prefixedOrR, s, prefixed)=>{\n    if (typeof data === \"object\") {\n        const signatureStr = `${data.r}${data.s.slice(2)}${data.v.slice(2)}`;\n        return recover(data.messageHash, signatureStr, prefixedOrR);\n    }\n    if (typeof signatureOrV === \"string\" && typeof prefixedOrR === \"string\" && !(0,web3_validator__WEBPACK_IMPORTED_MODULE_5__.isNullish)(s)) {\n        const signatureStr = `${prefixedOrR}${s.slice(2)}${signatureOrV.slice(2)}`;\n        return recover(data, signatureStr, prefixed);\n    }\n    if ((0,web3_validator__WEBPACK_IMPORTED_MODULE_5__.isNullish)(signatureOrV)) throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.InvalidSignatureError(\"signature string undefined\");\n    const V_INDEX = 130; // r = first 32 bytes, s = second 32 bytes, v = last byte of signature\n    const hashedMessage = prefixedOrR ? data : hashMessage(data);\n    let v = parseInt(signatureOrV.substring(V_INDEX), 16); // 0x + r + s + v\n    if (v > 26) {\n        v -= 27;\n    }\n    const ecPublicKey = _tx_constants_js__WEBPACK_IMPORTED_MODULE_6__.secp256k1.Signature.fromCompact(signatureOrV.slice(2, V_INDEX)).addRecoveryBit(v).recoverPublicKey(hashedMessage.replace(\"0x\", \"\")).toRawBytes(false);\n    const publicHash = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.sha3Raw)(ecPublicKey.subarray(1));\n    const address = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.toChecksumAddress)(`0x${publicHash.slice(-40)}`);\n    return address;\n};\n;\n/**\n * Get the ethereum Address from a private key\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param ignoreLength - if true, will not error check length\n * @returns The Ethereum address\n * @example\n * ```ts\n * web3.eth.accounts.privateKeyToAddress(\"0xbe6383dad004f233317e46ddb46ad31b16064d14447a95cc1d8c8d4bc61c3728\")\n *\n * > \"0xEB014f8c8B418Db6b45774c326A0E64C78914dC0\"\n * ```\n */ const privateKeyToAddress = (privateKey)=>{\n    const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n    // Get public key from private key in compressed format\n    const publicKey = _tx_constants_js__WEBPACK_IMPORTED_MODULE_6__.secp256k1.getPublicKey(privateKeyUint8Array, false);\n    // Uncompressed ECDSA public key contains the prefix `0x04` which is not used in the Ethereum public key\n    const publicKeyHash = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.sha3Raw)(publicKey.slice(1));\n    // The hash is returned as 256 bits (32 bytes) or 64 hex characters\n    // To get the address, take the last 20 bytes of the public hash\n    const address = publicKeyHash.slice(-40);\n    return (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.toChecksumAddress)(`0x${address}`);\n};\n/**\n * Get the public key from a private key\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param isCompressed - if true, will generate a 33 byte compressed public key instead of a 65 byte public key\n * @returns The public key\n * @example\n * ```ts\n * web3.eth.accounts.privateKeyToPublicKey(\"0x1e046a882bb38236b646c9f135cf90ad90a140810f439875f2a6dd8e50fa261f\", true)\n *\n * > \"0x42beb65f179720abaa3ec9a70a539629cbbc5ec65bb57e7fc78977796837e537662dd17042e6449dc843c281067a4d6d8d1a1775a13c41901670d5de7ee6503a\" // uncompressed public key\n * ```\n */ const privateKeyToPublicKey = (privateKey, isCompressed)=>{\n    const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n    // Get public key from private key in compressed format\n    return `0x${(0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(_tx_constants_js__WEBPACK_IMPORTED_MODULE_6__.secp256k1.getPublicKey(privateKeyUint8Array, isCompressed)).slice(4)}`; // 0x and removing compression byte\n};\n/**\n * encrypt a private key with a password, returns a V3 JSON Keystore\n *\n * Read more: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n *\n * @param privateKey - The private key to encrypt, 32 bytes.\n * @param password - The password used for encryption.\n * @param options - Options to configure to encrypt the keystore either scrypt or pbkdf2\n * @returns Returns a V3 JSON Keystore\n *\n * Encrypt using scrypt options:\n * ```ts\n *\n * web3.eth.accounts.encrypt(\n *    '0x67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',\n *    '123',\n *    {\n *        n: 8192,\n *\t    iv: web3.utils.hexToBytes('0xbfb43120ae00e9de110f8325143a2709'),\n *\t    salt: web3.utils.hexToBytes('0x210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'),\n *\t}).then(console.log)\n *\n * > {\n * version: 3,\n * id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',\n * address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',\n * crypto: {\n *   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',\n *   cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *   cipher: 'aes-128-ctr',\n *   kdf: 'scrypt',\n *   kdfparams: {\n *     n: 8192,\n *     r: 8,\n *     p: 1,\n *     dklen: 32,\n *     salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'\n *   },\n *   mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'\n * }\n *}\n *```\n *\n * Encrypting using pbkdf2 options:\n * ```ts\n * web3.eth.accounts.encrypt('0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',\n *'123',\n *{\n *\tiv: 'bfb43120ae00e9de110f8325143a2709',\n *\tsalt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',\n *\tc: 262144,\n *\tkdf: 'pbkdf2',\n *}).then(console.log)\n *\n * >\n * {\n *   version: 3,\n *   id: '77381417-0973-4e4b-b590-8eb3ace0fe2d',\n *   address: 'b8ce9ab6943e0eced004cde8e3bbed6568b2fa01',\n *   crypto: {\n *     ciphertext: '76512156a34105fa6473ad040c666ae7b917d14c06543accc0d2dc28e6073b12',\n *     cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *     cipher: 'aes-128-ctr',\n *     kdf: 'pbkdf2',\n *     kdfparams: {\n *       dklen: 32,\n *       salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd',\n *       c: 262144,\n *       prf: 'hmac-sha256'\n *     },\n *   mac: '46eb4884e82dc43b5aa415faba53cc653b7038e9d61cc32fd643cf8c396189b7'\n *   }\n * }\n *```\n */ const encrypt = (privateKey, password, options)=>__awaiter(void 0, void 0, void 0, function*() {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);\n        // if given salt or iv is a string, convert it to a Uint8Array\n        let salt;\n        if (options === null || options === void 0 ? void 0 : options.salt) {\n            salt = typeof options.salt === \"string\" ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(options.salt) : options.salt;\n        } else {\n            salt = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(32);\n        }\n        if (!((0,web3_validator__WEBPACK_IMPORTED_MODULE_5__.isString)(password) || (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.isUint8Array)(password))) {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.InvalidPasswordError();\n        }\n        const uint8ArrayPassword = typeof password === \"string\" ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)((0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToHex)(password)) : password;\n        let initializationVector;\n        if (options === null || options === void 0 ? void 0 : options.iv) {\n            initializationVector = typeof options.iv === \"string\" ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(options.iv) : options.iv;\n            if (initializationVector.length !== 16) {\n                throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.IVLengthError();\n            }\n        } else {\n            initializationVector = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(16);\n        }\n        const kdf = (_a = options === null || options === void 0 ? void 0 : options.kdf) !== null && _a !== void 0 ? _a : \"scrypt\";\n        let derivedKey;\n        let kdfparams;\n        // derive key from key derivation function\n        if (kdf === \"pbkdf2\") {\n            kdfparams = {\n                dklen: (_b = options === null || options === void 0 ? void 0 : options.dklen) !== null && _b !== void 0 ? _b : 32,\n                salt: (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(salt).replace(\"0x\", \"\"),\n                c: (_c = options === null || options === void 0 ? void 0 : options.c) !== null && _c !== void 0 ? _c : 262144,\n                prf: \"hmac-sha256\"\n            };\n            if (kdfparams.c < 1000) {\n                // error when c < 1000, pbkdf2 is less secure with less iterations\n                throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.PBKDF2IterationsError();\n            }\n            derivedKey = (0,ethereum_cryptography_pbkdf2_js__WEBPACK_IMPORTED_MODULE_1__.pbkdf2Sync)(uint8ArrayPassword, salt, kdfparams.c, kdfparams.dklen, \"sha256\");\n        } else if (kdf === \"scrypt\") {\n            kdfparams = {\n                n: (_d = options === null || options === void 0 ? void 0 : options.n) !== null && _d !== void 0 ? _d : 8192,\n                r: (_e = options === null || options === void 0 ? void 0 : options.r) !== null && _e !== void 0 ? _e : 8,\n                p: (_f = options === null || options === void 0 ? void 0 : options.p) !== null && _f !== void 0 ? _f : 1,\n                dklen: (_g = options === null || options === void 0 ? void 0 : options.dklen) !== null && _g !== void 0 ? _g : 32,\n                salt: (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(salt).replace(\"0x\", \"\")\n            };\n            derivedKey = (0,ethereum_cryptography_scrypt_js__WEBPACK_IMPORTED_MODULE_2__.scryptSync)(uint8ArrayPassword, salt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);\n        } else {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.InvalidKdfError();\n        }\n        const cipher = yield (0,ethereum_cryptography_aes_js__WEBPACK_IMPORTED_MODULE_0__.encrypt)(privateKeyUint8Array, derivedKey.slice(0, 16), initializationVector, \"aes-128-ctr\");\n        const ciphertext = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(cipher).slice(2);\n        const mac = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.sha3Raw)((0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.uint8ArrayConcat)(derivedKey.slice(16, 32), cipher)).replace(\"0x\", \"\");\n        return {\n            version: 3,\n            id: (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.uuidV4)(),\n            address: privateKeyToAddress(privateKeyUint8Array).toLowerCase().replace(\"0x\", \"\"),\n            crypto: {\n                ciphertext,\n                cipherparams: {\n                    iv: (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(initializationVector).replace(\"0x\", \"\")\n                },\n                cipher: \"aes-128-ctr\",\n                kdf,\n                kdfparams,\n                mac\n            }\n        };\n    });\n/**\n * Get an Account object from the privateKey\n *\n * @param privateKey - String or Uint8Array of 32 bytes\n * @param ignoreLength - if true, will not error check length\n * @returns A Web3Account object\n *\n * :::info\n * The `Web3Account.signTransaction` is not stateful if directly imported from accounts package and used. Network access is required to get the account `nonce` and `chainId` to sign the transaction, so use {@link Web3.eth.accounts.signTransaction} for signing transactions.\n * ::::\n *\n * ```ts\n * web3.eth.accounts.privateKeyToAccount(\"0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709\");\n *\n * >    {\n * \t\t\taddress: '0xb8CE9ab6943e0eCED004cDe8e3bBed6568B2Fa01',\n * \t\t\tprivateKey: '0x348ce564d427a3311b6536bbcff9390d69395b06ed6c486954e971d960fe8709',\n * \t\t\tsign,\n * \t\t\tsignTransaction,\n * \t\t\tencrypt,\n * \t}\n * ```\n */ const privateKeyToAccount = (privateKey, ignoreLength)=>{\n    const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey, ignoreLength);\n    return {\n        address: privateKeyToAddress(privateKeyUint8Array),\n        privateKey: (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(privateKeyUint8Array),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        signTransaction: (_tx)=>{\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.TransactionSigningError(\"Do not have network access to sign the transaction\");\n        },\n        sign: (data)=>sign(typeof data === \"string\" ? data : JSON.stringify(data), privateKeyUint8Array),\n        encrypt: (password, options)=>__awaiter(void 0, void 0, void 0, function*() {\n                return encrypt(privateKeyUint8Array, password, options);\n            })\n    };\n};\n/**\n *\n * Generates and returns a Web3Account object that includes the private and public key\n * For creation of private key, it uses an audited package ethereum-cryptography/secp256k1\n * that is cryptographically secure random number with certain characteristics.\n * Read more: https://www.npmjs.com/package/ethereum-cryptography#secp256k1-curve\n *\n * @returns A Web3Account object\n * ```ts\n * web3.eth.accounts.create();\n * {\n * address: '0xbD504f977021b5E5DdccD8741A368b147B3B38bB',\n * privateKey: '0x964ced1c69ad27a311c432fdc0d8211e987595f7eb34ab405a5f16bdc9563ec5',\n * signTransaction: [Function: signTransaction],\n * sign: [Function: sign],\n * encrypt: [AsyncFunction: encrypt]\n * }\n * ```\n */ const create = ()=>{\n    const privateKey = _tx_constants_js__WEBPACK_IMPORTED_MODULE_6__.secp256k1.utils.randomPrivateKey();\n    return privateKeyToAccount(`${(0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.bytesToHex)(privateKey)}`);\n};\n/**\n * Decrypts a v3 keystore JSON, and creates the account.\n *\n * @param keystore - the encrypted Keystore object or string to decrypt\n * @param password - The password that was used for encryption\n * @param nonStrict - if true and given a json string, the keystore will be parsed as lowercase.\n * @returns Returns the decrypted Web3Account object\n * Decrypting scrypt\n *\n * ```ts\n * web3.eth.accounts.decrypt({\n *   version: 3,\n *   id: 'c0cb0a94-4702-4492-b6e6-eb2ac404344a',\n *   address: 'cda9a91875fc35c8ac1320e098e584495d66e47c',\n *   crypto: {\n *   ciphertext: 'cb3e13e3281ff3861a3f0257fad4c9a51b0eb046f9c7821825c46b210f040b8f',\n *      cipherparams: { iv: 'bfb43120ae00e9de110f8325143a2709' },\n *      cipher: 'aes-128-ctr',\n *      kdf: 'scrypt',\n *      kdfparams: {\n *        n: 8192,\n *        r: 8,\n *        p: 1,\n *        dklen: 32,\n *        salt: '210d0ec956787d865358ac45716e6dd42e68d48e346d795746509523aeb477dd'\n *      },\n *      mac: 'efbf6d3409f37c0084a79d5fdf9a6f5d97d11447517ef1ea8374f51e581b7efd'\n *    }\n *   }, '123').then(console.log);\n *\n *\n * > {\n * address: '0xcdA9A91875fc35c8Ac1320E098e584495d66e47c',\n * privateKey: '67f476289210e3bef3c1c75e4de993ff0a00663df00def84e73aa7411eac18a6',\n * signTransaction: [Function: signTransaction],\n * sign: [Function: sign],\n * encrypt: [AsyncFunction: encrypt]\n * }\n * ```\n */ const decrypt = (keystore, password, nonStrict)=>__awaiter(void 0, void 0, void 0, function*() {\n        const json = typeof keystore === \"object\" ? keystore : JSON.parse(nonStrict ? keystore.toLowerCase() : keystore);\n        web3_validator__WEBPACK_IMPORTED_MODULE_5__.validator.validateJSONSchema(_schemas_js__WEBPACK_IMPORTED_MODULE_7__.keyStoreSchema, json);\n        if (json.version !== 3) throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.KeyStoreVersionError();\n        const uint8ArrayPassword = typeof password === \"string\" ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)((0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.utf8ToHex)(password)) : password;\n        web3_validator__WEBPACK_IMPORTED_MODULE_5__.validator.validate([\n            \"bytes\"\n        ], [\n            uint8ArrayPassword\n        ]);\n        let derivedKey;\n        if (json.crypto.kdf === \"scrypt\") {\n            const kdfparams = json.crypto.kdfparams;\n            const uint8ArraySalt = typeof kdfparams.salt === \"string\" ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(kdfparams.salt) : kdfparams.salt;\n            derivedKey = (0,ethereum_cryptography_scrypt_js__WEBPACK_IMPORTED_MODULE_2__.scryptSync)(uint8ArrayPassword, uint8ArraySalt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);\n        } else if (json.crypto.kdf === \"pbkdf2\") {\n            const kdfparams = json.crypto.kdfparams;\n            const uint8ArraySalt = typeof kdfparams.salt === \"string\" ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(kdfparams.salt) : kdfparams.salt;\n            derivedKey = (0,ethereum_cryptography_pbkdf2_js__WEBPACK_IMPORTED_MODULE_1__.pbkdf2Sync)(uint8ArrayPassword, uint8ArraySalt, kdfparams.c, kdfparams.dklen, \"sha256\");\n        } else {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.InvalidKdfError();\n        }\n        const ciphertext = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(json.crypto.ciphertext);\n        const mac = (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.sha3Raw)((0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.uint8ArrayConcat)(derivedKey.slice(16, 32), ciphertext)).replace(\"0x\", \"\");\n        if (mac !== json.crypto.mac) {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_3__.KeyDerivationError();\n        }\n        const seed = yield (0,ethereum_cryptography_aes_js__WEBPACK_IMPORTED_MODULE_0__.decrypt)((0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(json.crypto.ciphertext), derivedKey.slice(0, 16), (0,web3_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(json.crypto.cipherparams.iv));\n        return privateKeyToAccount(seed);\n    }); //# sourceMappingURL=account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/chains/goerli.js":
/*!************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/chains/goerli.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"goerli\",\n    \"chainId\": 5,\n    \"networkId\": 5,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"poa\",\n        \"algorithm\": \"clique\",\n        \"clique\": {\n            \"period\": 15,\n            \"epoch\": 30000\n        }\n    },\n    \"comment\": \"Cross-client PoA test network\",\n    \"url\": \"https://github.com/goerli/testnet\",\n    \"genesis\": {\n        \"timestamp\": \"0x5c51a607\",\n        \"gasLimit\": 10485760,\n        \"difficulty\": 1,\n        \"nonce\": \"0x0000000000000000\",\n        \"extraData\": \"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 1561651,\n            \"forkHash\": \"0xc25efa5c\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 4460644,\n            \"forkHash\": \"0x757a1c47\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 5062605,\n            \"forkHash\": \"0xb8c6299d\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818\",\n            \"name\": \"merge\",\n            \"ttd\": \"10790000\",\n            \"block\": 7382819,\n            \"forkHash\": \"0xb8c6299d\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": null,\n            \"forkHash\": null\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"forkHash\": null\n        }\n    ],\n    \"bootstrapNodes\": [],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net\"\n    ]\n}); //# sourceMappingURL=goerli.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vY2hhaW5zL2dvZXJsaS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsYUFBYTtRQUNULFFBQVE7UUFDUixhQUFhO1FBQ2IsVUFBVTtZQUNOLFVBQVU7WUFDVixTQUFTO1FBQ2I7SUFDSjtJQUNBLFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztRQUNQLGFBQWE7UUFDYixZQUFZO1FBQ1osY0FBYztRQUNkLFNBQVM7UUFDVCxhQUFhO0lBQ2pCO0lBQ0EsYUFBYTtRQUNUO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxjQUFjO1lBQ2QsUUFBUTtZQUNSLE9BQU87WUFDUCxTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7S0FDSDtJQUNELGtCQUFrQixFQUFFO0lBQ3BCLGVBQWU7UUFDWDtLQUNIO0FBQ0wsQ0FBQyxFQUFDLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2NoYWlucy9nb2VybGkuanM/M2IxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwiZ29lcmxpXCIsXG4gICAgXCJjaGFpbklkXCI6IDUsXG4gICAgXCJuZXR3b3JrSWRcIjogNSxcbiAgICBcImRlZmF1bHRIYXJkZm9ya1wiOiBcIm1lcmdlXCIsXG4gICAgXCJjb25zZW5zdXNcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJwb2FcIixcbiAgICAgICAgXCJhbGdvcml0aG1cIjogXCJjbGlxdWVcIixcbiAgICAgICAgXCJjbGlxdWVcIjoge1xuICAgICAgICAgICAgXCJwZXJpb2RcIjogMTUsXG4gICAgICAgICAgICBcImVwb2NoXCI6IDMwMDAwXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiY29tbWVudFwiOiBcIkNyb3NzLWNsaWVudCBQb0EgdGVzdCBuZXR3b3JrXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vZ29lcmxpL3Rlc3RuZXRcIixcbiAgICBcImdlbmVzaXNcIjoge1xuICAgICAgICBcInRpbWVzdGFtcFwiOiBcIjB4NWM1MWE2MDdcIixcbiAgICAgICAgXCJnYXNMaW1pdFwiOiAxMDQ4NTc2MCxcbiAgICAgICAgXCJkaWZmaWN1bHR5XCI6IDEsXG4gICAgICAgIFwibm9uY2VcIjogXCIweDAwMDAwMDAwMDAwMDAwMDBcIixcbiAgICAgICAgXCJleHRyYURhdGFcIjogXCIweDIyNDY2YzY1Nzg2OTIwNjk3MzIwNjEyMDc0Njg2OTZlNjcyMjIwMmQyMDQxNjY3MjY5MDAwMDAwMDAwMDAwMDBlMGEyYmQ0MjU4ZDI3Njg4MzdiYWEyNmEyOGZlNzFkYzA3OWY4NGM3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiXG4gICAgfSxcbiAgICBcImhhcmRmb3Jrc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNoYWluc3RhcnRcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGEzZjVhYjA4XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiaG9tZXN0ZWFkXCIsXG4gICAgICAgICAgICBcImJsb2NrXCI6IDAsXG4gICAgICAgICAgICBcImZvcmtIYXNoXCI6IFwiMHhhM2Y1YWIwOFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInRhbmdlcmluZVdoaXN0bGVcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGEzZjVhYjA4XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwic3B1cmlvdXNEcmFnb25cIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGEzZjVhYjA4XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYnl6YW50aXVtXCIsXG4gICAgICAgICAgICBcImJsb2NrXCI6IDAsXG4gICAgICAgICAgICBcImZvcmtIYXNoXCI6IFwiMHhhM2Y1YWIwOFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNvbnN0YW50aW5vcGxlXCIsXG4gICAgICAgICAgICBcImJsb2NrXCI6IDAsXG4gICAgICAgICAgICBcImZvcmtIYXNoXCI6IFwiMHhhM2Y1YWIwOFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInBldGVyc2J1cmdcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGEzZjVhYjA4XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiaXN0YW5idWxcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMTU2MTY1MSxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGMyNWVmYTVjXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYmVybGluXCIsXG4gICAgICAgICAgICBcImJsb2NrXCI6IDQ0NjA2NDQsXG4gICAgICAgICAgICBcImZvcmtIYXNoXCI6IFwiMHg3NTdhMWM0N1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImxvbmRvblwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiA1MDYyNjA1LFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4YjhjNjI5OWRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIi8vX2NvbW1lbnRcIjogXCJUaGUgZm9ya0hhc2ggd2lsbCByZW1haW4gc2FtZSBhcyBtZXJnZUZvcmtJZFRyYW5zaXRpb24gaXMgcG9zdCBtZXJnZSwgdGVybWluYWwgYmxvY2s6IGh0dHBzOi8vZ29lcmxpLmV0aGVyc2Nhbi5pby9ibG9jay83MzgyODE4XCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtZXJnZVwiLFxuICAgICAgICAgICAgXCJ0dGRcIjogXCIxMDc5MDAwMFwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiA3MzgyODE5LFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4YjhjNjI5OWRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtZXJnZUZvcmtJZFRyYW5zaXRpb25cIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogbnVsbCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogbnVsbFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJzaGFuZ2hhaVwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiBudWxsLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBudWxsXG4gICAgICAgIH1cbiAgICBdLFxuICAgIFwiYm9vdHN0cmFwTm9kZXNcIjogW10sXG4gICAgXCJkbnNOZXR3b3Jrc1wiOiBbXG4gICAgICAgIFwiZW5ydHJlZTovL0FLQTNBTTZMUEJZRVVETVZOVTNCU1ZRSjVBRDQ1WTdZUE9ISkxFRjZXMjZRT0U0VlRVRFBFQGFsbC5nb2VybGkuZXRoZGlzY28ubmV0XCJcbiAgICBdXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z29lcmxpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/chains/goerli.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/chains/mainnet.js":
/*!*************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/chains/mainnet.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"mainnet\",\n    \"chainId\": 1,\n    \"networkId\": 1,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"pow\",\n        \"algorithm\": \"ethash\",\n        \"ethash\": {}\n    },\n    \"comment\": \"The Ethereum main chain\",\n    \"url\": \"https://ethstats.net/\",\n    \"genesis\": {\n        \"gasLimit\": 5000,\n        \"difficulty\": 17179869184,\n        \"nonce\": \"0x0000000000000042\",\n        \"extraData\": \"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0xfc64ec04\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 1150000,\n            \"forkHash\": \"0x97c2c34c\"\n        },\n        {\n            \"name\": \"dao\",\n            \"block\": 1920000,\n            \"forkHash\": \"0x91d1f948\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 2463000,\n            \"forkHash\": \"0x7a64da13\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 2675000,\n            \"forkHash\": \"0x3edd5b10\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 4370000,\n            \"forkHash\": \"0xa00bc324\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 7280000,\n            \"forkHash\": \"0x668db0af\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 7280000,\n            \"forkHash\": \"0x668db0af\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 9069000,\n            \"forkHash\": \"0x879d6e30\"\n        },\n        {\n            \"name\": \"muirGlacier\",\n            \"block\": 9200000,\n            \"forkHash\": \"0xe029e991\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 12244000,\n            \"forkHash\": \"0x0eb440f6\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 12965000,\n            \"forkHash\": \"0xb715077d\"\n        },\n        {\n            \"name\": \"arrowGlacier\",\n            \"block\": 13773000,\n            \"forkHash\": \"0x20c327fc\"\n        },\n        {\n            \"name\": \"grayGlacier\",\n            \"block\": 15050000,\n            \"forkHash\": \"0xf0afd0e3\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393\",\n            \"name\": \"merge\",\n            \"ttd\": \"58750000000000000000000\",\n            \"block\": 15537394,\n            \"forkHash\": \"0xf0afd0e3\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": null,\n            \"forkHash\": null\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"forkHash\": null\n        }\n    ],\n    \"bootstrapNodes\": [],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net\"\n    ]\n}); //# sourceMappingURL=mainnet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vY2hhaW5zL21haW5uZXQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLGFBQWE7UUFDVCxRQUFRO1FBQ1IsYUFBYTtRQUNiLFVBQVUsQ0FBQztJQUNmO0lBQ0EsV0FBVztJQUNYLE9BQU87SUFDUCxXQUFXO1FBQ1AsWUFBWTtRQUNaLGNBQWM7UUFDZCxTQUFTO1FBQ1QsYUFBYTtJQUNqQjtJQUNBLGFBQWE7UUFDVDtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxjQUFjO1lBQ2QsUUFBUTtZQUNSLE9BQU87WUFDUCxTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7S0FDSDtJQUNELGtCQUFrQixFQUFFO0lBQ3BCLGVBQWU7UUFDWDtLQUNIO0FBQ0wsQ0FBQyxFQUFDLENBQ0YsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2NoYWlucy9tYWlubmV0LmpzPzZkYjciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcIm1haW5uZXRcIixcbiAgICBcImNoYWluSWRcIjogMSxcbiAgICBcIm5ldHdvcmtJZFwiOiAxLFxuICAgIFwiZGVmYXVsdEhhcmRmb3JrXCI6IFwibWVyZ2VcIixcbiAgICBcImNvbnNlbnN1c1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInBvd1wiLFxuICAgICAgICBcImFsZ29yaXRobVwiOiBcImV0aGFzaFwiLFxuICAgICAgICBcImV0aGFzaFwiOiB7fVxuICAgIH0sXG4gICAgXCJjb21tZW50XCI6IFwiVGhlIEV0aGVyZXVtIG1haW4gY2hhaW5cIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZXRoc3RhdHMubmV0L1wiLFxuICAgIFwiZ2VuZXNpc1wiOiB7XG4gICAgICAgIFwiZ2FzTGltaXRcIjogNTAwMCxcbiAgICAgICAgXCJkaWZmaWN1bHR5XCI6IDE3MTc5ODY5MTg0LFxuICAgICAgICBcIm5vbmNlXCI6IFwiMHgwMDAwMDAwMDAwMDAwMDQyXCIsXG4gICAgICAgIFwiZXh0cmFEYXRhXCI6IFwiMHgxMWJiZThkYjRlMzQ3YjRlOGM5MzdjMWM4MzcwZTRiNWVkMzNhZGIzZGI2OWNiZGI3YTM4ZTFlNTBiMWI4MmZhXCJcbiAgICB9LFxuICAgIFwiaGFyZGZvcmtzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2hhaW5zdGFydFwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiAwLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4ZmM2NGVjMDRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJob21lc3RlYWRcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMTE1MDAwMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweDk3YzJjMzRjXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGFvXCIsXG4gICAgICAgICAgICBcImJsb2NrXCI6IDE5MjAwMDAsXG4gICAgICAgICAgICBcImZvcmtIYXNoXCI6IFwiMHg5MWQxZjk0OFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInRhbmdlcmluZVdoaXN0bGVcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMjQ2MzAwMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweDdhNjRkYTEzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwic3B1cmlvdXNEcmFnb25cIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMjY3NTAwMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweDNlZGQ1YjEwXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYnl6YW50aXVtXCIsXG4gICAgICAgICAgICBcImJsb2NrXCI6IDQzNzAwMDAsXG4gICAgICAgICAgICBcImZvcmtIYXNoXCI6IFwiMHhhMDBiYzMyNFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImNvbnN0YW50aW5vcGxlXCIsXG4gICAgICAgICAgICBcImJsb2NrXCI6IDcyODAwMDAsXG4gICAgICAgICAgICBcImZvcmtIYXNoXCI6IFwiMHg2NjhkYjBhZlwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInBldGVyc2J1cmdcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogNzI4MDAwMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweDY2OGRiMGFmXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiaXN0YW5idWxcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogOTA2OTAwMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweDg3OWQ2ZTMwXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwibXVpckdsYWNpZXJcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogOTIwMDAwMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGUwMjllOTkxXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiYmVybGluXCIsXG4gICAgICAgICAgICBcImJsb2NrXCI6IDEyMjQ0MDAwLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4MGViNDQwZjZcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJsb25kb25cIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMTI5NjUwMDAsXG4gICAgICAgICAgICBcImZvcmtIYXNoXCI6IFwiMHhiNzE1MDc3ZFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImFycm93R2xhY2llclwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiAxMzc3MzAwMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweDIwYzMyN2ZjXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ3JheUdsYWNpZXJcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMTUwNTAwMDAsXG4gICAgICAgICAgICBcImZvcmtIYXNoXCI6IFwiMHhmMGFmZDBlM1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiLy9fY29tbWVudFwiOiBcIlRoZSBmb3JrSGFzaCB3aWxsIHJlbWFpbiBzYW1lIGFzIG1lcmdlRm9ya0lkVHJhbnNpdGlvbiBpcyBwb3N0IG1lcmdlLCB0ZXJtaW5hbCBibG9jazogaHR0cHM6Ly9ldGhlcnNjYW4uaW8vYmxvY2svMTU1MzczOTNcIixcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIm1lcmdlXCIsXG4gICAgICAgICAgICBcInR0ZFwiOiBcIjU4NzUwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXG4gICAgICAgICAgICBcImJsb2NrXCI6IDE1NTM3Mzk0LFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4ZjBhZmQwZTNcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtZXJnZUZvcmtJZFRyYW5zaXRpb25cIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogbnVsbCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogbnVsbFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJzaGFuZ2hhaVwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiBudWxsLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBudWxsXG4gICAgICAgIH1cbiAgICBdLFxuICAgIFwiYm9vdHN0cmFwTm9kZXNcIjogW10sXG4gICAgXCJkbnNOZXR3b3Jrc1wiOiBbXG4gICAgICAgIFwiZW5ydHJlZTovL0FLQTNBTTZMUEJZRVVETVZOVTNCU1ZRSjVBRDQ1WTdZUE9ISkxFRjZXMjZRT0U0VlRVRFBFQGFsbC5tYWlubmV0LmV0aGRpc2NvLm5ldFwiXG4gICAgXVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1haW5uZXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/chains/mainnet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/chains/sepolia.js":
/*!*************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/chains/sepolia.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"sepolia\",\n    \"chainId\": 11155111,\n    \"networkId\": 11155111,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"pow\",\n        \"algorithm\": \"ethash\",\n        \"ethash\": {}\n    },\n    \"comment\": \"PoW test network to replace Ropsten\",\n    \"url\": \"https://github.com/ethereum/go-ethereum/pull/23730\",\n    \"genesis\": {\n        \"timestamp\": \"0x6159af19\",\n        \"gasLimit\": 30000000,\n        \"difficulty\": 131072,\n        \"nonce\": \"0x0000000000000000\",\n        \"extraData\": \"0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"muirGlacier\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408\",\n            \"name\": \"merge\",\n            \"ttd\": \"17000000000000000\",\n            \"block\": 1450409,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": 1735371,\n            \"forkHash\": \"0xb96cbd13\"\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"timestamp\": \"1677557088\",\n            \"forkHash\": \"0xf7f9bc08\"\n        }\n    ],\n    \"bootstrapNodes\": [],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net\"\n    ]\n}); //# sourceMappingURL=sepolia.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vY2hhaW5zL3NlcG9saWEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLGFBQWE7UUFDVCxRQUFRO1FBQ1IsYUFBYTtRQUNiLFVBQVUsQ0FBQztJQUNmO0lBQ0EsV0FBVztJQUNYLE9BQU87SUFDUCxXQUFXO1FBQ1AsYUFBYTtRQUNiLFlBQVk7UUFDWixjQUFjO1FBQ2QsU0FBUztRQUNULGFBQWE7SUFDakI7SUFDQSxhQUFhO1FBQ1Q7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxZQUFZO1FBQ2hCO1FBQ0E7WUFDSSxRQUFRO1lBQ1IsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksY0FBYztZQUNkLFFBQVE7WUFDUixPQUFPO1lBQ1AsU0FBUztZQUNULFlBQVk7UUFDaEI7UUFDQTtZQUNJLFFBQVE7WUFDUixTQUFTO1lBQ1QsWUFBWTtRQUNoQjtRQUNBO1lBQ0ksUUFBUTtZQUNSLFNBQVM7WUFDVCxhQUFhO1lBQ2IsWUFBWTtRQUNoQjtLQUNIO0lBQ0Qsa0JBQWtCLEVBQUU7SUFDcEIsZUFBZTtRQUNYO0tBQ0g7QUFDTCxDQUFDLEVBQUMsQ0FDRixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vY2hhaW5zL3NlcG9saWEuanM/ODI2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwic2Vwb2xpYVwiLFxuICAgIFwiY2hhaW5JZFwiOiAxMTE1NTExMSxcbiAgICBcIm5ldHdvcmtJZFwiOiAxMTE1NTExMSxcbiAgICBcImRlZmF1bHRIYXJkZm9ya1wiOiBcIm1lcmdlXCIsXG4gICAgXCJjb25zZW5zdXNcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJwb3dcIixcbiAgICAgICAgXCJhbGdvcml0aG1cIjogXCJldGhhc2hcIixcbiAgICAgICAgXCJldGhhc2hcIjoge31cbiAgICB9LFxuICAgIFwiY29tbWVudFwiOiBcIlBvVyB0ZXN0IG5ldHdvcmsgdG8gcmVwbGFjZSBSb3BzdGVuXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vcHVsbC8yMzczMFwiLFxuICAgIFwiZ2VuZXNpc1wiOiB7XG4gICAgICAgIFwidGltZXN0YW1wXCI6IFwiMHg2MTU5YWYxOVwiLFxuICAgICAgICBcImdhc0xpbWl0XCI6IDMwMDAwMDAwLFxuICAgICAgICBcImRpZmZpY3VsdHlcIjogMTMxMDcyLFxuICAgICAgICBcIm5vbmNlXCI6IFwiMHgwMDAwMDAwMDAwMDAwMDAwXCIsXG4gICAgICAgIFwiZXh0cmFEYXRhXCI6IFwiMHg1MzY1NzA2ZjZjNjk2MTJjMjA0MTc0Njg2NTZlNzMyYzIwNDE3NDc0Njk2MzYxMmMyMDQ3NzI2NTY1NjM2NTIxXCJcbiAgICB9LFxuICAgIFwiaGFyZGZvcmtzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2hhaW5zdGFydFwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiAwLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4ZmUzMzY2ZTdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJob21lc3RlYWRcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGZlMzM2NmU3XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwidGFuZ2VyaW5lV2hpc3RsZVwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiAwLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4ZmUzMzY2ZTdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJzcHVyaW91c0RyYWdvblwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiAwLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4ZmUzMzY2ZTdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJieXphbnRpdW1cIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGZlMzM2NmU3XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29uc3RhbnRpbm9wbGVcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGZlMzM2NmU3XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwicGV0ZXJzYnVyZ1wiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiAwLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4ZmUzMzY2ZTdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJpc3RhbmJ1bFwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiAwLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4ZmUzMzY2ZTdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtdWlyR2xhY2llclwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiAwLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4ZmUzMzY2ZTdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJiZXJsaW5cIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMCxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGZlMzM2NmU3XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwibG9uZG9uXCIsXG4gICAgICAgICAgICBcImJsb2NrXCI6IDAsXG4gICAgICAgICAgICBcImZvcmtIYXNoXCI6IFwiMHhmZTMzNjZlN1wiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiLy9fY29tbWVudFwiOiBcIlRoZSBmb3JrSGFzaCB3aWxsIHJlbWFpbiBzYW1lIGFzIG1lcmdlRm9ya0lkVHJhbnNpdGlvbiBpcyBwb3N0IG1lcmdlLCB0ZXJtaW5hbCBibG9jazogaHR0cHM6Ly9zZXBvbGlhLmV0aGVyc2Nhbi5pby9ibG9jay8xNDUwNDA4XCIsXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtZXJnZVwiLFxuICAgICAgICAgICAgXCJ0dGRcIjogXCIxNzAwMDAwMDAwMDAwMDAwMFwiLFxuICAgICAgICAgICAgXCJibG9ja1wiOiAxNDUwNDA5LFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4ZmUzMzY2ZTdcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcIm5hbWVcIjogXCJtZXJnZUZvcmtJZFRyYW5zaXRpb25cIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogMTczNTM3MSxcbiAgICAgICAgICAgIFwiZm9ya0hhc2hcIjogXCIweGI5NmNiZDEzXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJuYW1lXCI6IFwic2hhbmdoYWlcIixcbiAgICAgICAgICAgIFwiYmxvY2tcIjogbnVsbCxcbiAgICAgICAgICAgIFwidGltZXN0YW1wXCI6IFwiMTY3NzU1NzA4OFwiLFxuICAgICAgICAgICAgXCJmb3JrSGFzaFwiOiBcIjB4ZjdmOWJjMDhcIlxuICAgICAgICB9XG4gICAgXSxcbiAgICBcImJvb3RzdHJhcE5vZGVzXCI6IFtdLFxuICAgIFwiZG5zTmV0d29ya3NcIjogW1xuICAgICAgICBcImVucnRyZWU6Ly9BS0EzQU02TFBCWUVVRE1WTlUzQlNWUUo1QUQ0NVk3WVBPSEpMRUY2VzI2UU9FNFZUVURQRUBhbGwuc2Vwb2xpYS5ldGhkaXNjby5uZXRcIlxuICAgIF1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXBvbGlhLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/chains/sepolia.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/common.js":
/*!*****************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/common.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Common: () => (/* binding */ Common)\n/* harmony export */ });\n/* harmony import */ var crc_32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crc-32 */ \"(ssr)/./node_modules/crc-32/crc32.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/types.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js\");\n/* harmony import */ var _chains_goerli_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chains/goerli.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/chains/goerli.js\");\n/* harmony import */ var _chains_mainnet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chains/mainnet.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/chains/mainnet.js\");\n/* harmony import */ var _chains_sepolia_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chains/sepolia.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/chains/sepolia.js\");\n/* harmony import */ var _eips_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./eips/index.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/index.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./enums.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/enums.js\");\n/* harmony import */ var _hardforks_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./hardforks/index.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/index.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n\n\n\n\n\nconst { buf: crc32Uint8Array } = crc_32__WEBPACK_IMPORTED_MODULE_0__;\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */ class Common extends web3_utils__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(opts){\n        var _a, _b;\n        super();\n        this._eips = [];\n        this._customChains = (_a = opts.customChains) !== null && _a !== void 0 ? _a : [];\n        this._chainParams = this.setChain(opts.chain);\n        this.DEFAULT_HARDFORK = (_b = this._chainParams.defaultHardfork) !== null && _b !== void 0 ? _b : _enums_js__WEBPACK_IMPORTED_MODULE_8__.Hardfork.Merge;\n        // Assign hardfork changes in the sequence of the applied hardforks\n        this.HARDFORK_CHANGES = this.hardforks().map((hf)=>[\n                hf.name,\n                _hardforks_index_js__WEBPACK_IMPORTED_MODULE_9__.hardforks[hf.name]\n            ]);\n        this._hardfork = this.DEFAULT_HARDFORK;\n        if (opts.hardfork !== undefined) {\n            this.setHardfork(opts.hardfork);\n        }\n        if (opts.eips) {\n            this.setEIPs(opts.eips);\n        }\n    }\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one.\n     *\n     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n     * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n     *\n     * ```javascript\n     * Common.custom({chainId: 123})\n     * ```\n     *\n     * There are also selected supported custom chains which can be initialized by using one of the\n     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n     *\n     * ```javascript\n     * Common.custom(CustomChains.MaticMumbai)\n     * ```\n     *\n     * Note that these supported custom chains only provide some base parameters (usually the chain and\n     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n     * the `web3-utils/tx` library to a Layer-2 chain).\n     *\n     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n     */ static custom(chainParamsOrName, opts = {}) {\n        var _a;\n        const baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : \"mainnet\";\n        const standardChainParams = Object.assign({}, Common._getChainParams(baseChain));\n        standardChainParams.name = \"custom-chain\";\n        if (typeof chainParamsOrName !== \"string\") {\n            return new Common(Object.assign({\n                chain: Object.assign(Object.assign({}, standardChainParams), chainParamsOrName)\n            }, opts));\n        }\n        if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.PolygonMainnet) {\n            return Common.custom({\n                name: _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.PolygonMainnet,\n                chainId: 137,\n                networkId: 137\n            }, opts);\n        }\n        if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.PolygonMumbai) {\n            return Common.custom({\n                name: _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.PolygonMumbai,\n                chainId: 80001,\n                networkId: 80001\n            }, opts);\n        }\n        if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.ArbitrumRinkebyTestnet) {\n            return Common.custom({\n                name: _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.ArbitrumRinkebyTestnet,\n                chainId: 421611,\n                networkId: 421611\n            }, opts);\n        }\n        if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.ArbitrumOne) {\n            return Common.custom({\n                name: _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.ArbitrumOne,\n                chainId: 42161,\n                networkId: 42161\n            }, opts);\n        }\n        if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.xDaiChain) {\n            return Common.custom({\n                name: _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.xDaiChain,\n                chainId: 100,\n                networkId: 100\n            }, opts);\n        }\n        if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.OptimisticKovan) {\n            return Common.custom({\n                name: _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.OptimisticKovan,\n                chainId: 69,\n                networkId: 69\n            }, Object.assign({\n                hardfork: _enums_js__WEBPACK_IMPORTED_MODULE_8__.Hardfork.Berlin\n            }, opts));\n        }\n        if (chainParamsOrName === _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.OptimisticEthereum) {\n            return Common.custom({\n                name: _enums_js__WEBPACK_IMPORTED_MODULE_8__.CustomChain.OptimisticEthereum,\n                chainId: 10,\n                networkId: 10\n            }, Object.assign({\n                hardfork: _enums_js__WEBPACK_IMPORTED_MODULE_8__.Hardfork.Berlin\n            }, opts));\n        }\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        throw new Error(`Custom chain ${chainParamsOrName} not supported`);\n    }\n    /**\n     * Static method to load and set common from a geth genesis json\n     * @param genesisJson json of geth configuration\n     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n     * @returns Common\n     */ static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {\n        var _a;\n        const genesisParams = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);\n        const common = new Common({\n            chain: (_a = genesisParams.name) !== null && _a !== void 0 ? _a : \"custom\",\n            customChains: [\n                genesisParams\n            ],\n            eips,\n            hardfork: hardfork !== null && hardfork !== void 0 ? hardfork : genesisParams.hardfork\n        });\n        if (genesisHash !== undefined) {\n            common.setForkHashes(genesisHash);\n        }\n        return common;\n    }\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId bigint id (`1`) of a standard chain\n     * @returns boolean\n     */ static isSupportedChainId(chainId) {\n        const initializedChains = this._getInitializedChains();\n        return Boolean(initializedChains.names[chainId.toString()]);\n    }\n    static _getChainParams(_chain, customChains) {\n        let chain = _chain;\n        const initializedChains = this._getInitializedChains(customChains);\n        if (typeof chain === \"number\" || typeof chain === \"bigint\") {\n            chain = chain.toString();\n            if (initializedChains.names[chain]) {\n                const name = initializedChains.names[chain];\n                return initializedChains[name];\n            }\n            throw new Error(`Chain with ID ${chain} not supported`);\n        }\n        if (initializedChains[chain] !== undefined) {\n            return initializedChains[chain];\n        }\n        throw new Error(`Chain with name ${chain} not supported`);\n    }\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain representation.\n     *              Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */ setChain(chain) {\n        if (typeof chain === \"number\" || typeof chain === \"bigint\" || typeof chain === \"string\") {\n            this._chainParams = Common._getChainParams(chain, this._customChains);\n        } else if (typeof chain === \"object\") {\n            if (this._customChains.length > 0) {\n                throw new Error(\"Chain must be a string, number, or bigint when initialized with customChains passed in\");\n            }\n            const required = [\n                \"networkId\",\n                \"genesis\",\n                \"hardforks\",\n                \"bootstrapNodes\"\n            ];\n            for (const param of required){\n                if (!(param in chain)) {\n                    throw new Error(`Missing required chain parameter: ${param}`);\n                }\n            }\n            this._chainParams = chain;\n        } else {\n            throw new Error(\"Wrong input format\");\n        }\n        for (const hf of this.hardforks()){\n            if (hf.block === undefined) {\n                throw new Error(`Hardfork cannot have undefined block number`);\n            }\n        }\n        return this._chainParams;\n    }\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n     */ setHardfork(hardfork) {\n        let existing = false;\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            if (hfChanges[0] === hardfork) {\n                if (this._hardfork !== hardfork) {\n                    this._hardfork = hardfork;\n                    this.emit(\"hardforkChanged\", hardfork);\n                }\n                existing = true;\n            }\n        }\n        if (!existing) {\n            throw new Error(`Hardfork with name ${hardfork} not supported`);\n        }\n    }\n    /**\n     * Returns the hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n     * @param timestamp: timestamp in seconds at which block was/is to be minted\n     * @returns The name of the HF\n     */ getHardforkByBlockNumber(_blockNumber, _td, _timestamp) {\n        const blockNumber = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.toType)(_blockNumber, _types_js__WEBPACK_IMPORTED_MODULE_2__.TypeOutput.BigInt);\n        const td = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.toType)(_td, _types_js__WEBPACK_IMPORTED_MODULE_2__.TypeOutput.BigInt);\n        const timestamp = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.toType)(_timestamp, _types_js__WEBPACK_IMPORTED_MODULE_2__.TypeOutput.Number);\n        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n        const hfs = this.hardforks().filter((hf)=>// eslint-disable-next-line no-null/no-null\n            hf.block !== null || // eslint-disable-next-line no-null/no-null\n            hf.ttd !== null && hf.ttd !== undefined || hf.timestamp !== undefined);\n        // eslint-disable-next-line no-null/no-null\n        const mergeIndex = hfs.findIndex((hf)=>hf.ttd !== null && hf.ttd !== undefined);\n        const doubleTTDHF = hfs.slice(mergeIndex + 1)// eslint-disable-next-line no-null/no-null\n        .findIndex((hf)=>hf.ttd !== null && hf.ttd !== undefined);\n        if (doubleTTDHF >= 0) {\n            throw Error(`More than one merge hardforks found with ttd specified`);\n        }\n        // Find the first hardfork that has a block number greater than `blockNumber`\n        // (skips the merge hardfork since it cannot have a block number specified).\n        // If timestamp is not provided, it also skips timestamps hardforks to continue\n        // discovering/checking number hardforks.\n        let hfIndex = hfs.findIndex((hf)=>// eslint-disable-next-line no-null/no-null\n            hf.block !== null && hf.block > blockNumber || timestamp !== undefined && Number(hf.timestamp) > timestamp);\n        if (hfIndex === -1) {\n            // all hardforks apply, set hfIndex to the last one as that's the candidate\n            hfIndex = hfs.length;\n        } else if (hfIndex === 0) {\n            // cannot have a case where a block number is before all applied hardforks\n            // since the chain has to start with a hardfork\n            throw Error(\"Must have at least one hardfork at block 0\");\n        }\n        // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n        if (timestamp === undefined) {\n            const stepBack = hfs.slice(0, hfIndex).reverse()// eslint-disable-next-line no-null/no-null\n            .findIndex((hf)=>hf.block !== null || hf.ttd !== undefined);\n            hfIndex -= stepBack;\n        }\n        // Move hfIndex one back to arrive at candidate hardfork\n        hfIndex -= 1;\n        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n        // hardforks. so it will now be needed to rollback\n        // eslint-disable-next-line no-null/no-null\n        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n            // We're on the merge hardfork.  Let's check the TTD\n            // eslint-disable-next-line no-null/no-null\n            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {\n                // Merge ttd greater than current td so we're on hardfork before merge\n                hfIndex -= 1;\n            }\n        // eslint-disable-next-line no-null/no-null\n        } else if (mergeIndex >= 0 && td !== undefined && td !== null) {\n            if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {\n                throw Error(\"Maximum HF determined by total difficulty is lower than the block number HF\");\n            } else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) {\n                throw Error(\"HF determined by block number is lower than the minimum total difficulty HF\");\n            }\n        }\n        const hfStartIndex = hfIndex;\n        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n        // This won't anyway be the case with Merge hfs\n        for(; hfIndex < hfs.length - 1; hfIndex += 1){\n            // break out if hfIndex + 1 is not scheduled at hfIndex\n            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block || hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {\n                break;\n            }\n        }\n        if (timestamp) {\n            const minTimeStamp = hfs.slice(0, hfStartIndex).reduce((acc, hf)=>{\n                var _a;\n                return Math.max(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : \"0\"), acc);\n            }, 0);\n            if (minTimeStamp > timestamp) {\n                throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);\n            }\n            const maxTimeStamp = hfs.slice(hfIndex + 1).reduce((acc, hf)=>{\n                var _a;\n                return Math.min(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : timestamp), acc);\n            }, timestamp);\n            if (maxTimeStamp < timestamp) {\n                throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n            }\n        }\n        const hardfork = hfs[hfIndex];\n        return hardfork.name;\n    }\n    /**\n     * Sets a new hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td\n     * @param timestamp\n     * @returns The name of the HF set\n     */ setHardforkByBlockNumber(blockNumber, td, timestamp) {\n        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n        this.setHardfork(hardfork);\n        return hardfork;\n    }\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params or null if hardfork not on chain\n     */ // eslint-disable-next-line @typescript-eslint/ban-types\n    _getHardfork(hardfork) {\n        const hfs = this.hardforks();\n        for (const hf of hfs){\n            if (hf.name === hardfork) return hf;\n        }\n        // eslint-disable-next-line no-null/no-null\n        return null;\n    }\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */ setEIPs(eips = []) {\n        for (const eip of eips){\n            if (!(eip in _eips_index_js__WEBPACK_IMPORTED_MODULE_7__.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n            const minHF = this.gteHardfork(_eips_index_js__WEBPACK_IMPORTED_MODULE_7__.EIPs[eip].minimumHardfork);\n            if (!minHF) {\n                throw new Error(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (_eips_index_js__WEBPACK_IMPORTED_MODULE_7__.EIPs[eip].requiredEIPs !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                for (const elem of _eips_index_js__WEBPACK_IMPORTED_MODULE_7__.EIPs[eip].requiredEIPs){\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                    if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n                        throw new Error(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                        `${eip} requires EIP ${elem}, but is not included in the EIP list`);\n                    }\n                }\n            }\n        }\n        this._eips = eips;\n    }\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precedence.\n     * Otherwise the parameter if taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `BigInt(0)` if not found\n     */ param(topic, name) {\n        // TODO: consider the case that different active EIPs\n        // can change the same parameter\n        let value;\n        for (const eip of this._eips){\n            value = this.paramByEIP(topic, name, eip);\n            if (value !== undefined) return value;\n        }\n        return this.paramByHardfork(topic, name, this._hardfork);\n    }\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `BigInt(0)` if not found\n     */ paramByHardfork(topic, name, hardfork) {\n        // eslint-disable-next-line no-null/no-null\n        let value = null;\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            // EIP-referencing HF file (e.g. berlin.json)\n            if (\"eips\" in hfChanges[1]) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n                const hfEIPs = hfChanges[1].eips;\n                for (const eip of hfEIPs){\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                    const valueEIP = this.paramByEIP(topic, name, eip);\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    value = typeof valueEIP === \"bigint\" ? valueEIP : value;\n                }\n            // Parameter-inlining HF file (e.g. istanbul.json)\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                if (hfChanges[1][topic] === undefined) {\n                    throw new Error(`Topic ${topic} not defined`);\n                }\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                if (hfChanges[1][topic][name] !== undefined) {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n                    value = hfChanges[1][topic][name].v;\n                }\n            }\n            if (hfChanges[0] === hardfork) break;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return BigInt(value !== null && value !== void 0 ? value : 0);\n    }\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `undefined` if not found\n     */ // eslint-disable-next-line class-methods-use-this\n    paramByEIP(topic, name, eip) {\n        if (!(eip in _eips_index_js__WEBPACK_IMPORTED_MODULE_7__.EIPs)) {\n            throw new Error(`${eip} not supported`);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const eipParams = _eips_index_js__WEBPACK_IMPORTED_MODULE_7__.EIPs[eip];\n        if (!(topic in eipParams)) {\n            throw new Error(`Topic ${topic} not defined`);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (eipParams[topic][name] === undefined) {\n            return undefined;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        const value = eipParams[topic][name].v;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return BigInt(value);\n    }\n    /**\n     * Returns a parameter for the hardfork active on block number or\n     * optional provided total difficulty (Merge HF)\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     * @param td Total difficulty\n     *    * @returns The value requested or `BigInt(0)` if not found\n     */ paramByBlock(topic, name, blockNumber, td, timestamp) {\n        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n        return this.paramByHardfork(topic, name, hardfork);\n    }\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */ isActivatedEIP(eip) {\n        if (this.eips().includes(eip)) {\n            return true;\n        }\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const hf = hfChanges[1];\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n            if (this.gteHardfork(hf.name) && \"eips\" in hf) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                if (hf.eips.includes(eip)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */ hardforkIsActiveOnBlock(// eslint-disable-next-line @typescript-eslint/ban-types\n    _hardfork, _blockNumber) {\n        const blockNumber = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.toType)(_blockNumber, _types_js__WEBPACK_IMPORTED_MODULE_2__.TypeOutput.BigInt);\n        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n        const hfBlock = this.hardforkBlock(hardfork);\n        if (typeof hfBlock === \"bigint\" && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */ activeOnBlock(blockNumber) {\n        // eslint-disable-next-line no-null/no-null\n        return this.hardforkIsActiveOnBlock(null, blockNumber);\n    }\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */ hardforkGteHardfork(// eslint-disable-next-line @typescript-eslint/ban-types\n    _hardfork1, hardfork2) {\n        const hardfork1 = _hardfork1 !== null && _hardfork1 !== void 0 ? _hardfork1 : this._hardfork;\n        const hardforks = this.hardforks();\n        let posHf1 = -1;\n        let posHf2 = -1;\n        let index = 0;\n        for (const hf of hardforks){\n            if (hf.name === hardfork1) posHf1 = index;\n            if (hf.name === hardfork2) posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2 && posHf2 !== -1;\n    }\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @returns True if hardfork set is greater than hardfork provided\n     */ gteHardfork(hardfork) {\n        // eslint-disable-next-line no-null/no-null\n        return this.hardforkGteHardfork(null, hardfork);\n    }\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     */ // eslint-disable-next-line @typescript-eslint/ban-types\n    hardforkBlock(_hardfork) {\n        var _a;\n        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n        const block = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.block;\n        // eslint-disable-next-line no-null/no-null\n        if (block === undefined || block === null) {\n            // eslint-disable-next-line no-null/no-null\n            return null;\n        }\n        return BigInt(block);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    hardforkTimestamp(_hardfork) {\n        var _a;\n        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n        const timestamp = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.timestamp;\n        // eslint-disable-next-line no-null/no-null\n        if (timestamp === undefined || timestamp === null) {\n            // eslint-disable-next-line no-null/no-null\n            return null;\n        }\n        return BigInt(timestamp);\n    }\n    /**\n     * Returns the hardfork change block for eip\n     * @param eip EIP number\n     * @returns Block number or null if unscheduled\n     */ // eslint-disable-next-line @typescript-eslint/ban-types\n    eipBlock(eip) {\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const hf = hfChanges[1];\n            if (\"eips\" in hf) {\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n                if (hf.eips.includes(eip)) {\n                    return this.hardforkBlock(typeof hfChanges[0] === \"number\" ? String(hfChanges[0]) : hfChanges[0]);\n                }\n            }\n        }\n        // eslint-disable-next-line no-null/no-null\n        return null;\n    }\n    /**\n     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Total difficulty or null if no set\n     */ // eslint-disable-next-line @typescript-eslint/ban-types\n    hardforkTTD(_hardfork) {\n        var _a;\n        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n        const ttd = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.ttd;\n        // eslint-disable-next-line no-null/no-null\n        if (ttd === undefined || ttd === null) {\n            // eslint-disable-next-line no-null/no-null\n            return null;\n        }\n        return BigInt(ttd);\n    }\n    /**\n     * True if block number provided is the hardfork (given or set) change block\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     * @deprecated\n     */ isHardforkBlock(_blockNumber, _hardfork) {\n        const blockNumber = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.toType)(_blockNumber, _types_js__WEBPACK_IMPORTED_MODULE_2__.TypeOutput.BigInt);\n        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n        const block = this.hardforkBlock(hardfork);\n        return typeof block === \"bigint\" && block !== BigInt(0) ? block === blockNumber : false;\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block timestamp, number or null if not available\n     */ // eslint-disable-next-line @typescript-eslint/ban-types\n    nextHardforkBlockOrTimestamp(_hardfork) {\n        var _a, _b;\n        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n        const hfs = this.hardforks();\n        let hfIndex = hfs.findIndex((hf)=>hf.name === hardfork);\n        // If the current hardfork is merge, go one behind as merge hf is not part of these\n        // calcs even if the merge hf block is set\n        if (hardfork === _enums_js__WEBPACK_IMPORTED_MODULE_8__.Hardfork.Merge) {\n            hfIndex -= 1;\n        }\n        // Hardfork not found\n        if (hfIndex < 0) {\n            // eslint-disable-next-line no-null/no-null\n            return null;\n        }\n        let currHfTimeOrBlock = (_a = hfs[hfIndex].timestamp) !== null && _a !== void 0 ? _a : hfs[hfIndex].block;\n        currHfTimeOrBlock = // eslint-disable-next-line no-null/no-null\n        currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined ? Number(currHfTimeOrBlock) : null;\n        const nextHf = hfs.slice(hfIndex + 1).find((hf)=>{\n            var _a;\n            let hfTimeOrBlock = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;\n            hfTimeOrBlock = // eslint-disable-next-line no-null/no-null\n            hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;\n            return hf.name !== _enums_js__WEBPACK_IMPORTED_MODULE_8__.Hardfork.Merge && // eslint-disable-next-line no-null/no-null\n            hfTimeOrBlock !== null && hfTimeOrBlock !== undefined && hfTimeOrBlock !== currHfTimeOrBlock;\n        });\n        // If no next hf found with valid block or timestamp return null\n        if (nextHf === undefined) {\n            // eslint-disable-next-line no-null/no-null\n            return null;\n        }\n        const nextHfBlock = (_b = nextHf.timestamp) !== null && _b !== void 0 ? _b : nextHf.block;\n        // eslint-disable-next-line no-null/no-null\n        if (nextHfBlock === null || nextHfBlock === undefined) {\n            // eslint-disable-next-line no-null/no-null\n            return null;\n        }\n        return BigInt(nextHfBlock);\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if not available\n     * @deprecated\n     */ // eslint-disable-next-line @typescript-eslint/ban-types\n    nextHardforkBlock(_hardfork) {\n        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n        let hfBlock = this.hardforkBlock(hardfork);\n        // If this is a merge hardfork with block not set, then we fallback to previous hardfork\n        // to find the nextHardforkBlock\n        // eslint-disable-next-line no-null/no-null\n        if (hfBlock === null && hardfork === _enums_js__WEBPACK_IMPORTED_MODULE_8__.Hardfork.Merge) {\n            const hfs = this.hardforks();\n            // eslint-disable-next-line no-null/no-null\n            const mergeIndex = hfs.findIndex((hf)=>hf.ttd !== null && hf.ttd !== undefined);\n            if (mergeIndex < 0) {\n                throw Error(`Merge hardfork should have been found`);\n            }\n            hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);\n        }\n        // eslint-disable-next-line no-null/no-null\n        if (hfBlock === null) {\n            // eslint-disable-next-line no-null/no-null\n            return null;\n        }\n        // Next fork block number or null if none available\n        // Logic: if accumulator is still null and on the first occurrence of\n        // a block greater than the current hfBlock set the accumulator,\n        // pass on the accumulator as the final result from this time on\n        // eslint-disable-next-line no-null/no-null, @typescript-eslint/ban-types\n        const nextHfBlock = this.hardforks().reduce((acc, hf)=>{\n            // We need to ignore the merge block in our next hardfork calc\n            const block = BigInt(// eslint-disable-next-line no-null/no-null\n            hf.block === null || hf.ttd !== undefined && hf.ttd !== null ? 0 : hf.block);\n            // TypeScript can't seem to follow that the hfBlock is not null at this point\n            // eslint-disable-next-line no-null/no-null\n            return block > hfBlock && acc === null ? block : acc;\n        // eslint-disable-next-line no-null/no-null\n        }, null);\n        return nextHfBlock;\n    }\n    /**\n     * True if block number provided is the hardfork change block following the hardfork given or set\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     * @deprecated\n     */ isNextHardforkBlock(_blockNumber, _hardfork) {\n        const blockNumber = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.toType)(_blockNumber, _types_js__WEBPACK_IMPORTED_MODULE_2__.TypeOutput.BigInt);\n        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n        // eslint-disable-next-line deprecation/deprecation\n        const nextHardforkBlock = this.nextHardforkBlock(hardfork);\n        // eslint-disable-next-line no-null/no-null\n        return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;\n    }\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @param genesisHash Genesis block hash of the chain\n     * @returns Fork hash as hex string\n     */ _calcForkHash(hardfork, genesisHash) {\n        let hfUint8Array = new Uint8Array();\n        let prevBlockOrTime = 0;\n        for (const hf of this.hardforks()){\n            const { block, timestamp, name } = hf;\n            // Timestamp to be used for timestamp based hfs even if we may bundle\n            // block number with them retrospectively\n            let blockOrTime = timestamp !== null && timestamp !== void 0 ? timestamp : block;\n            // eslint-disable-next-line no-null/no-null\n            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n            // Skip for chainstart (0), not applied HFs (null) and\n            // when already applied on same blockOrTime HFs\n            // and on the merge since forkhash doesn't change on merge hf\n            if (typeof blockOrTime === \"number\" && blockOrTime !== 0 && blockOrTime !== prevBlockOrTime && name !== _enums_js__WEBPACK_IMPORTED_MODULE_8__.Hardfork.Merge) {\n                const hfBlockUint8Array = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(blockOrTime.toString(16).padStart(16, \"0\"));\n                hfUint8Array = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayConcat)(hfUint8Array, hfBlockUint8Array);\n                prevBlockOrTime = blockOrTime;\n            }\n            if (hf.name === hardfork) break;\n        }\n        const inputUint8Array = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayConcat)(genesisHash, hfUint8Array);\n        // CRC32 delivers result as signed (negative) 32-bit integer,\n        // convert to hex string\n        // eslint-disable-next-line no-bitwise\n        const forkhash = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.intToUint8Array)(crc32Uint8Array(inputUint8Array) >>> 0));\n        return forkhash;\n    }\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n     */ forkHash(_hardfork, genesisHash) {\n        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n        const data = this._getHardfork(hardfork);\n        if (// eslint-disable-next-line no-null/no-null\n        data === null || // eslint-disable-next-line no-null/no-null\n        (data === null || data === void 0 ? void 0 : data.block) === null && (data === null || data === void 0 ? void 0 : data.timestamp) === undefined && (data === null || data === void 0 ? void 0 : data.ttd) === undefined) {\n            const msg = \"No fork hash calculation possible for future hardfork\";\n            throw new Error(msg);\n        }\n        // eslint-disable-next-line no-null/no-null\n        if ((data === null || data === void 0 ? void 0 : data.forkHash) !== null && (data === null || data === void 0 ? void 0 : data.forkHash) !== undefined) {\n            return data.forkHash;\n        }\n        if (!genesisHash) throw new Error(\"genesisHash required for forkHash calculation\");\n        return this._calcForkHash(hardfork, genesisHash);\n    }\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */ // eslint-disable-next-line @typescript-eslint/ban-types\n    hardforkForForkHash(forkHash) {\n        const resArray = this.hardforks().filter((hf)=>hf.forkHash === forkHash);\n        // eslint-disable-next-line no-null/no-null\n        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    }\n    /**\n     * Sets any missing forkHashes on the passed-in {@link Common} instance\n     * @param common The {@link Common} to set the forkHashes for\n     * @param genesisHash The genesis block hash\n     */ setForkHashes(genesisHash) {\n        var _a;\n        for (const hf of this.hardforks()){\n            const blockOrTime = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;\n            if (// eslint-disable-next-line no-null/no-null\n            (hf.forkHash === null || hf.forkHash === undefined) && // eslint-disable-next-line no-null/no-null\n            (blockOrTime !== null && blockOrTime !== undefined || typeof hf.ttd !== \"undefined\")) {\n                hf.forkHash = this.forkHash(hf.name, genesisHash);\n            }\n        }\n    }\n    /**\n     * Returns the Genesis parameters of the current chain\n     * @returns Genesis dictionary\n     */ genesis() {\n        return this._chainParams.genesis;\n    }\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */ hardforks() {\n        return this._chainParams.hardforks;\n    }\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */ bootstrapNodes() {\n        return this._chainParams.bootstrapNodes;\n    }\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */ dnsNetworks() {\n        return this._chainParams.dnsNetworks;\n    }\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */ hardfork() {\n        return this._hardfork;\n    }\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */ chainId() {\n        return BigInt(this._chainParams.chainId);\n    }\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */ chainName() {\n        return this._chainParams.name;\n    }\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */ networkId() {\n        return BigInt(this._chainParams.networkId);\n    }\n    /**\n     * Returns the active EIPs\n     * @returns List of EIPs\n     */ eips() {\n        return this._eips;\n    }\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"|\"pos\"\n     *\n     * Note: This value can update along a Hardfork.\n     */ consensusType() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            if (\"consensus\" in hfChanges[1]) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n                value = hfChanges[1].consensus.type;\n            }\n            if (hfChanges[0] === hardfork) break;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return value !== null && value !== void 0 ? value : this._chainParams.consensus.type;\n    }\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type,\n     * \"clique\" for \"poa\" consensus type or\n     * \"casper\" for \"pos\" consensus type.\n     *\n     * Note: This value can update along a Hardfork.\n     */ consensusAlgorithm() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            if (\"consensus\" in hfChanges[1]) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n                value = hfChanges[1].consensus.algorithm;\n            }\n            if (hfChanges[0] === hardfork) break;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return value !== null && value !== void 0 ? value : this._chainParams.consensus.algorithm;\n    }\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: empty object\n     * clique: period, epoch\n     * casper: empty object\n     *\n     * Note: This value can update along a Hardfork.\n     */ consensusConfig() {\n        var _a;\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES){\n            if (\"consensus\" in hfChanges[1]) {\n                // The config parameter is named after the respective consensus algorithm\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n                value = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];\n            }\n            if (hfChanges[0] === hardfork) break;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return (_a = value !== null && value !== void 0 ? value : this._chainParams.consensus[this.consensusAlgorithm()]) !== null && _a !== void 0 ? _a : {};\n    }\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */ copy() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment\n        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n        copy.removeAllListeners();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return copy;\n    }\n    static _getInitializedChains(customChains) {\n        const names = {};\n        for (const [name, id] of Object.entries(_enums_js__WEBPACK_IMPORTED_MODULE_8__.Chain)){\n            names[id] = name.toLowerCase();\n        }\n        const chains = {\n            mainnet: _chains_mainnet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n            goerli: _chains_goerli_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n            sepolia: _chains_sepolia_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n        };\n        if (customChains) {\n            for (const chain of customChains){\n                const { name } = chain;\n                names[chain.chainId.toString()] = name;\n                chains[name] = chain;\n            }\n        }\n        chains.names = names;\n        return chains;\n    }\n} //# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/1153.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/1153.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-1153\",\n    \"number\": 1153,\n    \"comment\": \"Transient Storage\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1153\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"chainstart\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"tstore\": {\n            \"v\": 100,\n            \"d\": \"Base fee of the TSTORE opcode\"\n        },\n        \"tload\": {\n            \"v\": 100,\n            \"d\": \"Base fee of the TLOAD opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=1153.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8xMTUzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdCQUFnQixFQUFFO0lBQ2xCLGFBQWEsQ0FBQztJQUNkLGFBQWE7UUFDVCxVQUFVO1lBQ04sS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLFNBQVM7WUFDTCxLQUFLO1lBQ0wsS0FBSztRQUNUO0lBQ0o7SUFDQSxNQUFNLENBQUM7SUFDUCxPQUFPLENBQUM7QUFDWixDQUFDLEVBQUMsQ0FDRixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8xMTUzLmpzPzc3MGUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcIkVJUC0xMTUzXCIsXG4gICAgXCJudW1iZXJcIjogMTE1MyxcbiAgICBcImNvbW1lbnRcIjogXCJUcmFuc2llbnQgU3RvcmFnZVwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xMTUzXCIsXG4gICAgXCJzdGF0dXNcIjogXCJSZXZpZXdcIixcbiAgICBcIm1pbmltdW1IYXJkZm9ya1wiOiBcImNoYWluc3RhcnRcIixcbiAgICBcInJlcXVpcmVkRUlQc1wiOiBbXSxcbiAgICBcImdhc0NvbmZpZ1wiOiB7fSxcbiAgICBcImdhc1ByaWNlc1wiOiB7XG4gICAgICAgIFwidHN0b3JlXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAxMDAsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgVFNUT1JFIG9wY29kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGxvYWRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDEwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBUTE9BRCBvcGNvZGVcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInZtXCI6IHt9LFxuICAgIFwicG93XCI6IHt9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9MTE1My5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/1153.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/1559.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/1559.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-1559\",\n    \"number\": 1559,\n    \"comment\": \"Fee market change for ETH 1.0 chain\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1559\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"berlin\",\n    \"requiredEIPs\": [\n        2930\n    ],\n    \"gasConfig\": {\n        \"baseFeeMaxChangeDenominator\": {\n            \"v\": 8,\n            \"d\": \"Maximum base fee change denominator\"\n        },\n        \"elasticityMultiplier\": {\n            \"v\": 2,\n            \"d\": \"Maximum block gas target elasticity\"\n        },\n        \"initialBaseFee\": {\n            \"v\": 1000000000,\n            \"d\": \"Initial base fee on first EIP1559 block\"\n        }\n    },\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=1559.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8xNTU5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdCQUFnQjtRQUFDO0tBQUs7SUFDdEIsYUFBYTtRQUNULCtCQUErQjtZQUMzQixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0Esd0JBQXdCO1lBQ3BCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxrQkFBa0I7WUFDZCxLQUFLO1lBQ0wsS0FBSztRQUNUO0lBQ0o7SUFDQSxhQUFhLENBQUM7SUFDZCxNQUFNLENBQUM7SUFDUCxPQUFPLENBQUM7QUFDWixDQUFDLEVBQUMsQ0FDRixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8xNTU5LmpzPzNlYTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcIkVJUC0xNTU5XCIsXG4gICAgXCJudW1iZXJcIjogMTU1OSxcbiAgICBcImNvbW1lbnRcIjogXCJGZWUgbWFya2V0IGNoYW5nZSBmb3IgRVRIIDEuMCBjaGFpblwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xNTU5XCIsXG4gICAgXCJzdGF0dXNcIjogXCJGaW5hbFwiLFxuICAgIFwibWluaW11bUhhcmRmb3JrXCI6IFwiYmVybGluXCIsXG4gICAgXCJyZXF1aXJlZEVJUHNcIjogWzI5MzBdLFxuICAgIFwiZ2FzQ29uZmlnXCI6IHtcbiAgICAgICAgXCJiYXNlRmVlTWF4Q2hhbmdlRGVub21pbmF0b3JcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDgsXG4gICAgICAgICAgICBcImRcIjogXCJNYXhpbXVtIGJhc2UgZmVlIGNoYW5nZSBkZW5vbWluYXRvclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZWxhc3RpY2l0eU11bHRpcGxpZXJcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDIsXG4gICAgICAgICAgICBcImRcIjogXCJNYXhpbXVtIGJsb2NrIGdhcyB0YXJnZXQgZWxhc3RpY2l0eVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW5pdGlhbEJhc2VGZWVcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDEwMDAwMDAwMDAsXG4gICAgICAgICAgICBcImRcIjogXCJJbml0aWFsIGJhc2UgZmVlIG9uIGZpcnN0IEVJUDE1NTkgYmxvY2tcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcImdhc1ByaWNlc1wiOiB7fSxcbiAgICBcInZtXCI6IHt9LFxuICAgIFwicG93XCI6IHt9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9MTU1OS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/1559.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2315.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/2315.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-2315\",\n    \"number\": 2315,\n    \"comment\": \"Simple subroutines for the EVM\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2315\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"istanbul\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"beginsub\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the BEGINSUB opcode\"\n        },\n        \"returnsub\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the RETURNSUB opcode\"\n        },\n        \"jumpsub\": {\n            \"v\": 10,\n            \"d\": \"Base fee of the JUMPSUB opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=2315.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8yMzE1LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGFBQWEsQ0FBQztJQUNkLGFBQWE7UUFDVCxZQUFZO1lBQ1IsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLGFBQWE7WUFDVCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsV0FBVztZQUNQLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7SUFDSjtJQUNBLE1BQU0sQ0FBQztJQUNQLE9BQU8sQ0FBQztBQUNaLENBQUMsRUFBQyxDQUNGLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9laXBzLzIzMTUuanM/ZjVjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwiRUlQLTIzMTVcIixcbiAgICBcIm51bWJlclwiOiAyMzE1LFxuICAgIFwiY29tbWVudFwiOiBcIlNpbXBsZSBzdWJyb3V0aW5lcyBmb3IgdGhlIEVWTVwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0yMzE1XCIsXG4gICAgXCJzdGF0dXNcIjogXCJEcmFmdFwiLFxuICAgIFwibWluaW11bUhhcmRmb3JrXCI6IFwiaXN0YW5idWxcIixcbiAgICBcImdhc0NvbmZpZ1wiOiB7fSxcbiAgICBcImdhc1ByaWNlc1wiOiB7XG4gICAgICAgIFwiYmVnaW5zdWJcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDIsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgQkVHSU5TVUIgb3Bjb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXR1cm5zdWJcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDUsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgUkVUVVJOU1VCIG9wY29kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwianVtcHN1YlwiOiB7XG4gICAgICAgICAgICBcInZcIjogMTAsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgSlVNUFNVQiBvcGNvZGVcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInZtXCI6IHt9LFxuICAgIFwicG93XCI6IHt9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9MjMxNS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2315.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2537.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/2537.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-2537\",\n    \"number\": 2537,\n    \"comment\": \"BLS12-381 precompiles\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2537\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"chainstart\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"Bls12381G1AddGas\": {\n            \"v\": 600,\n            \"d\": \"Gas cost of a single BLS12-381 G1 addition precompile-call\"\n        },\n        \"Bls12381G1MulGas\": {\n            \"v\": 12000,\n            \"d\": \"Gas cost of a single BLS12-381 G1 multiplication precompile-call\"\n        },\n        \"Bls12381G2AddGas\": {\n            \"v\": 4500,\n            \"d\": \"Gas cost of a single BLS12-381 G2 addition precompile-call\"\n        },\n        \"Bls12381G2MulGas\": {\n            \"v\": 55000,\n            \"d\": \"Gas cost of a single BLS12-381 G2 multiplication precompile-call\"\n        },\n        \"Bls12381PairingBaseGas\": {\n            \"v\": 115000,\n            \"d\": \"Base gas cost of BLS12-381 pairing check\"\n        },\n        \"Bls12381PairingPerPairGas\": {\n            \"v\": 23000,\n            \"d\": \"Per-pair gas cost of BLS12-381 pairing check\"\n        },\n        \"Bls12381MapG1Gas\": {\n            \"v\": 5500,\n            \"d\": \"Gas cost of BLS12-381 map field element to G1\"\n        },\n        \"Bls12381MapG2Gas\": {\n            \"v\": 110000,\n            \"d\": \"Gas cost of BLS12-381 map field element to G2\"\n        },\n        \"Bls12381MultiExpGasDiscount\": {\n            \"v\": [\n                [\n                    1,\n                    1200\n                ],\n                [\n                    2,\n                    888\n                ],\n                [\n                    3,\n                    764\n                ],\n                [\n                    4,\n                    641\n                ],\n                [\n                    5,\n                    594\n                ],\n                [\n                    6,\n                    547\n                ],\n                [\n                    7,\n                    500\n                ],\n                [\n                    8,\n                    453\n                ],\n                [\n                    9,\n                    438\n                ],\n                [\n                    10,\n                    423\n                ],\n                [\n                    11,\n                    408\n                ],\n                [\n                    12,\n                    394\n                ],\n                [\n                    13,\n                    379\n                ],\n                [\n                    14,\n                    364\n                ],\n                [\n                    15,\n                    349\n                ],\n                [\n                    16,\n                    334\n                ],\n                [\n                    17,\n                    330\n                ],\n                [\n                    18,\n                    326\n                ],\n                [\n                    19,\n                    322\n                ],\n                [\n                    20,\n                    318\n                ],\n                [\n                    21,\n                    314\n                ],\n                [\n                    22,\n                    310\n                ],\n                [\n                    23,\n                    306\n                ],\n                [\n                    24,\n                    302\n                ],\n                [\n                    25,\n                    298\n                ],\n                [\n                    26,\n                    294\n                ],\n                [\n                    27,\n                    289\n                ],\n                [\n                    28,\n                    285\n                ],\n                [\n                    29,\n                    281\n                ],\n                [\n                    30,\n                    277\n                ],\n                [\n                    31,\n                    273\n                ],\n                [\n                    32,\n                    269\n                ],\n                [\n                    33,\n                    268\n                ],\n                [\n                    34,\n                    266\n                ],\n                [\n                    35,\n                    265\n                ],\n                [\n                    36,\n                    263\n                ],\n                [\n                    37,\n                    262\n                ],\n                [\n                    38,\n                    260\n                ],\n                [\n                    39,\n                    259\n                ],\n                [\n                    40,\n                    257\n                ],\n                [\n                    41,\n                    256\n                ],\n                [\n                    42,\n                    254\n                ],\n                [\n                    43,\n                    253\n                ],\n                [\n                    44,\n                    251\n                ],\n                [\n                    45,\n                    250\n                ],\n                [\n                    46,\n                    248\n                ],\n                [\n                    47,\n                    247\n                ],\n                [\n                    48,\n                    245\n                ],\n                [\n                    49,\n                    244\n                ],\n                [\n                    50,\n                    242\n                ],\n                [\n                    51,\n                    241\n                ],\n                [\n                    52,\n                    239\n                ],\n                [\n                    53,\n                    238\n                ],\n                [\n                    54,\n                    236\n                ],\n                [\n                    55,\n                    235\n                ],\n                [\n                    56,\n                    233\n                ],\n                [\n                    57,\n                    232\n                ],\n                [\n                    58,\n                    231\n                ],\n                [\n                    59,\n                    229\n                ],\n                [\n                    60,\n                    228\n                ],\n                [\n                    61,\n                    226\n                ],\n                [\n                    62,\n                    225\n                ],\n                [\n                    63,\n                    223\n                ],\n                [\n                    64,\n                    222\n                ],\n                [\n                    65,\n                    221\n                ],\n                [\n                    66,\n                    220\n                ],\n                [\n                    67,\n                    219\n                ],\n                [\n                    68,\n                    219\n                ],\n                [\n                    69,\n                    218\n                ],\n                [\n                    70,\n                    217\n                ],\n                [\n                    71,\n                    216\n                ],\n                [\n                    72,\n                    216\n                ],\n                [\n                    73,\n                    215\n                ],\n                [\n                    74,\n                    214\n                ],\n                [\n                    75,\n                    213\n                ],\n                [\n                    76,\n                    213\n                ],\n                [\n                    77,\n                    212\n                ],\n                [\n                    78,\n                    211\n                ],\n                [\n                    79,\n                    211\n                ],\n                [\n                    80,\n                    210\n                ],\n                [\n                    81,\n                    209\n                ],\n                [\n                    82,\n                    208\n                ],\n                [\n                    83,\n                    208\n                ],\n                [\n                    84,\n                    207\n                ],\n                [\n                    85,\n                    206\n                ],\n                [\n                    86,\n                    205\n                ],\n                [\n                    87,\n                    205\n                ],\n                [\n                    88,\n                    204\n                ],\n                [\n                    89,\n                    203\n                ],\n                [\n                    90,\n                    202\n                ],\n                [\n                    91,\n                    202\n                ],\n                [\n                    92,\n                    201\n                ],\n                [\n                    93,\n                    200\n                ],\n                [\n                    94,\n                    199\n                ],\n                [\n                    95,\n                    199\n                ],\n                [\n                    96,\n                    198\n                ],\n                [\n                    97,\n                    197\n                ],\n                [\n                    98,\n                    196\n                ],\n                [\n                    99,\n                    196\n                ],\n                [\n                    100,\n                    195\n                ],\n                [\n                    101,\n                    194\n                ],\n                [\n                    102,\n                    193\n                ],\n                [\n                    103,\n                    193\n                ],\n                [\n                    104,\n                    192\n                ],\n                [\n                    105,\n                    191\n                ],\n                [\n                    106,\n                    191\n                ],\n                [\n                    107,\n                    190\n                ],\n                [\n                    108,\n                    189\n                ],\n                [\n                    109,\n                    188\n                ],\n                [\n                    110,\n                    188\n                ],\n                [\n                    111,\n                    187\n                ],\n                [\n                    112,\n                    186\n                ],\n                [\n                    113,\n                    185\n                ],\n                [\n                    114,\n                    185\n                ],\n                [\n                    115,\n                    184\n                ],\n                [\n                    116,\n                    183\n                ],\n                [\n                    117,\n                    182\n                ],\n                [\n                    118,\n                    182\n                ],\n                [\n                    119,\n                    181\n                ],\n                [\n                    120,\n                    180\n                ],\n                [\n                    121,\n                    179\n                ],\n                [\n                    122,\n                    179\n                ],\n                [\n                    123,\n                    178\n                ],\n                [\n                    124,\n                    177\n                ],\n                [\n                    125,\n                    176\n                ],\n                [\n                    126,\n                    176\n                ],\n                [\n                    127,\n                    175\n                ],\n                [\n                    128,\n                    174\n                ]\n            ],\n            \"d\": \"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=2537.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2537.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2565.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/2565.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-2565\",\n    \"number\": 2565,\n    \"comment\": \"ModExp gas cost\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2565\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"byzantium\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"modexpGquaddivisor\": {\n            \"v\": 3,\n            \"d\": \"Gquaddivisor from modexp precompile for gas calculation\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=2565.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8yNTY1LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGFBQWEsQ0FBQztJQUNkLGFBQWE7UUFDVCxzQkFBc0I7WUFDbEIsS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0lBQ0EsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VpcHMvMjU2NS5qcz8xNmRmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJFSVAtMjU2NVwiLFxuICAgIFwibnVtYmVyXCI6IDI1NjUsXG4gICAgXCJjb21tZW50XCI6IFwiTW9kRXhwIGdhcyBjb3N0XCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTI1NjVcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJtaW5pbXVtSGFyZGZvcmtcIjogXCJieXphbnRpdW1cIixcbiAgICBcImdhc0NvbmZpZ1wiOiB7fSxcbiAgICBcImdhc1ByaWNlc1wiOiB7XG4gICAgICAgIFwibW9kZXhwR3F1YWRkaXZpc29yXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAzLFxuICAgICAgICAgICAgXCJkXCI6IFwiR3F1YWRkaXZpc29yIGZyb20gbW9kZXhwIHByZWNvbXBpbGUgZm9yIGdhcyBjYWxjdWxhdGlvblwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwidm1cIjoge30sXG4gICAgXCJwb3dcIjoge31cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD0yNTY1LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2565.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2718.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/2718.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-2718\",\n    \"comment\": \"Typed Transaction Envelope\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2718\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"chainstart\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=2718.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8yNzE4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixtQkFBbUI7SUFDbkIsYUFBYSxDQUFDO0lBQ2QsYUFBYSxDQUFDO0lBQ2QsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VpcHMvMjcxOC5qcz83YTJjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJFSVAtMjcxOFwiLFxuICAgIFwiY29tbWVudFwiOiBcIlR5cGVkIFRyYW5zYWN0aW9uIEVudmVsb3BlXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTI3MThcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJtaW5pbXVtSGFyZGZvcmtcIjogXCJjaGFpbnN0YXJ0XCIsXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge30sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPTI3MTguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2718.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2929.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/2929.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-2929\",\n    \"comment\": \"Gas cost increases for state access opcodes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2929\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"chainstart\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"coldsload\": {\n            \"v\": 2100,\n            \"d\": \"Gas cost of the first read of storage from a given location (per transaction)\"\n        },\n        \"coldaccountaccess\": {\n            \"v\": 2600,\n            \"d\": \"Gas cost of the first read of a given address (per transaction)\"\n        },\n        \"warmstorageread\": {\n            \"v\": 100,\n            \"d\": \"Gas cost of reading storage locations which have already loaded 'cold'\"\n        },\n        \"sstoreCleanGasEIP2200\": {\n            \"v\": 2900,\n            \"d\": \"Once per SSTORE operation from clean non-zero to something else\"\n        },\n        \"sstoreNoopGasEIP2200\": {\n            \"v\": 100,\n            \"d\": \"Once per SSTORE operation if the value doesn't change\"\n        },\n        \"sstoreDirtyGasEIP2200\": {\n            \"v\": 100,\n            \"d\": \"Once per SSTORE operation if a dirty value is changed\"\n        },\n        \"sstoreInitRefundEIP2200\": {\n            \"v\": 19900,\n            \"d\": \"Once per SSTORE operation for resetting to the original zero value\"\n        },\n        \"sstoreCleanRefundEIP2200\": {\n            \"v\": 4900,\n            \"d\": \"Once per SSTORE operation for resetting to the original non-zero value\"\n        },\n        \"call\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the CALL opcode\"\n        },\n        \"callcode\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the CALLCODE opcode\"\n        },\n        \"delegatecall\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the DELEGATECALL opcode\"\n        },\n        \"staticcall\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the STATICCALL opcode\"\n        },\n        \"balance\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"extcodesize\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the EXTCODESIZE opcode\"\n        },\n        \"extcodecopy\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the EXTCODECOPY opcode\"\n        },\n        \"extcodehash\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the EXTCODEHASH opcode\"\n        },\n        \"sload\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SLOAD opcode\"\n        },\n        \"sstore\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SSTORE opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=2929.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8yOTI5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixtQkFBbUI7SUFDbkIsYUFBYSxDQUFDO0lBQ2QsYUFBYTtRQUNULGFBQWE7WUFDVCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EscUJBQXFCO1lBQ2pCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxtQkFBbUI7WUFDZixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EseUJBQXlCO1lBQ3JCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSx3QkFBd0I7WUFDcEIsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLHlCQUF5QjtZQUNyQixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsMkJBQTJCO1lBQ3ZCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSw0QkFBNEI7WUFDeEIsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLFFBQVE7WUFDSixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsWUFBWTtZQUNSLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxnQkFBZ0I7WUFDWixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsY0FBYztZQUNWLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxXQUFXO1lBQ1AsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLGVBQWU7WUFDWCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsZUFBZTtZQUNYLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxlQUFlO1lBQ1gsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLFNBQVM7WUFDTCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsVUFBVTtZQUNOLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7SUFDSjtJQUNBLE1BQU0sQ0FBQztJQUNQLE9BQU8sQ0FBQztBQUNaLENBQUMsRUFBQyxDQUNGLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9laXBzLzI5MjkuanM/Y2VjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwiRUlQLTI5MjlcIixcbiAgICBcImNvbW1lbnRcIjogXCJHYXMgY29zdCBpbmNyZWFzZXMgZm9yIHN0YXRlIGFjY2VzcyBvcGNvZGVzXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTI5MjlcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJtaW5pbXVtSGFyZGZvcmtcIjogXCJjaGFpbnN0YXJ0XCIsXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge1xuICAgICAgICBcImNvbGRzbG9hZFwiOiB7XG4gICAgICAgICAgICBcInZcIjogMjEwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkdhcyBjb3N0IG9mIHRoZSBmaXJzdCByZWFkIG9mIHN0b3JhZ2UgZnJvbSBhIGdpdmVuIGxvY2F0aW9uIChwZXIgdHJhbnNhY3Rpb24pXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjb2xkYWNjb3VudGFjY2Vzc1wiOiB7XG4gICAgICAgICAgICBcInZcIjogMjYwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkdhcyBjb3N0IG9mIHRoZSBmaXJzdCByZWFkIG9mIGEgZ2l2ZW4gYWRkcmVzcyAocGVyIHRyYW5zYWN0aW9uKVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwid2FybXN0b3JhZ2VyZWFkXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAxMDAsXG4gICAgICAgICAgICBcImRcIjogXCJHYXMgY29zdCBvZiByZWFkaW5nIHN0b3JhZ2UgbG9jYXRpb25zIHdoaWNoIGhhdmUgYWxyZWFkeSBsb2FkZWQgJ2NvbGQnXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzc3RvcmVDbGVhbkdhc0VJUDIyMDBcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDI5MDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGZyb20gY2xlYW4gbm9uLXplcm8gdG8gc29tZXRoaW5nIGVsc2VcIlxuICAgICAgICB9LFxuICAgICAgICBcInNzdG9yZU5vb3BHYXNFSVAyMjAwXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAxMDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGlmIHRoZSB2YWx1ZSBkb2Vzbid0IGNoYW5nZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3N0b3JlRGlydHlHYXNFSVAyMjAwXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAxMDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGlmIGEgZGlydHkgdmFsdWUgaXMgY2hhbmdlZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3N0b3JlSW5pdFJlZnVuZEVJUDIyMDBcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDE5OTAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiT25jZSBwZXIgU1NUT1JFIG9wZXJhdGlvbiBmb3IgcmVzZXR0aW5nIHRvIHRoZSBvcmlnaW5hbCB6ZXJvIHZhbHVlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzc3RvcmVDbGVhblJlZnVuZEVJUDIyMDBcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDQ5MDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGZvciByZXNldHRpbmcgdG8gdGhlIG9yaWdpbmFsIG5vbi16ZXJvIHZhbHVlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjYWxsXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIENBTEwgb3Bjb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjYWxsY29kZVwiOiB7XG4gICAgICAgICAgICBcInZcIjogMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBDQUxMQ09ERSBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImRlbGVnYXRlY2FsbFwiOiB7XG4gICAgICAgICAgICBcInZcIjogMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBERUxFR0FURUNBTEwgb3Bjb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzdGF0aWNjYWxsXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIFNUQVRJQ0NBTEwgb3Bjb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJiYWxhbmNlXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIEJBTEFOQ0Ugb3Bjb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJleHRjb2Rlc2l6ZVwiOiB7XG4gICAgICAgICAgICBcInZcIjogMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBFWFRDT0RFU0laRSBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImV4dGNvZGVjb3B5XCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIEVYVENPREVDT1BZIG9wY29kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXh0Y29kZWhhc2hcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDAsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgRVhUQ09ERUhBU0ggb3Bjb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzbG9hZFwiOiB7XG4gICAgICAgICAgICBcInZcIjogMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBTTE9BRCBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcInNzdG9yZVwiOiB7XG4gICAgICAgICAgICBcInZcIjogMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBTU1RPUkUgb3Bjb2RlXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPTI5MjkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2929.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2930.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/2930.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-2930\",\n    \"comment\": \"Optional access lists\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2930\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"istanbul\",\n    \"requiredEIPs\": [\n        2718,\n        2929\n    ],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"accessListStorageKeyCost\": {\n            \"v\": 1900,\n            \"d\": \"Gas cost per storage key in an Access List transaction\"\n        },\n        \"accessListAddressCost\": {\n            \"v\": 2400,\n            \"d\": \"Gas cost per storage key in an Access List transaction\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=2930.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8yOTMwLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixtQkFBbUI7SUFDbkIsZ0JBQWdCO1FBQUM7UUFBTTtLQUFLO0lBQzVCLGFBQWEsQ0FBQztJQUNkLGFBQWE7UUFDVCw0QkFBNEI7WUFDeEIsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLHlCQUF5QjtZQUNyQixLQUFLO1lBQ0wsS0FBSztRQUNUO0lBQ0o7SUFDQSxNQUFNLENBQUM7SUFDUCxPQUFPLENBQUM7QUFDWixDQUFDLEVBQUMsQ0FDRixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8yOTMwLmpzPzViMjAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcIkVJUC0yOTMwXCIsXG4gICAgXCJjb21tZW50XCI6IFwiT3B0aW9uYWwgYWNjZXNzIGxpc3RzXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTI5MzBcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJtaW5pbXVtSGFyZGZvcmtcIjogXCJpc3RhbmJ1bFwiLFxuICAgIFwicmVxdWlyZWRFSVBzXCI6IFsyNzE4LCAyOTI5XSxcbiAgICBcImdhc0NvbmZpZ1wiOiB7fSxcbiAgICBcImdhc1ByaWNlc1wiOiB7XG4gICAgICAgIFwiYWNjZXNzTGlzdFN0b3JhZ2VLZXlDb3N0XCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAxOTAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiR2FzIGNvc3QgcGVyIHN0b3JhZ2Uga2V5IGluIGFuIEFjY2VzcyBMaXN0IHRyYW5zYWN0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJhY2Nlc3NMaXN0QWRkcmVzc0Nvc3RcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDI0MDAsXG4gICAgICAgICAgICBcImRcIjogXCJHYXMgY29zdCBwZXIgc3RvcmFnZSBrZXkgaW4gYW4gQWNjZXNzIExpc3QgdHJhbnNhY3Rpb25cIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInZtXCI6IHt9LFxuICAgIFwicG93XCI6IHt9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9MjkzMC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2930.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3198.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3198.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3198\",\n    \"number\": 3198,\n    \"comment\": \"BASEFEE opcode\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3198\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"london\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"basefee\": {\n            \"v\": 2,\n            \"d\": \"Gas cost of the BASEFEE opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=3198.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zMTk4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGFBQWEsQ0FBQztJQUNkLGFBQWE7UUFDVCxXQUFXO1lBQ1AsS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0lBQ0EsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VpcHMvMzE5OC5qcz9lNmI3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJFSVAtMzE5OFwiLFxuICAgIFwibnVtYmVyXCI6IDMxOTgsXG4gICAgXCJjb21tZW50XCI6IFwiQkFTRUZFRSBvcGNvZGVcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMzE5OFwiLFxuICAgIFwic3RhdHVzXCI6IFwiRmluYWxcIixcbiAgICBcIm1pbmltdW1IYXJkZm9ya1wiOiBcImxvbmRvblwiLFxuICAgIFwiZ2FzQ29uZmlnXCI6IHt9LFxuICAgIFwiZ2FzUHJpY2VzXCI6IHtcbiAgICAgICAgXCJiYXNlZmVlXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAyLFxuICAgICAgICAgICAgXCJkXCI6IFwiR2FzIGNvc3Qgb2YgdGhlIEJBU0VGRUUgb3Bjb2RlXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPTMxOTguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3198.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3529.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3529.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3529\",\n    \"comment\": \"Reduction in refunds\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3529\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"berlin\",\n    \"requiredEIPs\": [\n        2929\n    ],\n    \"gasConfig\": {\n        \"maxRefundQuotient\": {\n            \"v\": 5,\n            \"d\": \"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)\"\n        }\n    },\n    \"gasPrices\": {\n        \"selfdestructRefund\": {\n            \"v\": 0,\n            \"d\": \"Refunded following a selfdestruct operation\"\n        },\n        \"sstoreClearRefundEIP2200\": {\n            \"v\": 4800,\n            \"d\": \"Once per SSTORE operation for clearing an originally existing storage slot\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=3529.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zNTI5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixtQkFBbUI7SUFDbkIsZ0JBQWdCO1FBQUM7S0FBSztJQUN0QixhQUFhO1FBQ1QscUJBQXFCO1lBQ2pCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7SUFDSjtJQUNBLGFBQWE7UUFDVCxzQkFBc0I7WUFDbEIsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLDRCQUE0QjtZQUN4QixLQUFLO1lBQ0wsS0FBSztRQUNUO0lBQ0o7SUFDQSxNQUFNLENBQUM7SUFDUCxPQUFPLENBQUM7QUFDWixDQUFDLEVBQUMsQ0FDRixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zNTI5LmpzP2UwOWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcIkVJUC0zNTI5XCIsXG4gICAgXCJjb21tZW50XCI6IFwiUmVkdWN0aW9uIGluIHJlZnVuZHNcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMzUyOVwiLFxuICAgIFwic3RhdHVzXCI6IFwiRmluYWxcIixcbiAgICBcIm1pbmltdW1IYXJkZm9ya1wiOiBcImJlcmxpblwiLFxuICAgIFwicmVxdWlyZWRFSVBzXCI6IFsyOTI5XSxcbiAgICBcImdhc0NvbmZpZ1wiOiB7XG4gICAgICAgIFwibWF4UmVmdW5kUXVvdGllbnRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDUsXG4gICAgICAgICAgICBcImRcIjogXCJNYXhpbXVtIHJlZnVuZCBxdW90aWVudDsgbWF4IHR4IHJlZnVuZCBpcyBtaW4odHguZ2FzVXNlZC9tYXhSZWZ1bmRRdW90aWVudCwgdHguZ2FzUmVmdW5kKVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiZ2FzUHJpY2VzXCI6IHtcbiAgICAgICAgXCJzZWxmZGVzdHJ1Y3RSZWZ1bmRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDAsXG4gICAgICAgICAgICBcImRcIjogXCJSZWZ1bmRlZCBmb2xsb3dpbmcgYSBzZWxmZGVzdHJ1Y3Qgb3BlcmF0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzc3RvcmVDbGVhclJlZnVuZEVJUDIyMDBcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDQ4MDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGZvciBjbGVhcmluZyBhbiBvcmlnaW5hbGx5IGV4aXN0aW5nIHN0b3JhZ2Ugc2xvdFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwidm1cIjoge30sXG4gICAgXCJwb3dcIjoge31cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD0zNTI5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3529.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3540.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3540.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3540\",\n    \"number\": 3540,\n    \"comment\": \"EVM Object Format (EOF) v1\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3540\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [\n        3541\n    ],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=3540.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zNTQwLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdCQUFnQjtRQUFDO0tBQUs7SUFDdEIsYUFBYSxDQUFDO0lBQ2QsYUFBYSxDQUFDO0lBQ2QsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VpcHMvMzU0MC5qcz85NWQ0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJFSVAtMzU0MFwiLFxuICAgIFwibnVtYmVyXCI6IDM1NDAsXG4gICAgXCJjb21tZW50XCI6IFwiRVZNIE9iamVjdCBGb3JtYXQgKEVPRikgdjFcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMzU0MFwiLFxuICAgIFwic3RhdHVzXCI6IFwiUmV2aWV3XCIsXG4gICAgXCJtaW5pbXVtSGFyZGZvcmtcIjogXCJsb25kb25cIixcbiAgICBcInJlcXVpcmVkRUlQc1wiOiBbMzU0MV0sXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge30sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPTM1NDAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3540.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3541.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3541.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3541\",\n    \"comment\": \"Reject new contracts starting with the 0xEF byte\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3541\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"berlin\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=3541.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zNTQxLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixtQkFBbUI7SUFDbkIsZ0JBQWdCLEVBQUU7SUFDbEIsYUFBYSxDQUFDO0lBQ2QsYUFBYSxDQUFDO0lBQ2QsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VpcHMvMzU0MS5qcz9hODA5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJFSVAtMzU0MVwiLFxuICAgIFwiY29tbWVudFwiOiBcIlJlamVjdCBuZXcgY29udHJhY3RzIHN0YXJ0aW5nIHdpdGggdGhlIDB4RUYgYnl0ZVwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0zNTQxXCIsXG4gICAgXCJzdGF0dXNcIjogXCJGaW5hbFwiLFxuICAgIFwibWluaW11bUhhcmRmb3JrXCI6IFwiYmVybGluXCIsXG4gICAgXCJyZXF1aXJlZEVJUHNcIjogW10sXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge30sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPTM1NDEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3541.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3554.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3554.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3554\",\n    \"comment\": \"Reduction in refunds\",\n    \"url\": \"Difficulty Bomb Delay to December 1st 2021\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"muirGlacier\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 9500000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}); //# sourceMappingURL=3554.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zNTU0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixtQkFBbUI7SUFDbkIsZ0JBQWdCLEVBQUU7SUFDbEIsYUFBYSxDQUFDO0lBQ2QsYUFBYSxDQUFDO0lBQ2QsTUFBTSxDQUFDO0lBQ1AsT0FBTztRQUNILHVCQUF1QjtZQUNuQixLQUFLO1lBQ0wsS0FBSztRQUNUO0lBQ0o7QUFDSixDQUFDLEVBQUMsQ0FDRixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zNTU0LmpzPzQ5OWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcIkVJUC0zNTU0XCIsXG4gICAgXCJjb21tZW50XCI6IFwiUmVkdWN0aW9uIGluIHJlZnVuZHNcIixcbiAgICBcInVybFwiOiBcIkRpZmZpY3VsdHkgQm9tYiBEZWxheSB0byBEZWNlbWJlciAxc3QgMjAyMVwiLFxuICAgIFwic3RhdHVzXCI6IFwiRmluYWxcIixcbiAgICBcIm1pbmltdW1IYXJkZm9ya1wiOiBcIm11aXJHbGFjaWVyXCIsXG4gICAgXCJyZXF1aXJlZEVJUHNcIjogW10sXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge30sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7XG4gICAgICAgIFwiZGlmZmljdWx0eUJvbWJEZWxheVwiOiB7XG4gICAgICAgICAgICBcInZcIjogOTUwMDAwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcInRoZSBhbW91bnQgb2YgYmxvY2tzIHRvIGRlbGF5IHRoZSBkaWZmaWN1bHR5IGJvbWIgd2l0aFwiXG4gICAgICAgIH1cbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9MzU1NC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3554.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3607.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3607.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3607\",\n    \"number\": 3607,\n    \"comment\": \"Reject transactions from senders with deployed code\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3607\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"chainstart\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=3607.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zNjA3LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdCQUFnQixFQUFFO0lBQ2xCLGFBQWEsQ0FBQztJQUNkLGFBQWEsQ0FBQztJQUNkLE1BQU0sQ0FBQztJQUNQLE9BQU8sQ0FBQztBQUNaLENBQUMsRUFBQyxDQUNGLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9laXBzLzM2MDcuanM/Njc5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwiRUlQLTM2MDdcIixcbiAgICBcIm51bWJlclwiOiAzNjA3LFxuICAgIFwiY29tbWVudFwiOiBcIlJlamVjdCB0cmFuc2FjdGlvbnMgZnJvbSBzZW5kZXJzIHdpdGggZGVwbG95ZWQgY29kZVwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0zNjA3XCIsXG4gICAgXCJzdGF0dXNcIjogXCJGaW5hbFwiLFxuICAgIFwibWluaW11bUhhcmRmb3JrXCI6IFwiY2hhaW5zdGFydFwiLFxuICAgIFwicmVxdWlyZWRFSVBzXCI6IFtdLFxuICAgIFwiZ2FzQ29uZmlnXCI6IHt9LFxuICAgIFwiZ2FzUHJpY2VzXCI6IHt9LFxuICAgIFwidm1cIjoge30sXG4gICAgXCJwb3dcIjoge31cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD0zNjA3LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3607.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3651.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3651.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3651\",\n    \"number\": 3198,\n    \"comment\": \"Warm COINBASE\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3651\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [\n        2929\n    ],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=3651.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zNjUxLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdCQUFnQjtRQUFDO0tBQUs7SUFDdEIsYUFBYSxDQUFDO0lBQ2QsYUFBYSxDQUFDO0lBQ2QsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VpcHMvMzY1MS5qcz9iNDFiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJFSVAtMzY1MVwiLFxuICAgIFwibnVtYmVyXCI6IDMxOTgsXG4gICAgXCJjb21tZW50XCI6IFwiV2FybSBDT0lOQkFTRVwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0zNjUxXCIsXG4gICAgXCJzdGF0dXNcIjogXCJSZXZpZXdcIixcbiAgICBcIm1pbmltdW1IYXJkZm9ya1wiOiBcImxvbmRvblwiLFxuICAgIFwicmVxdWlyZWRFSVBzXCI6IFsyOTI5XSxcbiAgICBcImdhc0NvbmZpZ1wiOiB7fSxcbiAgICBcImdhc1ByaWNlc1wiOiB7fSxcbiAgICBcInZtXCI6IHt9LFxuICAgIFwicG93XCI6IHt9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9MzY1MS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3651.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3670.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3670.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3670\",\n    \"number\": 3670,\n    \"comment\": \"EOF - Code Validation\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3670\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [\n        3540\n    ],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=3670.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zNjcwLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdCQUFnQjtRQUFDO0tBQUs7SUFDdEIsYUFBYSxDQUFDO0lBQ2QsYUFBYSxDQUFDO0lBQ2QsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VpcHMvMzY3MC5qcz80ZDRkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJFSVAtMzY3MFwiLFxuICAgIFwibnVtYmVyXCI6IDM2NzAsXG4gICAgXCJjb21tZW50XCI6IFwiRU9GIC0gQ29kZSBWYWxpZGF0aW9uXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTM2NzBcIixcbiAgICBcInN0YXR1c1wiOiBcIlJldmlld1wiLFxuICAgIFwibWluaW11bUhhcmRmb3JrXCI6IFwibG9uZG9uXCIsXG4gICAgXCJyZXF1aXJlZEVJUHNcIjogWzM1NDBdLFxuICAgIFwiZ2FzQ29uZmlnXCI6IHt9LFxuICAgIFwiZ2FzUHJpY2VzXCI6IHt9LFxuICAgIFwidm1cIjoge30sXG4gICAgXCJwb3dcIjoge31cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD0zNjcwLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3670.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3675.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3675.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3675\",\n    \"number\": 3675,\n    \"comment\": \"Upgrade consensus to Proof-of-Stake\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3675\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=3675.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zNjc1LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdCQUFnQixFQUFFO0lBQ2xCLGFBQWEsQ0FBQztJQUNkLGFBQWEsQ0FBQztJQUNkLE1BQU0sQ0FBQztJQUNQLE9BQU8sQ0FBQztBQUNaLENBQUMsRUFBQyxDQUNGLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9laXBzLzM2NzUuanM/NjRmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwiRUlQLTM2NzVcIixcbiAgICBcIm51bWJlclwiOiAzNjc1LFxuICAgIFwiY29tbWVudFwiOiBcIlVwZ3JhZGUgY29uc2Vuc3VzIHRvIFByb29mLW9mLVN0YWtlXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTM2NzVcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJtaW5pbXVtSGFyZGZvcmtcIjogXCJsb25kb25cIixcbiAgICBcInJlcXVpcmVkRUlQc1wiOiBbXSxcbiAgICBcImdhc0NvbmZpZ1wiOiB7fSxcbiAgICBcImdhc1ByaWNlc1wiOiB7fSxcbiAgICBcInZtXCI6IHt9LFxuICAgIFwicG93XCI6IHt9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9MzY3NS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3675.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3855.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3855.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3855\",\n    \"number\": 3855,\n    \"comment\": \"PUSH0 instruction\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3855\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"chainstart\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"push0\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the PUSH0 opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=3855.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zODU1LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdCQUFnQixFQUFFO0lBQ2xCLGFBQWEsQ0FBQztJQUNkLGFBQWE7UUFDVCxTQUFTO1lBQ0wsS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0lBQ0EsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VpcHMvMzg1NS5qcz81NDBjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJFSVAtMzg1NVwiLFxuICAgIFwibnVtYmVyXCI6IDM4NTUsXG4gICAgXCJjb21tZW50XCI6IFwiUFVTSDAgaW5zdHJ1Y3Rpb25cIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMzg1NVwiLFxuICAgIFwic3RhdHVzXCI6IFwiUmV2aWV3XCIsXG4gICAgXCJtaW5pbXVtSGFyZGZvcmtcIjogXCJjaGFpbnN0YXJ0XCIsXG4gICAgXCJyZXF1aXJlZEVJUHNcIjogW10sXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge1xuICAgICAgICBcInB1c2gwXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAyLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIFBVU0gwIG9wY29kZVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwidm1cIjoge30sXG4gICAgXCJwb3dcIjoge31cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD0zODU1LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3855.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3860.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/3860.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-3860\",\n    \"number\": 3860,\n    \"comment\": \"Limit and meter initcode\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3860\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"spuriousDragon\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"initCodeWordCost\": {\n            \"v\": 2,\n            \"d\": \"Gas to pay for each word (32 bytes) of initcode when creating a contract\"\n        }\n    },\n    \"vm\": {\n        \"maxInitCodeSize\": {\n            \"v\": 49152,\n            \"d\": \"Maximum length of initialization code when creating a contract\"\n        }\n    },\n    \"pow\": {}\n}); //# sourceMappingURL=3860.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy8zODYwLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdCQUFnQixFQUFFO0lBQ2xCLGFBQWEsQ0FBQztJQUNkLGFBQWE7UUFDVCxvQkFBb0I7WUFDaEIsS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0lBQ0EsTUFBTTtRQUNGLG1CQUFtQjtZQUNmLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7SUFDSjtJQUNBLE9BQU8sQ0FBQztBQUNaLENBQUMsRUFBQyxDQUNGLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9laXBzLzM4NjAuanM/YmE5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwiRUlQLTM4NjBcIixcbiAgICBcIm51bWJlclwiOiAzODYwLFxuICAgIFwiY29tbWVudFwiOiBcIkxpbWl0IGFuZCBtZXRlciBpbml0Y29kZVwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0zODYwXCIsXG4gICAgXCJzdGF0dXNcIjogXCJSZXZpZXdcIixcbiAgICBcIm1pbmltdW1IYXJkZm9ya1wiOiBcInNwdXJpb3VzRHJhZ29uXCIsXG4gICAgXCJyZXF1aXJlZEVJUHNcIjogW10sXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge1xuICAgICAgICBcImluaXRDb2RlV29yZENvc3RcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDIsXG4gICAgICAgICAgICBcImRcIjogXCJHYXMgdG8gcGF5IGZvciBlYWNoIHdvcmQgKDMyIGJ5dGVzKSBvZiBpbml0Y29kZSB3aGVuIGNyZWF0aW5nIGEgY29udHJhY3RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInZtXCI6IHtcbiAgICAgICAgXCJtYXhJbml0Q29kZVNpemVcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDQ5MTUyLFxuICAgICAgICAgICAgXCJkXCI6IFwiTWF4aW11bSBsZW5ndGggb2YgaW5pdGlhbGl6YXRpb24gY29kZSB3aGVuIGNyZWF0aW5nIGEgY29udHJhY3RcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPTM4NjAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3860.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/4345.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/4345.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-4345\",\n    \"number\": 4345,\n    \"comment\": \"Difficulty Bomb Delay to June 2022\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4345\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"london\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 10700000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}); //# sourceMappingURL=4345.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy80MzQ1LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGFBQWEsQ0FBQztJQUNkLGFBQWEsQ0FBQztJQUNkLE1BQU0sQ0FBQztJQUNQLE9BQU87UUFDSCx1QkFBdUI7WUFDbkIsS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0FBQ0osQ0FBQyxFQUFDLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VpcHMvNDM0NS5qcz9hZTBjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJFSVAtNDM0NVwiLFxuICAgIFwibnVtYmVyXCI6IDQzNDUsXG4gICAgXCJjb21tZW50XCI6IFwiRGlmZmljdWx0eSBCb21iIERlbGF5IHRvIEp1bmUgMjAyMlwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC00MzQ1XCIsXG4gICAgXCJzdGF0dXNcIjogXCJGaW5hbFwiLFxuICAgIFwibWluaW11bUhhcmRmb3JrXCI6IFwibG9uZG9uXCIsXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge30sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7XG4gICAgICAgIFwiZGlmZmljdWx0eUJvbWJEZWxheVwiOiB7XG4gICAgICAgICAgICBcInZcIjogMTA3MDAwMDAsXG4gICAgICAgICAgICBcImRcIjogXCJ0aGUgYW1vdW50IG9mIGJsb2NrcyB0byBkZWxheSB0aGUgZGlmZmljdWx0eSBib21iIHdpdGhcIlxuICAgICAgICB9XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPTQzNDUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/4345.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/4399.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/4399.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-4399\",\n    \"number\": 4399,\n    \"comment\": \"Supplant DIFFICULTY opcode with PREVRANDAO\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4399\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=4399.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy80Mzk5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGdCQUFnQixFQUFFO0lBQ2xCLGFBQWEsQ0FBQztJQUNkLGFBQWEsQ0FBQztJQUNkLE1BQU0sQ0FBQztJQUNQLE9BQU8sQ0FBQztBQUNaLENBQUMsRUFBQyxDQUNGLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9laXBzLzQzOTkuanM/OGFhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwiRUlQLTQzOTlcIixcbiAgICBcIm51bWJlclwiOiA0Mzk5LFxuICAgIFwiY29tbWVudFwiOiBcIlN1cHBsYW50IERJRkZJQ1VMVFkgb3Bjb2RlIHdpdGggUFJFVlJBTkRBT1wiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC00Mzk5XCIsXG4gICAgXCJzdGF0dXNcIjogXCJSZXZpZXdcIixcbiAgICBcIm1pbmltdW1IYXJkZm9ya1wiOiBcImxvbmRvblwiLFxuICAgIFwicmVxdWlyZWRFSVBzXCI6IFtdLFxuICAgIFwiZ2FzQ29uZmlnXCI6IHt9LFxuICAgIFwiZ2FzUHJpY2VzXCI6IHt9LFxuICAgIFwidm1cIjoge30sXG4gICAgXCJwb3dcIjoge31cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD00Mzk5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/4399.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/5133.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/5133.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"EIP-5133\",\n    \"number\": 5133,\n    \"comment\": \"Delaying Difficulty Bomb to mid-September 2022\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-5133\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"grayGlacier\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 11400000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}); //# sourceMappingURL=5133.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy81MTMzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsbUJBQW1CO0lBQ25CLGFBQWEsQ0FBQztJQUNkLGFBQWEsQ0FBQztJQUNkLE1BQU0sQ0FBQztJQUNQLE9BQU87UUFDSCx1QkFBdUI7WUFDbkIsS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0FBQ0osQ0FBQyxFQUFDLENBQ0YsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VpcHMvNTEzMy5qcz9jNzE1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJFSVAtNTEzM1wiLFxuICAgIFwibnVtYmVyXCI6IDUxMzMsXG4gICAgXCJjb21tZW50XCI6IFwiRGVsYXlpbmcgRGlmZmljdWx0eSBCb21iIHRvIG1pZC1TZXB0ZW1iZXIgMjAyMlwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC01MTMzXCIsXG4gICAgXCJzdGF0dXNcIjogXCJEcmFmdFwiLFxuICAgIFwibWluaW11bUhhcmRmb3JrXCI6IFwiZ3JheUdsYWNpZXJcIixcbiAgICBcImdhc0NvbmZpZ1wiOiB7fSxcbiAgICBcImdhc1ByaWNlc1wiOiB7fSxcbiAgICBcInZtXCI6IHt9LFxuICAgIFwicG93XCI6IHtcbiAgICAgICAgXCJkaWZmaWN1bHR5Qm9tYkRlbGF5XCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAxMTQwMDAwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcInRoZSBhbW91bnQgb2YgYmxvY2tzIHRvIGRlbGF5IHRoZSBkaWZmaWN1bHR5IGJvbWIgd2l0aFwiXG4gICAgICAgIH1cbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9NTEzMy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/5133.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/eips/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EIPs: () => (/* binding */ EIPs)\n/* harmony export */ });\n/* harmony import */ var _1153_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./1153.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/1153.js\");\n/* harmony import */ var _1559_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./1559.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/1559.js\");\n/* harmony import */ var _2315_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./2315.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2315.js\");\n/* harmony import */ var _2537_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./2537.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2537.js\");\n/* harmony import */ var _2565_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./2565.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2565.js\");\n/* harmony import */ var _2718_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./2718.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2718.js\");\n/* harmony import */ var _2929_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./2929.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2929.js\");\n/* harmony import */ var _2930_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./2930.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/2930.js\");\n/* harmony import */ var _3198_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./3198.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3198.js\");\n/* harmony import */ var _3529_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./3529.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3529.js\");\n/* harmony import */ var _3540_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./3540.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3540.js\");\n/* harmony import */ var _3541_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./3541.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3541.js\");\n/* harmony import */ var _3554_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./3554.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3554.js\");\n/* harmony import */ var _3607_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./3607.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3607.js\");\n/* harmony import */ var _3651_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./3651.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3651.js\");\n/* harmony import */ var _3670_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./3670.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3670.js\");\n/* harmony import */ var _3675_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./3675.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3675.js\");\n/* harmony import */ var _3855_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./3855.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3855.js\");\n/* harmony import */ var _3860_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./3860.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/3860.js\");\n/* harmony import */ var _4345_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./4345.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/4345.js\");\n/* harmony import */ var _4399_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./4399.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/4399.js\");\n/* harmony import */ var _5133_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./5133.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/5133.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst EIPs = {\n    1153: _1153_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    1559: _1559_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    2315: _2315_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    2537: _2537_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    2565: _2565_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    2718: _2718_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    2929: _2929_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n    2930: _2930_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n    3198: _3198_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n    3529: _3529_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n    3540: _3540_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n    3541: _3541_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n    3554: _3554_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\n    3607: _3607_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\n    3651: _3651_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\n    3670: _3670_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n    3675: _3675_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"],\n    3855: _3855_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"],\n    3860: _3860_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"],\n    4345: _4345_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"],\n    4399: _4399_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"],\n    5133: _5133_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"]\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZWlwcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUM4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN2QixNQUFNc0IsT0FBTztJQUNoQixNQUFNdEIsZ0RBQUtBO0lBQ1gsTUFBTUMsZ0RBQUtBO0lBQ1gsTUFBTUMsZ0RBQUtBO0lBQ1gsTUFBTUMsZ0RBQUtBO0lBQ1gsTUFBTUMsZ0RBQUtBO0lBQ1gsTUFBTUMsZ0RBQUtBO0lBQ1gsTUFBTUMsZ0RBQUtBO0lBQ1gsTUFBTUMsZ0RBQUtBO0lBQ1gsTUFBTUMsZ0RBQUtBO0lBQ1gsTUFBTUMsZ0RBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0lBQ1gsTUFBTUMsaURBQUtBO0FBQ2YsRUFBRSxDQUNGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9laXBzL2luZGV4LmpzPzYxMTQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG5pbXBvcnQgZTExNTMgZnJvbSAnLi8xMTUzLmpzJztcbmltcG9ydCBlMTU1OSBmcm9tICcuLzE1NTkuanMnO1xuaW1wb3J0IGUyMzE1IGZyb20gJy4vMjMxNS5qcyc7XG5pbXBvcnQgZTI1MzcgZnJvbSAnLi8yNTM3LmpzJztcbmltcG9ydCBlMjU2NSBmcm9tICcuLzI1NjUuanMnO1xuaW1wb3J0IGUyNzE4IGZyb20gJy4vMjcxOC5qcyc7XG5pbXBvcnQgZTI5MjkgZnJvbSAnLi8yOTI5LmpzJztcbmltcG9ydCBlMjkzMCBmcm9tICcuLzI5MzAuanMnO1xuaW1wb3J0IGUzMTk4IGZyb20gJy4vMzE5OC5qcyc7XG5pbXBvcnQgZTM1MjkgZnJvbSAnLi8zNTI5LmpzJztcbmltcG9ydCBlMzU0MCBmcm9tICcuLzM1NDAuanMnO1xuaW1wb3J0IGUzNTQxIGZyb20gJy4vMzU0MS5qcyc7XG5pbXBvcnQgZTM1NTQgZnJvbSAnLi8zNTU0LmpzJztcbmltcG9ydCBlMzYwNyBmcm9tICcuLzM2MDcuanMnO1xuaW1wb3J0IGUzNjUxIGZyb20gJy4vMzY1MS5qcyc7XG5pbXBvcnQgZTM2NzAgZnJvbSAnLi8zNjcwLmpzJztcbmltcG9ydCBlMzY3NSBmcm9tICcuLzM2NzUuanMnO1xuaW1wb3J0IGUzODU1IGZyb20gJy4vMzg1NS5qcyc7XG5pbXBvcnQgZTM4NjAgZnJvbSAnLi8zODYwLmpzJztcbmltcG9ydCBlNDM0NSBmcm9tICcuLzQzNDUuanMnO1xuaW1wb3J0IGU0Mzk5IGZyb20gJy4vNDM5OS5qcyc7XG5pbXBvcnQgZTUxMzMgZnJvbSAnLi81MTMzLmpzJztcbmV4cG9ydCBjb25zdCBFSVBzID0ge1xuICAgIDExNTM6IGUxMTUzLFxuICAgIDE1NTk6IGUxNTU5LFxuICAgIDIzMTU6IGUyMzE1LFxuICAgIDI1Mzc6IGUyNTM3LFxuICAgIDI1NjU6IGUyNTY1LFxuICAgIDI3MTg6IGUyNzE4LFxuICAgIDI5Mjk6IGUyOTI5LFxuICAgIDI5MzA6IGUyOTMwLFxuICAgIDMxOTg6IGUzMTk4LFxuICAgIDM1Mjk6IGUzNTI5LFxuICAgIDM1NDA6IGUzNTQwLFxuICAgIDM1NDE6IGUzNTQxLFxuICAgIDM1NTQ6IGUzNTU0LFxuICAgIDM2MDc6IGUzNjA3LFxuICAgIDM2NTE6IGUzNjUxLFxuICAgIDM2NzA6IGUzNjcwLFxuICAgIDM2NzU6IGUzNjc1LFxuICAgIDM4NTU6IGUzODU1LFxuICAgIDM4NjA6IGUzODYwLFxuICAgIDQzNDU6IGU0MzQ1LFxuICAgIDQzOTk6IGU0Mzk5LFxuICAgIDUxMzM6IGU1MTMzLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJlMTE1MyIsImUxNTU5IiwiZTIzMTUiLCJlMjUzNyIsImUyNTY1IiwiZTI3MTgiLCJlMjkyOSIsImUyOTMwIiwiZTMxOTgiLCJlMzUyOSIsImUzNTQwIiwiZTM1NDEiLCJlMzU1NCIsImUzNjA3IiwiZTM2NTEiLCJlMzY3MCIsImUzNjc1IiwiZTM4NTUiLCJlMzg2MCIsImU0MzQ1IiwiZTQzOTkiLCJlNTEzMyIsIkVJUHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/eips/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/enums.js":
/*!****************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/enums.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chain: () => (/* binding */ Chain),\n/* harmony export */   ConsensusAlgorithm: () => (/* binding */ ConsensusAlgorithm),\n/* harmony export */   ConsensusType: () => (/* binding */ ConsensusType),\n/* harmony export */   CustomChain: () => (/* binding */ CustomChain),\n/* harmony export */   Hardfork: () => (/* binding */ Hardfork)\n/* harmony export */ });\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ var Chain;\n(function(Chain) {\n    Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n    Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n    Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n})(Chain || (Chain = {}));\nvar Hardfork;\n(function(Hardfork) {\n    Hardfork[\"Chainstart\"] = \"chainstart\";\n    Hardfork[\"Homestead\"] = \"homestead\";\n    Hardfork[\"Dao\"] = \"dao\";\n    Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n    Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n    Hardfork[\"Byzantium\"] = \"byzantium\";\n    Hardfork[\"Constantinople\"] = \"constantinople\";\n    Hardfork[\"Petersburg\"] = \"petersburg\";\n    Hardfork[\"Istanbul\"] = \"istanbul\";\n    Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n    Hardfork[\"Berlin\"] = \"berlin\";\n    Hardfork[\"London\"] = \"london\";\n    Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n    Hardfork[\"GrayGlacier\"] = \"grayGlacier\";\n    Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n    Hardfork[\"Merge\"] = \"merge\";\n    Hardfork[\"Shanghai\"] = \"shanghai\";\n    Hardfork[\"ShardingForkDev\"] = \"shardingFork\";\n})(Hardfork || (Hardfork = {}));\nvar ConsensusType;\n(function(ConsensusType) {\n    ConsensusType[\"ProofOfStake\"] = \"pos\";\n    ConsensusType[\"ProofOfWork\"] = \"pow\";\n    ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType || (ConsensusType = {}));\nvar ConsensusAlgorithm;\n(function(ConsensusAlgorithm) {\n    ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n    ConsensusAlgorithm[\"Clique\"] = \"clique\";\n    ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm || (ConsensusAlgorithm = {}));\nvar CustomChain;\n(function(CustomChain) {\n    /**\n     * Polygon (Matic) Mainnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */ CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n    /**\n     * Polygon (Matic) Mumbai Testnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */ CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n    /**\n     * Arbitrum Rinkeby Testnet\n     *\n     * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n     */ CustomChain[\"ArbitrumRinkebyTestnet\"] = \"arbitrum-rinkeby-testnet\";\n    /**\n     * Arbitrum One - mainnet for Arbitrum roll-up\n     *\n     * - [Documentation](https://developer.offchainlabs.com/public-chains)\n     */ CustomChain[\"ArbitrumOne\"] = \"arbitrum-one\";\n    /**\n     * xDai EVM sidechain with a native stable token\n     *\n     * - [Documentation](https://www.xdaichain.com/)\n     */ CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n    /**\n     * Optimistic Kovan - testnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */ CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n    /**\n     * Optimistic Ethereum - mainnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */ CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain || (CustomChain = {})); //# sourceMappingURL=enums.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vZW51bXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsR0FDTyxJQUFJQSxNQUFNO0FBQ2hCLFVBQVVBLEtBQUs7SUFDWkEsS0FBSyxDQUFDQSxLQUFLLENBQUMsVUFBVSxHQUFHLEVBQUUsR0FBRztJQUM5QkEsS0FBSyxDQUFDQSxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsR0FBRztJQUM3QkEsS0FBSyxDQUFDQSxLQUFLLENBQUMsVUFBVSxHQUFHLFNBQVMsR0FBRztBQUN6QyxHQUFHQSxTQUFVQSxDQUFBQSxRQUFRLENBQUM7QUFDZixJQUFJQyxTQUFTO0FBQ25CLFVBQVVBLFFBQVE7SUFDZkEsUUFBUSxDQUFDLGFBQWEsR0FBRztJQUN6QkEsUUFBUSxDQUFDLFlBQVksR0FBRztJQUN4QkEsUUFBUSxDQUFDLE1BQU0sR0FBRztJQUNsQkEsUUFBUSxDQUFDLG1CQUFtQixHQUFHO0lBQy9CQSxRQUFRLENBQUMsaUJBQWlCLEdBQUc7SUFDN0JBLFFBQVEsQ0FBQyxZQUFZLEdBQUc7SUFDeEJBLFFBQVEsQ0FBQyxpQkFBaUIsR0FBRztJQUM3QkEsUUFBUSxDQUFDLGFBQWEsR0FBRztJQUN6QkEsUUFBUSxDQUFDLFdBQVcsR0FBRztJQUN2QkEsUUFBUSxDQUFDLGNBQWMsR0FBRztJQUMxQkEsUUFBUSxDQUFDLFNBQVMsR0FBRztJQUNyQkEsUUFBUSxDQUFDLFNBQVMsR0FBRztJQUNyQkEsUUFBUSxDQUFDLGVBQWUsR0FBRztJQUMzQkEsUUFBUSxDQUFDLGNBQWMsR0FBRztJQUMxQkEsUUFBUSxDQUFDLHdCQUF3QixHQUFHO0lBQ3BDQSxRQUFRLENBQUMsUUFBUSxHQUFHO0lBQ3BCQSxRQUFRLENBQUMsV0FBVyxHQUFHO0lBQ3ZCQSxRQUFRLENBQUMsa0JBQWtCLEdBQUc7QUFDbEMsR0FBR0EsWUFBYUEsQ0FBQUEsV0FBVyxDQUFDO0FBQ3JCLElBQUlDLGNBQWM7QUFDeEIsVUFBVUEsYUFBYTtJQUNwQkEsYUFBYSxDQUFDLGVBQWUsR0FBRztJQUNoQ0EsYUFBYSxDQUFDLGNBQWMsR0FBRztJQUMvQkEsYUFBYSxDQUFDLG1CQUFtQixHQUFHO0FBQ3hDLEdBQUdBLGlCQUFrQkEsQ0FBQUEsZ0JBQWdCLENBQUM7QUFDL0IsSUFBSUMsbUJBQW1CO0FBQzdCLFVBQVVBLGtCQUFrQjtJQUN6QkEsa0JBQWtCLENBQUMsU0FBUyxHQUFHO0lBQy9CQSxrQkFBa0IsQ0FBQyxTQUFTLEdBQUc7SUFDL0JBLGtCQUFrQixDQUFDLFNBQVMsR0FBRztBQUNuQyxHQUFHQSxzQkFBdUJBLENBQUFBLHFCQUFxQixDQUFDO0FBQ3pDLElBQUlDLFlBQVk7QUFDdEIsVUFBVUEsV0FBVztJQUNsQjs7OztLQUlDLEdBQ0RBLFdBQVcsQ0FBQyxpQkFBaUIsR0FBRztJQUNoQzs7OztLQUlDLEdBQ0RBLFdBQVcsQ0FBQyxnQkFBZ0IsR0FBRztJQUMvQjs7OztLQUlDLEdBQ0RBLFdBQVcsQ0FBQyx5QkFBeUIsR0FBRztJQUN4Qzs7OztLQUlDLEdBQ0RBLFdBQVcsQ0FBQyxjQUFjLEdBQUc7SUFDN0I7Ozs7S0FJQyxHQUNEQSxXQUFXLENBQUMsWUFBWSxHQUFHO0lBQzNCOzs7O0tBSUMsR0FDREEsV0FBVyxDQUFDLGtCQUFrQixHQUFHO0lBQ2pDOzs7O0tBSUMsR0FDREEsV0FBVyxDQUFDLHFCQUFxQixHQUFHO0FBQ3hDLEdBQUdBLGVBQWdCQSxDQUFBQSxjQUFjLENBQUMsS0FDbEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2VudW1zLmpzPzZhOWUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG5leHBvcnQgdmFyIENoYWluO1xuKGZ1bmN0aW9uIChDaGFpbikge1xuICAgIENoYWluW0NoYWluW1wiTWFpbm5ldFwiXSA9IDFdID0gXCJNYWlubmV0XCI7XG4gICAgQ2hhaW5bQ2hhaW5bXCJHb2VybGlcIl0gPSA1XSA9IFwiR29lcmxpXCI7XG4gICAgQ2hhaW5bQ2hhaW5bXCJTZXBvbGlhXCJdID0gMTExNTUxMTFdID0gXCJTZXBvbGlhXCI7XG59KShDaGFpbiB8fCAoQ2hhaW4gPSB7fSkpO1xuZXhwb3J0IHZhciBIYXJkZm9yaztcbihmdW5jdGlvbiAoSGFyZGZvcmspIHtcbiAgICBIYXJkZm9ya1tcIkNoYWluc3RhcnRcIl0gPSBcImNoYWluc3RhcnRcIjtcbiAgICBIYXJkZm9ya1tcIkhvbWVzdGVhZFwiXSA9IFwiaG9tZXN0ZWFkXCI7XG4gICAgSGFyZGZvcmtbXCJEYW9cIl0gPSBcImRhb1wiO1xuICAgIEhhcmRmb3JrW1wiVGFuZ2VyaW5lV2hpc3RsZVwiXSA9IFwidGFuZ2VyaW5lV2hpc3RsZVwiO1xuICAgIEhhcmRmb3JrW1wiU3B1cmlvdXNEcmFnb25cIl0gPSBcInNwdXJpb3VzRHJhZ29uXCI7XG4gICAgSGFyZGZvcmtbXCJCeXphbnRpdW1cIl0gPSBcImJ5emFudGl1bVwiO1xuICAgIEhhcmRmb3JrW1wiQ29uc3RhbnRpbm9wbGVcIl0gPSBcImNvbnN0YW50aW5vcGxlXCI7XG4gICAgSGFyZGZvcmtbXCJQZXRlcnNidXJnXCJdID0gXCJwZXRlcnNidXJnXCI7XG4gICAgSGFyZGZvcmtbXCJJc3RhbmJ1bFwiXSA9IFwiaXN0YW5idWxcIjtcbiAgICBIYXJkZm9ya1tcIk11aXJHbGFjaWVyXCJdID0gXCJtdWlyR2xhY2llclwiO1xuICAgIEhhcmRmb3JrW1wiQmVybGluXCJdID0gXCJiZXJsaW5cIjtcbiAgICBIYXJkZm9ya1tcIkxvbmRvblwiXSA9IFwibG9uZG9uXCI7XG4gICAgSGFyZGZvcmtbXCJBcnJvd0dsYWNpZXJcIl0gPSBcImFycm93R2xhY2llclwiO1xuICAgIEhhcmRmb3JrW1wiR3JheUdsYWNpZXJcIl0gPSBcImdyYXlHbGFjaWVyXCI7XG4gICAgSGFyZGZvcmtbXCJNZXJnZUZvcmtJZFRyYW5zaXRpb25cIl0gPSBcIm1lcmdlRm9ya0lkVHJhbnNpdGlvblwiO1xuICAgIEhhcmRmb3JrW1wiTWVyZ2VcIl0gPSBcIm1lcmdlXCI7XG4gICAgSGFyZGZvcmtbXCJTaGFuZ2hhaVwiXSA9IFwic2hhbmdoYWlcIjtcbiAgICBIYXJkZm9ya1tcIlNoYXJkaW5nRm9ya0RldlwiXSA9IFwic2hhcmRpbmdGb3JrXCI7XG59KShIYXJkZm9yayB8fCAoSGFyZGZvcmsgPSB7fSkpO1xuZXhwb3J0IHZhciBDb25zZW5zdXNUeXBlO1xuKGZ1bmN0aW9uIChDb25zZW5zdXNUeXBlKSB7XG4gICAgQ29uc2Vuc3VzVHlwZVtcIlByb29mT2ZTdGFrZVwiXSA9IFwicG9zXCI7XG4gICAgQ29uc2Vuc3VzVHlwZVtcIlByb29mT2ZXb3JrXCJdID0gXCJwb3dcIjtcbiAgICBDb25zZW5zdXNUeXBlW1wiUHJvb2ZPZkF1dGhvcml0eVwiXSA9IFwicG9hXCI7XG59KShDb25zZW5zdXNUeXBlIHx8IChDb25zZW5zdXNUeXBlID0ge30pKTtcbmV4cG9ydCB2YXIgQ29uc2Vuc3VzQWxnb3JpdGhtO1xuKGZ1bmN0aW9uIChDb25zZW5zdXNBbGdvcml0aG0pIHtcbiAgICBDb25zZW5zdXNBbGdvcml0aG1bXCJFdGhhc2hcIl0gPSBcImV0aGFzaFwiO1xuICAgIENvbnNlbnN1c0FsZ29yaXRobVtcIkNsaXF1ZVwiXSA9IFwiY2xpcXVlXCI7XG4gICAgQ29uc2Vuc3VzQWxnb3JpdGhtW1wiQ2FzcGVyXCJdID0gXCJjYXNwZXJcIjtcbn0pKENvbnNlbnN1c0FsZ29yaXRobSB8fCAoQ29uc2Vuc3VzQWxnb3JpdGhtID0ge30pKTtcbmV4cG9ydCB2YXIgQ3VzdG9tQ2hhaW47XG4oZnVuY3Rpb24gKEN1c3RvbUNoYWluKSB7XG4gICAgLyoqXG4gICAgICogUG9seWdvbiAoTWF0aWMpIE1haW5uZXRcbiAgICAgKlxuICAgICAqIC0gW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5tYXRpYy5uZXR3b3JrL2RvY3MvZGV2ZWxvcC9uZXR3b3JrLWRldGFpbHMvbmV0d29yaylcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcIlBvbHlnb25NYWlubmV0XCJdID0gXCJwb2x5Z29uLW1haW5uZXRcIjtcbiAgICAvKipcbiAgICAgKiBQb2x5Z29uIChNYXRpYykgTXVtYmFpIFRlc3RuZXRcbiAgICAgKlxuICAgICAqIC0gW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5tYXRpYy5uZXR3b3JrL2RvY3MvZGV2ZWxvcC9uZXR3b3JrLWRldGFpbHMvbmV0d29yaylcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcIlBvbHlnb25NdW1iYWlcIl0gPSBcInBvbHlnb24tbXVtYmFpXCI7XG4gICAgLyoqXG4gICAgICogQXJiaXRydW0gUmlua2VieSBUZXN0bmV0XG4gICAgICpcbiAgICAgKiAtIFtEb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5vZmZjaGFpbmxhYnMuY29tL2RvY3MvcHVibGljX3Rlc3RuZXQpXG4gICAgICovXG4gICAgQ3VzdG9tQ2hhaW5bXCJBcmJpdHJ1bVJpbmtlYnlUZXN0bmV0XCJdID0gXCJhcmJpdHJ1bS1yaW5rZWJ5LXRlc3RuZXRcIjtcbiAgICAvKipcbiAgICAgKiBBcmJpdHJ1bSBPbmUgLSBtYWlubmV0IGZvciBBcmJpdHJ1bSByb2xsLXVwXG4gICAgICpcbiAgICAgKiAtIFtEb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5vZmZjaGFpbmxhYnMuY29tL3B1YmxpYy1jaGFpbnMpXG4gICAgICovXG4gICAgQ3VzdG9tQ2hhaW5bXCJBcmJpdHJ1bU9uZVwiXSA9IFwiYXJiaXRydW0tb25lXCI7XG4gICAgLyoqXG4gICAgICogeERhaSBFVk0gc2lkZWNoYWluIHdpdGggYSBuYXRpdmUgc3RhYmxlIHRva2VuXG4gICAgICpcbiAgICAgKiAtIFtEb2N1bWVudGF0aW9uXShodHRwczovL3d3dy54ZGFpY2hhaW4uY29tLylcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcInhEYWlDaGFpblwiXSA9IFwieC1kYWktY2hhaW5cIjtcbiAgICAvKipcbiAgICAgKiBPcHRpbWlzdGljIEtvdmFuIC0gdGVzdG5ldCBmb3IgT3B0aW1pc20gcm9sbC11cFxuICAgICAqXG4gICAgICogLSBbRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9jb21tdW5pdHkub3B0aW1pc20uaW8vZG9jcy9kZXZlbG9wZXJzL3R1dG9yaWFscy5odG1sKVxuICAgICAqL1xuICAgIEN1c3RvbUNoYWluW1wiT3B0aW1pc3RpY0tvdmFuXCJdID0gXCJvcHRpbWlzdGljLWtvdmFuXCI7XG4gICAgLyoqXG4gICAgICogT3B0aW1pc3RpYyBFdGhlcmV1bSAtIG1haW5uZXQgZm9yIE9wdGltaXNtIHJvbGwtdXBcbiAgICAgKlxuICAgICAqIC0gW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vY29tbXVuaXR5Lm9wdGltaXNtLmlvL2RvY3MvZGV2ZWxvcGVycy90dXRvcmlhbHMuaHRtbClcbiAgICAgKi9cbiAgICBDdXN0b21DaGFpbltcIk9wdGltaXN0aWNFdGhlcmV1bVwiXSA9IFwib3B0aW1pc3RpYy1ldGhlcmV1bVwiO1xufSkoQ3VzdG9tQ2hhaW4gfHwgKEN1c3RvbUNoYWluID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudW1zLmpzLm1hcCJdLCJuYW1lcyI6WyJDaGFpbiIsIkhhcmRmb3JrIiwiQ29uc2Vuc3VzVHlwZSIsIkNvbnNlbnN1c0FsZ29yaXRobSIsIkN1c3RvbUNoYWluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/enums.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/arrowGlacier.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/arrowGlacier.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"arrowGlacier\",\n    \"comment\": \"HF to delay the difficulty bomb\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md\",\n    \"status\": \"Final\",\n    \"eips\": [\n        4345\n    ],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=arrowGlacier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2Fycm93R2xhY2llci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtRQUFDO0tBQUs7SUFDZCxhQUFhLENBQUM7SUFDZCxhQUFhLENBQUM7SUFDZCxNQUFNLENBQUM7SUFDUCxPQUFPLENBQUM7QUFDWixDQUFDLEVBQUMsQ0FDRix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2Fycm93R2xhY2llci5qcz81ODU3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJhcnJvd0dsYWNpZXJcIixcbiAgICBcImNvbW1lbnRcIjogXCJIRiB0byBkZWxheSB0aGUgZGlmZmljdWx0eSBib21iXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZXhlY3V0aW9uLXNwZWNzL2Jsb2IvbWFzdGVyL25ldHdvcmstdXBncmFkZXMvbWFpbm5ldC11cGdyYWRlcy9hcnJvdy1nbGFjaWVyLm1kXCIsXG4gICAgXCJzdGF0dXNcIjogXCJGaW5hbFwiLFxuICAgIFwiZWlwc1wiOiBbNDM0NV0sXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge30sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFycm93R2xhY2llci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/arrowGlacier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/berlin.js":
/*!***************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/berlin.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"berlin\",\n    \"comment\": \"HF targeted for July 2020 following the Muir Glacier HF\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2070\",\n    \"status\": \"Final\",\n    \"eips\": [\n        2565,\n        2929,\n        2718,\n        2930\n    ]\n}); //# sourceMappingURL=berlin.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2Jlcmxpbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtRQUFDO1FBQU07UUFBTTtRQUFNO0tBQUs7QUFDcEMsQ0FBQyxFQUFDLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2hhcmRmb3Jrcy9iZXJsaW4uanM/NzMwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwiYmVybGluXCIsXG4gICAgXCJjb21tZW50XCI6IFwiSEYgdGFyZ2V0ZWQgZm9yIEp1bHkgMjAyMCBmb2xsb3dpbmcgdGhlIE11aXIgR2xhY2llciBIRlwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0yMDcwXCIsXG4gICAgXCJzdGF0dXNcIjogXCJGaW5hbFwiLFxuICAgIFwiZWlwc1wiOiBbMjU2NSwgMjkyOSwgMjcxOCwgMjkzMF1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZXJsaW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/berlin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/byzantium.js":
/*!******************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/byzantium.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"byzantium\",\n    \"comment\": \"Hardfork with new precompiles, instructions and other protocol changes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-609\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"modexpGquaddivisor\": {\n            \"v\": 20,\n            \"d\": \"Gquaddivisor from modexp precompile for gas calculation\"\n        },\n        \"ecAdd\": {\n            \"v\": 500,\n            \"d\": \"Gas costs for curve addition precompile\"\n        },\n        \"ecMul\": {\n            \"v\": 40000,\n            \"d\": \"Gas costs for curve multiplication precompile\"\n        },\n        \"ecPairing\": {\n            \"v\": 100000,\n            \"d\": \"Base gas costs for curve pairing precompile\"\n        },\n        \"ecPairingWord\": {\n            \"v\": 80000,\n            \"d\": \"Gas costs regarding curve pairing precompile input length\"\n        },\n        \"revert\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the REVERT opcode\"\n        },\n        \"staticcall\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the STATICCALL opcode\"\n        },\n        \"returndatasize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the RETURNDATASIZE opcode\"\n        },\n        \"returndatacopy\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the RETURNDATACOPY opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {\n        \"minerReward\": {\n            \"v\": \"3000000000000000000\",\n            \"d\": \"the amount a miner get rewarded for mining a block\"\n        },\n        \"difficultyBombDelay\": {\n            \"v\": 3000000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}); //# sourceMappingURL=byzantium.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2J5emFudGl1bS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsYUFBYSxDQUFDO0lBQ2QsYUFBYTtRQUNULHNCQUFzQjtZQUNsQixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsU0FBUztZQUNMLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxTQUFTO1lBQ0wsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLGFBQWE7WUFDVCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsaUJBQWlCO1lBQ2IsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLFVBQVU7WUFDTixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsY0FBYztZQUNWLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxrQkFBa0I7WUFDZCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0Esa0JBQWtCO1lBQ2QsS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0lBQ0EsTUFBTSxDQUFDO0lBQ1AsT0FBTztRQUNILGVBQWU7WUFDWCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsdUJBQXVCO1lBQ25CLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7SUFDSjtBQUNKLENBQUMsRUFBQyxDQUNGLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9oYXJkZm9ya3MvYnl6YW50aXVtLmpzPzZkODAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcImJ5emFudGl1bVwiLFxuICAgIFwiY29tbWVudFwiOiBcIkhhcmRmb3JrIHdpdGggbmV3IHByZWNvbXBpbGVzLCBpbnN0cnVjdGlvbnMgYW5kIG90aGVyIHByb3RvY29sIGNoYW5nZXNcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNjA5XCIsXG4gICAgXCJzdGF0dXNcIjogXCJGaW5hbFwiLFxuICAgIFwiZ2FzQ29uZmlnXCI6IHt9LFxuICAgIFwiZ2FzUHJpY2VzXCI6IHtcbiAgICAgICAgXCJtb2RleHBHcXVhZGRpdmlzb3JcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDIwLFxuICAgICAgICAgICAgXCJkXCI6IFwiR3F1YWRkaXZpc29yIGZyb20gbW9kZXhwIHByZWNvbXBpbGUgZm9yIGdhcyBjYWxjdWxhdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZWNBZGRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDUwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkdhcyBjb3N0cyBmb3IgY3VydmUgYWRkaXRpb24gcHJlY29tcGlsZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZWNNdWxcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDQwMDAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiR2FzIGNvc3RzIGZvciBjdXJ2ZSBtdWx0aXBsaWNhdGlvbiBwcmVjb21waWxlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlY1BhaXJpbmdcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDEwMDAwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZ2FzIGNvc3RzIGZvciBjdXJ2ZSBwYWlyaW5nIHByZWNvbXBpbGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImVjUGFpcmluZ1dvcmRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDgwMDAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiR2FzIGNvc3RzIHJlZ2FyZGluZyBjdXJ2ZSBwYWlyaW5nIHByZWNvbXBpbGUgaW5wdXQgbGVuZ3RoXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXZlcnRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDAsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgUkVWRVJUIG9wY29kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhdGljY2FsbFwiOiB7XG4gICAgICAgICAgICBcInZcIjogNzAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIFNUQVRJQ0NBTEwgb3Bjb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXR1cm5kYXRhc2l6ZVwiOiB7XG4gICAgICAgICAgICBcInZcIjogMixcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBSRVRVUk5EQVRBU0laRSBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcInJldHVybmRhdGFjb3B5XCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAzLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIFJFVFVSTkRBVEFDT1BZIG9wY29kZVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwidm1cIjoge30sXG4gICAgXCJwb3dcIjoge1xuICAgICAgICBcIm1pbmVyUmV3YXJkXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiBcIjMwMDAwMDAwMDAwMDAwMDAwMDBcIixcbiAgICAgICAgICAgIFwiZFwiOiBcInRoZSBhbW91bnQgYSBtaW5lciBnZXQgcmV3YXJkZWQgZm9yIG1pbmluZyBhIGJsb2NrXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkaWZmaWN1bHR5Qm9tYkRlbGF5XCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAzMDAwMDAwLFxuICAgICAgICAgICAgXCJkXCI6IFwidGhlIGFtb3VudCBvZiBibG9ja3MgdG8gZGVsYXkgdGhlIGRpZmZpY3VsdHkgYm9tYiB3aXRoXCJcbiAgICAgICAgfVxuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXphbnRpdW0uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/byzantium.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/chainstart.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/chainstart.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"chainstart\",\n    \"comment\": \"Start of the Ethereum main chain\",\n    \"url\": \"\",\n    \"status\": \"\",\n    \"gasConfig\": {\n        \"minGasLimit\": {\n            \"v\": 5000,\n            \"d\": \"Minimum the gas limit may ever be\"\n        },\n        \"gasLimitBoundDivisor\": {\n            \"v\": 1024,\n            \"d\": \"The bound divisor of the gas limit, used in update calculations\"\n        },\n        \"maxRefundQuotient\": {\n            \"v\": 2,\n            \"d\": \"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)\"\n        }\n    },\n    \"gasPrices\": {\n        \"base\": {\n            \"v\": 2,\n            \"d\": \"Gas base cost, used e.g. for ChainID opcode (Istanbul)\"\n        },\n        \"tierStep\": {\n            \"v\": [\n                0,\n                2,\n                3,\n                5,\n                8,\n                10,\n                20\n            ],\n            \"d\": \"Once per operation, for a selection of them\"\n        },\n        \"exp\": {\n            \"v\": 10,\n            \"d\": \"Base fee of the EXP opcode\"\n        },\n        \"expByte\": {\n            \"v\": 10,\n            \"d\": \"Times ceil(log256(exponent)) for the EXP instruction\"\n        },\n        \"sha3\": {\n            \"v\": 30,\n            \"d\": \"Base fee of the SHA3 opcode\"\n        },\n        \"sha3Word\": {\n            \"v\": 6,\n            \"d\": \"Once per word of the SHA3 operation's data\"\n        },\n        \"sload\": {\n            \"v\": 50,\n            \"d\": \"Base fee of the SLOAD opcode\"\n        },\n        \"sstoreSet\": {\n            \"v\": 20000,\n            \"d\": \"Once per SSTORE operation if the zeroness changes from zero\"\n        },\n        \"sstoreReset\": {\n            \"v\": 5000,\n            \"d\": \"Once per SSTORE operation if the zeroness does not change from zero\"\n        },\n        \"sstoreRefund\": {\n            \"v\": 15000,\n            \"d\": \"Once per SSTORE operation if the zeroness changes to zero\"\n        },\n        \"jumpdest\": {\n            \"v\": 1,\n            \"d\": \"Base fee of the JUMPDEST opcode\"\n        },\n        \"log\": {\n            \"v\": 375,\n            \"d\": \"Base fee of the LOG opcode\"\n        },\n        \"logData\": {\n            \"v\": 8,\n            \"d\": \"Per byte in a LOG* operation's data\"\n        },\n        \"logTopic\": {\n            \"v\": 375,\n            \"d\": \"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas\"\n        },\n        \"create\": {\n            \"v\": 32000,\n            \"d\": \"Base fee of the CREATE opcode\"\n        },\n        \"call\": {\n            \"v\": 40,\n            \"d\": \"Base fee of the CALL opcode\"\n        },\n        \"callStipend\": {\n            \"v\": 2300,\n            \"d\": \"Free gas given at beginning of call\"\n        },\n        \"callValueTransfer\": {\n            \"v\": 9000,\n            \"d\": \"Paid for CALL when the value transfor is non-zero\"\n        },\n        \"callNewAccount\": {\n            \"v\": 25000,\n            \"d\": \"Paid for CALL when the destination address didn't exist prior\"\n        },\n        \"selfdestructRefund\": {\n            \"v\": 24000,\n            \"d\": \"Refunded following a selfdestruct operation\"\n        },\n        \"memory\": {\n            \"v\": 3,\n            \"d\": \"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL\"\n        },\n        \"quadCoeffDiv\": {\n            \"v\": 512,\n            \"d\": \"Divisor for the quadratic particle of the memory cost equation\"\n        },\n        \"createData\": {\n            \"v\": 200,\n            \"d\": \"\"\n        },\n        \"tx\": {\n            \"v\": 21000,\n            \"d\": \"Per transaction. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"txCreation\": {\n            \"v\": 32000,\n            \"d\": \"The cost of creating a contract via tx\"\n        },\n        \"txDataZero\": {\n            \"v\": 4,\n            \"d\": \"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"txDataNonZero\": {\n            \"v\": 68,\n            \"d\": \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"copy\": {\n            \"v\": 3,\n            \"d\": \"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added\"\n        },\n        \"ecRecover\": {\n            \"v\": 3000,\n            \"d\": \"\"\n        },\n        \"sha256\": {\n            \"v\": 60,\n            \"d\": \"\"\n        },\n        \"sha256Word\": {\n            \"v\": 12,\n            \"d\": \"\"\n        },\n        \"ripemd160\": {\n            \"v\": 600,\n            \"d\": \"\"\n        },\n        \"ripemd160Word\": {\n            \"v\": 120,\n            \"d\": \"\"\n        },\n        \"identity\": {\n            \"v\": 15,\n            \"d\": \"\"\n        },\n        \"identityWord\": {\n            \"v\": 3,\n            \"d\": \"\"\n        },\n        \"stop\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the STOP opcode\"\n        },\n        \"add\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the ADD opcode\"\n        },\n        \"mul\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the MUL opcode\"\n        },\n        \"sub\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SUB opcode\"\n        },\n        \"div\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the DIV opcode\"\n        },\n        \"sdiv\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SDIV opcode\"\n        },\n        \"mod\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the MOD opcode\"\n        },\n        \"smod\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SMOD opcode\"\n        },\n        \"addmod\": {\n            \"v\": 8,\n            \"d\": \"Base fee of the ADDMOD opcode\"\n        },\n        \"mulmod\": {\n            \"v\": 8,\n            \"d\": \"Base fee of the MULMOD opcode\"\n        },\n        \"signextend\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SIGNEXTEND opcode\"\n        },\n        \"lt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the LT opcode\"\n        },\n        \"gt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the GT opcode\"\n        },\n        \"slt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SLT opcode\"\n        },\n        \"sgt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SGT opcode\"\n        },\n        \"eq\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the EQ opcode\"\n        },\n        \"iszero\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the ISZERO opcode\"\n        },\n        \"and\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the AND opcode\"\n        },\n        \"or\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the OR opcode\"\n        },\n        \"xor\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the XOR opcode\"\n        },\n        \"not\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the NOT opcode\"\n        },\n        \"byte\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the BYTE opcode\"\n        },\n        \"address\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the ADDRESS opcode\"\n        },\n        \"balance\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"origin\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the ORIGIN opcode\"\n        },\n        \"caller\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CALLER opcode\"\n        },\n        \"callvalue\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CALLVALUE opcode\"\n        },\n        \"calldataload\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the CALLDATALOAD opcode\"\n        },\n        \"calldatasize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CALLDATASIZE opcode\"\n        },\n        \"calldatacopy\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the CALLDATACOPY opcode\"\n        },\n        \"codesize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CODESIZE opcode\"\n        },\n        \"codecopy\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the CODECOPY opcode\"\n        },\n        \"gasprice\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the GASPRICE opcode\"\n        },\n        \"extcodesize\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the EXTCODESIZE opcode\"\n        },\n        \"extcodecopy\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the EXTCODECOPY opcode\"\n        },\n        \"blockhash\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the BLOCKHASH opcode\"\n        },\n        \"coinbase\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the COINBASE opcode\"\n        },\n        \"timestamp\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the TIMESTAMP opcode\"\n        },\n        \"number\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the NUMBER opcode\"\n        },\n        \"difficulty\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the DIFFICULTY opcode\"\n        },\n        \"gaslimit\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the GASLIMIT opcode\"\n        },\n        \"pop\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the POP opcode\"\n        },\n        \"mload\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the MLOAD opcode\"\n        },\n        \"mstore\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the MSTORE opcode\"\n        },\n        \"mstore8\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the MSTORE8 opcode\"\n        },\n        \"sstore\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SSTORE opcode\"\n        },\n        \"jump\": {\n            \"v\": 8,\n            \"d\": \"Base fee of the JUMP opcode\"\n        },\n        \"jumpi\": {\n            \"v\": 10,\n            \"d\": \"Base fee of the JUMPI opcode\"\n        },\n        \"pc\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the PC opcode\"\n        },\n        \"msize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the MSIZE opcode\"\n        },\n        \"gas\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the GAS opcode\"\n        },\n        \"push\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the PUSH opcode\"\n        },\n        \"dup\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the DUP opcode\"\n        },\n        \"swap\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SWAP opcode\"\n        },\n        \"callcode\": {\n            \"v\": 40,\n            \"d\": \"Base fee of the CALLCODE opcode\"\n        },\n        \"return\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the RETURN opcode\"\n        },\n        \"invalid\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the INVALID opcode\"\n        },\n        \"selfdestruct\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SELFDESTRUCT opcode\"\n        }\n    },\n    \"vm\": {\n        \"stackLimit\": {\n            \"v\": 1024,\n            \"d\": \"Maximum size of VM stack allowed\"\n        },\n        \"callCreateDepth\": {\n            \"v\": 1024,\n            \"d\": \"Maximum depth of call/create stack\"\n        },\n        \"maxExtraDataSize\": {\n            \"v\": 32,\n            \"d\": \"Maximum size extra data may be after Genesis\"\n        }\n    },\n    \"pow\": {\n        \"minimumDifficulty\": {\n            \"v\": 131072,\n            \"d\": \"The minimum that the difficulty may ever be\"\n        },\n        \"difficultyBoundDivisor\": {\n            \"v\": 2048,\n            \"d\": \"The bound divisor of the difficulty, used in the update calculations\"\n        },\n        \"durationLimit\": {\n            \"v\": 13,\n            \"d\": \"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not\"\n        },\n        \"epochDuration\": {\n            \"v\": 30000,\n            \"d\": \"Duration between proof-of-work epochs\"\n        },\n        \"timebombPeriod\": {\n            \"v\": 100000,\n            \"d\": \"Exponential difficulty timebomb period\"\n        },\n        \"minerReward\": {\n            \"v\": \"5000000000000000000\",\n            \"d\": \"the amount a miner get rewarded for mining a block\"\n        },\n        \"difficultyBombDelay\": {\n            \"v\": 0,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}); //# sourceMappingURL=chainstart.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/chainstart.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/constantinople.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/constantinople.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"constantinople\",\n    \"comment\": \"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1013\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"netSstoreNoopGas\": {\n            \"v\": 200,\n            \"d\": \"Once per SSTORE operation if the value doesn't change\"\n        },\n        \"netSstoreInitGas\": {\n            \"v\": 20000,\n            \"d\": \"Once per SSTORE operation from clean zero\"\n        },\n        \"netSstoreCleanGas\": {\n            \"v\": 5000,\n            \"d\": \"Once per SSTORE operation from clean non-zero\"\n        },\n        \"netSstoreDirtyGas\": {\n            \"v\": 200,\n            \"d\": \"Once per SSTORE operation from dirty\"\n        },\n        \"netSstoreClearRefund\": {\n            \"v\": 15000,\n            \"d\": \"Once per SSTORE operation for clearing an originally existing storage slot\"\n        },\n        \"netSstoreResetRefund\": {\n            \"v\": 4800,\n            \"d\": \"Once per SSTORE operation for resetting to the original non-zero value\"\n        },\n        \"netSstoreResetClearRefund\": {\n            \"v\": 19800,\n            \"d\": \"Once per SSTORE operation for resetting to the original zero value\"\n        },\n        \"shl\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SHL opcode\"\n        },\n        \"shr\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SHR opcode\"\n        },\n        \"sar\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SAR opcode\"\n        },\n        \"extcodehash\": {\n            \"v\": 400,\n            \"d\": \"Base fee of the EXTCODEHASH opcode\"\n        },\n        \"create2\": {\n            \"v\": 32000,\n            \"d\": \"Base fee of the CREATE2 opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {\n        \"minerReward\": {\n            \"v\": \"2000000000000000000\",\n            \"d\": \"The amount a miner gets rewarded for mining a block\"\n        },\n        \"difficultyBombDelay\": {\n            \"v\": 5000000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}); //# sourceMappingURL=constantinople.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2NvbnN0YW50aW5vcGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixhQUFhLENBQUM7SUFDZCxhQUFhO1FBQ1Qsb0JBQW9CO1lBQ2hCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxvQkFBb0I7WUFDaEIsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLHFCQUFxQjtZQUNqQixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EscUJBQXFCO1lBQ2pCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSx3QkFBd0I7WUFDcEIsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLHdCQUF3QjtZQUNwQixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsNkJBQTZCO1lBQ3pCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxPQUFPO1lBQ0gsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLE9BQU87WUFDSCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsT0FBTztZQUNILEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxlQUFlO1lBQ1gsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLFdBQVc7WUFDUCxLQUFLO1lBQ0wsS0FBSztRQUNUO0lBQ0o7SUFDQSxNQUFNLENBQUM7SUFDUCxPQUFPO1FBQ0gsZUFBZTtZQUNYLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSx1QkFBdUI7WUFDbkIsS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0FBQ0osQ0FBQyxFQUFDLENBQ0YsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2hhcmRmb3Jrcy9jb25zdGFudGlub3BsZS5qcz83Y2Q3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJjb25zdGFudGlub3BsZVwiLFxuICAgIFwiY29tbWVudFwiOiBcIlBvc3Rwb25lZCBoYXJkZm9yayBpbmNsdWRpbmcgRUlQLTEyODMgKFNTVE9SRSBnYXMgbWV0ZXJpbmcgY2hhbmdlcylcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTAxM1wiLFxuICAgIFwic3RhdHVzXCI6IFwiRmluYWxcIixcbiAgICBcImdhc0NvbmZpZ1wiOiB7fSxcbiAgICBcImdhc1ByaWNlc1wiOiB7XG4gICAgICAgIFwibmV0U3N0b3JlTm9vcEdhc1wiOiB7XG4gICAgICAgICAgICBcInZcIjogMjAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiT25jZSBwZXIgU1NUT1JFIG9wZXJhdGlvbiBpZiB0aGUgdmFsdWUgZG9lc24ndCBjaGFuZ2VcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5ldFNzdG9yZUluaXRHYXNcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDIwMDAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiT25jZSBwZXIgU1NUT1JFIG9wZXJhdGlvbiBmcm9tIGNsZWFuIHplcm9cIlxuICAgICAgICB9LFxuICAgICAgICBcIm5ldFNzdG9yZUNsZWFuR2FzXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiA1MDAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiT25jZSBwZXIgU1NUT1JFIG9wZXJhdGlvbiBmcm9tIGNsZWFuIG5vbi16ZXJvXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuZXRTc3RvcmVEaXJ0eUdhc1wiOiB7XG4gICAgICAgICAgICBcInZcIjogMjAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiT25jZSBwZXIgU1NUT1JFIG9wZXJhdGlvbiBmcm9tIGRpcnR5XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuZXRTc3RvcmVDbGVhclJlZnVuZFwiOiB7XG4gICAgICAgICAgICBcInZcIjogMTUwMDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGZvciBjbGVhcmluZyBhbiBvcmlnaW5hbGx5IGV4aXN0aW5nIHN0b3JhZ2Ugc2xvdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibmV0U3N0b3JlUmVzZXRSZWZ1bmRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDQ4MDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGZvciByZXNldHRpbmcgdG8gdGhlIG9yaWdpbmFsIG5vbi16ZXJvIHZhbHVlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuZXRTc3RvcmVSZXNldENsZWFyUmVmdW5kXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAxOTgwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIk9uY2UgcGVyIFNTVE9SRSBvcGVyYXRpb24gZm9yIHJlc2V0dGluZyB0byB0aGUgb3JpZ2luYWwgemVybyB2YWx1ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic2hsXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAzLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIFNITCBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcInNoclwiOiB7XG4gICAgICAgICAgICBcInZcIjogMyxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBTSFIgb3Bjb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzYXJcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDMsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgU0FSIG9wY29kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXh0Y29kZWhhc2hcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDQwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBFWFRDT0RFSEFTSCBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImNyZWF0ZTJcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDMyMDAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIENSRUFURTIgb3Bjb2RlXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7XG4gICAgICAgIFwibWluZXJSZXdhcmRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IFwiMjAwMDAwMDAwMDAwMDAwMDAwMFwiLFxuICAgICAgICAgICAgXCJkXCI6IFwiVGhlIGFtb3VudCBhIG1pbmVyIGdldHMgcmV3YXJkZWQgZm9yIG1pbmluZyBhIGJsb2NrXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkaWZmaWN1bHR5Qm9tYkRlbGF5XCI6IHtcbiAgICAgICAgICAgIFwidlwiOiA1MDAwMDAwLFxuICAgICAgICAgICAgXCJkXCI6IFwidGhlIGFtb3VudCBvZiBibG9ja3MgdG8gZGVsYXkgdGhlIGRpZmZpY3VsdHkgYm9tYiB3aXRoXCJcbiAgICAgICAgfVxuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudGlub3BsZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/constantinople.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/dao.js":
/*!************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/dao.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"dao\",\n    \"comment\": \"DAO rescue hardfork\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-779\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=dao.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2Rhby5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsYUFBYSxDQUFDO0lBQ2QsYUFBYSxDQUFDO0lBQ2QsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2hhcmRmb3Jrcy9kYW8uanM/ZjJlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwiZGFvXCIsXG4gICAgXCJjb21tZW50XCI6IFwiREFPIHJlc2N1ZSBoYXJkZm9ya1wiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC03NzlcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge30sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhby5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/dao.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/grayGlacier.js":
/*!********************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/grayGlacier.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"grayGlacier\",\n    \"comment\": \"Delaying the difficulty bomb to Mid September 2022\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md\",\n    \"status\": \"Draft\",\n    \"eips\": [\n        5133\n    ],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=grayGlacier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2dyYXlHbGFjaWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO1FBQUM7S0FBSztJQUNkLGFBQWEsQ0FBQztJQUNkLGFBQWEsQ0FBQztJQUNkLE1BQU0sQ0FBQztJQUNQLE9BQU8sQ0FBQztBQUNaLENBQUMsRUFBQyxDQUNGLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9oYXJkZm9ya3MvZ3JheUdsYWNpZXIuanM/N2Y5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwiZ3JheUdsYWNpZXJcIixcbiAgICBcImNvbW1lbnRcIjogXCJEZWxheWluZyB0aGUgZGlmZmljdWx0eSBib21iIHRvIE1pZCBTZXB0ZW1iZXIgMjAyMlwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2V4ZWN1dGlvbi1zcGVjcy9ibG9iL21hc3Rlci9uZXR3b3JrLXVwZ3JhZGVzL21haW5uZXQtdXBncmFkZXMvZ3JheS1nbGFjaWVyLm1kXCIsXG4gICAgXCJzdGF0dXNcIjogXCJEcmFmdFwiLFxuICAgIFwiZWlwc1wiOiBbNTEzM10sXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge30sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYXlHbGFjaWVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/grayGlacier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/homestead.js":
/*!******************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/homestead.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"homestead\",\n    \"comment\": \"Homestead hardfork with protocol and network changes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-606\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"delegatecall\": {\n            \"v\": 40,\n            \"d\": \"Base fee of the DELEGATECALL opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=homestead.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2hvbWVzdGVhZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsYUFBYSxDQUFDO0lBQ2QsYUFBYTtRQUNULGdCQUFnQjtZQUNaLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7SUFDSjtJQUNBLE1BQU0sQ0FBQztJQUNQLE9BQU8sQ0FBQztBQUNaLENBQUMsRUFBQyxDQUNGLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9oYXJkZm9ya3MvaG9tZXN0ZWFkLmpzP2ZlNmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcImhvbWVzdGVhZFwiLFxuICAgIFwiY29tbWVudFwiOiBcIkhvbWVzdGVhZCBoYXJkZm9yayB3aXRoIHByb3RvY29sIGFuZCBuZXR3b3JrIGNoYW5nZXNcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNjA2XCIsXG4gICAgXCJzdGF0dXNcIjogXCJGaW5hbFwiLFxuICAgIFwiZ2FzQ29uZmlnXCI6IHt9LFxuICAgIFwiZ2FzUHJpY2VzXCI6IHtcbiAgICAgICAgXCJkZWxlZ2F0ZWNhbGxcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDQwLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIERFTEVHQVRFQ0FMTCBvcGNvZGVcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInZtXCI6IHt9LFxuICAgIFwicG93XCI6IHt9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9tZXN0ZWFkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/homestead.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hardforks: () => (/* binding */ hardforks)\n/* harmony export */ });\n/* harmony import */ var _chainstart_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chainstart.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/chainstart.js\");\n/* harmony import */ var _dao_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dao.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/dao.js\");\n/* harmony import */ var _homestead_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./homestead.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/homestead.js\");\n/* harmony import */ var _tangerineWhistle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tangerineWhistle.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/tangerineWhistle.js\");\n/* harmony import */ var _spuriousDragon_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./spuriousDragon.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/spuriousDragon.js\");\n/* harmony import */ var _byzantium_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./byzantium.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/byzantium.js\");\n/* harmony import */ var _constantinople_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constantinople.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/constantinople.js\");\n/* harmony import */ var _petersburg_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./petersburg.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/petersburg.js\");\n/* harmony import */ var _istanbul_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./istanbul.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/istanbul.js\");\n/* harmony import */ var _muirGlacier_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./muirGlacier.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/muirGlacier.js\");\n/* harmony import */ var _berlin_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./berlin.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/berlin.js\");\n/* harmony import */ var _london_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./london.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/london.js\");\n/* harmony import */ var _shanghai_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./shanghai.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/shanghai.js\");\n/* harmony import */ var _arrowGlacier_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./arrowGlacier.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/arrowGlacier.js\");\n/* harmony import */ var _grayGlacier_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./grayGlacier.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/grayGlacier.js\");\n/* harmony import */ var _mergeForkIdTransition_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./mergeForkIdTransition.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/mergeForkIdTransition.js\");\n/* harmony import */ var _merge_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./merge.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/merge.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst hardforks = {\n    chainstart: _chainstart_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    homestead: _homestead_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    dao: _dao_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    tangerineWhistle: _tangerineWhistle_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    spuriousDragon: _spuriousDragon_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    byzantium: _byzantium_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    constantinople: _constantinople_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n    petersburg: _petersburg_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n    istanbul: _istanbul_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n    muirGlacier: _muirGlacier_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n    berlin: _berlin_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n    london: _london_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n    shanghai: _shanghai_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\n    arrowGlacier: _arrowGlacier_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\n    grayGlacier: _grayGlacier_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\n    mergeForkIdTransition: _mergeForkIdTransition_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n    merge: _merge_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"]\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUN5QztBQUNkO0FBQ1k7QUFDYztBQUNKO0FBQ1Y7QUFDVTtBQUNSO0FBQ0o7QUFDTTtBQUNWO0FBQ0E7QUFDSTtBQUNRO0FBQ0Y7QUFDb0I7QUFDaEM7QUFDeEIsTUFBTWlCLFlBQVk7SUFDckJqQixVQUFVQSx3REFBQUE7SUFDVkUsU0FBU0EsdURBQUFBO0lBQ1RELEdBQUdBLGlEQUFBQTtJQUNIRSxnQkFBZ0JBLDhEQUFBQTtJQUNoQkMsY0FBY0EsNERBQUFBO0lBQ2RDLFNBQVNBLHVEQUFBQTtJQUNUQyxjQUFjQSw0REFBQUE7SUFDZEMsVUFBVUEsd0RBQUFBO0lBQ1ZDLFFBQVFBLHNEQUFBQTtJQUNSQyxXQUFXQSx5REFBQUE7SUFDWEMsTUFBTUEscURBQUFBO0lBQ05DLE1BQU1BLHFEQUFBQTtJQUNOQyxRQUFRQSx1REFBQUE7SUFDUkMsWUFBWUEsMkRBQUFBO0lBQ1pDLFdBQVdBLDBEQUFBQTtJQUNYQyxxQkFBcUJBLG9FQUFBQTtJQUNyQkMsS0FBS0Esb0RBQUFBO0FBQ1QsRUFBRSxDQUNGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9oYXJkZm9ya3MvaW5kZXguanM/Y2IyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxud2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG5pdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbnRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4oYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG53ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG5idXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbmltcG9ydCBjaGFpbnN0YXJ0IGZyb20gJy4vY2hhaW5zdGFydC5qcyc7XG5pbXBvcnQgZGFvIGZyb20gJy4vZGFvLmpzJztcbmltcG9ydCBob21lc3RlYWQgZnJvbSAnLi9ob21lc3RlYWQuanMnO1xuaW1wb3J0IHRhbmdlcmluZVdoaXN0bGUgZnJvbSAnLi90YW5nZXJpbmVXaGlzdGxlLmpzJztcbmltcG9ydCBzcHVyaW91c0RyYWdvbiBmcm9tICcuL3NwdXJpb3VzRHJhZ29uLmpzJztcbmltcG9ydCBieXphbnRpdW0gZnJvbSAnLi9ieXphbnRpdW0uanMnO1xuaW1wb3J0IGNvbnN0YW50aW5vcGxlIGZyb20gJy4vY29uc3RhbnRpbm9wbGUuanMnO1xuaW1wb3J0IHBldGVyc2J1cmcgZnJvbSAnLi9wZXRlcnNidXJnLmpzJztcbmltcG9ydCBpc3RhbmJ1bCBmcm9tICcuL2lzdGFuYnVsLmpzJztcbmltcG9ydCBtdWlyR2xhY2llciBmcm9tICcuL211aXJHbGFjaWVyLmpzJztcbmltcG9ydCBiZXJsaW4gZnJvbSAnLi9iZXJsaW4uanMnO1xuaW1wb3J0IGxvbmRvbiBmcm9tICcuL2xvbmRvbi5qcyc7XG5pbXBvcnQgc2hhbmdoYWkgZnJvbSAnLi9zaGFuZ2hhaS5qcyc7XG5pbXBvcnQgYXJyb3dHbGFjaWVyIGZyb20gJy4vYXJyb3dHbGFjaWVyLmpzJztcbmltcG9ydCBncmF5R2xhY2llciBmcm9tICcuL2dyYXlHbGFjaWVyLmpzJztcbmltcG9ydCBtZXJnZUZvcmtJZFRyYW5zaXRpb24gZnJvbSAnLi9tZXJnZUZvcmtJZFRyYW5zaXRpb24uanMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UuanMnO1xuZXhwb3J0IGNvbnN0IGhhcmRmb3JrcyA9IHtcbiAgICBjaGFpbnN0YXJ0LFxuICAgIGhvbWVzdGVhZCxcbiAgICBkYW8sXG4gICAgdGFuZ2VyaW5lV2hpc3RsZSxcbiAgICBzcHVyaW91c0RyYWdvbixcbiAgICBieXphbnRpdW0sXG4gICAgY29uc3RhbnRpbm9wbGUsXG4gICAgcGV0ZXJzYnVyZyxcbiAgICBpc3RhbmJ1bCxcbiAgICBtdWlyR2xhY2llcixcbiAgICBiZXJsaW4sXG4gICAgbG9uZG9uLFxuICAgIHNoYW5naGFpLFxuICAgIGFycm93R2xhY2llcixcbiAgICBncmF5R2xhY2llcixcbiAgICBtZXJnZUZvcmtJZFRyYW5zaXRpb24sXG4gICAgbWVyZ2UsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImNoYWluc3RhcnQiLCJkYW8iLCJob21lc3RlYWQiLCJ0YW5nZXJpbmVXaGlzdGxlIiwic3B1cmlvdXNEcmFnb24iLCJieXphbnRpdW0iLCJjb25zdGFudGlub3BsZSIsInBldGVyc2J1cmciLCJpc3RhbmJ1bCIsIm11aXJHbGFjaWVyIiwiYmVybGluIiwibG9uZG9uIiwic2hhbmdoYWkiLCJhcnJvd0dsYWNpZXIiLCJncmF5R2xhY2llciIsIm1lcmdlRm9ya0lkVHJhbnNpdGlvbiIsIm1lcmdlIiwiaGFyZGZvcmtzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/istanbul.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/istanbul.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"istanbul\",\n    \"comment\": \"HF targeted for December 2019 following the Constantinople/Petersburg HF\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1679\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"blake2Round\": {\n            \"v\": 1,\n            \"d\": \"Gas cost per round for the Blake2 F precompile\"\n        },\n        \"ecAdd\": {\n            \"v\": 150,\n            \"d\": \"Gas costs for curve addition precompile\"\n        },\n        \"ecMul\": {\n            \"v\": 6000,\n            \"d\": \"Gas costs for curve multiplication precompile\"\n        },\n        \"ecPairing\": {\n            \"v\": 45000,\n            \"d\": \"Base gas costs for curve pairing precompile\"\n        },\n        \"ecPairingWord\": {\n            \"v\": 34000,\n            \"d\": \"Gas costs regarding curve pairing precompile input length\"\n        },\n        \"txDataNonZero\": {\n            \"v\": 16,\n            \"d\": \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"sstoreSentryGasEIP2200\": {\n            \"v\": 2300,\n            \"d\": \"Minimum gas required to be present for an SSTORE call, not consumed\"\n        },\n        \"sstoreNoopGasEIP2200\": {\n            \"v\": 800,\n            \"d\": \"Once per SSTORE operation if the value doesn't change\"\n        },\n        \"sstoreDirtyGasEIP2200\": {\n            \"v\": 800,\n            \"d\": \"Once per SSTORE operation if a dirty value is changed\"\n        },\n        \"sstoreInitGasEIP2200\": {\n            \"v\": 20000,\n            \"d\": \"Once per SSTORE operation from clean zero to non-zero\"\n        },\n        \"sstoreInitRefundEIP2200\": {\n            \"v\": 19200,\n            \"d\": \"Once per SSTORE operation for resetting to the original zero value\"\n        },\n        \"sstoreCleanGasEIP2200\": {\n            \"v\": 5000,\n            \"d\": \"Once per SSTORE operation from clean non-zero to something else\"\n        },\n        \"sstoreCleanRefundEIP2200\": {\n            \"v\": 4200,\n            \"d\": \"Once per SSTORE operation for resetting to the original non-zero value\"\n        },\n        \"sstoreClearRefundEIP2200\": {\n            \"v\": 15000,\n            \"d\": \"Once per SSTORE operation for clearing an originally existing storage slot\"\n        },\n        \"balance\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"extcodehash\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the EXTCODEHASH opcode\"\n        },\n        \"chainid\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CHAINID opcode\"\n        },\n        \"selfbalance\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SELFBALANCE opcode\"\n        },\n        \"sload\": {\n            \"v\": 800,\n            \"d\": \"Base fee of the SLOAD opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=istanbul.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2lzdGFuYnVsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixhQUFhLENBQUM7SUFDZCxhQUFhO1FBQ1QsZUFBZTtZQUNYLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxTQUFTO1lBQ0wsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLFNBQVM7WUFDTCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsYUFBYTtZQUNULEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxpQkFBaUI7WUFDYixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsaUJBQWlCO1lBQ2IsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLDBCQUEwQjtZQUN0QixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0Esd0JBQXdCO1lBQ3BCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSx5QkFBeUI7WUFDckIsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLHdCQUF3QjtZQUNwQixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsMkJBQTJCO1lBQ3ZCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSx5QkFBeUI7WUFDckIsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLDRCQUE0QjtZQUN4QixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsNEJBQTRCO1lBQ3hCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxXQUFXO1lBQ1AsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLGVBQWU7WUFDWCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsV0FBVztZQUNQLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxlQUFlO1lBQ1gsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLFNBQVM7WUFDTCxLQUFLO1lBQ0wsS0FBSztRQUNUO0lBQ0o7SUFDQSxNQUFNLENBQUM7SUFDUCxPQUFPLENBQUM7QUFDWixDQUFDLEVBQUMsQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2lzdGFuYnVsLmpzP2ExZGYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcImlzdGFuYnVsXCIsXG4gICAgXCJjb21tZW50XCI6IFwiSEYgdGFyZ2V0ZWQgZm9yIERlY2VtYmVyIDIwMTkgZm9sbG93aW5nIHRoZSBDb25zdGFudGlub3BsZS9QZXRlcnNidXJnIEhGXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTE2NzlcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge1xuICAgICAgICBcImJsYWtlMlJvdW5kXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAxLFxuICAgICAgICAgICAgXCJkXCI6IFwiR2FzIGNvc3QgcGVyIHJvdW5kIGZvciB0aGUgQmxha2UyIEYgcHJlY29tcGlsZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZWNBZGRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDE1MCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkdhcyBjb3N0cyBmb3IgY3VydmUgYWRkaXRpb24gcHJlY29tcGlsZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZWNNdWxcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDYwMDAsXG4gICAgICAgICAgICBcImRcIjogXCJHYXMgY29zdHMgZm9yIGN1cnZlIG11bHRpcGxpY2F0aW9uIHByZWNvbXBpbGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImVjUGFpcmluZ1wiOiB7XG4gICAgICAgICAgICBcInZcIjogNDUwMDAsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGdhcyBjb3N0cyBmb3IgY3VydmUgcGFpcmluZyBwcmVjb21waWxlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlY1BhaXJpbmdXb3JkXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAzNDAwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkdhcyBjb3N0cyByZWdhcmRpbmcgY3VydmUgcGFpcmluZyBwcmVjb21waWxlIGlucHV0IGxlbmd0aFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHhEYXRhTm9uWmVyb1wiOiB7XG4gICAgICAgICAgICBcInZcIjogMTYsXG4gICAgICAgICAgICBcImRcIjogXCJQZXIgYnl0ZSBvZiBkYXRhIGF0dGFjaGVkIHRvIGEgdHJhbnNhY3Rpb24gdGhhdCBpcyBub3QgZXF1YWwgdG8gemVyby4gTk9URTogTm90IHBheWFibGUgb24gZGF0YSBvZiBjYWxscyBiZXR3ZWVuIHRyYW5zYWN0aW9uc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3N0b3JlU2VudHJ5R2FzRUlQMjIwMFwiOiB7XG4gICAgICAgICAgICBcInZcIjogMjMwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIk1pbmltdW0gZ2FzIHJlcXVpcmVkIHRvIGJlIHByZXNlbnQgZm9yIGFuIFNTVE9SRSBjYWxsLCBub3QgY29uc3VtZWRcIlxuICAgICAgICB9LFxuICAgICAgICBcInNzdG9yZU5vb3BHYXNFSVAyMjAwXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiA4MDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGlmIHRoZSB2YWx1ZSBkb2Vzbid0IGNoYW5nZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3N0b3JlRGlydHlHYXNFSVAyMjAwXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiA4MDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGlmIGEgZGlydHkgdmFsdWUgaXMgY2hhbmdlZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3N0b3JlSW5pdEdhc0VJUDIyMDBcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDIwMDAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiT25jZSBwZXIgU1NUT1JFIG9wZXJhdGlvbiBmcm9tIGNsZWFuIHplcm8gdG8gbm9uLXplcm9cIlxuICAgICAgICB9LFxuICAgICAgICBcInNzdG9yZUluaXRSZWZ1bmRFSVAyMjAwXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAxOTIwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIk9uY2UgcGVyIFNTVE9SRSBvcGVyYXRpb24gZm9yIHJlc2V0dGluZyB0byB0aGUgb3JpZ2luYWwgemVybyB2YWx1ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3N0b3JlQ2xlYW5HYXNFSVAyMjAwXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiA1MDAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiT25jZSBwZXIgU1NUT1JFIG9wZXJhdGlvbiBmcm9tIGNsZWFuIG5vbi16ZXJvIHRvIHNvbWV0aGluZyBlbHNlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzc3RvcmVDbGVhblJlZnVuZEVJUDIyMDBcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDQyMDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBTU1RPUkUgb3BlcmF0aW9uIGZvciByZXNldHRpbmcgdG8gdGhlIG9yaWdpbmFsIG5vbi16ZXJvIHZhbHVlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzc3RvcmVDbGVhclJlZnVuZEVJUDIyMDBcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDE1MDAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiT25jZSBwZXIgU1NUT1JFIG9wZXJhdGlvbiBmb3IgY2xlYXJpbmcgYW4gb3JpZ2luYWxseSBleGlzdGluZyBzdG9yYWdlIHNsb3RcIlxuICAgICAgICB9LFxuICAgICAgICBcImJhbGFuY2VcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDcwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBCQUxBTkNFIG9wY29kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXh0Y29kZWhhc2hcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDcwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBFWFRDT0RFSEFTSCBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImNoYWluaWRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDIsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgQ0hBSU5JRCBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcInNlbGZiYWxhbmNlXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiA1LFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIFNFTEZCQUxBTkNFIG9wY29kZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic2xvYWRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDgwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBTTE9BRCBvcGNvZGVcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInZtXCI6IHt9LFxuICAgIFwicG93XCI6IHt9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXN0YW5idWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/istanbul.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/london.js":
/*!***************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/london.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"london\",\n    \"comment\": \"HF targeted for July 2021 following the Berlin fork\",\n    \"url\": \"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md\",\n    \"status\": \"Final\",\n    \"eips\": [\n        1559,\n        3198,\n        3529,\n        3541\n    ]\n}); //# sourceMappingURL=london.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL2xvbmRvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtRQUFDO1FBQU07UUFBTTtRQUFNO0tBQUs7QUFDcEMsQ0FBQyxFQUFDLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2hhcmRmb3Jrcy9sb25kb24uanM/OThhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwibG9uZG9uXCIsXG4gICAgXCJjb21tZW50XCI6IFwiSEYgdGFyZ2V0ZWQgZm9yIEp1bHkgMjAyMSBmb2xsb3dpbmcgdGhlIEJlcmxpbiBmb3JrXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZXRoMS4wLXNwZWNzL2Jsb2IvbWFzdGVyL25ldHdvcmstdXBncmFkZXMvbWFpbm5ldC11cGdyYWRlcy9sb25kb24ubWRcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJlaXBzXCI6IFsxNTU5LCAzMTk4LCAzNTI5LCAzNTQxXVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvbmRvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/london.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/merge.js":
/*!**************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/merge.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"merge\",\n    \"comment\": \"Hardfork to upgrade the consensus mechanism to Proof-of-Stake\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md\",\n    \"status\": \"Final\",\n    \"consensus\": {\n        \"type\": \"pos\",\n        \"algorithm\": \"casper\",\n        \"casper\": {}\n    },\n    \"eips\": [\n        3675,\n        4399\n    ]\n}); //# sourceMappingURL=merge.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL21lcmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixhQUFhO1FBQ1QsUUFBUTtRQUNSLGFBQWE7UUFDYixVQUFVLENBQUM7SUFDZjtJQUNBLFFBQVE7UUFBQztRQUFNO0tBQUs7QUFDeEIsQ0FBQyxFQUFDLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2hhcmRmb3Jrcy9tZXJnZS5qcz8zNGVhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJtZXJnZVwiLFxuICAgIFwiY29tbWVudFwiOiBcIkhhcmRmb3JrIHRvIHVwZ3JhZGUgdGhlIGNvbnNlbnN1cyBtZWNoYW5pc20gdG8gUHJvb2Ytb2YtU3Rha2VcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9leGVjdXRpb24tc3BlY3MvYmxvYi9tYXN0ZXIvbmV0d29yay11cGdyYWRlcy9tYWlubmV0LXVwZ3JhZGVzL21lcmdlLm1kXCIsXG4gICAgXCJzdGF0dXNcIjogXCJGaW5hbFwiLFxuICAgIFwiY29uc2Vuc3VzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwicG9zXCIsXG4gICAgICAgIFwiYWxnb3JpdGhtXCI6IFwiY2FzcGVyXCIsXG4gICAgICAgIFwiY2FzcGVyXCI6IHt9XG4gICAgfSxcbiAgICBcImVpcHNcIjogWzM2NzUsIDQzOTldXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/merge.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/mergeForkIdTransition.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/mergeForkIdTransition.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"mergeForkIdTransition\",\n    \"comment\": \"Pre-merge hardfork to fork off non-upgraded clients\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3675\",\n    \"status\": \"Draft\",\n    \"eips\": []\n}); //# sourceMappingURL=mergeForkIdTransition.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL21lcmdlRm9ya0lkVHJhbnNpdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUSxFQUFFO0FBQ2QsQ0FBQyxFQUFDLENBQ0YsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2hhcmRmb3Jrcy9tZXJnZUZvcmtJZFRyYW5zaXRpb24uanM/ODcyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwibWVyZ2VGb3JrSWRUcmFuc2l0aW9uXCIsXG4gICAgXCJjb21tZW50XCI6IFwiUHJlLW1lcmdlIGhhcmRmb3JrIHRvIGZvcmsgb2ZmIG5vbi11cGdyYWRlZCBjbGllbnRzXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTM2NzVcIixcbiAgICBcInN0YXR1c1wiOiBcIkRyYWZ0XCIsXG4gICAgXCJlaXBzXCI6IFtdXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VGb3JrSWRUcmFuc2l0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/mergeForkIdTransition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/muirGlacier.js":
/*!********************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/muirGlacier.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"muirGlacier\",\n    \"comment\": \"HF to delay the difficulty bomb\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2384\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 9000000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}); //# sourceMappingURL=muirGlacier.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL211aXJHbGFjaWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixhQUFhLENBQUM7SUFDZCxhQUFhLENBQUM7SUFDZCxNQUFNLENBQUM7SUFDUCxPQUFPO1FBQ0gsdUJBQXVCO1lBQ25CLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7SUFDSjtBQUNKLENBQUMsRUFBQyxDQUNGLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi9oYXJkZm9ya3MvbXVpckdsYWNpZXIuanM/MWE0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgXCJuYW1lXCI6IFwibXVpckdsYWNpZXJcIixcbiAgICBcImNvbW1lbnRcIjogXCJIRiB0byBkZWxheSB0aGUgZGlmZmljdWx0eSBib21iXCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTIzODRcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge30sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7XG4gICAgICAgIFwiZGlmZmljdWx0eUJvbWJEZWxheVwiOiB7XG4gICAgICAgICAgICBcInZcIjogOTAwMDAwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcInRoZSBhbW91bnQgb2YgYmxvY2tzIHRvIGRlbGF5IHRoZSBkaWZmaWN1bHR5IGJvbWIgd2l0aFwiXG4gICAgICAgIH1cbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVpckdsYWNpZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/muirGlacier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/petersburg.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/petersburg.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"petersburg\",\n    \"comment\": \"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1716\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"netSstoreNoopGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreInitGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreCleanGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreDirtyGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreClearRefund\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreResetRefund\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreResetClearRefund\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=petersburg.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL3BldGVyc2J1cmcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLGFBQWEsQ0FBQztJQUNkLGFBQWE7UUFDVCxvQkFBb0I7WUFDaEIsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLG9CQUFvQjtZQUNoQixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EscUJBQXFCO1lBQ2pCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxxQkFBcUI7WUFDakIsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLHdCQUF3QjtZQUNwQixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0Esd0JBQXdCO1lBQ3BCLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSw2QkFBNkI7WUFDekIsS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0lBQ0EsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0Ysc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2hhcmRmb3Jrcy9wZXRlcnNidXJnLmpzP2U2NTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcInBldGVyc2J1cmdcIixcbiAgICBcImNvbW1lbnRcIjogXCJBa2EgY29uc3RhbnRpbm9wbGVGaXgsIHJlbW92ZXMgRUlQLTEyODMsIGFjdGl2YXRlIHRvZ2V0aGVyIHdpdGggb3IgYWZ0ZXIgY29uc3RhbnRpbm9wbGVcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTcxNlwiLFxuICAgIFwic3RhdHVzXCI6IFwiRmluYWxcIixcbiAgICBcImdhc0NvbmZpZ1wiOiB7fSxcbiAgICBcImdhc1ByaWNlc1wiOiB7XG4gICAgICAgIFwibmV0U3N0b3JlTm9vcEdhc1wiOiB7XG4gICAgICAgICAgICBcInZcIjogbnVsbCxcbiAgICAgICAgICAgIFwiZFwiOiBcIlJlbW92ZWQgYWxvbmcgRUlQLTEyODNcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5ldFNzdG9yZUluaXRHYXNcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IG51bGwsXG4gICAgICAgICAgICBcImRcIjogXCJSZW1vdmVkIGFsb25nIEVJUC0xMjgzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuZXRTc3RvcmVDbGVhbkdhc1wiOiB7XG4gICAgICAgICAgICBcInZcIjogbnVsbCxcbiAgICAgICAgICAgIFwiZFwiOiBcIlJlbW92ZWQgYWxvbmcgRUlQLTEyODNcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5ldFNzdG9yZURpcnR5R2FzXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiBudWxsLFxuICAgICAgICAgICAgXCJkXCI6IFwiUmVtb3ZlZCBhbG9uZyBFSVAtMTI4M1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwibmV0U3N0b3JlQ2xlYXJSZWZ1bmRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IG51bGwsXG4gICAgICAgICAgICBcImRcIjogXCJSZW1vdmVkIGFsb25nIEVJUC0xMjgzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuZXRTc3RvcmVSZXNldFJlZnVuZFwiOiB7XG4gICAgICAgICAgICBcInZcIjogbnVsbCxcbiAgICAgICAgICAgIFwiZFwiOiBcIlJlbW92ZWQgYWxvbmcgRUlQLTEyODNcIlxuICAgICAgICB9LFxuICAgICAgICBcIm5ldFNzdG9yZVJlc2V0Q2xlYXJSZWZ1bmRcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IG51bGwsXG4gICAgICAgICAgICBcImRcIjogXCJSZW1vdmVkIGFsb25nIEVJUC0xMjgzXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJ2bVwiOiB7fSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBldGVyc2J1cmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/petersburg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/shanghai.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/shanghai.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"shanghai\",\n    \"comment\": \"Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md\",\n    \"status\": \"Final\",\n    \"eips\": [\n        3651,\n        3855,\n        3860,\n        4895\n    ]\n}); //# sourceMappingURL=shanghai.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL3NoYW5naGFpLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO1FBQUM7UUFBTTtRQUFNO1FBQU07S0FBSztBQUNwQyxDQUFDLEVBQUMsQ0FDRixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL3NoYW5naGFpLmpzPzRhODciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcInNoYW5naGFpXCIsXG4gICAgXCJjb21tZW50XCI6IFwiTmV4dCBmZWF0dXJlIGhhcmRmb3JrIGFmdGVyIHRoZSBtZXJnZSBoYXJkZm9yayBoYXZpbmcgd2l0aGRyYXdhbHMsIHdhcm0gY29pbmJhc2UsIHB1c2gwLCBsaW1pdC9tZXRlciBpbml0Y29kZVwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL2V4ZWN1dGlvbi1zcGVjcy9ibG9iL21hc3Rlci9uZXR3b3JrLXVwZ3JhZGVzL21haW5uZXQtdXBncmFkZXMvc2hhbmdoYWkubWRcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJlaXBzXCI6IFszNjUxLCAzODU1LCAzODYwLCA0ODk1XVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYW5naGFpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/shanghai.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/spuriousDragon.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/spuriousDragon.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"spuriousDragon\",\n    \"comment\": \"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-607\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"expByte\": {\n            \"v\": 50,\n            \"d\": \"Times ceil(log256(exponent)) for the EXP instruction\"\n        }\n    },\n    \"vm\": {\n        \"maxCodeSize\": {\n            \"v\": 24576,\n            \"d\": \"Maximum length of contract code\"\n        }\n    },\n    \"pow\": {}\n}); //# sourceMappingURL=spuriousDragon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL3NwdXJpb3VzRHJhZ29uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixhQUFhLENBQUM7SUFDZCxhQUFhO1FBQ1QsV0FBVztZQUNQLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7SUFDSjtJQUNBLE1BQU07UUFDRixlQUFlO1lBQ1gsS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0lBQ0EsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2hhcmRmb3Jrcy9zcHVyaW91c0RyYWdvbi5qcz83Njk2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgICBcIm5hbWVcIjogXCJzcHVyaW91c0RyYWdvblwiLFxuICAgIFwiY29tbWVudFwiOiBcIkhGIHdpdGggRUlQcyBmb3Igc2ltcGxlIHJlcGxheSBhdHRhY2sgcHJvdGVjdGlvbiwgRVhQIGNvc3QgaW5jcmVhc2UsIHN0YXRlIHRyaWUgY2xlYXJpbmcsIGNvbnRyYWN0IGNvZGUgc2l6ZSBsaW1pdFwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC02MDdcIixcbiAgICBcInN0YXR1c1wiOiBcIkZpbmFsXCIsXG4gICAgXCJnYXNDb25maWdcIjoge30sXG4gICAgXCJnYXNQcmljZXNcIjoge1xuICAgICAgICBcImV4cEJ5dGVcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDUwLFxuICAgICAgICAgICAgXCJkXCI6IFwiVGltZXMgY2VpbChsb2cyNTYoZXhwb25lbnQpKSBmb3IgdGhlIEVYUCBpbnN0cnVjdGlvblwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwidm1cIjoge1xuICAgICAgICBcIm1heENvZGVTaXplXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiAyNDU3NixcbiAgICAgICAgICAgIFwiZFwiOiBcIk1heGltdW0gbGVuZ3RoIG9mIGNvbnRyYWN0IGNvZGVcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBcInBvd1wiOiB7fVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwdXJpb3VzRHJhZ29uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/spuriousDragon.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/tangerineWhistle.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/hardforks/tangerineWhistle.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    \"name\": \"tangerineWhistle\",\n    \"comment\": \"Hardfork with gas cost changes for IO-heavy operations\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-608\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"sload\": {\n            \"v\": 200,\n            \"d\": \"Once per SLOAD operation\"\n        },\n        \"call\": {\n            \"v\": 700,\n            \"d\": \"Once per CALL operation & message call transaction\"\n        },\n        \"extcodesize\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the EXTCODESIZE opcode\"\n        },\n        \"extcodecopy\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the EXTCODECOPY opcode\"\n        },\n        \"balance\": {\n            \"v\": 400,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"delegatecall\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the DELEGATECALL opcode\"\n        },\n        \"callcode\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the CALLCODE opcode\"\n        },\n        \"selfdestruct\": {\n            \"v\": 5000,\n            \"d\": \"Base fee of the SELFDESTRUCT opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}); //# sourceMappingURL=tangerineWhistle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaGFyZGZvcmtzL3RhbmdlcmluZVdoaXN0bGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLGFBQWEsQ0FBQztJQUNkLGFBQWE7UUFDVCxTQUFTO1lBQ0wsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLFFBQVE7WUFDSixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsZUFBZTtZQUNYLEtBQUs7WUFDTCxLQUFLO1FBQ1Q7UUFDQSxlQUFlO1lBQ1gsS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLFdBQVc7WUFDUCxLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsZ0JBQWdCO1lBQ1osS0FBSztZQUNMLEtBQUs7UUFDVDtRQUNBLFlBQVk7WUFDUixLQUFLO1lBQ0wsS0FBSztRQUNUO1FBQ0EsZ0JBQWdCO1lBQ1osS0FBSztZQUNMLEtBQUs7UUFDVDtJQUNKO0lBQ0EsTUFBTSxDQUFDO0lBQ1AsT0FBTyxDQUFDO0FBQ1osQ0FBQyxFQUFDLENBQ0YsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2hhcmRmb3Jrcy90YW5nZXJpbmVXaGlzdGxlLmpzPzBiYmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICAgIFwibmFtZVwiOiBcInRhbmdlcmluZVdoaXN0bGVcIixcbiAgICBcImNvbW1lbnRcIjogXCJIYXJkZm9yayB3aXRoIGdhcyBjb3N0IGNoYW5nZXMgZm9yIElPLWhlYXZ5IG9wZXJhdGlvbnNcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNjA4XCIsXG4gICAgXCJzdGF0dXNcIjogXCJGaW5hbFwiLFxuICAgIFwiZ2FzQ29uZmlnXCI6IHt9LFxuICAgIFwiZ2FzUHJpY2VzXCI6IHtcbiAgICAgICAgXCJzbG9hZFwiOiB7XG4gICAgICAgICAgICBcInZcIjogMjAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiT25jZSBwZXIgU0xPQUQgb3BlcmF0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjYWxsXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiA3MDAsXG4gICAgICAgICAgICBcImRcIjogXCJPbmNlIHBlciBDQUxMIG9wZXJhdGlvbiAmIG1lc3NhZ2UgY2FsbCB0cmFuc2FjdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXh0Y29kZXNpemVcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDcwMCxcbiAgICAgICAgICAgIFwiZFwiOiBcIkJhc2UgZmVlIG9mIHRoZSBFWFRDT0RFU0laRSBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImV4dGNvZGVjb3B5XCI6IHtcbiAgICAgICAgICAgIFwidlwiOiA3MDAsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgRVhUQ09ERUNPUFkgb3Bjb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJiYWxhbmNlXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiA0MDAsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgQkFMQU5DRSBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImRlbGVnYXRlY2FsbFwiOiB7XG4gICAgICAgICAgICBcInZcIjogNzAwLFxuICAgICAgICAgICAgXCJkXCI6IFwiQmFzZSBmZWUgb2YgdGhlIERFTEVHQVRFQ0FMTCBvcGNvZGVcIlxuICAgICAgICB9LFxuICAgICAgICBcImNhbGxjb2RlXCI6IHtcbiAgICAgICAgICAgIFwidlwiOiA3MDAsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgQ0FMTENPREUgb3Bjb2RlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWxmZGVzdHJ1Y3RcIjoge1xuICAgICAgICAgICAgXCJ2XCI6IDUwMDAsXG4gICAgICAgICAgICBcImRcIjogXCJCYXNlIGZlZSBvZiB0aGUgU0VMRkRFU1RSVUNUIG9wY29kZVwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwidm1cIjoge30sXG4gICAgXCJwb3dcIjoge31cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YW5nZXJpbmVXaGlzdGxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/hardforks/tangerineWhistle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chain: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.Chain),\n/* harmony export */   Common: () => (/* reexport safe */ _common_js__WEBPACK_IMPORTED_MODULE_0__.Common),\n/* harmony export */   ConsensusAlgorithm: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.ConsensusAlgorithm),\n/* harmony export */   ConsensusType: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.ConsensusType),\n/* harmony export */   CustomChain: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.CustomChain),\n/* harmony export */   Hardfork: () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_1__.Hardfork),\n/* harmony export */   TypeOutput: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.TypeOutput),\n/* harmony export */   assertIsUint8Array: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.assertIsUint8Array),\n/* harmony export */   bigIntToHex: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToHex),\n/* harmony export */   bigIntToUint8Array: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUint8Array),\n/* harmony export */   bigIntToUnpaddedUint8Array: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.bigIntToUnpaddedUint8Array),\n/* harmony export */   ecrecover: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.ecrecover),\n/* harmony export */   intToUint8Array: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.intToUint8Array),\n/* harmony export */   padToEven: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.padToEven),\n/* harmony export */   parseGethGenesis: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.parseGethGenesis),\n/* harmony export */   setLengthLeft: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.setLengthLeft),\n/* harmony export */   stripHexPrefix: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix),\n/* harmony export */   stripZeros: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.stripZeros),\n/* harmony export */   toType: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.toType),\n/* harmony export */   toUint8Array: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.toUint8Array),\n/* harmony export */   uint8ArrayToBigInt: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.uint8ArrayToBigInt),\n/* harmony export */   unpadUint8Array: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.unpadUint8Array),\n/* harmony export */   zeros: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_3__.zeros)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/common.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/enums.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/types.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ // @ethereumjs/common version 3.1.1\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQ0EsbUNBQW1DO0FBQ1A7QUFDRDtBQUNBO0FBQ0EsQ0FDM0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL2luZGV4LmpzP2I5ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vLyBAZXRoZXJldW1qcy9jb21tb24gdmVyc2lvbiAzLjEuMVxuZXhwb3J0ICogZnJvbSAnLi9jb21tb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9lbnVtcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/types.js":
/*!****************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/types.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TypeOutput: () => (/* binding */ TypeOutput)\n/* harmony export */ });\n/**\n * Type output options\n */ var TypeOutput;\n(function(TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput || (TypeOutput = {})); //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ00sSUFBSUEsV0FBVztBQUNyQixVQUFVQSxVQUFVO0lBQ2pCQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0lBQ3ZDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0lBQ3ZDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxhQUFhLEdBQUcsRUFBRSxHQUFHO0lBQzNDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLEdBQUc7QUFDdEQsR0FBR0EsY0FBZUEsQ0FBQUEsYUFBYSxDQUFDLEtBQ2hDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL2NvbW1vbi90eXBlcy5qcz9lOGY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHlwZSBvdXRwdXQgb3B0aW9uc1xuICovXG5leHBvcnQgdmFyIFR5cGVPdXRwdXQ7XG4oZnVuY3Rpb24gKFR5cGVPdXRwdXQpIHtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJOdW1iZXJcIl0gPSAwXSA9IFwiTnVtYmVyXCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiQmlnSW50XCJdID0gMV0gPSBcIkJpZ0ludFwiO1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIlVpbnQ4QXJyYXlcIl0gPSAyXSA9IFwiVWludDhBcnJheVwiO1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIlByZWZpeGVkSGV4U3RyaW5nXCJdID0gM10gPSBcIlByZWZpeGVkSGV4U3RyaW5nXCI7XG59KShUeXBlT3V0cHV0IHx8IChUeXBlT3V0cHV0ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJUeXBlT3V0cHV0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/common/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertIsUint8Array: () => (/* binding */ assertIsUint8Array),\n/* harmony export */   bigIntToHex: () => (/* binding */ bigIntToHex),\n/* harmony export */   bigIntToUint8Array: () => (/* binding */ bigIntToUint8Array),\n/* harmony export */   bigIntToUnpaddedUint8Array: () => (/* binding */ bigIntToUnpaddedUint8Array),\n/* harmony export */   ecrecover: () => (/* binding */ ecrecover),\n/* harmony export */   intToUint8Array: () => (/* binding */ intToUint8Array),\n/* harmony export */   padToEven: () => (/* binding */ padToEven),\n/* harmony export */   parseGethGenesis: () => (/* binding */ parseGethGenesis),\n/* harmony export */   setLengthLeft: () => (/* binding */ setLengthLeft),\n/* harmony export */   stripHexPrefix: () => (/* binding */ stripHexPrefix),\n/* harmony export */   stripZeros: () => (/* binding */ stripZeros),\n/* harmony export */   toType: () => (/* binding */ toType),\n/* harmony export */   toUint8Array: () => (/* binding */ toUint8Array),\n/* harmony export */   uint8ArrayToBigInt: () => (/* binding */ uint8ArrayToBigInt),\n/* harmony export */   unpadUint8Array: () => (/* binding */ unpadUint8Array),\n/* harmony export */   zeros: () => (/* binding */ zeros)\n/* harmony export */ });\n/* harmony import */ var web3_validator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-validator */ \"(ssr)/./node_modules/web3-validator/lib/esm/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _tx_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tx/constants.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/constants.js\");\n/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enums.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/enums.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/types.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */ const stripHexPrefix = (str)=>{\n    if (typeof str !== \"string\") throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return (0,web3_validator__WEBPACK_IMPORTED_MODULE_0__.isHexPrefixed)(str) ? str.slice(2) : str;\n};\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */ function formatNonce(nonce) {\n    if (!nonce || nonce === \"0x0\") {\n        return \"0x0000000000000000\";\n    }\n    if ((0,web3_validator__WEBPACK_IMPORTED_MODULE_0__.isHexPrefixed)(nonce)) {\n        return `0x${stripHexPrefix(nonce).padStart(16, \"0\")}`;\n    }\n    return `0x${nonce.padStart(16, \"0\")}`;\n}\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */ const intToHex = function(i) {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */ function parseGethParams(json, mergeForkIdPostMerge = true) {\n    var _a, _b;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas } = json;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    let { extraData, timestamp, nonce } = json;\n    const genesisTimestamp = Number(timestamp);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { chainId } = config;\n    // geth is not strictly putting empty fields with a 0x prefix\n    if (extraData === \"\") {\n        extraData = \"0x\";\n    }\n    // geth may use number for timestamp\n    if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_0__.isHexPrefixed)(timestamp)) {\n        // eslint-disable-next-line radix\n        timestamp = intToHex(parseInt(timestamp));\n    }\n    // geth may not give us a nonce strictly formatted to an 8 byte hex string\n    if (nonce.length !== 18) {\n        nonce = formatNonce(nonce);\n    }\n    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n    // but have different configuration parameters in geth genesis parameters\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (config.eip155Block !== config.eip158Block) {\n        throw new Error(\"EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork\");\n    }\n    const params = {\n        name,\n        chainId,\n        networkId: chainId,\n        genesis: {\n            timestamp,\n            // eslint-disable-next-line radix\n            gasLimit: parseInt(gasLimit),\n            // eslint-disable-next-line radix\n            difficulty: parseInt(difficulty),\n            nonce,\n            extraData,\n            mixHash,\n            coinbase,\n            baseFeePerGas\n        },\n        hardfork: undefined,\n        hardforks: [],\n        bootstrapNodes: [],\n        consensus: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        config.clique !== undefined ? {\n            type: \"poa\",\n            algorithm: \"clique\",\n            clique: {\n                // The recent geth genesis seems to be using blockperiodseconds\n                // and epochlength for clique specification\n                // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n                period: (_a = config.clique.period) !== null && _a !== void 0 ? _a : config.clique.blockperiodseconds,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment\n                epoch: (_b = config.clique.epoch) !== null && _b !== void 0 ? _b : config.clique.epochlength\n            }\n        } : {\n            type: \"pow\",\n            algorithm: \"ethash\",\n            ethash: {}\n        }\n    };\n    const forkMap = {\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.Homestead]: {\n            name: \"homesteadBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.Dao]: {\n            name: \"daoForkBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.TangerineWhistle]: {\n            name: \"eip150Block\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.SpuriousDragon]: {\n            name: \"eip155Block\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.Byzantium]: {\n            name: \"byzantiumBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.Constantinople]: {\n            name: \"constantinopleBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.Petersburg]: {\n            name: \"petersburgBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.Istanbul]: {\n            name: \"istanbulBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.MuirGlacier]: {\n            name: \"muirGlacierBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.Berlin]: {\n            name: \"berlinBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.London]: {\n            name: \"londonBlock\"\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.MergeForkIdTransition]: {\n            name: \"mergeForkBlock\",\n            postMerge: mergeForkIdPostMerge\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.Shanghai]: {\n            name: \"shanghaiTime\",\n            postMerge: true,\n            isTimestamp: true\n        },\n        [_enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.ShardingForkDev]: {\n            name: \"shardingForkTime\",\n            postMerge: true,\n            isTimestamp: true\n        }\n    };\n    // forkMapRev is the map from config field name to Hardfork\n    const forkMapRev = Object.keys(forkMap).reduce((acc, elem)=>{\n        acc[forkMap[elem].name] = elem;\n        return acc;\n    }, {});\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    const configHardforkNames = Object.keys(config).filter(// eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access\n    (key)=>forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n    params.hardforks = configHardforkNames.map((nameBlock)=>({\n            name: forkMapRev[nameBlock],\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            block: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            forkMap[forkMapRev[nameBlock]].isTimestamp === true || // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            typeof config[nameBlock] !== \"number\" ? null : config[nameBlock],\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            timestamp: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            forkMap[forkMapRev[nameBlock]].isTimestamp === true && // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            typeof config[nameBlock] === \"number\" ? config[nameBlock] : undefined\n        }))// eslint-disable-next-line no-null/no-null\n    .filter((fork)=>fork.block !== null || fork.timestamp !== undefined);\n    params.hardforks.sort((a, b)=>{\n        var _a, _b;\n        return ((_a = a.block) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b.block) !== null && _b !== void 0 ? _b : Infinity);\n    });\n    params.hardforks.sort((a, b)=>{\n        var _a, _b;\n        return ((_a = a.timestamp) !== null && _a !== void 0 ? _a : genesisTimestamp) - ((_b = b.timestamp) !== null && _b !== void 0 ? _b : genesisTimestamp);\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (config.terminalTotalDifficulty !== undefined) {\n        // Following points need to be considered for placement of merge hf\n        // - Merge hardfork can't be placed at genesis\n        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n        //   necessary for e.g. withdrawals\n        const mergeConfig = {\n            name: _enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.Merge,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n            ttd: config.terminalTotalDifficulty,\n            // eslint-disable-next-line no-null/no-null\n            block: null\n        };\n        // Merge hardfork has to be placed before first hardfork that is dependent on merge\n        const postMergeIndex = params.hardforks.findIndex(// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        (hf)=>{\n            var _a;\n            return ((_a = forkMap[hf.name]) === null || _a === void 0 ? void 0 : _a.postMerge) === true;\n        });\n        if (postMergeIndex !== -1) {\n            params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n        } else {\n            params.hardforks.push(mergeConfig);\n        }\n    }\n    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n    params.hardfork = latestHardfork === null || latestHardfork === void 0 ? void 0 : latestHardfork.name;\n    params.hardforks.unshift({\n        name: _enums_js__WEBPACK_IMPORTED_MODULE_3__.Hardfork.Chainstart,\n        block: 0\n    });\n    return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */ function parseGethGenesis(json, name, mergeForkIdPostMerge) {\n    try {\n        if ([\n            \"config\",\n            \"difficulty\",\n            \"gasLimit\",\n            \"alloc\"\n        ].some((field)=>!(field in json))) {\n            throw new Error(\"Invalid format, expected geth genesis fields missing\");\n        }\n        if (name !== undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign\n            json.name = name;\n        }\n        return parseGethParams(json, mergeForkIdPostMerge);\n    } catch (e) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n        throw new Error(`Error parsing parameters file: ${e.message}`);\n    }\n}\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */ function padToEven(value) {\n    let a = value;\n    if (typeof a !== \"string\") {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2) a = `0${a}`;\n    return a;\n}\n/**\n * Converts an `Number` to a `Uint8Array`\n * @param {Number} i\n * @return {Uint8Array}\n */ const intToUint8Array = function(i) {\n    const hex = intToHex(i);\n    return (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(`0x${padToEven(hex.slice(2))}`);\n};\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toUint8Array()` method.\n * @param v the value\n */ const toUint8Array = function(v) {\n    var _a;\n    // eslint-disable-next-line no-null/no-null\n    if (v === null || v === undefined) {\n        return new Uint8Array();\n    }\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (((_a = v === null || v === void 0 ? void 0 : v.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"Uint8Array\") {\n        return Uint8Array.from(v);\n    }\n    if (Array.isArray(v)) {\n        return Uint8Array.from(v);\n    }\n    if (typeof v === \"string\") {\n        if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_0__.isHexString)(v)) {\n            throw new Error(`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(padToEven(stripHexPrefix(v)));\n    }\n    if (typeof v === \"number\") {\n        return toUint8Array((0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.numberToHex)(v));\n    }\n    if (typeof v === \"bigint\") {\n        if (v < BigInt(0)) {\n            throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2) n = `0${n}`;\n        return toUint8Array(`0x${n}`);\n    }\n    if (v.toArray) {\n        // converts a BN to a Uint8Array\n        return Uint8Array.from(v.toArray());\n    }\n    throw new Error(\"invalid type\");\n};\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n */ function uint8ArrayToBigInt(buf) {\n    const hex = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(buf);\n    if (hex === \"0x\") {\n        return BigInt(0);\n    }\n    return BigInt(hex);\n}\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n */ function bigIntToUint8Array(num) {\n    return toUint8Array(`0x${num.toString(16)}`);\n}\n/**\n * Returns a Uint8Array filled with 0s.\n * @param bytes the number of bytes the Uint8Array should be\n */ const zeros = function(bytes) {\n    return new Uint8Array(bytes).fill(0);\n};\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Uint8Array)\n */ const setLength = function(msg, length, right) {\n    const buf = zeros(length);\n    if (right) {\n        if (msg.length < length) {\n            buf.set(msg);\n            return buf;\n        }\n        return msg.subarray(0, length);\n    }\n    if (msg.length < length) {\n        buf.set(msg, length - msg.length);\n        return buf;\n    }\n    return msg.subarray(-length);\n};\n/**\n * Throws if input is not a Uint8Array\n * @param {Uint8Array} input value to check\n */ function assertIsUint8Array(input) {\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isUint8Array)(input)) {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const msg = `This method only supports Uint8Array but input was: ${input}`;\n        throw new Error(msg);\n    }\n}\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @return (Uint8Array)\n */ const setLengthLeft = function(msg, length) {\n    assertIsUint8Array(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.\n * @param a (Uint8Array|Array|String)\n * @return (Uint8Array|Array|String)\n */ function stripZeros(a) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n    let first = a[0];\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    while(a.length > 0 && first.toString() === \"0\"){\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign\n        a = a.slice(1);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access\n        first = a[0];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return a;\n}\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param a (Uint8Array)\n * @return (Uint8Array)\n */ const unpadUint8Array = function(a) {\n    assertIsUint8Array(a);\n    return stripZeros(a);\n};\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */ const bigIntToHex = (num)=>`0x${num.toString(16)}`;\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param value value to convert\n */ function bigIntToUnpaddedUint8Array(value) {\n    return unpadUint8Array(bigIntToUint8Array(value));\n}\nfunction calculateSigRecovery(v, chainId) {\n    if (v === BigInt(0) || v === BigInt(1)) return v;\n    if (chainId === undefined) {\n        return v - BigInt(27);\n    }\n    return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */ const ecrecover = function(msgHash, v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    const senderPubKey = new _tx_constants_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s)).addRecoveryBit(Number(recovery)).recoverPublicKey(msgHash).toRawBytes(false);\n    return senderPubKey.slice(1);\n};\nfunction toType(input, outputType) {\n    // eslint-disable-next-line no-null/no-null\n    if (input === null) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === \"string\" && !(0,web3_validator__WEBPACK_IMPORTED_MODULE_0__.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    } else if (typeof input === \"number\" && !Number.isSafeInteger(input)) {\n        throw new Error(\"The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)\");\n    }\n    const output = toUint8Array(input);\n    switch(outputType){\n        case _types_js__WEBPACK_IMPORTED_MODULE_4__.TypeOutput.Uint8Array:\n            return output;\n        case _types_js__WEBPACK_IMPORTED_MODULE_4__.TypeOutput.BigInt:\n            return uint8ArrayToBigInt(output);\n        case _types_js__WEBPACK_IMPORTED_MODULE_4__.TypeOutput.Number:\n            {\n                const bigInt = uint8ArrayToBigInt(output);\n                if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                    throw new Error(\"The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)\");\n                }\n                return Number(bigInt);\n            }\n        case _types_js__WEBPACK_IMPORTED_MODULE_4__.TypeOutput.PrefixedHexString:\n            return (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(output);\n        default:\n            throw new Error(\"unknown outputType\");\n    }\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9jb21tb24vdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQzREO0FBQ21CO0FBQ2hDO0FBQ1Q7QUFDRTtBQUN4Qzs7OztDQUlDLEdBQ00sTUFBTVMsaUJBQWlCLENBQUNDO0lBQzNCLElBQUksT0FBT0EsUUFBUSxVQUNmLE1BQU0sSUFBSUMsTUFBTSxDQUFDLHVEQUF1RCxFQUFFLE9BQU9ELElBQUksQ0FBQztJQUMxRixPQUFPViw2REFBYUEsQ0FBQ1UsT0FBT0EsSUFBSUUsS0FBSyxDQUFDLEtBQUtGO0FBQy9DLEVBQUU7QUFDRjs7OztDQUlDLEdBQ0QsU0FBU0csWUFBWUMsS0FBSztJQUN0QixJQUFJLENBQUNBLFNBQVNBLFVBQVUsT0FBTztRQUMzQixPQUFPO0lBQ1g7SUFDQSxJQUFJZCw2REFBYUEsQ0FBQ2MsUUFBUTtRQUN0QixPQUFPLENBQUMsRUFBRSxFQUFFTCxlQUFlSyxPQUFPQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUM7SUFDekQ7SUFDQSxPQUFPLENBQUMsRUFBRSxFQUFFRCxNQUFNQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUM7QUFDekM7QUFDQTs7OztDQUlDLEdBQ0QsTUFBTUMsV0FBVyxTQUFVQyxDQUFDO0lBQ3hCLElBQUksQ0FBQ0MsT0FBT0MsYUFBYSxDQUFDRixNQUFNQSxJQUFJLEdBQUc7UUFDbkMsTUFBTSxJQUFJTixNQUFNLENBQUMsa0NBQWtDLEVBQUVNLEVBQUUsQ0FBQztJQUM1RDtJQUNBLE9BQU8sQ0FBQyxFQUFFLEVBQUVBLEVBQUVHLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDaEM7QUFDQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsZ0JBQWdCQyxJQUFJLEVBQUVDLHVCQUF1QixJQUFJO0lBQ3RELElBQUlDLElBQUlDO0lBQ1IsbUVBQW1FO0lBQ25FLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsYUFBYSxFQUFHLEdBQUdWO0lBQ2xGLG1FQUFtRTtJQUNuRSxJQUFJLEVBQUVXLFNBQVMsRUFBRUMsU0FBUyxFQUFFcEIsS0FBSyxFQUFFLEdBQUdRO0lBQ3RDLE1BQU1hLG1CQUFtQmpCLE9BQU9nQjtJQUNoQyxtRUFBbUU7SUFDbkUsTUFBTSxFQUFFRSxPQUFPLEVBQUUsR0FBR1Q7SUFDcEIsNkRBQTZEO0lBQzdELElBQUlNLGNBQWMsSUFBSTtRQUNsQkEsWUFBWTtJQUNoQjtJQUNBLG9DQUFvQztJQUNwQyxJQUFJLENBQUNqQyw2REFBYUEsQ0FBQ2tDLFlBQVk7UUFDM0IsaUNBQWlDO1FBQ2pDQSxZQUFZbEIsU0FBU3FCLFNBQVNIO0lBQ2xDO0lBQ0EsMEVBQTBFO0lBQzFFLElBQUlwQixNQUFNd0IsTUFBTSxLQUFLLElBQUk7UUFDckJ4QixRQUFRRCxZQUFZQztJQUN4QjtJQUNBLDhGQUE4RjtJQUM5Rix5RUFBeUU7SUFDekUsc0VBQXNFO0lBQ3RFLElBQUlhLE9BQU9ZLFdBQVcsS0FBS1osT0FBT2EsV0FBVyxFQUFFO1FBQzNDLE1BQU0sSUFBSTdCLE1BQU07SUFDcEI7SUFDQSxNQUFNOEIsU0FBUztRQUNYZjtRQUNBVTtRQUNBTSxXQUFXTjtRQUNYTyxTQUFTO1lBQ0xUO1lBQ0EsaUNBQWlDO1lBQ2pDSixVQUFVTyxTQUFTUDtZQUNuQixpQ0FBaUM7WUFDakNGLFlBQVlTLFNBQVNUO1lBQ3JCZDtZQUNBbUI7WUFDQUo7WUFDQUU7WUFDQUM7UUFDSjtRQUNBWSxVQUFVQztRQUNWQyxXQUFXLEVBQUU7UUFDYkMsZ0JBQWdCLEVBQUU7UUFDbEJDLFdBQ0Esc0VBQXNFO1FBQ3RFckIsT0FBT3NCLE1BQU0sS0FBS0osWUFDWjtZQUNFSyxNQUFNO1lBQ05DLFdBQVc7WUFDWEYsUUFBUTtnQkFDSiwrREFBK0Q7Z0JBQy9ELDJDQUEyQztnQkFDM0MsZ0RBQWdEO2dCQUNoRCwrR0FBK0c7Z0JBQy9HRyxRQUFRLENBQUM1QixLQUFLRyxPQUFPc0IsTUFBTSxDQUFDRyxNQUFNLE1BQU0sUUFBUTVCLE9BQU8sS0FBSyxJQUFJQSxLQUFLRyxPQUFPc0IsTUFBTSxDQUFDSSxrQkFBa0I7Z0JBQ3JHLGdIQUFnSDtnQkFDaEhDLE9BQU8sQ0FBQzdCLEtBQUtFLE9BQU9zQixNQUFNLENBQUNLLEtBQUssTUFBTSxRQUFRN0IsT0FBTyxLQUFLLElBQUlBLEtBQUtFLE9BQU9zQixNQUFNLENBQUNNLFdBQVc7WUFDaEc7UUFDSixJQUNFO1lBQ0VMLE1BQU07WUFDTkMsV0FBVztZQUNYSyxRQUFRLENBQUM7UUFDYjtJQUNSO0lBQ0EsTUFBTUMsVUFBVTtRQUNaLENBQUNsRCwrQ0FBUUEsQ0FBQ21ELFNBQVMsQ0FBQyxFQUFFO1lBQUVoQyxNQUFNO1FBQWlCO1FBQy9DLENBQUNuQiwrQ0FBUUEsQ0FBQ29ELEdBQUcsQ0FBQyxFQUFFO1lBQUVqQyxNQUFNO1FBQWU7UUFDdkMsQ0FBQ25CLCtDQUFRQSxDQUFDcUQsZ0JBQWdCLENBQUMsRUFBRTtZQUFFbEMsTUFBTTtRQUFjO1FBQ25ELENBQUNuQiwrQ0FBUUEsQ0FBQ3NELGNBQWMsQ0FBQyxFQUFFO1lBQUVuQyxNQUFNO1FBQWM7UUFDakQsQ0FBQ25CLCtDQUFRQSxDQUFDdUQsU0FBUyxDQUFDLEVBQUU7WUFBRXBDLE1BQU07UUFBaUI7UUFDL0MsQ0FBQ25CLCtDQUFRQSxDQUFDd0QsY0FBYyxDQUFDLEVBQUU7WUFBRXJDLE1BQU07UUFBc0I7UUFDekQsQ0FBQ25CLCtDQUFRQSxDQUFDeUQsVUFBVSxDQUFDLEVBQUU7WUFBRXRDLE1BQU07UUFBa0I7UUFDakQsQ0FBQ25CLCtDQUFRQSxDQUFDMEQsUUFBUSxDQUFDLEVBQUU7WUFBRXZDLE1BQU07UUFBZ0I7UUFDN0MsQ0FBQ25CLCtDQUFRQSxDQUFDMkQsV0FBVyxDQUFDLEVBQUU7WUFBRXhDLE1BQU07UUFBbUI7UUFDbkQsQ0FBQ25CLCtDQUFRQSxDQUFDNEQsTUFBTSxDQUFDLEVBQUU7WUFBRXpDLE1BQU07UUFBYztRQUN6QyxDQUFDbkIsK0NBQVFBLENBQUM2RCxNQUFNLENBQUMsRUFBRTtZQUFFMUMsTUFBTTtRQUFjO1FBQ3pDLENBQUNuQiwrQ0FBUUEsQ0FBQzhELHFCQUFxQixDQUFDLEVBQUU7WUFDOUIzQyxNQUFNO1lBQ040QyxXQUFXL0M7UUFDZjtRQUNBLENBQUNoQiwrQ0FBUUEsQ0FBQ2dFLFFBQVEsQ0FBQyxFQUFFO1lBQUU3QyxNQUFNO1lBQWdCNEMsV0FBVztZQUFNRSxhQUFhO1FBQUs7UUFDaEYsQ0FBQ2pFLCtDQUFRQSxDQUFDa0UsZUFBZSxDQUFDLEVBQUU7WUFDeEIvQyxNQUFNO1lBQ040QyxXQUFXO1lBQ1hFLGFBQWE7UUFDakI7SUFDSjtJQUNBLDJEQUEyRDtJQUMzRCxNQUFNRSxhQUFhQyxPQUFPQyxJQUFJLENBQUNuQixTQUFTb0IsTUFBTSxDQUFDLENBQUNDLEtBQUtDO1FBQ2pERCxHQUFHLENBQUNyQixPQUFPLENBQUNzQixLQUFLLENBQUNyRCxJQUFJLENBQUMsR0FBR3FEO1FBQzFCLE9BQU9EO0lBQ1gsR0FBRyxDQUFDO0lBQ0osaUVBQWlFO0lBQ2pFLE1BQU1FLHNCQUFzQkwsT0FBT0MsSUFBSSxDQUFDakQsUUFBUXNELE1BQU0sQ0FDdEQsdUZBQXVGO0lBQ3ZGQyxDQUFBQSxNQUFPUixVQUFVLENBQUNRLElBQUksS0FBS3JDLGFBQWFsQixNQUFNLENBQUN1RCxJQUFJLEtBQUtyQyxhQUFhbEIsTUFBTSxDQUFDdUQsSUFBSSxLQUFLO0lBQ3JGekMsT0FBT0ssU0FBUyxHQUFHa0Msb0JBQ2RHLEdBQUcsQ0FBQ0MsQ0FBQUEsWUFBYztZQUNuQjFELE1BQU1nRCxVQUFVLENBQUNVLFVBQVU7WUFDM0IsbUVBQW1FO1lBQ25FQyxPQUNBLHNFQUFzRTtZQUN0RTVCLE9BQU8sQ0FBQ2lCLFVBQVUsQ0FBQ1UsVUFBVSxDQUFDLENBQUNaLFdBQVcsS0FBSyxRQUMzQyxzRUFBc0U7WUFDdEUsT0FBTzdDLE1BQU0sQ0FBQ3lELFVBQVUsS0FBSyxXQUV6QixPQUVBekQsTUFBTSxDQUFDeUQsVUFBVTtZQUN6QixtRUFBbUU7WUFDbkVsRCxXQUNBLHNFQUFzRTtZQUN0RXVCLE9BQU8sQ0FBQ2lCLFVBQVUsQ0FBQ1UsVUFBVSxDQUFDLENBQUNaLFdBQVcsS0FBSyxRQUMzQyxzRUFBc0U7WUFDdEUsT0FBTzdDLE1BQU0sQ0FBQ3lELFVBQVUsS0FBSyxXQUV6QnpELE1BQU0sQ0FBQ3lELFVBQVUsR0FDbkJ2QztRQUNWLEdBQ0ksMkNBQTJDO0tBQzFDb0MsTUFBTSxDQUFDSyxDQUFBQSxPQUFRQSxLQUFLRCxLQUFLLEtBQUssUUFBUUMsS0FBS3BELFNBQVMsS0FBS1c7SUFDOURKLE9BQU9LLFNBQVMsQ0FBQ3lDLElBQUksQ0FBQyxDQUFDQyxHQUFHQztRQUFRLElBQUlqRSxJQUFJQztRQUFJLE9BQU8sQ0FBQyxDQUFDRCxLQUFLZ0UsRUFBRUgsS0FBSyxNQUFNLFFBQVE3RCxPQUFPLEtBQUssSUFBSUEsS0FBS2tFLFFBQU8sSUFBTSxFQUFDakUsS0FBS2dFLEVBQUVKLEtBQUssTUFBTSxRQUFRNUQsT0FBTyxLQUFLLElBQUlBLEtBQUtpRSxRQUFPO0lBQUk7SUFDOUtqRCxPQUFPSyxTQUFTLENBQUN5QyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0M7UUFBUSxJQUFJakUsSUFBSUM7UUFBSSxPQUFPLENBQUMsQ0FBQ0QsS0FBS2dFLEVBQUV0RCxTQUFTLE1BQU0sUUFBUVYsT0FBTyxLQUFLLElBQUlBLEtBQUtXLGdCQUFlLElBQU0sRUFBQ1YsS0FBS2dFLEVBQUV2RCxTQUFTLE1BQU0sUUFBUVQsT0FBTyxLQUFLLElBQUlBLEtBQUtVLGdCQUFlO0lBQUk7SUFDdE0sc0VBQXNFO0lBQ3RFLElBQUlSLE9BQU9nRSx1QkFBdUIsS0FBSzlDLFdBQVc7UUFDOUMsbUVBQW1FO1FBQ25FLDhDQUE4QztRQUM5QywyRkFBMkY7UUFDM0YsK0ZBQStGO1FBQy9GLG1DQUFtQztRQUNuQyxNQUFNK0MsY0FBYztZQUNoQmxFLE1BQU1uQiwrQ0FBUUEsQ0FBQ3NGLEtBQUs7WUFDcEIsK0dBQStHO1lBQy9HQyxLQUFLbkUsT0FBT2dFLHVCQUF1QjtZQUNuQywyQ0FBMkM7WUFDM0NOLE9BQU87UUFDWDtRQUNBLG1GQUFtRjtRQUNuRixNQUFNVSxpQkFBaUJ0RCxPQUFPSyxTQUFTLENBQUNrRCxTQUFTLENBQ2pELHNFQUFzRTtRQUN0RSxDQUFDQztZQUFTLElBQUl6RTtZQUFJLE9BQU8sQ0FBQyxDQUFDQSxLQUFLaUMsT0FBTyxDQUFDd0MsR0FBR3ZFLElBQUksQ0FBQyxNQUFNLFFBQVFGLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBRzhDLFNBQVMsTUFBTTtRQUFNO1FBQy9HLElBQUl5QixtQkFBbUIsQ0FBQyxHQUFHO1lBQ3ZCdEQsT0FBT0ssU0FBUyxDQUFDb0QsTUFBTSxDQUFDSCxnQkFBZ0IsR0FBR0g7UUFDL0MsT0FDSztZQUNEbkQsT0FBT0ssU0FBUyxDQUFDcUQsSUFBSSxDQUFDUDtRQUMxQjtJQUNKO0lBQ0EsTUFBTVEsaUJBQWlCM0QsT0FBT0ssU0FBUyxDQUFDUixNQUFNLEdBQUcsSUFBSUcsT0FBT0ssU0FBUyxDQUFDbEMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBR2lDO0lBQ3JGSixPQUFPRyxRQUFRLEdBQUd3RCxtQkFBbUIsUUFBUUEsbUJBQW1CLEtBQUssSUFBSSxLQUFLLElBQUlBLGVBQWUxRSxJQUFJO0lBQ3JHZSxPQUFPSyxTQUFTLENBQUN1RCxPQUFPLENBQUM7UUFBRTNFLE1BQU1uQiwrQ0FBUUEsQ0FBQytGLFVBQVU7UUFBRWpCLE9BQU87SUFBRTtJQUMvRCxPQUFPNUM7QUFDWDtBQUNBOzs7OztDQUtDLEdBQ00sU0FBUzhELGlCQUFpQmpGLElBQUksRUFBRUksSUFBSSxFQUFFSCxvQkFBb0I7SUFDN0QsSUFBSTtRQUNBLElBQUk7WUFBQztZQUFVO1lBQWM7WUFBWTtTQUFRLENBQUNpRixJQUFJLENBQUNDLENBQUFBLFFBQVMsQ0FBRUEsQ0FBQUEsU0FBU25GLElBQUcsSUFBSztZQUMvRSxNQUFNLElBQUlYLE1BQU07UUFDcEI7UUFDQSxJQUFJZSxTQUFTbUIsV0FBVztZQUNwQix5RkFBeUY7WUFDekZ2QixLQUFLSSxJQUFJLEdBQUdBO1FBQ2hCO1FBQ0EsT0FBT0wsZ0JBQWdCQyxNQUFNQztJQUNqQyxFQUNBLE9BQU9tRixHQUFHO1FBQ04sd0hBQXdIO1FBQ3hILE1BQU0sSUFBSS9GLE1BQU0sQ0FBQywrQkFBK0IsRUFBRStGLEVBQUVDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pFO0FBQ0o7QUFDQTs7OztDQUlDLEdBQ00sU0FBU0MsVUFBVUMsS0FBSztJQUMzQixJQUFJckIsSUFBSXFCO0lBQ1IsSUFBSSxPQUFPckIsTUFBTSxVQUFVO1FBQ3ZCLE1BQU0sSUFBSTdFLE1BQU0sQ0FBQyxrREFBa0QsRUFBRSxPQUFPNkUsRUFBRSxDQUFDO0lBQ25GO0lBQ0EsSUFBSUEsRUFBRWxELE1BQU0sR0FBRyxHQUNYa0QsSUFBSSxDQUFDLENBQUMsRUFBRUEsRUFBRSxDQUFDO0lBQ2YsT0FBT0E7QUFDWDtBQUNBOzs7O0NBSUMsR0FDTSxNQUFNc0Isa0JBQWtCLFNBQVU3RixDQUFDO0lBQ3RDLE1BQU04RixNQUFNL0YsU0FBU0M7SUFDckIsT0FBT2Qsc0RBQVVBLENBQUMsQ0FBQyxFQUFFLEVBQUV5RyxVQUFVRyxJQUFJbkcsS0FBSyxDQUFDLElBQUksQ0FBQztBQUNwRCxFQUFFO0FBQ0Y7Ozs7O0NBS0MsR0FDTSxNQUFNb0csZUFBZSxTQUFVQyxDQUFDO0lBQ25DLElBQUl6RjtJQUNKLDJDQUEyQztJQUMzQyxJQUFJeUYsTUFBTSxRQUFRQSxNQUFNcEUsV0FBVztRQUMvQixPQUFPLElBQUlxRTtJQUNmO0lBQ0EsSUFBSUQsYUFBYUMsWUFBWTtRQUN6QixPQUFPRDtJQUNYO0lBQ0EsSUFBSSxDQUFDLENBQUN6RixLQUFLeUYsTUFBTSxRQUFRQSxNQUFNLEtBQUssSUFBSSxLQUFLLElBQUlBLEVBQUVFLFdBQVcsTUFBTSxRQUFRM0YsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRSxJQUFJLE1BQU0sY0FBYztRQUM1SCxPQUFPd0YsV0FBV0UsSUFBSSxDQUFDSDtJQUMzQjtJQUNBLElBQUlJLE1BQU1DLE9BQU8sQ0FBQ0wsSUFBSTtRQUNsQixPQUFPQyxXQUFXRSxJQUFJLENBQUNIO0lBQzNCO0lBQ0EsSUFBSSxPQUFPQSxNQUFNLFVBQVU7UUFDdkIsSUFBSSxDQUFDaEgsMkRBQVdBLENBQUNnSCxJQUFJO1lBQ2pCLE1BQU0sSUFBSXRHLE1BQU0sQ0FBQyxzR0FBc0csRUFBRXNHLEVBQUUsQ0FBQztRQUNoSTtRQUNBLE9BQU85RyxzREFBVUEsQ0FBQ3lHLFVBQVVuRyxlQUFld0c7SUFDL0M7SUFDQSxJQUFJLE9BQU9BLE1BQU0sVUFBVTtRQUN2QixPQUFPRCxhQUFhM0csdURBQVdBLENBQUM0RztJQUNwQztJQUNBLElBQUksT0FBT0EsTUFBTSxVQUFVO1FBQ3ZCLElBQUlBLElBQUlNLE9BQU8sSUFBSTtZQUNmLE1BQU0sSUFBSTVHLE1BQU0sQ0FBQyxxREFBcUQsRUFBRXNHLEVBQUUsQ0FBQztRQUMvRTtRQUNBLElBQUlPLElBQUlQLEVBQUU3RixRQUFRLENBQUM7UUFDbkIsSUFBSW9HLEVBQUVsRixNQUFNLEdBQUcsR0FDWGtGLElBQUksQ0FBQyxDQUFDLEVBQUVBLEVBQUUsQ0FBQztRQUNmLE9BQU9SLGFBQWEsQ0FBQyxFQUFFLEVBQUVRLEVBQUUsQ0FBQztJQUNoQztJQUNBLElBQUlQLEVBQUVRLE9BQU8sRUFBRTtRQUNYLGdDQUFnQztRQUNoQyxPQUFPUCxXQUFXRSxJQUFJLENBQUNILEVBQUVRLE9BQU87SUFDcEM7SUFDQSxNQUFNLElBQUk5RyxNQUFNO0FBQ3BCLEVBQUU7QUFDRjs7Q0FFQyxHQUNNLFNBQVMrRyxtQkFBbUJDLEdBQUc7SUFDbEMsTUFBTVosTUFBTTdHLHNEQUFVQSxDQUFDeUg7SUFDdkIsSUFBSVosUUFBUSxNQUFNO1FBQ2QsT0FBT1EsT0FBTztJQUNsQjtJQUNBLE9BQU9BLE9BQU9SO0FBQ2xCO0FBQ0E7O0NBRUMsR0FDTSxTQUFTYSxtQkFBbUJDLEdBQUc7SUFDbEMsT0FBT2IsYUFBYSxDQUFDLEVBQUUsRUFBRWEsSUFBSXpHLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDL0M7QUFDQTs7O0NBR0MsR0FDTSxNQUFNMEcsUUFBUSxTQUFVQyxLQUFLO0lBQ2hDLE9BQU8sSUFBSWIsV0FBV2EsT0FBT0MsSUFBSSxDQUFDO0FBQ3RDLEVBQUU7QUFDRjs7Ozs7OztDQU9DLEdBQ0QsTUFBTUMsWUFBWSxTQUFVQyxHQUFHLEVBQUU1RixNQUFNLEVBQUU2RixLQUFLO0lBQzFDLE1BQU1SLE1BQU1HLE1BQU14RjtJQUNsQixJQUFJNkYsT0FBTztRQUNQLElBQUlELElBQUk1RixNQUFNLEdBQUdBLFFBQVE7WUFDckJxRixJQUFJUyxHQUFHLENBQUNGO1lBQ1IsT0FBT1A7UUFDWDtRQUNBLE9BQU9PLElBQUlHLFFBQVEsQ0FBQyxHQUFHL0Y7SUFDM0I7SUFDQSxJQUFJNEYsSUFBSTVGLE1BQU0sR0FBR0EsUUFBUTtRQUNyQnFGLElBQUlTLEdBQUcsQ0FBQ0YsS0FBSzVGLFNBQVM0RixJQUFJNUYsTUFBTTtRQUNoQyxPQUFPcUY7SUFDWDtJQUNBLE9BQU9PLElBQUlHLFFBQVEsQ0FBQyxDQUFDL0Y7QUFDekI7QUFDQTs7O0NBR0MsR0FDTSxTQUFTZ0csbUJBQW1CQyxLQUFLO0lBQ3BDLElBQUksQ0FBQ25JLHdEQUFZQSxDQUFDbUksUUFBUTtRQUN0Qiw0RUFBNEU7UUFDNUUsTUFBTUwsTUFBTSxDQUFDLG9EQUFvRCxFQUFFSyxNQUFNLENBQUM7UUFDMUUsTUFBTSxJQUFJNUgsTUFBTXVIO0lBQ3BCO0FBQ0o7QUFDQTs7Ozs7O0NBTUMsR0FDTSxNQUFNTSxnQkFBZ0IsU0FBVU4sR0FBRyxFQUFFNUYsTUFBTTtJQUM5Q2dHLG1CQUFtQko7SUFDbkIsT0FBT0QsVUFBVUMsS0FBSzVGLFFBQVE7QUFDbEMsRUFBRTtBQUNGOzs7O0NBSUMsR0FDTSxTQUFTbUcsV0FBV2pELENBQUM7SUFDeEIsK0dBQStHO0lBQy9HLElBQUlrRCxRQUFRbEQsQ0FBQyxDQUFDLEVBQUU7SUFDaEIseUdBQXlHO0lBQ3pHLE1BQU9BLEVBQUVsRCxNQUFNLEdBQUcsS0FBS29HLE1BQU10SCxRQUFRLE9BQU8sSUFBSztRQUM3QywyTEFBMkw7UUFDM0xvRSxJQUFJQSxFQUFFNUUsS0FBSyxDQUFDO1FBQ1oscUlBQXFJO1FBQ3JJOEgsUUFBUWxELENBQUMsQ0FBQyxFQUFFO0lBQ2hCO0lBQ0EsK0RBQStEO0lBQy9ELE9BQU9BO0FBQ1g7QUFDQTs7OztDQUlDLEdBQ00sTUFBTW1ELGtCQUFrQixTQUFVbkQsQ0FBQztJQUN0QzhDLG1CQUFtQjlDO0lBQ25CLE9BQU9pRCxXQUFXakQ7QUFDdEIsRUFBRTtBQUNGOztDQUVDLEdBQ00sTUFBTW9ELGNBQWMsQ0FBQ2YsTUFBUSxDQUFDLEVBQUUsRUFBRUEsSUFBSXpHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1RDs7OztDQUlDLEdBQ00sU0FBU3lILDJCQUEyQmhDLEtBQUs7SUFDNUMsT0FBTzhCLGdCQUFnQmYsbUJBQW1CZjtBQUM5QztBQUNBLFNBQVNpQyxxQkFBcUI3QixDQUFDLEVBQUU3RSxPQUFPO0lBQ3BDLElBQUk2RSxNQUFNTSxPQUFPLE1BQU1OLE1BQU1NLE9BQU8sSUFDaEMsT0FBT047SUFDWCxJQUFJN0UsWUFBWVMsV0FBVztRQUN2QixPQUFPb0UsSUFBSU0sT0FBTztJQUN0QjtJQUNBLE9BQU9OLElBQUs3RSxDQUFBQSxVQUFVbUYsT0FBTyxLQUFLQSxPQUFPLEdBQUU7QUFDL0M7QUFDQSxTQUFTd0IsbUJBQW1CQyxRQUFRO0lBQ2hDLE9BQU9BLGFBQWF6QixPQUFPLE1BQU15QixhQUFhekIsT0FBTztBQUN6RDtBQUNBOzs7O0NBSUMsR0FDTSxNQUFNMEIsWUFBWSxTQUFVQyxPQUFPLEVBQUVqQyxDQUFDLEVBQUVrQyxDQUFDLEVBQUVDLENBQUMsRUFBRWhILE9BQU87SUFDeEQsTUFBTTRHLFdBQVdGLHFCQUFxQjdCLEdBQUc3RTtJQUN6QyxJQUFJLENBQUMyRyxtQkFBbUJDLFdBQVc7UUFDL0IsTUFBTSxJQUFJckksTUFBTTtJQUNwQjtJQUNBLE1BQU0wSSxlQUFlLElBQUkvSSx1REFBU0EsQ0FBQ2dKLFNBQVMsQ0FBQzVCLG1CQUFtQnlCLElBQUl6QixtQkFBbUIwQixJQUNsRkcsY0FBYyxDQUFDckksT0FBTzhILFdBQ3RCUSxnQkFBZ0IsQ0FBQ04sU0FDakJPLFVBQVUsQ0FBQztJQUNoQixPQUFPSixhQUFhekksS0FBSyxDQUFDO0FBQzlCLEVBQUU7QUFDSyxTQUFTOEksT0FBT25CLEtBQUssRUFBRW9CLFVBQVU7SUFDcEMsMkNBQTJDO0lBQzNDLElBQUlwQixVQUFVLE1BQU07UUFDaEIsMkNBQTJDO1FBQzNDLE9BQU87SUFDWDtJQUNBLElBQUlBLFVBQVUxRixXQUFXO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQSxJQUFJLE9BQU8wRixVQUFVLFlBQVksQ0FBQ3RJLDJEQUFXQSxDQUFDc0ksUUFBUTtRQUNsRCxNQUFNLElBQUk1SCxNQUFNLENBQUMsbURBQW1ELEVBQUU0SCxNQUFNLENBQUM7SUFDakYsT0FDSyxJQUFJLE9BQU9BLFVBQVUsWUFBWSxDQUFDckgsT0FBT0MsYUFBYSxDQUFDb0gsUUFBUTtRQUNoRSxNQUFNLElBQUk1SCxNQUFNO0lBQ3BCO0lBQ0EsTUFBTWlKLFNBQVM1QyxhQUFhdUI7SUFDNUIsT0FBUW9CO1FBQ0osS0FBS25KLGlEQUFVQSxDQUFDMEcsVUFBVTtZQUN0QixPQUFPMEM7UUFDWCxLQUFLcEosaURBQVVBLENBQUMrRyxNQUFNO1lBQ2xCLE9BQU9HLG1CQUFtQmtDO1FBQzlCLEtBQUtwSixpREFBVUEsQ0FBQ1UsTUFBTTtZQUFFO2dCQUNwQixNQUFNMkksU0FBU25DLG1CQUFtQmtDO2dCQUNsQyxJQUFJQyxTQUFTdEMsT0FBT3JHLE9BQU80SSxnQkFBZ0IsR0FBRztvQkFDMUMsTUFBTSxJQUFJbkosTUFBTTtnQkFDcEI7Z0JBQ0EsT0FBT08sT0FBTzJJO1lBQ2xCO1FBQ0EsS0FBS3JKLGlEQUFVQSxDQUFDdUosaUJBQWlCO1lBQzdCLE9BQU83SixzREFBVUEsQ0FBQzBKO1FBQ3RCO1lBQ0ksTUFBTSxJQUFJakosTUFBTTtJQUN4QjtBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vY29tbW9uL3V0aWxzLmpzP2Q3NDQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG5pbXBvcnQgeyBpc0hleFByZWZpeGVkLCBpc0hleFN0cmluZyB9IGZyb20gJ3dlYjMtdmFsaWRhdG9yJztcbmltcG9ydCB7IGJ5dGVzVG9IZXgsIGhleFRvQnl0ZXMsIGlzVWludDhBcnJheSwgbnVtYmVyVG9IZXggfSBmcm9tICd3ZWIzLXV0aWxzJztcbmltcG9ydCB7IHNlY3AyNTZrMSB9IGZyb20gJy4uL3R4L2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBIYXJkZm9yayB9IGZyb20gJy4vZW51bXMuanMnO1xuaW1wb3J0IHsgVHlwZU91dHB1dCB9IGZyb20gJy4vdHlwZXMuanMnO1xuLyoqXG4gKiBSZW1vdmVzICcweCcgZnJvbSBhIGdpdmVuIGBTdHJpbmdgIGlmIHByZXNlbnRcbiAqIEBwYXJhbSBzdHIgdGhlIHN0cmluZyB2YWx1ZVxuICogQHJldHVybnMgdGhlIHN0cmluZyB3aXRob3V0IDB4IHByZWZpeFxuICovXG5leHBvcnQgY29uc3Qgc3RyaXBIZXhQcmVmaXggPSAoc3RyKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFtzdHJpcEhleFByZWZpeF0gaW5wdXQgbXVzdCBiZSB0eXBlICdzdHJpbmcnLCByZWNlaXZlZCAke3R5cGVvZiBzdHJ9YCk7XG4gICAgcmV0dXJuIGlzSGV4UHJlZml4ZWQoc3RyKSA/IHN0ci5zbGljZSgyKSA6IHN0cjtcbn07XG4vKipcbiAqIFRyYW5zZm9ybXMgR2V0aCBmb3JtYXR0ZWQgbm9uY2UgKGkuZS4gaGV4IHN0cmluZykgdG8gOCBieXRlIDB4LXByZWZpeGVkIHN0cmluZyB1c2VkIGludGVybmFsbHlcbiAqIEBwYXJhbSBub25jZSBzdHJpbmcgcGFyc2VkIGZyb20gdGhlIEdldGggZ2VuZXNpcyBmaWxlXG4gKiBAcmV0dXJucyBub25jZSBhcyBhIDB4LXByZWZpeGVkIDggYnl0ZSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZm9ybWF0Tm9uY2Uobm9uY2UpIHtcbiAgICBpZiAoIW5vbmNlIHx8IG5vbmNlID09PSAnMHgwJykge1xuICAgICAgICByZXR1cm4gJzB4MDAwMDAwMDAwMDAwMDAwMCc7XG4gICAgfVxuICAgIGlmIChpc0hleFByZWZpeGVkKG5vbmNlKSkge1xuICAgICAgICByZXR1cm4gYDB4JHtzdHJpcEhleFByZWZpeChub25jZSkucGFkU3RhcnQoMTYsICcwJyl9YDtcbiAgICB9XG4gICAgcmV0dXJuIGAweCR7bm9uY2UucGFkU3RhcnQoMTYsICcwJyl9YDtcbn1cbi8qKlxuICogQ29udmVydHMgYSBgTnVtYmVyYCBpbnRvIGEgaGV4IGBTdHJpbmdgXG4gKiBAcGFyYW0ge051bWJlcn0gaVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5jb25zdCBpbnRUb0hleCA9IGZ1bmN0aW9uIChpKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihpKSB8fCBpIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlY2VpdmVkIGFuIGludmFsaWQgaW50ZWdlciB0eXBlOiAke2l9YCk7XG4gICAgfVxuICAgIHJldHVybiBgMHgke2kudG9TdHJpbmcoMTYpfWA7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBHZXRoIGdlbmVzaXMgcGFyYW1ldGVycyB0byBhbiBFdGhlcmV1bUpTIGNvbXBhdGlibGUgYENvbW1vbk9wdHNgIG9iamVjdFxuICogQHBhcmFtIGpzb24gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgR2V0aCBnZW5lc2lzIGZpbGVcbiAqIEBwYXJhbSBvcHRpb25hbCBtZXJnZUZvcmtJZFBvc3RNZXJnZSB3aGljaCBjbGFyaWZpZXMgdGhlIHBsYWNlbWVudCBvZiBNZXJnZUZvcmtJZFRyYW5zaXRpb25cbiAqIGhhcmRmb3JrLCB3aGljaCBieSBkZWZhdWx0IGlzIHBvc3QgbWVyZ2UgYXMgd2l0aCB0aGUgbWVyZ2VkIGV0aCBuZXR3b3JrcyBidXQgY291bGQgYWxzbyBjb21lXG4gKiBiZWZvcmUgbWVyZ2UgbGlrZSBpbiBraWxuIGdlbmVzaXNcbiAqIEByZXR1cm5zIGdlbmVzaXMgcGFyYW1ldGVycyBpbiBhIGBDb21tb25PcHRzYCBjb21wbGlhbnQgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHBhcnNlR2V0aFBhcmFtcyhqc29uLCBtZXJnZUZvcmtJZFBvc3RNZXJnZSA9IHRydWUpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICBjb25zdCB7IG5hbWUsIGNvbmZpZywgZGlmZmljdWx0eSwgbWl4SGFzaCwgZ2FzTGltaXQsIGNvaW5iYXNlLCBiYXNlRmVlUGVyR2FzLCB9ID0ganNvbjtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgbGV0IHsgZXh0cmFEYXRhLCB0aW1lc3RhbXAsIG5vbmNlIH0gPSBqc29uO1xuICAgIGNvbnN0IGdlbmVzaXNUaW1lc3RhbXAgPSBOdW1iZXIodGltZXN0YW1wKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgY29uc3QgeyBjaGFpbklkIH0gPSBjb25maWc7XG4gICAgLy8gZ2V0aCBpcyBub3Qgc3RyaWN0bHkgcHV0dGluZyBlbXB0eSBmaWVsZHMgd2l0aCBhIDB4IHByZWZpeFxuICAgIGlmIChleHRyYURhdGEgPT09ICcnKSB7XG4gICAgICAgIGV4dHJhRGF0YSA9ICcweCc7XG4gICAgfVxuICAgIC8vIGdldGggbWF5IHVzZSBudW1iZXIgZm9yIHRpbWVzdGFtcFxuICAgIGlmICghaXNIZXhQcmVmaXhlZCh0aW1lc3RhbXApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByYWRpeFxuICAgICAgICB0aW1lc3RhbXAgPSBpbnRUb0hleChwYXJzZUludCh0aW1lc3RhbXApKTtcbiAgICB9XG4gICAgLy8gZ2V0aCBtYXkgbm90IGdpdmUgdXMgYSBub25jZSBzdHJpY3RseSBmb3JtYXR0ZWQgdG8gYW4gOCBieXRlIGhleCBzdHJpbmdcbiAgICBpZiAobm9uY2UubGVuZ3RoICE9PSAxOCkge1xuICAgICAgICBub25jZSA9IGZvcm1hdE5vbmNlKG5vbmNlKTtcbiAgICB9XG4gICAgLy8gRUlQMTU1IGFuZCBFSVAxNTggYXJlIGJvdGggcGFydCBvZiBTcHVyaW91cyBEcmFnb24gaGFyZGZvcmsgYW5kIG11c3Qgb2NjdXIgYXQgdGhlIHNhbWUgdGltZVxuICAgIC8vIGJ1dCBoYXZlIGRpZmZlcmVudCBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgaW4gZ2V0aCBnZW5lc2lzIHBhcmFtZXRlcnNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgaWYgKGNvbmZpZy5laXAxNTVCbG9jayAhPT0gY29uZmlnLmVpcDE1OEJsb2NrKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRUlQMTU1IGJsb2NrIG51bWJlciBtdXN0IGVxdWFsIEVJUCAxNTggYmxvY2sgbnVtYmVyIHNpbmNlIGJvdGggYXJlIHBhcnQgb2YgU3B1cmlvdXNEcmFnb24gaGFyZGZvcmsgYW5kIHRoZSBjbGllbnQgb25seSBzdXBwb3J0cyBhY3RpdmF0aW5nIHRoZSBmdWxsIGhhcmRmb3JrJyk7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgbmV0d29ya0lkOiBjaGFpbklkLFxuICAgICAgICBnZW5lc2lzOiB7XG4gICAgICAgICAgICB0aW1lc3RhbXAsXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmFkaXhcbiAgICAgICAgICAgIGdhc0xpbWl0OiBwYXJzZUludChnYXNMaW1pdCksXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmFkaXhcbiAgICAgICAgICAgIGRpZmZpY3VsdHk6IHBhcnNlSW50KGRpZmZpY3VsdHkpLFxuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBleHRyYURhdGEsXG4gICAgICAgICAgICBtaXhIYXNoLFxuICAgICAgICAgICAgY29pbmJhc2UsXG4gICAgICAgICAgICBiYXNlRmVlUGVyR2FzLFxuICAgICAgICB9LFxuICAgICAgICBoYXJkZm9yazogdW5kZWZpbmVkLFxuICAgICAgICBoYXJkZm9ya3M6IFtdLFxuICAgICAgICBib290c3RyYXBOb2RlczogW10sXG4gICAgICAgIGNvbnNlbnN1czogXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgY29uZmlnLmNsaXF1ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncG9hJyxcbiAgICAgICAgICAgICAgICBhbGdvcml0aG06ICdjbGlxdWUnLFxuICAgICAgICAgICAgICAgIGNsaXF1ZToge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmVjZW50IGdldGggZ2VuZXNpcyBzZWVtcyB0byBiZSB1c2luZyBibG9ja3BlcmlvZHNlY29uZHNcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGVwb2NobGVuZ3RoIGZvciBjbGlxdWUgc3BlY2lmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAvLyBzZWU6IGh0dHBzOi8vaGFja21kLmlvL1BxWmdNcG5rU1dDV3Y1am9Kb0Z5bVFcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgICAgICAgICAgICAgICAgIHBlcmlvZDogKF9hID0gY29uZmlnLmNsaXF1ZS5wZXJpb2QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGNvbmZpZy5jbGlxdWUuYmxvY2twZXJpb2RzZWNvbmRzLFxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCAgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgICAgICAgICAgICAgICAgIGVwb2NoOiAoX2IgPSBjb25maWcuY2xpcXVlLmVwb2NoKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBjb25maWcuY2xpcXVlLmVwb2NobGVuZ3RoLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncG93JyxcbiAgICAgICAgICAgICAgICBhbGdvcml0aG06ICdldGhhc2gnLFxuICAgICAgICAgICAgICAgIGV0aGFzaDoge30sXG4gICAgICAgICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgZm9ya01hcCA9IHtcbiAgICAgICAgW0hhcmRmb3JrLkhvbWVzdGVhZF06IHsgbmFtZTogJ2hvbWVzdGVhZEJsb2NrJyB9LFxuICAgICAgICBbSGFyZGZvcmsuRGFvXTogeyBuYW1lOiAnZGFvRm9ya0Jsb2NrJyB9LFxuICAgICAgICBbSGFyZGZvcmsuVGFuZ2VyaW5lV2hpc3RsZV06IHsgbmFtZTogJ2VpcDE1MEJsb2NrJyB9LFxuICAgICAgICBbSGFyZGZvcmsuU3B1cmlvdXNEcmFnb25dOiB7IG5hbWU6ICdlaXAxNTVCbG9jaycgfSxcbiAgICAgICAgW0hhcmRmb3JrLkJ5emFudGl1bV06IHsgbmFtZTogJ2J5emFudGl1bUJsb2NrJyB9LFxuICAgICAgICBbSGFyZGZvcmsuQ29uc3RhbnRpbm9wbGVdOiB7IG5hbWU6ICdjb25zdGFudGlub3BsZUJsb2NrJyB9LFxuICAgICAgICBbSGFyZGZvcmsuUGV0ZXJzYnVyZ106IHsgbmFtZTogJ3BldGVyc2J1cmdCbG9jaycgfSxcbiAgICAgICAgW0hhcmRmb3JrLklzdGFuYnVsXTogeyBuYW1lOiAnaXN0YW5idWxCbG9jaycgfSxcbiAgICAgICAgW0hhcmRmb3JrLk11aXJHbGFjaWVyXTogeyBuYW1lOiAnbXVpckdsYWNpZXJCbG9jaycgfSxcbiAgICAgICAgW0hhcmRmb3JrLkJlcmxpbl06IHsgbmFtZTogJ2JlcmxpbkJsb2NrJyB9LFxuICAgICAgICBbSGFyZGZvcmsuTG9uZG9uXTogeyBuYW1lOiAnbG9uZG9uQmxvY2snIH0sXG4gICAgICAgIFtIYXJkZm9yay5NZXJnZUZvcmtJZFRyYW5zaXRpb25dOiB7XG4gICAgICAgICAgICBuYW1lOiAnbWVyZ2VGb3JrQmxvY2snLFxuICAgICAgICAgICAgcG9zdE1lcmdlOiBtZXJnZUZvcmtJZFBvc3RNZXJnZSxcbiAgICAgICAgfSxcbiAgICAgICAgW0hhcmRmb3JrLlNoYW5naGFpXTogeyBuYW1lOiAnc2hhbmdoYWlUaW1lJywgcG9zdE1lcmdlOiB0cnVlLCBpc1RpbWVzdGFtcDogdHJ1ZSB9LFxuICAgICAgICBbSGFyZGZvcmsuU2hhcmRpbmdGb3JrRGV2XToge1xuICAgICAgICAgICAgbmFtZTogJ3NoYXJkaW5nRm9ya1RpbWUnLFxuICAgICAgICAgICAgcG9zdE1lcmdlOiB0cnVlLFxuICAgICAgICAgICAgaXNUaW1lc3RhbXA6IHRydWUsXG4gICAgICAgIH0sXG4gICAgfTtcbiAgICAvLyBmb3JrTWFwUmV2IGlzIHRoZSBtYXAgZnJvbSBjb25maWcgZmllbGQgbmFtZSB0byBIYXJkZm9ya1xuICAgIGNvbnN0IGZvcmtNYXBSZXYgPSBPYmplY3Qua2V5cyhmb3JrTWFwKS5yZWR1Y2UoKGFjYywgZWxlbSkgPT4ge1xuICAgICAgICBhY2NbZm9ya01hcFtlbGVtXS5uYW1lXSA9IGVsZW07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgY29uc3QgY29uZmlnSGFyZGZvcmtOYW1lcyA9IE9iamVjdC5rZXlzKGNvbmZpZykuZmlsdGVyKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1udWxsL25vLW51bGwsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgIGtleSA9PiBmb3JrTWFwUmV2W2tleV0gIT09IHVuZGVmaW5lZCAmJiBjb25maWdba2V5XSAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZ1trZXldICE9PSBudWxsKTtcbiAgICBwYXJhbXMuaGFyZGZvcmtzID0gY29uZmlnSGFyZGZvcmtOYW1lc1xuICAgICAgICAubWFwKG5hbWVCbG9jayA9PiAoe1xuICAgICAgICBuYW1lOiBmb3JrTWFwUmV2W25hbWVCbG9ja10sXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICAgICAgYmxvY2s6IFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIGZvcmtNYXBbZm9ya01hcFJldltuYW1lQmxvY2tdXS5pc1RpbWVzdGFtcCA9PT0gdHJ1ZSB8fFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgdHlwZW9mIGNvbmZpZ1tuYW1lQmxvY2tdICE9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbnVsbC9uby1udWxsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgOiAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgICAgICAgICAgY29uZmlnW25hbWVCbG9ja10sXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICAgICAgdGltZXN0YW1wOiBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICBmb3JrTWFwW2ZvcmtNYXBSZXZbbmFtZUJsb2NrXV0uaXNUaW1lc3RhbXAgPT09IHRydWUgJiZcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgICAgIHR5cGVvZiBjb25maWdbbmFtZUJsb2NrXSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICAgICAgICAgIGNvbmZpZ1tuYW1lQmxvY2tdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICB9KSlcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW51bGwvbm8tbnVsbFxuICAgICAgICAuZmlsdGVyKGZvcmsgPT4gZm9yay5ibG9jayAhPT0gbnVsbCB8fCBmb3JrLnRpbWVzdGFtcCAhPT0gdW5kZWZpbmVkKTtcbiAgICBwYXJhbXMuaGFyZGZvcmtzLnNvcnQoKGEsIGIpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuICgoX2EgPSBhLmJsb2NrKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBJbmZpbml0eSkgLSAoKF9iID0gYi5ibG9jaykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogSW5maW5pdHkpOyB9KTtcbiAgICBwYXJhbXMuaGFyZGZvcmtzLnNvcnQoKGEsIGIpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuICgoX2EgPSBhLnRpbWVzdGFtcCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZ2VuZXNpc1RpbWVzdGFtcCkgLSAoKF9iID0gYi50aW1lc3RhbXApICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGdlbmVzaXNUaW1lc3RhbXApOyB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgaWYgKGNvbmZpZy50ZXJtaW5hbFRvdGFsRGlmZmljdWx0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIEZvbGxvd2luZyBwb2ludHMgbmVlZCB0byBiZSBjb25zaWRlcmVkIGZvciBwbGFjZW1lbnQgb2YgbWVyZ2UgaGZcbiAgICAgICAgLy8gLSBNZXJnZSBoYXJkZm9yayBjYW4ndCBiZSBwbGFjZWQgYXQgZ2VuZXNpc1xuICAgICAgICAvLyAtIFBsYWNlIG1lcmdlIGhmIGJlZm9yZSBhbnkgaGFyZGZvcmtzIHRoYXQgcmVxdWlyZSBDTCBwYXJ0aWNpcGF0aW9uIGZvciBlLmcuIHdpdGhkcmF3YWxzXG4gICAgICAgIC8vIC0gTWVyZ2UgaGFyZGZvcmsgaGFzIHRvIGJlIHBsYWNlZCBqdXN0IGFmdGVyIGdlbmVzaXMgaWYgYW55IG9mIHRoZSBnZW5lc2lzIGhhcmRmb3JrcyBtYWtlIENMXG4gICAgICAgIC8vICAgbmVjZXNzYXJ5IGZvciBlLmcuIHdpdGhkcmF3YWxzXG4gICAgICAgIGNvbnN0IG1lcmdlQ29uZmlnID0ge1xuICAgICAgICAgICAgbmFtZTogSGFyZGZvcmsuTWVyZ2UsXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICAgICAgICAgIHR0ZDogY29uZmlnLnRlcm1pbmFsVG90YWxEaWZmaWN1bHR5LFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW51bGwvbm8tbnVsbFxuICAgICAgICAgICAgYmxvY2s6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIC8vIE1lcmdlIGhhcmRmb3JrIGhhcyB0byBiZSBwbGFjZWQgYmVmb3JlIGZpcnN0IGhhcmRmb3JrIHRoYXQgaXMgZGVwZW5kZW50IG9uIG1lcmdlXG4gICAgICAgIGNvbnN0IHBvc3RNZXJnZUluZGV4ID0gcGFyYW1zLmhhcmRmb3Jrcy5maW5kSW5kZXgoXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgICAgICAgKGhmKSA9PiB7IHZhciBfYTsgcmV0dXJuICgoX2EgPSBmb3JrTWFwW2hmLm5hbWVdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucG9zdE1lcmdlKSA9PT0gdHJ1ZTsgfSk7XG4gICAgICAgIGlmIChwb3N0TWVyZ2VJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHBhcmFtcy5oYXJkZm9ya3Muc3BsaWNlKHBvc3RNZXJnZUluZGV4LCAwLCBtZXJnZUNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJhbXMuaGFyZGZvcmtzLnB1c2gobWVyZ2VDb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGxhdGVzdEhhcmRmb3JrID0gcGFyYW1zLmhhcmRmb3Jrcy5sZW5ndGggPiAwID8gcGFyYW1zLmhhcmRmb3Jrcy5zbGljZSgtMSlbMF0gOiB1bmRlZmluZWQ7XG4gICAgcGFyYW1zLmhhcmRmb3JrID0gbGF0ZXN0SGFyZGZvcmsgPT09IG51bGwgfHwgbGF0ZXN0SGFyZGZvcmsgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxhdGVzdEhhcmRmb3JrLm5hbWU7XG4gICAgcGFyYW1zLmhhcmRmb3Jrcy51bnNoaWZ0KHsgbmFtZTogSGFyZGZvcmsuQ2hhaW5zdGFydCwgYmxvY2s6IDAgfSk7XG4gICAgcmV0dXJuIHBhcmFtcztcbn1cbi8qKlxuICogUGFyc2VzIGEgZ2VuZXNpcy5qc29uIGV4cG9ydGVkIGZyb20gR2V0aCBpbnRvIHBhcmFtZXRlcnMgZm9yIENvbW1vbiBpbnN0YW5jZVxuICogQHBhcmFtIGpzb24gcmVwcmVzZW50aW5nIHRoZSBHZXRoIGdlbmVzaXMgZmlsZVxuICogQHBhcmFtIG5hbWUgb3B0aW9uYWwgY2hhaW4gbmFtZVxuICogQHJldHVybnMgcGFyc2VkIHBhcmFtc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VHZXRoR2VuZXNpcyhqc29uLCBuYW1lLCBtZXJnZUZvcmtJZFBvc3RNZXJnZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChbJ2NvbmZpZycsICdkaWZmaWN1bHR5JywgJ2dhc0xpbWl0JywgJ2FsbG9jJ10uc29tZShmaWVsZCA9PiAhKGZpZWxkIGluIGpzb24pKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZvcm1hdCwgZXhwZWN0ZWQgZ2V0aCBnZW5lc2lzIGZpZWxkcyBtaXNzaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzcywgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIGpzb24ubmFtZSA9IG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlR2V0aFBhcmFtcyhqc29uLCBtZXJnZUZvcmtJZFBvc3RNZXJnZSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MsIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC10ZW1wbGF0ZS1leHByZXNzaW9uc1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHBhcnNpbmcgcGFyYW1ldGVycyBmaWxlOiAke2UubWVzc2FnZX1gKTtcbiAgICB9XG59XG4vKipcbiAqIFBhZHMgYSBgU3RyaW5nYCB0byBoYXZlIGFuIGV2ZW4gbGVuZ3RoXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEByZXR1cm4gb3V0cHV0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYWRUb0V2ZW4odmFsdWUpIHtcbiAgICBsZXQgYSA9IHZhbHVlO1xuICAgIGlmICh0eXBlb2YgYSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbcGFkVG9FdmVuXSB2YWx1ZSBtdXN0IGJlIHR5cGUgJ3N0cmluZycsIHJlY2VpdmVkICR7dHlwZW9mIGF9YCk7XG4gICAgfVxuICAgIGlmIChhLmxlbmd0aCAlIDIpXG4gICAgICAgIGEgPSBgMCR7YX1gO1xuICAgIHJldHVybiBhO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBgTnVtYmVyYCB0byBhIGBVaW50OEFycmF5YFxuICogQHBhcmFtIHtOdW1iZXJ9IGlcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCBpbnRUb1VpbnQ4QXJyYXkgPSBmdW5jdGlvbiAoaSkge1xuICAgIGNvbnN0IGhleCA9IGludFRvSGV4KGkpO1xuICAgIHJldHVybiBoZXhUb0J5dGVzKGAweCR7cGFkVG9FdmVuKGhleC5zbGljZSgyKSl9YCk7XG59O1xuLyoqXG4gKiBBdHRlbXB0cyB0byB0dXJuIGEgdmFsdWUgaW50byBhIGBVaW50OEFycmF5YC5cbiAqIElucHV0cyBzdXBwb3J0ZWQ6IGBVaW50OEFycmF5YCBgU3RyaW5nYCAoaGV4LXByZWZpeGVkKSwgYE51bWJlcmAsIG51bGwvdW5kZWZpbmVkLCBgQmlnSW50YCBhbmQgb3RoZXIgb2JqZWN0c1xuICogd2l0aCBhIGB0b0FycmF5KClgIG9yIGB0b1VpbnQ4QXJyYXkoKWAgbWV0aG9kLlxuICogQHBhcmFtIHYgdGhlIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCB0b1VpbnQ4QXJyYXkgPSBmdW5jdGlvbiAodikge1xuICAgIHZhciBfYTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbnVsbC9uby1udWxsXG4gICAgaWYgKHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgpO1xuICAgIH1cbiAgICBpZiAodiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIGlmICgoKF9hID0gdiA9PT0gbnVsbCB8fCB2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2LmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSkgPT09ICdVaW50OEFycmF5Jykge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKHYpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKHYpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICghaXNIZXhTdHJpbmcodikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNvbnZlcnQgc3RyaW5nIHRvIFVpbnQ4QXJyYXkuIG9ubHkgc3VwcG9ydHMgMHgtcHJlZml4ZWQgaGV4IHN0cmluZ3MgYW5kIHRoaXMgc3RyaW5nIHdhcyBnaXZlbjogJHt2fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZXhUb0J5dGVzKHBhZFRvRXZlbihzdHJpcEhleFByZWZpeCh2KSkpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0b1VpbnQ4QXJyYXkobnVtYmVyVG9IZXgodikpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHYgPT09ICdiaWdpbnQnKSB7XG4gICAgICAgIGlmICh2IDwgQmlnSW50KDApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjb252ZXJ0IG5lZ2F0aXZlIGJpZ2ludCB0byBVaW50OEFycmF5LiBHaXZlbjogJHt2fWApO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuID0gdi50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChuLmxlbmd0aCAlIDIpXG4gICAgICAgICAgICBuID0gYDAke259YDtcbiAgICAgICAgcmV0dXJuIHRvVWludDhBcnJheShgMHgke259YCk7XG4gICAgfVxuICAgIGlmICh2LnRvQXJyYXkpIHtcbiAgICAgICAgLy8gY29udmVydHMgYSBCTiB0byBhIFVpbnQ4QXJyYXlcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbSh2LnRvQXJyYXkoKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB0eXBlJyk7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBhIHtAbGluayBVaW50OEFycmF5fSB0byBhIHtAbGluayBiaWdpbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1aW50OEFycmF5VG9CaWdJbnQoYnVmKSB7XG4gICAgY29uc3QgaGV4ID0gYnl0ZXNUb0hleChidWYpO1xuICAgIGlmIChoZXggPT09ICcweCcpIHtcbiAgICAgICAgcmV0dXJuIEJpZ0ludCgwKTtcbiAgICB9XG4gICAgcmV0dXJuIEJpZ0ludChoZXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIHtAbGluayBiaWdpbnR9IHRvIGEge0BsaW5rIFVpbnQ4QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaWdJbnRUb1VpbnQ4QXJyYXkobnVtKSB7XG4gICAgcmV0dXJuIHRvVWludDhBcnJheShgMHgke251bS50b1N0cmluZygxNil9YCk7XG59XG4vKipcbiAqIFJldHVybnMgYSBVaW50OEFycmF5IGZpbGxlZCB3aXRoIDBzLlxuICogQHBhcmFtIGJ5dGVzIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIFVpbnQ4QXJyYXkgc2hvdWxkIGJlXG4gKi9cbmV4cG9ydCBjb25zdCB6ZXJvcyA9IGZ1bmN0aW9uIChieXRlcykge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShieXRlcykuZmlsbCgwKTtcbn07XG4vKipcbiAqIFBhZHMgYSBgVWludDhBcnJheWAgd2l0aCB6ZXJvcyB0aWxsIGl0IGhhcyBgbGVuZ3RoYCBieXRlcy5cbiAqIFRydW5jYXRlcyB0aGUgYmVnaW5uaW5nIG9yIGVuZCBvZiBpbnB1dCBpZiBpdHMgbGVuZ3RoIGV4Y2VlZHMgYGxlbmd0aGAuXG4gKiBAcGFyYW0gbXNnIHRoZSB2YWx1ZSB0byBwYWQgKFVpbnQ4QXJyYXkpXG4gKiBAcGFyYW0gbGVuZ3RoIHRoZSBudW1iZXIgb2YgYnl0ZXMgdGhlIG91dHB1dCBzaG91bGQgYmVcbiAqIEBwYXJhbSByaWdodCB3aGV0aGVyIHRvIHN0YXJ0IHBhZGRpbmcgZm9ybSB0aGUgbGVmdCBvciByaWdodFxuICogQHJldHVybiAoVWludDhBcnJheSlcbiAqL1xuY29uc3Qgc2V0TGVuZ3RoID0gZnVuY3Rpb24gKG1zZywgbGVuZ3RoLCByaWdodCkge1xuICAgIGNvbnN0IGJ1ZiA9IHplcm9zKGxlbmd0aCk7XG4gICAgaWYgKHJpZ2h0KSB7XG4gICAgICAgIGlmIChtc2cubGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBidWYuc2V0KG1zZyk7XG4gICAgICAgICAgICByZXR1cm4gYnVmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtc2cuc3ViYXJyYXkoMCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgaWYgKG1zZy5sZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgICAgYnVmLnNldChtc2csIGxlbmd0aCAtIG1zZy5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gbXNnLnN1YmFycmF5KC1sZW5ndGgpO1xufTtcbi8qKlxuICogVGhyb3dzIGlmIGlucHV0IGlzIG5vdCBhIFVpbnQ4QXJyYXlcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gaW5wdXQgdmFsdWUgdG8gY2hlY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydElzVWludDhBcnJheShpbnB1dCkge1xuICAgIGlmICghaXNVaW50OEFycmF5KGlucHV0KSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXRlbXBsYXRlLWV4cHJlc3Npb25zXG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIFVpbnQ4QXJyYXkgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG4vKipcbiAqIExlZnQgUGFkcyBhIGBVaW50OEFycmF5YCB3aXRoIGxlYWRpbmcgemVyb3MgdGlsbCBpdCBoYXMgYGxlbmd0aGAgYnl0ZXMuXG4gKiBPciBpdCB0cnVuY2F0ZXMgdGhlIGJlZ2lubmluZyBpZiBpdCBleGNlZWRzLlxuICogQHBhcmFtIG1zZyB0aGUgdmFsdWUgdG8gcGFkIChVaW50OEFycmF5KVxuICogQHBhcmFtIGxlbmd0aCB0aGUgbnVtYmVyIG9mIGJ5dGVzIHRoZSBvdXRwdXQgc2hvdWxkIGJlXG4gKiBAcmV0dXJuIChVaW50OEFycmF5KVxuICovXG5leHBvcnQgY29uc3Qgc2V0TGVuZ3RoTGVmdCA9IGZ1bmN0aW9uIChtc2csIGxlbmd0aCkge1xuICAgIGFzc2VydElzVWludDhBcnJheShtc2cpO1xuICAgIHJldHVybiBzZXRMZW5ndGgobXNnLCBsZW5ndGgsIGZhbHNlKTtcbn07XG4vKipcbiAqIFRyaW1zIGxlYWRpbmcgemVyb3MgZnJvbSBhIGBVaW50OEFycmF5YCwgYFN0cmluZ2Agb3IgYE51bWJlcltdYC5cbiAqIEBwYXJhbSBhIChVaW50OEFycmF5fEFycmF5fFN0cmluZylcbiAqIEByZXR1cm4gKFVpbnQ4QXJyYXl8QXJyYXl8U3RyaW5nKVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBaZXJvcyhhKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgbGV0IGZpcnN0ID0gYVswXTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGxcbiAgICB3aGlsZSAoYS5sZW5ndGggPiAwICYmIGZpcnN0LnRvU3RyaW5nKCkgPT09ICcwJykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnQsIHByZWZlci1kZXN0cnVjdHVyaW5nLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGwsIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGEgPSBhLnNsaWNlKDEpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50LCBwcmVmZXItZGVzdHJ1Y3R1cmluZywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIGZpcnN0ID0gYVswXTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuXG4gICAgcmV0dXJuIGE7XG59XG4vKipcbiAqIFRyaW1zIGxlYWRpbmcgemVyb3MgZnJvbSBhIGBVaW50OEFycmF5YC5cbiAqIEBwYXJhbSBhIChVaW50OEFycmF5KVxuICogQHJldHVybiAoVWludDhBcnJheSlcbiAqL1xuZXhwb3J0IGNvbnN0IHVucGFkVWludDhBcnJheSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgYXNzZXJ0SXNVaW50OEFycmF5KGEpO1xuICAgIHJldHVybiBzdHJpcFplcm9zKGEpO1xufTtcbi8qKlxuICogQ29udmVydHMgYSB7QGxpbmsgYmlnaW50fSB0byBhIGAweGAgcHJlZml4ZWQgaGV4IHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgYmlnSW50VG9IZXggPSAobnVtKSA9PiBgMHgke251bS50b1N0cmluZygxNil9YDtcbi8qKlxuICogQ29udmVydCB2YWx1ZSBmcm9tIGJpZ2ludCB0byBhbiB1bnBhZGRlZCBVaW50OEFycmF5XG4gKiAodXNlZnVsIGZvciBSTFAgdHJhbnNwb3J0KVxuICogQHBhcmFtIHZhbHVlIHZhbHVlIHRvIGNvbnZlcnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpZ0ludFRvVW5wYWRkZWRVaW50OEFycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHVucGFkVWludDhBcnJheShiaWdJbnRUb1VpbnQ4QXJyYXkodmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpIHtcbiAgICBpZiAodiA9PT0gQmlnSW50KDApIHx8IHYgPT09IEJpZ0ludCgxKSlcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgaWYgKGNoYWluSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdiAtIEJpZ0ludCgyNyk7XG4gICAgfVxuICAgIHJldHVybiB2IC0gKGNoYWluSWQgKiBCaWdJbnQoMikgKyBCaWdJbnQoMzUpKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRTaWdSZWNvdmVyeShyZWNvdmVyeSkge1xuICAgIHJldHVybiByZWNvdmVyeSA9PT0gQmlnSW50KDApIHx8IHJlY292ZXJ5ID09PSBCaWdJbnQoMSk7XG59XG4vKipcbiAqIEVDRFNBIHB1YmxpYyBrZXkgcmVjb3ZlcnkgZnJvbSBzaWduYXR1cmUuXG4gKiBOT1RFOiBBY2NlcHRzIGB2ID09PSAwIHwgdiA9PT0gMWAgZm9yIEVJUDE1NTkgdHJhbnNhY3Rpb25zXG4gKiBAcmV0dXJucyBSZWNvdmVyZWQgcHVibGljIGtleVxuICovXG5leHBvcnQgY29uc3QgZWNyZWNvdmVyID0gZnVuY3Rpb24gKG1zZ0hhc2gsIHYsIHIsIHMsIGNoYWluSWQpIHtcbiAgICBjb25zdCByZWNvdmVyeSA9IGNhbGN1bGF0ZVNpZ1JlY292ZXJ5KHYsIGNoYWluSWQpO1xuICAgIGlmICghaXNWYWxpZFNpZ1JlY292ZXJ5KHJlY292ZXJ5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2lnbmF0dXJlIHYgdmFsdWUnKTtcbiAgICB9XG4gICAgY29uc3Qgc2VuZGVyUHViS2V5ID0gbmV3IHNlY3AyNTZrMS5TaWduYXR1cmUodWludDhBcnJheVRvQmlnSW50KHIpLCB1aW50OEFycmF5VG9CaWdJbnQocykpXG4gICAgICAgIC5hZGRSZWNvdmVyeUJpdChOdW1iZXIocmVjb3ZlcnkpKVxuICAgICAgICAucmVjb3ZlclB1YmxpY0tleShtc2dIYXNoKVxuICAgICAgICAudG9SYXdCeXRlcyhmYWxzZSk7XG4gICAgcmV0dXJuIHNlbmRlclB1YktleS5zbGljZSgxKTtcbn07XG5leHBvcnQgZnVuY3Rpb24gdG9UeXBlKGlucHV0LCBvdXRwdXRUeXBlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW51bGwvbm8tbnVsbFxuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbnVsbC9uby1udWxsXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyAmJiAhaXNIZXhTdHJpbmcoaW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBzdHJpbmcgbXVzdCBiZSBwcm92aWRlZCB3aXRoIGEgMHgtcHJlZml4LCBnaXZlbjogJHtpbnB1dH1gKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyAmJiAhTnVtYmVyLmlzU2FmZUludGVnZXIoaW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3ZpZGVkIG51bWJlciBpcyBncmVhdGVyIHRoYW4gTUFYX1NBRkVfSU5URUdFUiAocGxlYXNlIHVzZSBhbiBhbHRlcm5hdGl2ZSBpbnB1dCB0eXBlKScpO1xuICAgIH1cbiAgICBjb25zdCBvdXRwdXQgPSB0b1VpbnQ4QXJyYXkoaW5wdXQpO1xuICAgIHN3aXRjaCAob3V0cHV0VHlwZSkge1xuICAgICAgICBjYXNlIFR5cGVPdXRwdXQuVWludDhBcnJheTpcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5CaWdJbnQ6XG4gICAgICAgICAgICByZXR1cm4gdWludDhBcnJheVRvQmlnSW50KG91dHB1dCk7XG4gICAgICAgIGNhc2UgVHlwZU91dHB1dC5OdW1iZXI6IHtcbiAgICAgICAgICAgIGNvbnN0IGJpZ0ludCA9IHVpbnQ4QXJyYXlUb0JpZ0ludChvdXRwdXQpO1xuICAgICAgICAgICAgaWYgKGJpZ0ludCA+IEJpZ0ludChOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm92aWRlZCBudW1iZXIgaXMgZ3JlYXRlciB0aGFuIE1BWF9TQUZFX0lOVEVHRVIgKHBsZWFzZSB1c2UgYW4gYWx0ZXJuYXRpdmUgb3V0cHV0IHR5cGUpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKGJpZ0ludCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBUeXBlT3V0cHV0LlByZWZpeGVkSGV4U3RyaW5nOlxuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzVG9IZXgob3V0cHV0KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBvdXRwdXRUeXBlJyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbImlzSGV4UHJlZml4ZWQiLCJpc0hleFN0cmluZyIsImJ5dGVzVG9IZXgiLCJoZXhUb0J5dGVzIiwiaXNVaW50OEFycmF5IiwibnVtYmVyVG9IZXgiLCJzZWNwMjU2azEiLCJIYXJkZm9yayIsIlR5cGVPdXRwdXQiLCJzdHJpcEhleFByZWZpeCIsInN0ciIsIkVycm9yIiwic2xpY2UiLCJmb3JtYXROb25jZSIsIm5vbmNlIiwicGFkU3RhcnQiLCJpbnRUb0hleCIsImkiLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwidG9TdHJpbmciLCJwYXJzZUdldGhQYXJhbXMiLCJqc29uIiwibWVyZ2VGb3JrSWRQb3N0TWVyZ2UiLCJfYSIsIl9iIiwibmFtZSIsImNvbmZpZyIsImRpZmZpY3VsdHkiLCJtaXhIYXNoIiwiZ2FzTGltaXQiLCJjb2luYmFzZSIsImJhc2VGZWVQZXJHYXMiLCJleHRyYURhdGEiLCJ0aW1lc3RhbXAiLCJnZW5lc2lzVGltZXN0YW1wIiwiY2hhaW5JZCIsInBhcnNlSW50IiwibGVuZ3RoIiwiZWlwMTU1QmxvY2siLCJlaXAxNThCbG9jayIsInBhcmFtcyIsIm5ldHdvcmtJZCIsImdlbmVzaXMiLCJoYXJkZm9yayIsInVuZGVmaW5lZCIsImhhcmRmb3JrcyIsImJvb3RzdHJhcE5vZGVzIiwiY29uc2Vuc3VzIiwiY2xpcXVlIiwidHlwZSIsImFsZ29yaXRobSIsInBlcmlvZCIsImJsb2NrcGVyaW9kc2Vjb25kcyIsImVwb2NoIiwiZXBvY2hsZW5ndGgiLCJldGhhc2giLCJmb3JrTWFwIiwiSG9tZXN0ZWFkIiwiRGFvIiwiVGFuZ2VyaW5lV2hpc3RsZSIsIlNwdXJpb3VzRHJhZ29uIiwiQnl6YW50aXVtIiwiQ29uc3RhbnRpbm9wbGUiLCJQZXRlcnNidXJnIiwiSXN0YW5idWwiLCJNdWlyR2xhY2llciIsIkJlcmxpbiIsIkxvbmRvbiIsIk1lcmdlRm9ya0lkVHJhbnNpdGlvbiIsInBvc3RNZXJnZSIsIlNoYW5naGFpIiwiaXNUaW1lc3RhbXAiLCJTaGFyZGluZ0ZvcmtEZXYiLCJmb3JrTWFwUmV2IiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsImFjYyIsImVsZW0iLCJjb25maWdIYXJkZm9ya05hbWVzIiwiZmlsdGVyIiwia2V5IiwibWFwIiwibmFtZUJsb2NrIiwiYmxvY2siLCJmb3JrIiwic29ydCIsImEiLCJiIiwiSW5maW5pdHkiLCJ0ZXJtaW5hbFRvdGFsRGlmZmljdWx0eSIsIm1lcmdlQ29uZmlnIiwiTWVyZ2UiLCJ0dGQiLCJwb3N0TWVyZ2VJbmRleCIsImZpbmRJbmRleCIsImhmIiwic3BsaWNlIiwicHVzaCIsImxhdGVzdEhhcmRmb3JrIiwidW5zaGlmdCIsIkNoYWluc3RhcnQiLCJwYXJzZUdldGhHZW5lc2lzIiwic29tZSIsImZpZWxkIiwiZSIsIm1lc3NhZ2UiLCJwYWRUb0V2ZW4iLCJ2YWx1ZSIsImludFRvVWludDhBcnJheSIsImhleCIsInRvVWludDhBcnJheSIsInYiLCJVaW50OEFycmF5IiwiY29uc3RydWN0b3IiLCJmcm9tIiwiQXJyYXkiLCJpc0FycmF5IiwiQmlnSW50IiwibiIsInRvQXJyYXkiLCJ1aW50OEFycmF5VG9CaWdJbnQiLCJidWYiLCJiaWdJbnRUb1VpbnQ4QXJyYXkiLCJudW0iLCJ6ZXJvcyIsImJ5dGVzIiwiZmlsbCIsInNldExlbmd0aCIsIm1zZyIsInJpZ2h0Iiwic2V0Iiwic3ViYXJyYXkiLCJhc3NlcnRJc1VpbnQ4QXJyYXkiLCJpbnB1dCIsInNldExlbmd0aExlZnQiLCJzdHJpcFplcm9zIiwiZmlyc3QiLCJ1bnBhZFVpbnQ4QXJyYXkiLCJiaWdJbnRUb0hleCIsImJpZ0ludFRvVW5wYWRkZWRVaW50OEFycmF5IiwiY2FsY3VsYXRlU2lnUmVjb3ZlcnkiLCJpc1ZhbGlkU2lnUmVjb3ZlcnkiLCJyZWNvdmVyeSIsImVjcmVjb3ZlciIsIm1zZ0hhc2giLCJyIiwicyIsInNlbmRlclB1YktleSIsIlNpZ25hdHVyZSIsImFkZFJlY292ZXJ5Qml0IiwicmVjb3ZlclB1YmxpY0tleSIsInRvUmF3Qnl0ZXMiLCJ0b1R5cGUiLCJvdXRwdXRUeXBlIiwib3V0cHV0IiwiYmlnSW50IiwiTUFYX1NBRkVfSU5URUdFUiIsIlByZWZpeGVkSGV4U3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessListEIP2930Transaction: () => (/* reexport safe */ _tx_index_js__WEBPACK_IMPORTED_MODULE_5__.AccessListEIP2930Transaction),\n/* harmony export */   BaseTransaction: () => (/* reexport safe */ _tx_index_js__WEBPACK_IMPORTED_MODULE_5__.BaseTransaction),\n/* harmony export */   Capability: () => (/* reexport safe */ _tx_index_js__WEBPACK_IMPORTED_MODULE_5__.Capability),\n/* harmony export */   Chain: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.Chain),\n/* harmony export */   Common: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.Common),\n/* harmony export */   ConsensusAlgorithm: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.ConsensusAlgorithm),\n/* harmony export */   ConsensusType: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.ConsensusType),\n/* harmony export */   CustomChain: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.CustomChain),\n/* harmony export */   FeeMarketEIP1559Transaction: () => (/* reexport safe */ _tx_index_js__WEBPACK_IMPORTED_MODULE_5__.FeeMarketEIP1559Transaction),\n/* harmony export */   Hardfork: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.Hardfork),\n/* harmony export */   Transaction: () => (/* reexport safe */ _tx_index_js__WEBPACK_IMPORTED_MODULE_5__.Transaction),\n/* harmony export */   TransactionFactory: () => (/* reexport safe */ _tx_index_js__WEBPACK_IMPORTED_MODULE_5__.TransactionFactory),\n/* harmony export */   TypeOutput: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.TypeOutput),\n/* harmony export */   Wallet: () => (/* reexport safe */ _wallet_js__WEBPACK_IMPORTED_MODULE_0__.Wallet),\n/* harmony export */   assertIsUint8Array: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.assertIsUint8Array),\n/* harmony export */   bigIntToHex: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToHex),\n/* harmony export */   bigIntToUint8Array: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUint8Array),\n/* harmony export */   bigIntToUnpaddedUint8Array: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array),\n/* harmony export */   create: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.create),\n/* harmony export */   decrypt: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.decrypt),\n/* harmony export */   ecrecover: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.ecrecover),\n/* harmony export */   encrypt: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.encrypt),\n/* harmony export */   hashMessage: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.hashMessage),\n/* harmony export */   intToUint8Array: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.intToUint8Array),\n/* harmony export */   isAccessList: () => (/* reexport safe */ _tx_index_js__WEBPACK_IMPORTED_MODULE_5__.isAccessList),\n/* harmony export */   isAccessListUint8Array: () => (/* reexport safe */ _tx_index_js__WEBPACK_IMPORTED_MODULE_5__.isAccessListUint8Array),\n/* harmony export */   keyStoreSchema: () => (/* reexport safe */ _schemas_js__WEBPACK_IMPORTED_MODULE_3__.keyStoreSchema),\n/* harmony export */   padToEven: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.padToEven),\n/* harmony export */   parseAndValidatePrivateKey: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.parseAndValidatePrivateKey),\n/* harmony export */   parseGethGenesis: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.parseGethGenesis),\n/* harmony export */   privateKeyToAccount: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.privateKeyToAccount),\n/* harmony export */   privateKeyToAddress: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.privateKeyToAddress),\n/* harmony export */   privateKeyToPublicKey: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.privateKeyToPublicKey),\n/* harmony export */   recover: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.recover),\n/* harmony export */   recoverTransaction: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.recoverTransaction),\n/* harmony export */   setLengthLeft: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.setLengthLeft),\n/* harmony export */   sign: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.sign),\n/* harmony export */   signTransaction: () => (/* reexport safe */ _account_js__WEBPACK_IMPORTED_MODULE_1__.signTransaction),\n/* harmony export */   stripHexPrefix: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.stripHexPrefix),\n/* harmony export */   stripZeros: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.stripZeros),\n/* harmony export */   toType: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.toType),\n/* harmony export */   toUint8Array: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.toUint8Array),\n/* harmony export */   txUtils: () => (/* reexport safe */ _tx_index_js__WEBPACK_IMPORTED_MODULE_5__.txUtils),\n/* harmony export */   uint8ArrayToBigInt: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.uint8ArrayToBigInt),\n/* harmony export */   unpadUint8Array: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.unpadUint8Array),\n/* harmony export */   zeros: () => (/* reexport safe */ _common_index_js__WEBPACK_IMPORTED_MODULE_4__.zeros)\n/* harmony export */ });\n/* harmony import */ var _wallet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wallet.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/wallet.js\");\n/* harmony import */ var _account_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./account.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/account.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/types.js\");\n/* harmony import */ var _schemas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./schemas.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/schemas.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common/index.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/index.js\");\n/* harmony import */ var _tx_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tx/index.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/index.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * The web3.eth.accounts contains functions to generate Ethereum accounts and sign transactions and data.\n *\n * **_NOTE:_** This package has NOT been audited and might potentially be unsafe. Take precautions to clear memory properly, store the private keys safely, and test transaction receiving and sending functionality properly before using in production!\n *\n *\n * To use this package standalone and use its methods use:\n * ```ts\n * import { create, decrypt } from 'web3-eth-accounts'; // ....\n * ```\n *\n * To use this package within the web3 object use:\n *\n * ```ts\n * import Web3 from 'web3';\n *\n * const web3 = new Web3(Web3.givenProvider || 'ws://some.local-or-remote.node:8546');\n * // now you have access to the accounts class\n * web3.eth.accounts.create();\n * ```\n */ \n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBb0JDLEdBQzJCO0FBQ0M7QUFDRjtBQUNFO0FBQ0s7QUFDSixDQUM5QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9pbmRleC5qcz9mNmUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBUaGUgd2ViMy5ldGguYWNjb3VudHMgY29udGFpbnMgZnVuY3Rpb25zIHRvIGdlbmVyYXRlIEV0aGVyZXVtIGFjY291bnRzIGFuZCBzaWduIHRyYW5zYWN0aW9ucyBhbmQgZGF0YS5cbiAqXG4gKiAqKl9OT1RFOl8qKiBUaGlzIHBhY2thZ2UgaGFzIE5PVCBiZWVuIGF1ZGl0ZWQgYW5kIG1pZ2h0IHBvdGVudGlhbGx5IGJlIHVuc2FmZS4gVGFrZSBwcmVjYXV0aW9ucyB0byBjbGVhciBtZW1vcnkgcHJvcGVybHksIHN0b3JlIHRoZSBwcml2YXRlIGtleXMgc2FmZWx5LCBhbmQgdGVzdCB0cmFuc2FjdGlvbiByZWNlaXZpbmcgYW5kIHNlbmRpbmcgZnVuY3Rpb25hbGl0eSBwcm9wZXJseSBiZWZvcmUgdXNpbmcgaW4gcHJvZHVjdGlvbiFcbiAqXG4gKlxuICogVG8gdXNlIHRoaXMgcGFja2FnZSBzdGFuZGFsb25lIGFuZCB1c2UgaXRzIG1ldGhvZHMgdXNlOlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGNyZWF0ZSwgZGVjcnlwdCB9IGZyb20gJ3dlYjMtZXRoLWFjY291bnRzJzsgLy8gLi4uLlxuICogYGBgXG4gKlxuICogVG8gdXNlIHRoaXMgcGFja2FnZSB3aXRoaW4gdGhlIHdlYjMgb2JqZWN0IHVzZTpcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IFdlYjMgZnJvbSAnd2ViMyc7XG4gKlxuICogY29uc3Qgd2ViMyA9IG5ldyBXZWIzKFdlYjMuZ2l2ZW5Qcm92aWRlciB8fCAnd3M6Ly9zb21lLmxvY2FsLW9yLXJlbW90ZS5ub2RlOjg1NDYnKTtcbiAqIC8vIG5vdyB5b3UgaGF2ZSBhY2Nlc3MgdG8gdGhlIGFjY291bnRzIGNsYXNzXG4gKiB3ZWIzLmV0aC5hY2NvdW50cy5jcmVhdGUoKTtcbiAqIGBgYFxuICovXG5leHBvcnQgKiBmcm9tICcuL3dhbGxldC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2FjY291bnQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3NjaGVtYXMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb21tb24vaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi90eC9pbmRleC5qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/schemas.js":
/*!***********************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/schemas.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyStoreSchema: () => (/* binding */ keyStoreSchema)\n/* harmony export */ });\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ const keyStoreSchema = {\n    type: \"object\",\n    required: [\n        \"crypto\",\n        \"id\",\n        \"version\",\n        \"address\"\n    ],\n    properties: {\n        crypto: {\n            type: \"object\",\n            required: [\n                \"cipher\",\n                \"ciphertext\",\n                \"cipherparams\",\n                \"kdf\",\n                \"kdfparams\",\n                \"mac\"\n            ],\n            properties: {\n                cipher: {\n                    type: \"string\"\n                },\n                ciphertext: {\n                    type: \"string\"\n                },\n                cipherparams: {\n                    type: \"object\"\n                },\n                kdf: {\n                    type: \"string\"\n                },\n                kdfparams: {\n                    type: \"object\"\n                },\n                salt: {\n                    type: \"string\"\n                },\n                mac: {\n                    type: \"string\"\n                }\n            }\n        },\n        id: {\n            type: \"string\"\n        },\n        version: {\n            type: \"number\"\n        },\n        address: {\n            type: \"string\"\n        }\n    }\n}; //# sourceMappingURL=schemas.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS9zY2hlbWFzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsR0FDTyxNQUFNQSxpQkFBaUI7SUFDMUJDLE1BQU07SUFDTkMsVUFBVTtRQUFDO1FBQVU7UUFBTTtRQUFXO0tBQVU7SUFDaERDLFlBQVk7UUFDUkMsUUFBUTtZQUNKSCxNQUFNO1lBQ05DLFVBQVU7Z0JBQUM7Z0JBQVU7Z0JBQWM7Z0JBQWdCO2dCQUFPO2dCQUFhO2FBQU07WUFDN0VDLFlBQVk7Z0JBQ1JFLFFBQVE7b0JBQUVKLE1BQU07Z0JBQVM7Z0JBQ3pCSyxZQUFZO29CQUFFTCxNQUFNO2dCQUFTO2dCQUM3Qk0sY0FBYztvQkFBRU4sTUFBTTtnQkFBUztnQkFDL0JPLEtBQUs7b0JBQUVQLE1BQU07Z0JBQVM7Z0JBQ3RCUSxXQUFXO29CQUFFUixNQUFNO2dCQUFTO2dCQUM1QlMsTUFBTTtvQkFBRVQsTUFBTTtnQkFBUztnQkFDdkJVLEtBQUs7b0JBQUVWLE1BQU07Z0JBQVM7WUFDMUI7UUFDSjtRQUNBVyxJQUFJO1lBQUVYLE1BQU07UUFBUztRQUNyQlksU0FBUztZQUFFWixNQUFNO1FBQVM7UUFDMUJhLFNBQVM7WUFBRWIsTUFBTTtRQUFTO0lBQzlCO0FBQ0osRUFBRSxDQUNGLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL3NjaGVtYXMuanM/ZjJkYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxud2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG5pdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbnRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4oYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG53ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG5idXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbmV4cG9ydCBjb25zdCBrZXlTdG9yZVNjaGVtYSA9IHtcbiAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICByZXF1aXJlZDogWydjcnlwdG8nLCAnaWQnLCAndmVyc2lvbicsICdhZGRyZXNzJ10sXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBjcnlwdG86IHtcbiAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IFsnY2lwaGVyJywgJ2NpcGhlcnRleHQnLCAnY2lwaGVycGFyYW1zJywgJ2tkZicsICdrZGZwYXJhbXMnLCAnbWFjJ10sXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgY2lwaGVyOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgICAgICAgY2lwaGVydGV4dDogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICAgICAgICAgIGNpcGhlcnBhcmFtczogeyB0eXBlOiAnb2JqZWN0JyB9LFxuICAgICAgICAgICAgICAgIGtkZjogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgICAgICAgICAgICAgIGtkZnBhcmFtczogeyB0eXBlOiAnb2JqZWN0JyB9LFxuICAgICAgICAgICAgICAgIHNhbHQ6IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgICAgICAgICAgICBtYWM6IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgIHZlcnNpb246IHsgdHlwZTogJ251bWJlcicgfSxcbiAgICAgICAgYWRkcmVzczogeyB0eXBlOiAnc3RyaW5nJyB9LFxuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZW1hcy5qcy5tYXAiXSwibmFtZXMiOlsia2V5U3RvcmVTY2hlbWEiLCJ0eXBlIiwicmVxdWlyZWQiLCJwcm9wZXJ0aWVzIiwiY3J5cHRvIiwiY2lwaGVyIiwiY2lwaGVydGV4dCIsImNpcGhlcnBhcmFtcyIsImtkZiIsImtkZnBhcmFtcyIsInNhbHQiLCJtYWMiLCJpZCIsInZlcnNpb24iLCJhZGRyZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/schemas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/address.js":
/*!**************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/tx/address.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Address: () => (/* binding */ Address)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/constants.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\nclass Address {\n    constructor(buf){\n        if (buf.length !== 20) {\n            throw new Error(\"Invalid address length\");\n        }\n        this.buf = buf;\n    }\n    /**\n     * Returns the zero address.\n     */ static zero() {\n        return new Address((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_3__.zeros)(20));\n    }\n    /**\n     * Is address equal to another.\n     */ equals(address) {\n        return (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayEquals)(this.buf, address.buf);\n    }\n    /**\n     * Is address zero.\n     */ isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * Returns hex encoding of address.\n     */ toString() {\n        return (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.bytesToHex)(this.buf);\n    }\n    /**\n     * Returns Uint8Array representation of address.\n     */ toArray() {\n        return this.buf;\n    }\n    /**\n     * Returns the ethereum address of a given public key.\n     * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n     * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n     * @param sanitize Accept public keys in other formats\n     */ static publicToAddress(_pubKey, sanitize = false) {\n        let pubKey = _pubKey;\n        (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_3__.assertIsUint8Array)(pubKey);\n        if (sanitize && pubKey.length !== 64) {\n            pubKey = _constants_js__WEBPACK_IMPORTED_MODULE_2__.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n        }\n        if (pubKey.length !== 64) {\n            throw new Error(\"Expected pubKey to be of length 64\");\n        }\n        // Only take the lower 160bits of the hash\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(pubKey).slice(-20);\n    }\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS90eC9hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQzREO0FBQ0Y7QUFDZjtBQUNvQjtBQUN4RCxNQUFNTTtJQUNUQyxZQUFZQyxHQUFHLENBQUU7UUFDYixJQUFJQSxJQUFJQyxNQUFNLEtBQUssSUFBSTtZQUNuQixNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNGLEdBQUcsR0FBR0E7SUFDZjtJQUNBOztLQUVDLEdBQ0QsT0FBT0csT0FBTztRQUNWLE9BQU8sSUFBSUwsUUFBUUQsdURBQUtBLENBQUM7SUFDN0I7SUFDQTs7S0FFQyxHQUNETyxPQUFPQyxPQUFPLEVBQUU7UUFDWixPQUFPWCw0REFBZ0JBLENBQUMsSUFBSSxDQUFDTSxHQUFHLEVBQUVLLFFBQVFMLEdBQUc7SUFDakQ7SUFDQTs7S0FFQyxHQUNETSxTQUFTO1FBQ0wsT0FBTyxJQUFJLENBQUNGLE1BQU0sQ0FBQ04sUUFBUUssSUFBSTtJQUNuQztJQUNBOztLQUVDLEdBQ0RJLFdBQVc7UUFDUCxPQUFPZCxzREFBVUEsQ0FBQyxJQUFJLENBQUNPLEdBQUc7SUFDOUI7SUFDQTs7S0FFQyxHQUNEUSxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUNSLEdBQUc7SUFDbkI7SUFDQTs7Ozs7S0FLQyxHQUNELE9BQU9TLGdCQUFnQkMsT0FBTyxFQUFFQyxXQUFXLEtBQUssRUFBRTtRQUM5QyxJQUFJQyxTQUFTRjtRQUNiZCxvRUFBa0JBLENBQUNnQjtRQUNuQixJQUFJRCxZQUFZQyxPQUFPWCxNQUFNLEtBQUssSUFBSTtZQUNsQ1csU0FBU2pCLG9EQUFTQSxDQUFDa0IsZUFBZSxDQUFDQyxPQUFPLENBQUNGLFFBQVFHLFVBQVUsQ0FBQyxPQUFPQyxLQUFLLENBQUM7UUFDL0U7UUFDQSxJQUFJSixPQUFPWCxNQUFNLEtBQUssSUFBSTtZQUN0QixNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSwwQ0FBMEM7UUFDMUMsT0FBT1YsMEVBQVNBLENBQUNvQixRQUFRSSxLQUFLLENBQUMsQ0FBQztJQUNwQztBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vdHgvYWRkcmVzcy5qcz80NjMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSAnZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2tlY2Nhay5qcyc7XG5pbXBvcnQgeyBieXRlc1RvSGV4LCB1aW50OEFycmF5RXF1YWxzIH0gZnJvbSAnd2ViMy11dGlscyc7XG5pbXBvcnQgeyBzZWNwMjU2azEgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBhc3NlcnRJc1VpbnQ4QXJyYXksIHplcm9zIH0gZnJvbSAnLi4vY29tbW9uL3V0aWxzLmpzJztcbmV4cG9ydCBjbGFzcyBBZGRyZXNzIHtcbiAgICBjb25zdHJ1Y3RvcihidWYpIHtcbiAgICAgICAgaWYgKGJ1Zi5sZW5ndGggIT09IDIwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYWRkcmVzcyBsZW5ndGgnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZiA9IGJ1ZjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgemVybyBhZGRyZXNzLlxuICAgICAqL1xuICAgIHN0YXRpYyB6ZXJvKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFkZHJlc3MoemVyb3MoMjApKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSXMgYWRkcmVzcyBlcXVhbCB0byBhbm90aGVyLlxuICAgICAqL1xuICAgIGVxdWFscyhhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiB1aW50OEFycmF5RXF1YWxzKHRoaXMuYnVmLCBhZGRyZXNzLmJ1Zik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElzIGFkZHJlc3MgemVyby5cbiAgICAgKi9cbiAgICBpc1plcm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVxdWFscyhBZGRyZXNzLnplcm8oKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaGV4IGVuY29kaW5nIG9mIGFkZHJlc3MuXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBieXRlc1RvSGV4KHRoaXMuYnVmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBVaW50OEFycmF5IHJlcHJlc2VudGF0aW9uIG9mIGFkZHJlc3MuXG4gICAgICovXG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBldGhlcmV1bSBhZGRyZXNzIG9mIGEgZ2l2ZW4gcHVibGljIGtleS5cbiAgICAgKiBBY2NlcHRzIFwiRXRoZXJldW0gcHVibGljIGtleXNcIiBhbmQgU0VDMSBlbmNvZGVkIGtleXMuXG4gICAgICogQHBhcmFtIHB1YktleSBUaGUgdHdvIHBvaW50cyBvZiBhbiB1bmNvbXByZXNzZWQga2V5LCB1bmxlc3Mgc2FuaXRpemUgaXMgZW5hYmxlZFxuICAgICAqIEBwYXJhbSBzYW5pdGl6ZSBBY2NlcHQgcHVibGljIGtleXMgaW4gb3RoZXIgZm9ybWF0c1xuICAgICAqL1xuICAgIHN0YXRpYyBwdWJsaWNUb0FkZHJlc3MoX3B1YktleSwgc2FuaXRpemUgPSBmYWxzZSkge1xuICAgICAgICBsZXQgcHViS2V5ID0gX3B1YktleTtcbiAgICAgICAgYXNzZXJ0SXNVaW50OEFycmF5KHB1YktleSk7XG4gICAgICAgIGlmIChzYW5pdGl6ZSAmJiBwdWJLZXkubGVuZ3RoICE9PSA2NCkge1xuICAgICAgICAgICAgcHViS2V5ID0gc2VjcDI1NmsxLlByb2plY3RpdmVQb2ludC5mcm9tSGV4KHB1YktleSkudG9SYXdCeXRlcyhmYWxzZSkuc2xpY2UoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHB1YktleS5sZW5ndGggIT09IDY0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHB1YktleSB0byBiZSBvZiBsZW5ndGggNjQnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPbmx5IHRha2UgdGhlIGxvd2VyIDE2MGJpdHMgb2YgdGhlIGhhc2hcbiAgICAgICAgcmV0dXJuIGtlY2NhazI1NihwdWJLZXkpLnNsaWNlKC0yMCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOlsia2VjY2FrMjU2IiwiYnl0ZXNUb0hleCIsInVpbnQ4QXJyYXlFcXVhbHMiLCJzZWNwMjU2azEiLCJhc3NlcnRJc1VpbnQ4QXJyYXkiLCJ6ZXJvcyIsIkFkZHJlc3MiLCJjb25zdHJ1Y3RvciIsImJ1ZiIsImxlbmd0aCIsIkVycm9yIiwiemVybyIsImVxdWFscyIsImFkZHJlc3MiLCJpc1plcm8iLCJ0b1N0cmluZyIsInRvQXJyYXkiLCJwdWJsaWNUb0FkZHJlc3MiLCJfcHViS2V5Iiwic2FuaXRpemUiLCJwdWJLZXkiLCJQcm9qZWN0aXZlUG9pbnQiLCJmcm9tSGV4IiwidG9SYXdCeXRlcyIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/baseTransaction.js":
/*!**********************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/tx/baseTransaction.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction)\n/* harmony export */ });\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/constants.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js\");\n/* harmony import */ var _common_common_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/common.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/common.js\");\n/* harmony import */ var _common_enums_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/enums.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/enums.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/types.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./address.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/address.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/utils.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n\n\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */ class BaseTransaction {\n    constructor(txData, opts){\n        var _a, _b;\n        this.cache = {\n            hash: undefined,\n            dataFee: undefined\n        };\n        /**\n         * List of tx type defining EIPs,\n         * e.g. 1559 (fee market) and 2930 (access lists)\n         * for FeeMarketEIP1559Transaction objects\n         */ this.activeCapabilities = [];\n        /**\n         * The default chain the tx falls back to if no Common\n         * is provided and if the chain can't be derived from\n         * a passed in chainId (only EIP-2718 typed txs) or\n         * EIP-155 signature (legacy txs).\n         *\n         * @hidden\n         */ this.DEFAULT_CHAIN = _common_enums_js__WEBPACK_IMPORTED_MODULE_4__.Chain.Mainnet;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */ this.DEFAULT_HARDFORK = _common_enums_js__WEBPACK_IMPORTED_MODULE_4__.Hardfork.Merge;\n        const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;\n        this._type = Number((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToBigInt)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUint8Array)(type)));\n        this.txOptions = opts;\n        const toB = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUint8Array)(to === \"\" ? \"0x\" : to);\n        const vB = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUint8Array)(v === \"\" ? \"0x\" : v);\n        const rB = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUint8Array)(r === \"\" ? \"0x\" : r);\n        const sB = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUint8Array)(s === \"\" ? \"0x\" : s);\n        this.nonce = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToBigInt)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUint8Array)(nonce === \"\" ? \"0x\" : nonce));\n        this.gasLimit = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToBigInt)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUint8Array)(gasLimit === \"\" ? \"0x\" : gasLimit));\n        this.to = toB.length > 0 ? new _address_js__WEBPACK_IMPORTED_MODULE_6__.Address(toB) : undefined;\n        this.value = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToBigInt)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUint8Array)(value === \"\" ? \"0x\" : value));\n        this.data = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUint8Array)(data === \"\" ? \"0x\" : data);\n        this.v = vB.length > 0 ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToBigInt)(vB) : undefined;\n        this.r = rB.length > 0 ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToBigInt)(rB) : undefined;\n        this.s = sB.length > 0 ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToBigInt)(sB) : undefined;\n        this._validateCannotExceedMaxInteger({\n            value: this.value,\n            r: this.r,\n            s: this.s\n        });\n        // geth limits gasLimit to 2^64-1\n        this._validateCannotExceedMaxInteger({\n            gasLimit: this.gasLimit\n        }, 64);\n        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n        this._validateCannotExceedMaxInteger({\n            nonce: this.nonce\n        }, 64, true);\n        // eslint-disable-next-line no-null/no-null\n        const createContract = this.to === undefined || this.to === null;\n        const allowUnlimitedInitCodeSize = (_a = opts.allowUnlimitedInitCodeSize) !== null && _a !== void 0 ? _a : false;\n        const common = (_b = opts.common) !== null && _b !== void 0 ? _b : this._getCommon();\n        if (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_7__.checkMaxInitCodeSize)(common, this.data.length);\n        }\n    }\n    /**\n     * Returns the transaction type.\n     *\n     * Note: legacy txs will return tx type `0`.\n     */ get type() {\n        return this._type;\n    }\n    /**\n     * Checks if a tx type defining capability is active\n     * on a tx, for example the EIP-1559 fee market mechanism\n     * or the EIP-2930 access list feature.\n     *\n     * Note that this is different from the tx type itself,\n     * so EIP-2930 access lists can very well be active\n     * on an EIP-1559 tx for example.\n     *\n     * This method can be useful for feature checks if the\n     * tx type is unknown (e.g. when instantiated with\n     * the tx factory).\n     *\n     * See `Capabilites` in the `types` module for a reference\n     * on all supported capabilities.\n     */ supports(capability) {\n        return this.activeCapabilities.includes(capability);\n    }\n    validate(stringError = false) {\n        const errors = [];\n        if (this.getBaseFee() > this.gasLimit) {\n            errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);\n        }\n        if (this.isSigned() && !this.verifySignature()) {\n            errors.push(\"Invalid Signature\");\n        }\n        return stringError ? errors : errors.length === 0;\n    }\n    _validateYParity() {\n        const { v } = this;\n        if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n            const msg = this._errorMsg(\"The y-parity of the transaction should either be 0 or 1\");\n            throw new Error(msg);\n        }\n    }\n    /**\n     * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n     * Reasoning: https://ethereum.stackexchange.com/a/55728\n     */ _validateHighS() {\n        const { s } = this;\n        if (this.common.gteHardfork(\"homestead\") && s !== undefined && s > _constants_js__WEBPACK_IMPORTED_MODULE_1__.SECP256K1_ORDER_DIV_2) {\n            const msg = this._errorMsg(\"Invalid Signature: s-values greater than secp256k1n/2 are considered invalid\");\n            throw new Error(msg);\n        }\n    }\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */ getBaseFee() {\n        const txFee = this.common.param(\"gasPrices\", \"tx\");\n        let fee = this.getDataFee();\n        if (txFee) fee += txFee;\n        if (this.common.gteHardfork(\"homestead\") && this.toCreationAddress()) {\n            const txCreationFee = this.common.param(\"gasPrices\", \"txCreation\");\n            if (txCreationFee) fee += txCreationFee;\n        }\n        return fee;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */ getDataFee() {\n        const txDataZero = this.common.param(\"gasPrices\", \"txDataZero\");\n        const txDataNonZero = this.common.param(\"gasPrices\", \"txDataNonZero\");\n        let cost = BigInt(0);\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let i = 0; i < this.data.length; i += 1){\n            // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions\n            this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;\n        }\n        // eslint-disable-next-line no-null/no-null\n        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n            const dataLength = BigInt(Math.ceil(this.data.length / 32));\n            const initCodeCost = this.common.param(\"gasPrices\", \"initCodeWordCost\") * dataLength;\n            cost += initCodeCost;\n        }\n        return cost;\n    }\n    /**\n     * If the tx's `to` is to the creation address\n     */ toCreationAddress() {\n        return this.to === undefined || this.to.buf.length === 0;\n    }\n    isSigned() {\n        const { v, r, s } = this;\n        if (v === undefined || r === undefined || s === undefined) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Determines if the signature is valid\n     */ verifySignature() {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            const publicKey = this.getSenderPublicKey();\n            return (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.unpadUint8Array)(publicKey).length !== 0;\n        } catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Returns the sender's address\n     */ getSenderAddress() {\n        return new _address_js__WEBPACK_IMPORTED_MODULE_6__.Address(_address_js__WEBPACK_IMPORTED_MODULE_6__.Address.publicToAddress(this.getSenderPublicKey()));\n    }\n    /**\n     * Signs a transaction.\n     *\n     * Note that the signed tx is returned as a new object,\n     * use as follows:\n     * ```javascript\n     * const signedTx = tx.sign(privateKey)\n     * ```\n     */ sign(privateKey) {\n        if (privateKey.length !== 32) {\n            const msg = this._errorMsg(\"Private key must be 32 bytes in length.\");\n            throw new Error(msg);\n        }\n        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n        // and want to recreate a signature (where EIP155 should be applied)\n        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n        // 2021-06-23\n        let hackApplied = false;\n        if (this.type === 0 && this.common.gteHardfork(\"spuriousDragon\") && !this.supports(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection)) {\n            this.activeCapabilities.push(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection);\n            hackApplied = true;\n        }\n        const msgHash = this.getMessageToSign(true);\n        const { v, r, s } = this._ecsign(msgHash, privateKey);\n        const tx = this._processSignature(v, r, s);\n        // Hack part 2\n        if (hackApplied) {\n            const index = this.activeCapabilities.indexOf(_types_js__WEBPACK_IMPORTED_MODULE_5__.Capability.EIP155ReplayProtection);\n            if (index > -1) {\n                this.activeCapabilities.splice(index, 1);\n            }\n        }\n        return tx;\n    }\n    /**\n     * Does chain ID checks on common and returns a common\n     * to be used on instantiation\n     * @hidden\n     *\n     * @param common - {@link Common} instance from tx options\n     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n     */ _getCommon(common, chainId) {\n        var _a, _b, _c, _d;\n        // TODO: this function needs to be reviewed and the code to be more clean\n        // check issue https://github.com/web3/web3.js/issues/6666\n        // Chain ID provided\n        if (chainId !== undefined) {\n            const chainIdBigInt = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.uint8ArrayToBigInt)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUint8Array)(chainId));\n            if (common) {\n                if (common.chainId() !== chainIdBigInt) {\n                    const msg = this._errorMsg(\"The chain ID does not match the chain ID of Common\");\n                    throw new Error(msg);\n                }\n                // Common provided, chain ID does match\n                // -> Return provided Common\n                return common.copy();\n            }\n            if (_common_common_js__WEBPACK_IMPORTED_MODULE_3__.Common.isSupportedChainId(chainIdBigInt)) {\n                // No Common, chain ID supported by Common\n                // -> Instantiate Common with chain ID\n                return new _common_common_js__WEBPACK_IMPORTED_MODULE_3__.Common({\n                    chain: chainIdBigInt,\n                    hardfork: this.DEFAULT_HARDFORK\n                });\n            }\n            // No Common, chain ID not supported by Common\n            // -> Instantiate custom Common derived from DEFAULT_CHAIN\n            return _common_common_js__WEBPACK_IMPORTED_MODULE_3__.Common.custom({\n                name: \"custom-chain\",\n                networkId: chainIdBigInt,\n                chainId: chainIdBigInt\n            }, {\n                baseChain: this.DEFAULT_CHAIN,\n                hardfork: this.DEFAULT_HARDFORK\n            });\n        }\n        // No chain ID provided\n        // -> return Common provided or create new default Common\n        if ((common === null || common === void 0 ? void 0 : common.copy) && typeof (common === null || common === void 0 ? void 0 : common.copy) === \"function\") {\n            return common.copy();\n        }\n        // TODO: Recheck this next block when working on https://github.com/web3/web3.js/issues/6666\n        // This block is to handle when `chainId` was not passed and the `common` object does not have `copy()`\n        // If it was meant to be unsupported to process `common` in this case, an exception should be thrown instead of the following block\n        if (common) {\n            const hardfork = typeof common.hardfork === \"function\" ? common.hardfork() : common.hardfork;\n            return _common_common_js__WEBPACK_IMPORTED_MODULE_3__.Common.custom({\n                name: \"custom-chain\",\n                networkId: common.networkId ? common.networkId() : (_b = BigInt((_a = common.customChain) === null || _a === void 0 ? void 0 : _a.networkId)) !== null && _b !== void 0 ? _b : undefined,\n                chainId: common.chainId ? common.chainId() : (_d = BigInt((_c = common.customChain) === null || _c === void 0 ? void 0 : _c.chainId)) !== null && _d !== void 0 ? _d : undefined\n            }, {\n                baseChain: this.DEFAULT_CHAIN,\n                hardfork: hardfork || this.DEFAULT_HARDFORK\n            });\n        }\n        return new _common_common_js__WEBPACK_IMPORTED_MODULE_3__.Common({\n            chain: this.DEFAULT_CHAIN,\n            hardfork: this.DEFAULT_HARDFORK\n        });\n    }\n    /**\n     * Validates that an object with BigInt values cannot exceed the specified bit limit.\n     * @param values Object containing string keys and BigInt values\n     * @param bits Number of bits to check (64 or 256)\n     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n     */ _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {\n        for (const [key, value] of Object.entries(values)){\n            switch(bits){\n                case 64:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= _constants_js__WEBPACK_IMPORTED_MODULE_1__.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    } else if (value !== undefined && value > _constants_js__WEBPACK_IMPORTED_MODULE_1__.MAX_UINT64) {\n                        const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);\n                        throw new Error(msg);\n                    }\n                    break;\n                case 256:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= _constants_js__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    } else if (value !== undefined && value > _constants_js__WEBPACK_IMPORTED_MODULE_1__.MAX_INTEGER) {\n                        const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);\n                        throw new Error(msg);\n                    }\n                    break;\n                default:\n                    {\n                        const msg = this._errorMsg(\"unimplemented bits value\");\n                        throw new Error(msg);\n                    }\n            }\n        }\n    }\n    static _validateNotArray(values) {\n        const txDataKeys = [\n            \"nonce\",\n            \"gasPrice\",\n            \"gasLimit\",\n            \"to\",\n            \"value\",\n            \"data\",\n            \"v\",\n            \"r\",\n            \"s\",\n            \"type\",\n            \"baseFee\",\n            \"maxFeePerGas\",\n            \"chainId\"\n        ];\n        for (const [key, value] of Object.entries(values)){\n            if (txDataKeys.includes(key)) {\n                if (Array.isArray(value)) {\n                    throw new Error(`${key} cannot be an array`);\n                }\n            }\n        }\n    }\n    /**\n     * Returns the shared error postfix part for _error() method\n     * tx type implementations.\n     */ _getSharedErrorPostfix() {\n        let hash = \"\";\n        try {\n            hash = this.isSigned() ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(this.hash()) : \"not available (unsigned)\";\n        } catch (e) {\n            hash = \"error\";\n        }\n        let isSigned = \"\";\n        try {\n            isSigned = this.isSigned().toString();\n        } catch (e) {\n            hash = \"error\";\n        }\n        let hf = \"\";\n        try {\n            hf = this.common.hardfork();\n        } catch (e) {\n            hf = \"error\";\n        }\n        let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n        postfix += `signed=${isSigned} hf=${hf}`;\n        return postfix;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    _ecsign(msgHash, privateKey, chainId) {\n        const signature = _constants_js__WEBPACK_IMPORTED_MODULE_1__.secp256k1.sign(msgHash, privateKey);\n        const signatureBytes = signature.toCompactRawBytes();\n        const r = signatureBytes.subarray(0, 32);\n        const s = signatureBytes.subarray(32, 64);\n        const v = chainId === undefined ? BigInt(signature.recovery + 27) : BigInt(signature.recovery + 35) + BigInt(chainId) * BigInt(2);\n        return {\n            r,\n            s,\n            v\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromSerializedTx(// @ts-expect-error unused variable\n    serialized, // @ts-expect-error unused variable\n    opts = {}) {}\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromTxData(// @ts-expect-error unused variable\n    txData, // @ts-expect-error unused variable\n    opts = {}) {}\n} //# sourceMappingURL=baseTransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/baseTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/tx/constants.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_INTEGER: () => (/* binding */ MAX_INTEGER),\n/* harmony export */   MAX_UINT64: () => (/* binding */ MAX_UINT64),\n/* harmony export */   SECP256K1_ORDER: () => (/* binding */ SECP256K1_ORDER),\n/* harmony export */   SECP256K1_ORDER_DIV_2: () => (/* binding */ SECP256K1_ORDER_DIV_2),\n/* harmony export */   secp256k1: () => (/* binding */ secp256k1)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/secp256k1.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/secp256k1.js\");\nvar _a;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ // eslint-disable-next-line import/extensions\n\nconst secp256k1 = (_a = ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__.secp256k1) !== null && _a !== void 0 ? _a : ethereum_cryptography_secp256k1_js__WEBPACK_IMPORTED_MODULE_0__;\n/**\n * 2^64-1\n */ const MAX_UINT64 = BigInt(\"0xffffffffffffffff\");\n/**\n * The max integer that the evm can handle (2^256-1)\n */ const MAX_INTEGER = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nconst SECP256K1_ORDER = secp256k1.CURVE.n;\nconst SECP256K1_ORDER_DIV_2 = SECP256K1_ORDER / BigInt(2); //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS90eC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBSUE7QUFDSjs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsR0FDQSw2Q0FBNkM7QUFDOEI7QUFDcEUsTUFBTUUsWUFBWSxDQUFDRixLQUFLQyx5RUFBOEIsTUFBTSxRQUFRRCxPQUFPLEtBQUssSUFBSUEsS0FBS0MsK0RBQW9CQSxDQUFDO0FBQ3JIOztDQUVDLEdBQ00sTUFBTUUsYUFBYUMsT0FBTyxzQkFBc0I7QUFDdkQ7O0NBRUMsR0FDTSxNQUFNQyxjQUFjRCxPQUFPLHNFQUFzRTtBQUNqRyxNQUFNRSxrQkFBa0JKLFVBQVVLLEtBQUssQ0FBQ0MsQ0FBQyxDQUFDO0FBQzFDLE1BQU1DLHdCQUF3Qkgsa0JBQWtCRixPQUFPLEdBQUcsQ0FDakUscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vdHgvY29uc3RhbnRzLmpzPzczOGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9hO1xuLypcblRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbndlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG50aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxud2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2Zcbk1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbkdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5Zb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbmFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L2V4dGVuc2lvbnNcbmltcG9ydCAqIGFzIGV0aGVyZXVtQ3J5cHRvZ3JhcGh5IGZyb20gJ2V0aGVyZXVtLWNyeXB0b2dyYXBoeS9zZWNwMjU2azEuanMnO1xuZXhwb3J0IGNvbnN0IHNlY3AyNTZrMSA9IChfYSA9IGV0aGVyZXVtQ3J5cHRvZ3JhcGh5LnNlY3AyNTZrMSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZXRoZXJldW1DcnlwdG9ncmFwaHk7XG4vKipcbiAqIDJeNjQtMVxuICovXG5leHBvcnQgY29uc3QgTUFYX1VJTlQ2NCA9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJyk7XG4vKipcbiAqIFRoZSBtYXggaW50ZWdlciB0aGF0IHRoZSBldm0gY2FuIGhhbmRsZSAoMl4yNTYtMSlcbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9JTlRFR0VSID0gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnKTtcbmV4cG9ydCBjb25zdCBTRUNQMjU2SzFfT1JERVIgPSBzZWNwMjU2azEuQ1VSVkUubjtcbmV4cG9ydCBjb25zdCBTRUNQMjU2SzFfT1JERVJfRElWXzIgPSBTRUNQMjU2SzFfT1JERVIgLyBCaWdJbnQoMik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIl9hIiwiZXRoZXJldW1DcnlwdG9ncmFwaHkiLCJzZWNwMjU2azEiLCJNQVhfVUlOVDY0IiwiQmlnSW50IiwiTUFYX0lOVEVHRVIiLCJTRUNQMjU2SzFfT1JERVIiLCJDVVJWRSIsIm4iLCJTRUNQMjU2SzFfT1JERVJfRElWXzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/eip1559Transaction.js":
/*!*************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/tx/eip1559Transaction.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FeeMarketEIP1559Transaction: () => (/* binding */ FeeMarketEIP1559Transaction)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var web3_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-validator */ \"(ssr)/./node_modules/web3-validator/lib/esm/index.js\");\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@ethereumjs/rlp/dist/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/constants.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./baseTransaction.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/baseTransaction.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/utils.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n\n\n\nconst TRANSACTION_TYPE = 2;\nconst TRANSACTION_TYPE_UINT8ARRAY = (0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(TRANSACTION_TYPE.toString(16).padStart(2, \"0\"));\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */ // eslint-disable-next-line no-use-before-define\nclass FeeMarketEIP1559Transaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_5__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */ constructor(txData, opts = {}){\n        var _a;\n        super(Object.assign(Object.assign({}, txData), {\n            type: TRANSACTION_TYPE\n        }), opts);\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */ this.DEFAULT_HARDFORK = \"london\";\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (!this.common.isActivatedEIP(1559)) {\n            throw new Error(\"EIP-1559 not enabled on Common\");\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([\n            1559,\n            2718,\n            2930\n        ]);\n        // Populate the access list fields\n        const accessListData = (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.getAccessListData)(accessList !== null && accessList !== void 0 ? accessList : []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.verifyAccessList)(this.accessList);\n        this.maxFeePerGas = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.uint8ArrayToBigInt)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.toUint8Array)(maxFeePerGas === \"\" ? \"0x\" : maxFeePerGas));\n        this.maxPriorityFeePerGas = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.uint8ArrayToBigInt)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.toUint8Array)(maxPriorityFeePerGas === \"\" ? \"0x\" : maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas\n        });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_5__.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > _constants_js__WEBPACK_IMPORTED_MODULE_4__.MAX_INTEGER) {\n            const msg = this._errorMsg(\"gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)\");\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg(\"maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)\");\n            throw new Error(msg);\n        }\n        this._validateYParity();\n        this._validateHighS();\n        const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */ static fromTxData(txData, opts = {}) {\n        return new FeeMarketEIP1559Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */ static fromSerializedTx(serialized, opts = {}) {\n        if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.uint8ArrayEquals)(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n            throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${(0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_2__.RLP.decode(serialized.subarray(1));\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized tx input: must be array\");\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */ static fromValuesArray(values, opts = {}) {\n        if (values.length !== 9 && values.length !== 12) {\n            throw new Error(\"Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).\");\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s] = values;\n        this._validateNotArray({\n            chainId,\n            v\n        });\n        (0,web3_validator__WEBPACK_IMPORTED_MODULE_1__.validateNoLeadingZeroes)({\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            value,\n            v,\n            r,\n            s\n        });\n        return new FeeMarketEIP1559Transaction({\n            chainId: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.uint8ArrayToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n            v: v !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.uint8ArrayToBigInt)(v) : undefined,\n            r,\n            s\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */ getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        let cost = super.getDataFee();\n        cost += BigInt((0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.getDataFeeEIP2930)(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork()\n            };\n        }\n        return cost;\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */ getUpfrontCost(baseFee = BigInt(0)) {\n        const prio = this.maxPriorityFeePerGas;\n        const maxBase = this.maxFeePerGas - baseFee;\n        const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n        const gasPrice = inclusionFeePerGas + baseFee;\n        return this.gasLimit * gasPrice + this.value;\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Uint8Array values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n     */ raw() {\n        return [\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(this.chainId),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(this.nonce),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(this.maxPriorityFeePerGas),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(this.maxFeePerGas),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Uint8Array.from([]),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(this.v) : Uint8Array.from([]),\n            this.r !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(this.r) : Uint8Array.from([]),\n            this.s !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(this.s) : Uint8Array.from([])\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */ serialize() {\n        const base = this.raw();\n        return (0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_2__.RLP.encode(base));\n    }\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */ getMessageToSign(hashMessage = true) {\n        const base = this.raw().slice(0, 9);\n        const message = (0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_2__.RLP.encode(base));\n        if (hashMessage) {\n            return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(message);\n        }\n        return message;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */ hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg(\"Cannot call hash method if transaction is not signed\");\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(this.serialize());\n            }\n            return this.cache.hash;\n        }\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(this.serialize());\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */ getMessageToVerifySignature() {\n        return this.getMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */ getSenderPublicKey() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg(\"Cannot call this method if transaction is not signed\");\n            throw new Error(msg);\n        }\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.ecrecover)(msgHash, v + BigInt(27), (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(r), (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToUnpaddedUint8Array)(s));\n        } catch (e) {\n            const msg = this._errorMsg(\"Invalid Signature\");\n            throw new Error(msg);\n        }\n    }\n    _processSignature(v, r, s) {\n        const opts = Object.assign(Object.assign({}, this.txOptions), {\n            common: this.common\n        });\n        return FeeMarketEIP1559Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - BigInt(27),\n            r: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.uint8ArrayToBigInt)(r),\n            s: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.uint8ArrayToBigInt)(s)\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */ toJSON() {\n        const accessListJSON = (0,_utils_js__WEBPACK_IMPORTED_MODULE_6__.getAccessListJSON)(this.accessList);\n        return {\n            chainId: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex)(this.chainId),\n            nonce: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex)(this.nonce),\n            maxPriorityFeePerGas: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex)(this.maxFeePerGas),\n            gasLimit: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex)(this.value),\n            data: (0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(this.data),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_7__.bigIntToHex)(this.s) : undefined\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */ errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */ _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n} //# sourceMappingURL=eip1559Transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/eip1559Transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/eip2930Transaction.js":
/*!*************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/tx/eip2930Transaction.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessListEIP2930Transaction: () => (/* binding */ AccessListEIP2930Transaction)\n/* harmony export */ });\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var web3_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-validator */ \"(ssr)/./node_modules/web3-validator/lib/esm/index.js\");\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@ethereumjs/rlp/dist/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/constants.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/utils.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./baseTransaction.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/baseTransaction.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n\n\n\nconst TRANSACTION_TYPE = 1;\nconst TRANSACTION_TYPE_UINT8ARRAY = (0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(TRANSACTION_TYPE.toString(16).padStart(2, \"0\"));\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */ // eslint-disable-next-line no-use-before-define\nclass AccessListEIP2930Transaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_7__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */ constructor(txData, opts = {}){\n        var _a;\n        super(Object.assign(Object.assign({}, txData), {\n            type: TRANSACTION_TYPE\n        }), opts);\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */ this.DEFAULT_HARDFORK = \"berlin\";\n        const { chainId, accessList, gasPrice } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        // EIP-2718 check is done in Common\n        if (!this.common.isActivatedEIP(2930)) {\n            throw new Error(\"EIP-2930 not enabled on Common\");\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([\n            2718,\n            2930\n        ]);\n        // Populate the access list fields\n        const accessListData = (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.getAccessListData)(accessList !== null && accessList !== void 0 ? accessList : []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.verifyAccessList)(this.accessList);\n        this.gasPrice = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.uint8ArrayToBigInt)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.toUint8Array)(gasPrice === \"\" ? \"0x\" : gasPrice));\n        this._validateCannotExceedMaxInteger({\n            gasPrice: this.gasPrice\n        });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_7__.BaseTransaction._validateNotArray(txData);\n        if (this.gasPrice * this.gasLimit > _constants_js__WEBPACK_IMPORTED_MODULE_4__.MAX_INTEGER) {\n            const msg = this._errorMsg(\"gasLimit * gasPrice cannot exceed MAX_INTEGER\");\n            throw new Error(msg);\n        }\n        this._validateYParity();\n        this._validateHighS();\n        const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */ static fromTxData(txData, opts = {}) {\n        return new AccessListEIP2930Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     */ static fromSerializedTx(serialized, opts = {}) {\n        if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.uint8ArrayEquals)(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n            throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${(0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_2__.RLP.decode(Uint8Array.from(serialized.subarray(1)));\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized tx input: must be array\");\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     */ static fromValuesArray(values, opts = {}) {\n        if (values.length !== 8 && values.length !== 11) {\n            throw new Error(\"Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).\");\n        }\n        const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n        this._validateNotArray({\n            chainId,\n            v\n        });\n        (0,web3_validator__WEBPACK_IMPORTED_MODULE_1__.validateNoLeadingZeroes)({\n            nonce,\n            gasPrice,\n            gasLimit,\n            value,\n            v,\n            r,\n            s\n        });\n        const emptyAccessList = [];\n        return new AccessListEIP2930Transaction({\n            chainId: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.uint8ArrayToBigInt)(chainId),\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n            v: v !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.uint8ArrayToBigInt)(v) : undefined,\n            r,\n            s\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */ getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        let cost = super.getDataFee();\n        cost += BigInt((0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.getDataFeeEIP2930)(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork()\n            };\n        }\n        return cost;\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */ getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     *\n     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty UINT8ARRAY values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n     */ raw() {\n        return [\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToUnpaddedUint8Array)(this.chainId),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToUnpaddedUint8Array)(this.nonce),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToUnpaddedUint8Array)(this.gasPrice),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToUnpaddedUint8Array)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Uint8Array.from([]),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToUnpaddedUint8Array)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToUnpaddedUint8Array)(this.v) : Uint8Array.from([]),\n            this.r !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToUnpaddedUint8Array)(this.r) : Uint8Array.from([]),\n            this.s !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToUnpaddedUint8Array)(this.s) : Uint8Array.from([])\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-2930 transaction.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */ serialize() {\n        const base = this.raw();\n        return (0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_2__.RLP.encode(base));\n    }\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */ getMessageToSign(hashMessage = true) {\n        const base = this.raw().slice(0, 8);\n        const message = (0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_2__.RLP.encode(base));\n        if (hashMessage) {\n            return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(message);\n        }\n        return message;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */ hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg(\"Cannot call hash method if transaction is not signed\");\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(this.serialize());\n            }\n            return this.cache.hash;\n        }\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(this.serialize());\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */ getMessageToVerifySignature() {\n        return this.getMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */ getSenderPublicKey() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg(\"Cannot call this method if transaction is not signed\");\n            throw new Error(msg);\n        }\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.ecrecover)(msgHash, v + BigInt(27), (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToUnpaddedUint8Array)(r), (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToUnpaddedUint8Array)(s));\n        } catch (e) {\n            const msg = this._errorMsg(\"Invalid Signature\");\n            throw new Error(msg);\n        }\n    }\n    _processSignature(v, r, s) {\n        const opts = Object.assign(Object.assign({}, this.txOptions), {\n            common: this.common\n        });\n        return AccessListEIP2930Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - BigInt(27),\n            r: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.uint8ArrayToBigInt)(r),\n            s: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.uint8ArrayToBigInt)(s)\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */ toJSON() {\n        const accessListJSON = (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.getAccessListJSON)(this.accessList);\n        return {\n            chainId: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToHex)(this.chainId),\n            nonce: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToHex)(this.nonce),\n            gasPrice: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToHex)(this.gasPrice),\n            gasLimit: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToHex)(this.value),\n            data: (0,web3_utils__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(this.data),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_6__.bigIntToHex)(this.s) : undefined\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */ errorStr() {\n        var _a, _b;\n        let errorStr = this._getSharedErrorPostfix();\n        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n        errorStr += ` gasPrice=${this.gasPrice} accessListCount=${(_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */ _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n} //# sourceMappingURL=eip2930Transaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS90eC9laXAyOTMwVHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQzREO0FBQ0g7QUFDbkI7QUFDa0Q7QUFDM0M7QUFDMkQ7QUFDbUI7QUFDcEU7QUFDdkQsTUFBTWtCLG1CQUFtQjtBQUN6QixNQUFNQyw4QkFBOEJmLHNEQUFVQSxDQUFDYyxpQkFBaUJFLFFBQVEsQ0FBQyxJQUFJQyxRQUFRLENBQUMsR0FBRztBQUN6Rjs7Ozs7Q0FLQyxHQUNELGdEQUFnRDtBQUN6QyxNQUFNQyxxQ0FBcUNMLGdFQUFlQTtJQUM3RDs7Ozs7O0tBTUMsR0FDRE0sWUFBWUMsTUFBTSxFQUFFQyxPQUFPLENBQUMsQ0FBQyxDQUFFO1FBQzNCLElBQUlDO1FBQ0osS0FBSyxDQUFDQyxPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdKLFNBQVM7WUFBRUssTUFBTVg7UUFBaUIsSUFBSU87UUFDNUU7Ozs7O1NBS0MsR0FDRCxJQUFJLENBQUNLLGdCQUFnQixHQUFHO1FBQ3hCLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRSxHQUFHVDtRQUMxQyxJQUFJLENBQUNVLE1BQU0sR0FBRyxJQUFJLENBQUNDLFVBQVUsQ0FBQ1YsS0FBS1MsTUFBTSxFQUFFSDtRQUMzQyxJQUFJLENBQUNBLE9BQU8sR0FBRyxJQUFJLENBQUNHLE1BQU0sQ0FBQ0gsT0FBTztRQUNsQyxtQ0FBbUM7UUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQ0csTUFBTSxDQUFDRSxjQUFjLENBQUMsT0FBTztZQUNuQyxNQUFNLElBQUlDLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNDLGtCQUFrQixHQUFHLElBQUksQ0FBQ0Esa0JBQWtCLENBQUNDLE1BQU0sQ0FBQztZQUFDO1lBQU07U0FBSztRQUNyRSxrQ0FBa0M7UUFDbEMsTUFBTUMsaUJBQWlCaEMsNERBQWlCQSxDQUFDd0IsZUFBZSxRQUFRQSxlQUFlLEtBQUssSUFBSUEsYUFBYSxFQUFFO1FBQ3ZHLElBQUksQ0FBQ0EsVUFBVSxHQUFHUSxlQUFlUixVQUFVO1FBQzNDLElBQUksQ0FBQ1MsY0FBYyxHQUFHRCxlQUFlQyxjQUFjO1FBQ25ELGlDQUFpQztRQUNqQ2hDLDJEQUFnQkEsQ0FBQyxJQUFJLENBQUN1QixVQUFVO1FBQ2hDLElBQUksQ0FBQ0MsUUFBUSxHQUFHbEIsb0VBQWtCQSxDQUFDRiw4REFBWUEsQ0FBQ29CLGFBQWEsS0FBSyxPQUFPQTtRQUN6RSxJQUFJLENBQUNTLCtCQUErQixDQUFDO1lBQ2pDVCxVQUFVLElBQUksQ0FBQ0EsUUFBUTtRQUMzQjtRQUNBaEIsZ0VBQWVBLENBQUMwQixpQkFBaUIsQ0FBQ25CO1FBQ2xDLElBQUksSUFBSSxDQUFDUyxRQUFRLEdBQUcsSUFBSSxDQUFDVyxRQUFRLEdBQUdyQyxzREFBV0EsRUFBRTtZQUM3QyxNQUFNc0MsTUFBTSxJQUFJLENBQUNDLFNBQVMsQ0FBQztZQUMzQixNQUFNLElBQUlULE1BQU1RO1FBQ3BCO1FBQ0EsSUFBSSxDQUFDRSxnQkFBZ0I7UUFDckIsSUFBSSxDQUFDQyxjQUFjO1FBQ25CLE1BQU1DLFNBQVMsQ0FBQ3ZCLEtBQUtELFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxLQUFLd0IsTUFBTSxNQUFNLFFBQVF2QixPQUFPLEtBQUssSUFBSUEsS0FBSztRQUMvRyxJQUFJdUIsUUFBUTtZQUNSdEIsT0FBT3NCLE1BQU0sQ0FBQyxJQUFJO1FBQ3RCO0lBQ0o7SUFDQTs7Ozs7Ozs7O0tBU0MsR0FDRCxPQUFPQyxXQUFXMUIsTUFBTSxFQUFFQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sSUFBSUgsNkJBQTZCRSxRQUFRQztJQUNwRDtJQUNBOzs7OztLQUtDLEdBQ0QsT0FBTzBCLGlCQUFpQkMsVUFBVSxFQUFFM0IsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUMzQyxJQUFJLENBQUNuQiw0REFBZ0JBLENBQUM4QyxXQUFXQyxRQUFRLENBQUMsR0FBRyxJQUFJbEMsOEJBQThCO1lBQzNFLE1BQU0sSUFBSWtCLE1BQU0sQ0FBQyxtRkFBbUYsRUFBRW5CLGlCQUFpQixZQUFZLEVBQUVmLHNEQUFVQSxDQUFDaUQsV0FBV0MsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2hMO1FBQ0EsTUFBTUMsU0FBU3BELGdEQUFHQSxDQUFDcUQsTUFBTSxDQUFDQyxXQUFXQyxJQUFJLENBQUNMLFdBQVdDLFFBQVEsQ0FBQztRQUM5RCxJQUFJLENBQUNLLE1BQU1DLE9BQU8sQ0FBQ0wsU0FBUztZQUN4QixNQUFNLElBQUlqQixNQUFNO1FBQ3BCO1FBQ0EsaUVBQWlFO1FBQ2pFLE9BQU9mLDZCQUE2QnNDLGVBQWUsQ0FBQ04sUUFBUTdCO0lBQ2hFO0lBQ0E7Ozs7O0tBS0MsR0FDRCxPQUFPbUMsZ0JBQWdCTixNQUFNLEVBQUU3QixPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3RDLElBQUk2QixPQUFPTyxNQUFNLEtBQUssS0FBS1AsT0FBT08sTUFBTSxLQUFLLElBQUk7WUFDN0MsTUFBTSxJQUFJeEIsTUFBTTtRQUNwQjtRQUNBLE1BQU0sQ0FBQ04sU0FBUytCLE9BQU83QixVQUFVVyxVQUFVbUIsSUFBSUMsT0FBT0MsTUFBTWpDLFlBQVlrQyxHQUFHQyxHQUFHQyxFQUFFLEdBQUdkO1FBQ25GLElBQUksQ0FBQ1gsaUJBQWlCLENBQUM7WUFBRVo7WUFBU21DO1FBQUU7UUFDcENqRSx1RUFBdUJBLENBQUM7WUFBRTZEO1lBQU83QjtZQUFVVztZQUFVb0I7WUFBT0U7WUFBR0M7WUFBR0M7UUFBRTtRQUNwRSxNQUFNQyxrQkFBa0IsRUFBRTtRQUMxQixPQUFPLElBQUkvQyw2QkFBNkI7WUFDcENTLFNBQVNoQixvRUFBa0JBLENBQUNnQjtZQUM1QitCO1lBQ0E3QjtZQUNBVztZQUNBbUI7WUFDQUM7WUFDQUM7WUFDQWpDLFlBQVlBLGVBQWUsUUFBUUEsZUFBZSxLQUFLLElBQUlBLGFBQWFxQztZQUN4RUgsR0FBR0EsTUFBTUksWUFBWXZELG9FQUFrQkEsQ0FBQ21ELEtBQUtJO1lBQzdDSDtZQUNBQztRQUNKLEdBQUczQztJQUNQO0lBQ0E7O0tBRUMsR0FDRDhDLGFBQWE7UUFDVCxJQUFJLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxPQUFPLElBQUksSUFBSSxDQUFDRCxLQUFLLENBQUNDLE9BQU8sQ0FBQ0MsUUFBUSxLQUFLLElBQUksQ0FBQ3hDLE1BQU0sQ0FBQ3dDLFFBQVEsSUFBSTtZQUM5RSxPQUFPLElBQUksQ0FBQ0YsS0FBSyxDQUFDQyxPQUFPLENBQUNULEtBQUs7UUFDbkM7UUFDQSxJQUFJVyxPQUFPLEtBQUssQ0FBQ0o7UUFDakJJLFFBQVFDLE9BQU9qRSw0REFBaUJBLENBQUMsSUFBSSxDQUFDcUIsVUFBVSxFQUFFLElBQUksQ0FBQ0UsTUFBTTtRQUM3RCxJQUFJUCxPQUFPa0QsUUFBUSxDQUFDLElBQUksR0FBRztZQUN2QixJQUFJLENBQUNMLEtBQUssQ0FBQ0MsT0FBTyxHQUFHO2dCQUNqQlQsT0FBT1c7Z0JBQ1BELFVBQVUsSUFBSSxDQUFDeEMsTUFBTSxDQUFDd0MsUUFBUTtZQUNsQztRQUNKO1FBQ0EsT0FBT0M7SUFDWDtJQUNBOztLQUVDLEdBQ0RHLGlCQUFpQjtRQUNiLE9BQU8sSUFBSSxDQUFDbEMsUUFBUSxHQUFHLElBQUksQ0FBQ1gsUUFBUSxHQUFHLElBQUksQ0FBQytCLEtBQUs7SUFDckQ7SUFDQTs7Ozs7Ozs7Ozs7O0tBWUMsR0FDRGUsTUFBTTtRQUNGLE9BQU87WUFDSC9ELDRFQUEwQkEsQ0FBQyxJQUFJLENBQUNlLE9BQU87WUFDdkNmLDRFQUEwQkEsQ0FBQyxJQUFJLENBQUM4QyxLQUFLO1lBQ3JDOUMsNEVBQTBCQSxDQUFDLElBQUksQ0FBQ2lCLFFBQVE7WUFDeENqQiw0RUFBMEJBLENBQUMsSUFBSSxDQUFDNEIsUUFBUTtZQUN4QyxJQUFJLENBQUNtQixFQUFFLEtBQUtPLFlBQVksSUFBSSxDQUFDUCxFQUFFLENBQUNpQixHQUFHLEdBQUd4QixXQUFXQyxJQUFJLENBQUMsRUFBRTtZQUN4RHpDLDRFQUEwQkEsQ0FBQyxJQUFJLENBQUNnRCxLQUFLO1lBQ3JDLElBQUksQ0FBQ0MsSUFBSTtZQUNULElBQUksQ0FBQ2pDLFVBQVU7WUFDZixJQUFJLENBQUNrQyxDQUFDLEtBQUtJLFlBQVl0RCw0RUFBMEJBLENBQUMsSUFBSSxDQUFDa0QsQ0FBQyxJQUFJVixXQUFXQyxJQUFJLENBQUMsRUFBRTtZQUM5RSxJQUFJLENBQUNVLENBQUMsS0FBS0csWUFBWXRELDRFQUEwQkEsQ0FBQyxJQUFJLENBQUNtRCxDQUFDLElBQUlYLFdBQVdDLElBQUksQ0FBQyxFQUFFO1lBQzlFLElBQUksQ0FBQ1csQ0FBQyxLQUFLRSxZQUFZdEQsNEVBQTBCQSxDQUFDLElBQUksQ0FBQ29ELENBQUMsSUFBSVosV0FBV0MsSUFBSSxDQUFDLEVBQUU7U0FDakY7SUFDTDtJQUNBOzs7Ozs7Ozs7S0FTQyxHQUNEd0IsWUFBWTtRQUNSLE1BQU1DLE9BQU8sSUFBSSxDQUFDSCxHQUFHO1FBQ3JCLE9BQU8xRSw0REFBZ0JBLENBQUNjLDZCQUE2QmpCLGdEQUFHQSxDQUFDaUYsTUFBTSxDQUFDRDtJQUNwRTtJQUNBOzs7Ozs7Ozs7Ozs7S0FZQyxHQUNERSxpQkFBaUJDLGNBQWMsSUFBSSxFQUFFO1FBQ2pDLE1BQU1ILE9BQU8sSUFBSSxDQUFDSCxHQUFHLEdBQUdPLEtBQUssQ0FBQyxHQUFHO1FBQ2pDLE1BQU1DLFVBQVVsRiw0REFBZ0JBLENBQUNjLDZCQUE2QmpCLGdEQUFHQSxDQUFDaUYsTUFBTSxDQUFDRDtRQUN6RSxJQUFJRyxhQUFhO1lBQ2IsT0FBT3JGLDBFQUFTQSxDQUFDdUY7UUFDckI7UUFDQSxPQUFPQTtJQUNYO0lBQ0E7Ozs7O0tBS0MsR0FDREMsT0FBTztRQUNILElBQUksQ0FBQyxJQUFJLENBQUNDLFFBQVEsSUFBSTtZQUNsQixNQUFNNUMsTUFBTSxJQUFJLENBQUNDLFNBQVMsQ0FBQztZQUMzQixNQUFNLElBQUlULE1BQU1RO1FBQ3BCO1FBQ0EsSUFBSWxCLE9BQU9rRCxRQUFRLENBQUMsSUFBSSxHQUFHO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUNMLEtBQUssQ0FBQ2dCLElBQUksRUFBRTtnQkFDbEIsSUFBSSxDQUFDaEIsS0FBSyxDQUFDZ0IsSUFBSSxHQUFHeEYsMEVBQVNBLENBQUMsSUFBSSxDQUFDaUYsU0FBUztZQUM5QztZQUNBLE9BQU8sSUFBSSxDQUFDVCxLQUFLLENBQUNnQixJQUFJO1FBQzFCO1FBQ0EsT0FBT3hGLDBFQUFTQSxDQUFDLElBQUksQ0FBQ2lGLFNBQVM7SUFDbkM7SUFDQTs7S0FFQyxHQUNEUyw4QkFBOEI7UUFDMUIsT0FBTyxJQUFJLENBQUNOLGdCQUFnQjtJQUNoQztJQUNBOztLQUVDLEdBQ0RPLHFCQUFxQjtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDRixRQUFRLElBQUk7WUFDbEIsTUFBTTVDLE1BQU0sSUFBSSxDQUFDQyxTQUFTLENBQUM7WUFDM0IsTUFBTSxJQUFJVCxNQUFNUTtRQUNwQjtRQUNBLE1BQU0rQyxVQUFVLElBQUksQ0FBQ0YsMkJBQTJCO1FBQ2hELE1BQU0sRUFBRXhCLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUUsR0FBRyxJQUFJO1FBQ3hCLElBQUksQ0FBQ3BCLGNBQWM7UUFDbkIsSUFBSTtZQUNBLE9BQU9sQywyREFBU0EsQ0FBQzhFLFNBQVMxQixJQUFJVSxPQUFPLEtBQ3JDNUQsNEVBQTBCQSxDQUFDbUQsSUFBSW5ELDRFQUEwQkEsQ0FBQ29EO1FBQzlELEVBQ0EsT0FBT3lCLEdBQUc7WUFDTixNQUFNaEQsTUFBTSxJQUFJLENBQUNDLFNBQVMsQ0FBQztZQUMzQixNQUFNLElBQUlULE1BQU1RO1FBQ3BCO0lBQ0o7SUFDQWlELGtCQUFrQjVCLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7UUFDdkIsTUFBTTNDLE9BQU9FLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNtRSxTQUFTLEdBQUc7WUFBRTdELFFBQVEsSUFBSSxDQUFDQSxNQUFNO1FBQUM7UUFDcEYsT0FBT1osNkJBQTZCNEIsVUFBVSxDQUFDO1lBQzNDbkIsU0FBUyxJQUFJLENBQUNBLE9BQU87WUFDckIrQixPQUFPLElBQUksQ0FBQ0EsS0FBSztZQUNqQjdCLFVBQVUsSUFBSSxDQUFDQSxRQUFRO1lBQ3ZCVyxVQUFVLElBQUksQ0FBQ0EsUUFBUTtZQUN2Qm1CLElBQUksSUFBSSxDQUFDQSxFQUFFO1lBQ1hDLE9BQU8sSUFBSSxDQUFDQSxLQUFLO1lBQ2pCQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmakMsWUFBWSxJQUFJLENBQUNBLFVBQVU7WUFDM0JrQyxHQUFHQSxJQUFJVSxPQUFPO1lBQ2RULEdBQUdwRCxvRUFBa0JBLENBQUNvRDtZQUN0QkMsR0FBR3JELG9FQUFrQkEsQ0FBQ3FEO1FBQzFCLEdBQUczQztJQUNQO0lBQ0E7O0tBRUMsR0FDRHVFLFNBQVM7UUFDTCxNQUFNQyxpQkFBaUJ2Riw0REFBaUJBLENBQUMsSUFBSSxDQUFDc0IsVUFBVTtRQUN4RCxPQUFPO1lBQ0hELFNBQVNuQiw2REFBV0EsQ0FBQyxJQUFJLENBQUNtQixPQUFPO1lBQ2pDK0IsT0FBT2xELDZEQUFXQSxDQUFDLElBQUksQ0FBQ2tELEtBQUs7WUFDN0I3QixVQUFVckIsNkRBQVdBLENBQUMsSUFBSSxDQUFDcUIsUUFBUTtZQUNuQ1csVUFBVWhDLDZEQUFXQSxDQUFDLElBQUksQ0FBQ2dDLFFBQVE7WUFDbkNtQixJQUFJLElBQUksQ0FBQ0EsRUFBRSxLQUFLTyxZQUFZLElBQUksQ0FBQ1AsRUFBRSxDQUFDM0MsUUFBUSxLQUFLa0Q7WUFDakROLE9BQU9wRCw2REFBV0EsQ0FBQyxJQUFJLENBQUNvRCxLQUFLO1lBQzdCQyxNQUFNOUQsc0RBQVVBLENBQUMsSUFBSSxDQUFDOEQsSUFBSTtZQUMxQmpDLFlBQVlpRTtZQUNaL0IsR0FBRyxJQUFJLENBQUNBLENBQUMsS0FBS0ksWUFBWTFELDZEQUFXQSxDQUFDLElBQUksQ0FBQ3NELENBQUMsSUFBSUk7WUFDaERILEdBQUcsSUFBSSxDQUFDQSxDQUFDLEtBQUtHLFlBQVkxRCw2REFBV0EsQ0FBQyxJQUFJLENBQUN1RCxDQUFDLElBQUlHO1lBQ2hERixHQUFHLElBQUksQ0FBQ0EsQ0FBQyxLQUFLRSxZQUFZMUQsNkRBQVdBLENBQUMsSUFBSSxDQUFDd0QsQ0FBQyxJQUFJRTtRQUNwRDtJQUNKO0lBQ0E7O0tBRUMsR0FDRDRCLFdBQVc7UUFDUCxJQUFJeEUsSUFBSXlFO1FBQ1IsSUFBSUQsV0FBVyxJQUFJLENBQUNFLHNCQUFzQjtRQUMxQyxtRkFBbUY7UUFDbkZGLFlBQVksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDakUsUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUNrRSxLQUFLLENBQUN6RSxLQUFLLElBQUksQ0FBQ00sVUFBVSxNQUFNLFFBQVFOLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR21DLE1BQU0sTUFBTSxRQUFRc0MsT0FBTyxLQUFLLElBQUlBLEtBQUssRUFBRSxDQUFDO1FBQzNLLE9BQU9EO0lBQ1g7SUFDQTs7Ozs7S0FLQyxHQUNEcEQsVUFBVUQsR0FBRyxFQUFFO1FBQ1gsT0FBTyxDQUFDLEVBQUVBLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQ3FELFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDeEM7QUFDSixFQUNBLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL3R4L2VpcDI5MzBUcmFuc2FjdGlvbi5qcz8wMzhjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSAnZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2tlY2Nhay5qcyc7XG5pbXBvcnQgeyB2YWxpZGF0ZU5vTGVhZGluZ1plcm9lcyB9IGZyb20gJ3dlYjMtdmFsaWRhdG9yJztcbmltcG9ydCB7IFJMUCB9IGZyb20gJ0BldGhlcmV1bWpzL3JscCc7XG5pbXBvcnQgeyBieXRlc1RvSGV4LCBoZXhUb0J5dGVzLCB1aW50OEFycmF5Q29uY2F0LCB1aW50OEFycmF5RXF1YWxzIH0gZnJvbSAnd2ViMy11dGlscyc7XG5pbXBvcnQgeyBNQVhfSU5URUdFUiB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGdldEFjY2Vzc0xpc3REYXRhLCB2ZXJpZnlBY2Nlc3NMaXN0LCBnZXRBY2Nlc3NMaXN0SlNPTiwgZ2V0RGF0YUZlZUVJUDI5MzAsIH0gZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgeyBiaWdJbnRUb0hleCwgdG9VaW50OEFycmF5LCBlY3JlY292ZXIsIHVpbnQ4QXJyYXlUb0JpZ0ludCwgYmlnSW50VG9VbnBhZGRlZFVpbnQ4QXJyYXksIH0gZnJvbSAnLi4vY29tbW9uL3V0aWxzLmpzJztcbmltcG9ydCB7IEJhc2VUcmFuc2FjdGlvbiB9IGZyb20gJy4vYmFzZVRyYW5zYWN0aW9uLmpzJztcbmNvbnN0IFRSQU5TQUNUSU9OX1RZUEUgPSAxO1xuY29uc3QgVFJBTlNBQ1RJT05fVFlQRV9VSU5UOEFSUkFZID0gaGV4VG9CeXRlcyhUUkFOU0FDVElPTl9UWVBFLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKTtcbi8qKlxuICogVHlwZWQgdHJhbnNhY3Rpb24gd2l0aCBvcHRpb25hbCBhY2Nlc3MgbGlzdHNcbiAqXG4gKiAtIFRyYW5zYWN0aW9uVHlwZTogMVxuICogLSBFSVA6IFtFSVAtMjkzMF0oaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0yOTMwKVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbmV4cG9ydCBjbGFzcyBBY2Nlc3NMaXN0RUlQMjkzMFRyYW5zYWN0aW9uIGV4dGVuZHMgQmFzZVRyYW5zYWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGNvbnN0cnVjdG9yIHRha2VzIHRoZSB2YWx1ZXMsIHZhbGlkYXRlcyB0aGVtLCBhc3NpZ25zIHRoZW0gYW5kIGZyZWV6ZXMgdGhlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEl0IGlzIG5vdCByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gSW5zdGVhZCB1c2VcbiAgICAgKiB0aGUgc3RhdGljIGZhY3RvcnkgbWV0aG9kcyB0byBhc3Npc3QgaW4gY3JlYXRpbmcgYSBUcmFuc2FjdGlvbiBvYmplY3QgZnJvbVxuICAgICAqIHZhcnlpbmcgZGF0YSB0eXBlcy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0eERhdGEsIG9wdHMgPSB7fSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdHhEYXRhKSwgeyB0eXBlOiBUUkFOU0FDVElPTl9UWVBFIH0pLCBvcHRzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkZWZhdWx0IEhGIGlmIHRoZSB0eCB0eXBlIGlzIGFjdGl2ZSBvbiB0aGF0IEhGXG4gICAgICAgICAqIG9yIHRoZSBmaXJzdCBncmVhdGVyIEhGIHdoZXJlIHRoZSB0eCBpcyBhY3RpdmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBoaWRkZW5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuREVGQVVMVF9IQVJERk9SSyA9ICdiZXJsaW4nO1xuICAgICAgICBjb25zdCB7IGNoYWluSWQsIGFjY2Vzc0xpc3QsIGdhc1ByaWNlIH0gPSB0eERhdGE7XG4gICAgICAgIHRoaXMuY29tbW9uID0gdGhpcy5fZ2V0Q29tbW9uKG9wdHMuY29tbW9uLCBjaGFpbklkKTtcbiAgICAgICAgdGhpcy5jaGFpbklkID0gdGhpcy5jb21tb24uY2hhaW5JZCgpO1xuICAgICAgICAvLyBFSVAtMjcxOCBjaGVjayBpcyBkb25lIGluIENvbW1vblxuICAgICAgICBpZiAoIXRoaXMuY29tbW9uLmlzQWN0aXZhdGVkRUlQKDI5MzApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VJUC0yOTMwIG5vdCBlbmFibGVkIG9uIENvbW1vbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZlQ2FwYWJpbGl0aWVzID0gdGhpcy5hY3RpdmVDYXBhYmlsaXRpZXMuY29uY2F0KFsyNzE4LCAyOTMwXSk7XG4gICAgICAgIC8vIFBvcHVsYXRlIHRoZSBhY2Nlc3MgbGlzdCBmaWVsZHNcbiAgICAgICAgY29uc3QgYWNjZXNzTGlzdERhdGEgPSBnZXRBY2Nlc3NMaXN0RGF0YShhY2Nlc3NMaXN0ICE9PSBudWxsICYmIGFjY2Vzc0xpc3QgIT09IHZvaWQgMCA/IGFjY2Vzc0xpc3QgOiBbXSk7XG4gICAgICAgIHRoaXMuYWNjZXNzTGlzdCA9IGFjY2Vzc0xpc3REYXRhLmFjY2Vzc0xpc3Q7XG4gICAgICAgIHRoaXMuQWNjZXNzTGlzdEpTT04gPSBhY2Nlc3NMaXN0RGF0YS5BY2Nlc3NMaXN0SlNPTjtcbiAgICAgICAgLy8gVmVyaWZ5IHRoZSBhY2Nlc3MgbGlzdCBmb3JtYXQuXG4gICAgICAgIHZlcmlmeUFjY2Vzc0xpc3QodGhpcy5hY2Nlc3NMaXN0KTtcbiAgICAgICAgdGhpcy5nYXNQcmljZSA9IHVpbnQ4QXJyYXlUb0JpZ0ludCh0b1VpbnQ4QXJyYXkoZ2FzUHJpY2UgPT09ICcnID8gJzB4JyA6IGdhc1ByaWNlKSk7XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRlQ2Fubm90RXhjZWVkTWF4SW50ZWdlcih7XG4gICAgICAgICAgICBnYXNQcmljZTogdGhpcy5nYXNQcmljZSxcbiAgICAgICAgfSk7XG4gICAgICAgIEJhc2VUcmFuc2FjdGlvbi5fdmFsaWRhdGVOb3RBcnJheSh0eERhdGEpO1xuICAgICAgICBpZiAodGhpcy5nYXNQcmljZSAqIHRoaXMuZ2FzTGltaXQgPiBNQVhfSU5URUdFUikge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gdGhpcy5fZXJyb3JNc2coJ2dhc0xpbWl0ICogZ2FzUHJpY2UgY2Fubm90IGV4Y2VlZCBNQVhfSU5URUdFUicpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFsaWRhdGVZUGFyaXR5KCk7XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRlSGlnaFMoKTtcbiAgICAgICAgY29uc3QgZnJlZXplID0gKF9hID0gb3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLmZyZWV6ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHJ1ZTtcbiAgICAgICAgaWYgKGZyZWV6ZSkge1xuICAgICAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSBhIHRyYW5zYWN0aW9uIGZyb20gYSBkYXRhIGRpY3Rpb25hcnkuXG4gICAgICpcbiAgICAgKiBGb3JtYXQ6IHsgY2hhaW5JZCwgbm9uY2UsIGdhc1ByaWNlLCBnYXNMaW1pdCwgdG8sIHZhbHVlLCBkYXRhLCBhY2Nlc3NMaXN0LFxuICAgICAqIHYsIHIsIHMgfVxuICAgICAqXG4gICAgICogTm90ZXM6XG4gICAgICogLSBgY2hhaW5JZGAgd2lsbCBiZSBzZXQgYXV0b21hdGljYWxseSBpZiBub3QgcHJvdmlkZWRcbiAgICAgKiAtIEFsbCBwYXJhbWV0ZXJzIGFyZSBvcHRpb25hbCBhbmQgaGF2ZSBzb21lIGJhc2ljIGRlZmF1bHQgdmFsdWVzXG4gICAgICovXG4gICAgc3RhdGljIGZyb21UeERhdGEodHhEYXRhLCBvcHRzID0ge30pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBY2Nlc3NMaXN0RUlQMjkzMFRyYW5zYWN0aW9uKHR4RGF0YSwgb3B0cyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlIGEgdHJhbnNhY3Rpb24gZnJvbSB0aGUgc2VyaWFsaXplZCB0eC5cbiAgICAgKlxuICAgICAqIEZvcm1hdDogYDB4MDEgfHwgcmxwKFtjaGFpbklkLCBub25jZSwgZ2FzUHJpY2UsIGdhc0xpbWl0LCB0bywgdmFsdWUsIGRhdGEsIGFjY2Vzc0xpc3QsXG4gICAgICogc2lnbmF0dXJlWVBhcml0eSAodiksIHNpZ25hdHVyZVIgKHIpLCBzaWduYXR1cmVTIChzKV0pYFxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tU2VyaWFsaXplZFR4KHNlcmlhbGl6ZWQsIG9wdHMgPSB7fSkge1xuICAgICAgICBpZiAoIXVpbnQ4QXJyYXlFcXVhbHMoc2VyaWFsaXplZC5zdWJhcnJheSgwLCAxKSwgVFJBTlNBQ1RJT05fVFlQRV9VSU5UOEFSUkFZKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNlcmlhbGl6ZWQgdHggaW5wdXQ6IG5vdCBhbiBFSVAtMjkzMCB0cmFuc2FjdGlvbiAod3JvbmcgdHggdHlwZSwgZXhwZWN0ZWQ6ICR7VFJBTlNBQ1RJT05fVFlQRX0sIHJlY2VpdmVkOiAke2J5dGVzVG9IZXgoc2VyaWFsaXplZC5zdWJhcnJheSgwLCAxKSl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWVzID0gUkxQLmRlY29kZShVaW50OEFycmF5LmZyb20oc2VyaWFsaXplZC5zdWJhcnJheSgxKSkpO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNlcmlhbGl6ZWQgdHggaW5wdXQ6IG11c3QgYmUgYXJyYXknKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICByZXR1cm4gQWNjZXNzTGlzdEVJUDI5MzBUcmFuc2FjdGlvbi5mcm9tVmFsdWVzQXJyYXkodmFsdWVzLCBvcHRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgdHJhbnNhY3Rpb24gZnJvbSBhIHZhbHVlcyBhcnJheS5cbiAgICAgKlxuICAgICAqIEZvcm1hdDogYFtjaGFpbklkLCBub25jZSwgZ2FzUHJpY2UsIGdhc0xpbWl0LCB0bywgdmFsdWUsIGRhdGEsIGFjY2Vzc0xpc3QsXG4gICAgICogc2lnbmF0dXJlWVBhcml0eSAodiksIHNpZ25hdHVyZVIgKHIpLCBzaWduYXR1cmVTIChzKV1gXG4gICAgICovXG4gICAgc3RhdGljIGZyb21WYWx1ZXNBcnJheSh2YWx1ZXMsIG9wdHMgPSB7fSkge1xuICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCAhPT0gOCAmJiB2YWx1ZXMubGVuZ3RoICE9PSAxMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEVJUC0yOTMwIHRyYW5zYWN0aW9uLiBPbmx5IGV4cGVjdGluZyA4IHZhbHVlcyAoZm9yIHVuc2lnbmVkIHR4KSBvciAxMSB2YWx1ZXMgKGZvciBzaWduZWQgdHgpLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtjaGFpbklkLCBub25jZSwgZ2FzUHJpY2UsIGdhc0xpbWl0LCB0bywgdmFsdWUsIGRhdGEsIGFjY2Vzc0xpc3QsIHYsIHIsIHNdID0gdmFsdWVzO1xuICAgICAgICB0aGlzLl92YWxpZGF0ZU5vdEFycmF5KHsgY2hhaW5JZCwgdiB9KTtcbiAgICAgICAgdmFsaWRhdGVOb0xlYWRpbmdaZXJvZXMoeyBub25jZSwgZ2FzUHJpY2UsIGdhc0xpbWl0LCB2YWx1ZSwgdiwgciwgcyB9KTtcbiAgICAgICAgY29uc3QgZW1wdHlBY2Nlc3NMaXN0ID0gW107XG4gICAgICAgIHJldHVybiBuZXcgQWNjZXNzTGlzdEVJUDI5MzBUcmFuc2FjdGlvbih7XG4gICAgICAgICAgICBjaGFpbklkOiB1aW50OEFycmF5VG9CaWdJbnQoY2hhaW5JZCksXG4gICAgICAgICAgICBub25jZSxcbiAgICAgICAgICAgIGdhc1ByaWNlLFxuICAgICAgICAgICAgZ2FzTGltaXQsXG4gICAgICAgICAgICB0byxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIGFjY2Vzc0xpc3Q6IGFjY2Vzc0xpc3QgIT09IG51bGwgJiYgYWNjZXNzTGlzdCAhPT0gdm9pZCAwID8gYWNjZXNzTGlzdCA6IGVtcHR5QWNjZXNzTGlzdCxcbiAgICAgICAgICAgIHY6IHYgIT09IHVuZGVmaW5lZCA/IHVpbnQ4QXJyYXlUb0JpZ0ludCh2KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBzLFxuICAgICAgICB9LCBvcHRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGFtb3VudCBvZiBnYXMgcGFpZCBmb3IgdGhlIGRhdGEgaW4gdGhpcyB0eFxuICAgICAqL1xuICAgIGdldERhdGFGZWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlLmRhdGFGZWUgJiYgdGhpcy5jYWNoZS5kYXRhRmVlLmhhcmRmb3JrID09PSB0aGlzLmNvbW1vbi5oYXJkZm9yaygpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5kYXRhRmVlLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb3N0ID0gc3VwZXIuZ2V0RGF0YUZlZSgpO1xuICAgICAgICBjb3N0ICs9IEJpZ0ludChnZXREYXRhRmVlRUlQMjkzMCh0aGlzLmFjY2Vzc0xpc3QsIHRoaXMuY29tbW9uKSk7XG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4odGhpcykpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuZGF0YUZlZSA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogY29zdCxcbiAgICAgICAgICAgICAgICBoYXJkZm9yazogdGhpcy5jb21tb24uaGFyZGZvcmsoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvc3Q7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB1cCBmcm9udCBhbW91bnQgdGhhdCBhbiBhY2NvdW50IG11c3QgaGF2ZSBmb3IgdGhpcyB0cmFuc2FjdGlvbiB0byBiZSB2YWxpZFxuICAgICAqL1xuICAgIGdldFVwZnJvbnRDb3N0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nYXNMaW1pdCAqIHRoaXMuZ2FzUHJpY2UgKyB0aGlzLnZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgVWludDhBcnJheSBBcnJheSBvZiB0aGUgcmF3IFVpbnQ4QXJyYXlzIG9mIHRoZSBFSVAtMjkzMCB0cmFuc2FjdGlvbiwgaW4gb3JkZXIuXG4gICAgICpcbiAgICAgKiBGb3JtYXQ6IGBbY2hhaW5JZCwgbm9uY2UsIGdhc1ByaWNlLCBnYXNMaW1pdCwgdG8sIHZhbHVlLCBkYXRhLCBhY2Nlc3NMaXN0LFxuICAgICAqIHNpZ25hdHVyZVlQYXJpdHkgKHYpLCBzaWduYXR1cmVSIChyKSwgc2lnbmF0dXJlUyAocyldYFxuICAgICAqXG4gICAgICogVXNlIHtAbGluayBBY2Nlc3NMaXN0RUlQMjkzMFRyYW5zYWN0aW9uLnNlcmlhbGl6ZX0gdG8gYWRkIGEgdHJhbnNhY3Rpb24gdG8gYSBibG9ja1xuICAgICAqIHdpdGgge0BsaW5rIEJsb2NrLmZyb21WYWx1ZXNBcnJheX0uXG4gICAgICpcbiAgICAgKiBGb3IgYW4gdW5zaWduZWQgdHggdGhpcyBtZXRob2QgdXNlcyB0aGUgZW1wdHkgVUlOVDhBUlJBWSB2YWx1ZXMgZm9yIHRoZVxuICAgICAqIHNpZ25hdHVyZSBwYXJhbWV0ZXJzIGB2YCwgYHJgIGFuZCBgc2AgZm9yIGVuY29kaW5nLiBGb3IgYW4gRUlQLTE1NSBjb21wbGlhbnRcbiAgICAgKiByZXByZXNlbnRhdGlvbiBmb3IgZXh0ZXJuYWwgc2lnbmluZyB1c2Uge0BsaW5rIEFjY2Vzc0xpc3RFSVAyOTMwVHJhbnNhY3Rpb24uZ2V0TWVzc2FnZVRvU2lnbn0uXG4gICAgICovXG4gICAgcmF3KCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgYmlnSW50VG9VbnBhZGRlZFVpbnQ4QXJyYXkodGhpcy5jaGFpbklkKSxcbiAgICAgICAgICAgIGJpZ0ludFRvVW5wYWRkZWRVaW50OEFycmF5KHRoaXMubm9uY2UpLFxuICAgICAgICAgICAgYmlnSW50VG9VbnBhZGRlZFVpbnQ4QXJyYXkodGhpcy5nYXNQcmljZSksXG4gICAgICAgICAgICBiaWdJbnRUb1VucGFkZGVkVWludDhBcnJheSh0aGlzLmdhc0xpbWl0KSxcbiAgICAgICAgICAgIHRoaXMudG8gIT09IHVuZGVmaW5lZCA/IHRoaXMudG8uYnVmIDogVWludDhBcnJheS5mcm9tKFtdKSxcbiAgICAgICAgICAgIGJpZ0ludFRvVW5wYWRkZWRVaW50OEFycmF5KHRoaXMudmFsdWUpLFxuICAgICAgICAgICAgdGhpcy5kYXRhLFxuICAgICAgICAgICAgdGhpcy5hY2Nlc3NMaXN0LFxuICAgICAgICAgICAgdGhpcy52ICE9PSB1bmRlZmluZWQgPyBiaWdJbnRUb1VucGFkZGVkVWludDhBcnJheSh0aGlzLnYpIDogVWludDhBcnJheS5mcm9tKFtdKSxcbiAgICAgICAgICAgIHRoaXMuciAhPT0gdW5kZWZpbmVkID8gYmlnSW50VG9VbnBhZGRlZFVpbnQ4QXJyYXkodGhpcy5yKSA6IFVpbnQ4QXJyYXkuZnJvbShbXSksXG4gICAgICAgICAgICB0aGlzLnMgIT09IHVuZGVmaW5lZCA/IGJpZ0ludFRvVW5wYWRkZWRVaW50OEFycmF5KHRoaXMucykgOiBVaW50OEFycmF5LmZyb20oW10pLFxuICAgICAgICBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzZXJpYWxpemVkIGVuY29kaW5nIG9mIHRoZSBFSVAtMjkzMCB0cmFuc2FjdGlvbi5cbiAgICAgKlxuICAgICAqIEZvcm1hdDogYDB4MDEgfHwgcmxwKFtjaGFpbklkLCBub25jZSwgZ2FzUHJpY2UsIGdhc0xpbWl0LCB0bywgdmFsdWUsIGRhdGEsIGFjY2Vzc0xpc3QsXG4gICAgICogc2lnbmF0dXJlWVBhcml0eSAodiksIHNpZ25hdHVyZVIgKHIpLCBzaWduYXR1cmVTIChzKV0pYFxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGluIGNvbnRyYXN0IHRvIHRoZSBsZWdhY3kgdHggc2VyaWFsaXphdGlvbiBmb3JtYXQgdGhpcyBpcyBub3RcbiAgICAgKiB2YWxpZCBSTFAgYW55IG1vcmUgZHVlIHRvIHRoZSByYXcgdHggdHlwZSBwcmVjZWRpbmcgYW5kIGNvbmNhdGVuYXRlZCB0b1xuICAgICAqIHRoZSBSTFAgZW5jb2Rpbmcgb2YgdGhlIHZhbHVlcy5cbiAgICAgKi9cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIGNvbnN0IGJhc2UgPSB0aGlzLnJhdygpO1xuICAgICAgICByZXR1cm4gdWludDhBcnJheUNvbmNhdChUUkFOU0FDVElPTl9UWVBFX1VJTlQ4QVJSQVksIFJMUC5lbmNvZGUoYmFzZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzZXJpYWxpemVkIHVuc2lnbmVkIHR4IChoYXNoZWQgb3IgcmF3KSwgd2hpY2ggY2FuIGJlIHVzZWRcbiAgICAgKiB0byBzaWduIHRoZSB0cmFuc2FjdGlvbiAoZS5nLiBmb3Igc2VuZGluZyB0byBhIGhhcmR3YXJlIHdhbGxldCkuXG4gICAgICpcbiAgICAgKiBOb3RlOiBpbiBjb250cmFzdCB0byB0aGUgbGVnYWN5IHR4IHRoZSByYXcgbWVzc2FnZSBmb3JtYXQgaXMgYWxyZWFkeVxuICAgICAqIHNlcmlhbGl6ZWQgYW5kIGRvZXNuJ3QgbmVlZCB0byBiZSBSTFAgZW5jb2RlZCBhbnkgbW9yZS5cbiAgICAgKlxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiBjb25zdCBzZXJpYWxpemVkTWVzc2FnZSA9IHR4LmdldE1lc3NhZ2VUb1NpZ24oZmFsc2UpIC8vIHVzZSB0aGlzIGZvciB0aGUgSFcgd2FsbGV0IGlucHV0XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFzaE1lc3NhZ2UgLSBSZXR1cm4gaGFzaGVkIG1lc3NhZ2UgaWYgc2V0IHRvIHRydWUgKGRlZmF1bHQ6IHRydWUpXG4gICAgICovXG4gICAgZ2V0TWVzc2FnZVRvU2lnbihoYXNoTWVzc2FnZSA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgYmFzZSA9IHRoaXMucmF3KCkuc2xpY2UoMCwgOCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB1aW50OEFycmF5Q29uY2F0KFRSQU5TQUNUSU9OX1RZUEVfVUlOVDhBUlJBWSwgUkxQLmVuY29kZShiYXNlKSk7XG4gICAgICAgIGlmIChoYXNoTWVzc2FnZSkge1xuICAgICAgICAgICAgcmV0dXJuIGtlY2NhazI1NihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYSBzaGEzLTI1NiBoYXNoIG9mIHRoZSBzZXJpYWxpemVkIHR4LlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBmb3Igc2lnbmVkIHR4cyAoaXQgdGhyb3dzIG90aGVyd2lzZSkuXG4gICAgICogVXNlIHtAbGluayBBY2Nlc3NMaXN0RUlQMjkzMFRyYW5zYWN0aW9uLmdldE1lc3NhZ2VUb1NpZ259IHRvIGdldCBhIHR4IGhhc2ggZm9yIHRoZSBwdXJwb3NlIG9mIHNpZ25pbmcuXG4gICAgICovXG4gICAgaGFzaCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU2lnbmVkKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IHRoaXMuX2Vycm9yTXNnKCdDYW5ub3QgY2FsbCBoYXNoIG1ldGhvZCBpZiB0cmFuc2FjdGlvbiBpcyBub3Qgc2lnbmVkJyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuKHRoaXMpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY2FjaGUuaGFzaCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGUuaGFzaCA9IGtlY2NhazI1Nih0aGlzLnNlcmlhbGl6ZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmhhc2g7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtlY2NhazI1Nih0aGlzLnNlcmlhbGl6ZSgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYSBzaGEzLTI1NiBoYXNoIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHZlcmlmeSB0aGUgc2lnbmF0dXJlXG4gICAgICovXG4gICAgZ2V0TWVzc2FnZVRvVmVyaWZ5U2lnbmF0dXJlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNZXNzYWdlVG9TaWduKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHB1YmxpYyBrZXkgb2YgdGhlIHNlbmRlclxuICAgICAqL1xuICAgIGdldFNlbmRlclB1YmxpY0tleSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU2lnbmVkKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IHRoaXMuX2Vycm9yTXNnKCdDYW5ub3QgY2FsbCB0aGlzIG1ldGhvZCBpZiB0cmFuc2FjdGlvbiBpcyBub3Qgc2lnbmVkJyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtc2dIYXNoID0gdGhpcy5nZXRNZXNzYWdlVG9WZXJpZnlTaWduYXR1cmUoKTtcbiAgICAgICAgY29uc3QgeyB2LCByLCBzIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLl92YWxpZGF0ZUhpZ2hTKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZWNyZWNvdmVyKG1zZ0hhc2gsIHYgKyBCaWdJbnQoMjcpLCAvLyBSZWNvdmVyIHRoZSAyNyB3aGljaCB3YXMgc3RyaXBwZWQgZnJvbSBlY3NpZ25cbiAgICAgICAgICAgIGJpZ0ludFRvVW5wYWRkZWRVaW50OEFycmF5KHIpLCBiaWdJbnRUb1VucGFkZGVkVWludDhBcnJheShzKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IHRoaXMuX2Vycm9yTXNnKCdJbnZhbGlkIFNpZ25hdHVyZScpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3Byb2Nlc3NTaWduYXR1cmUodiwgciwgcykge1xuICAgICAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnR4T3B0aW9ucyksIHsgY29tbW9uOiB0aGlzLmNvbW1vbiB9KTtcbiAgICAgICAgcmV0dXJuIEFjY2Vzc0xpc3RFSVAyOTMwVHJhbnNhY3Rpb24uZnJvbVR4RGF0YSh7XG4gICAgICAgICAgICBjaGFpbklkOiB0aGlzLmNoYWluSWQsXG4gICAgICAgICAgICBub25jZTogdGhpcy5ub25jZSxcbiAgICAgICAgICAgIGdhc1ByaWNlOiB0aGlzLmdhc1ByaWNlLFxuICAgICAgICAgICAgZ2FzTGltaXQ6IHRoaXMuZ2FzTGltaXQsXG4gICAgICAgICAgICB0bzogdGhpcy50byxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgICAgICAgYWNjZXNzTGlzdDogdGhpcy5hY2Nlc3NMaXN0LFxuICAgICAgICAgICAgdjogdiAtIEJpZ0ludCgyNyksXG4gICAgICAgICAgICByOiB1aW50OEFycmF5VG9CaWdJbnQociksXG4gICAgICAgICAgICBzOiB1aW50OEFycmF5VG9CaWdJbnQocyksXG4gICAgICAgIH0sIG9wdHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgYWNjZXNzTGlzdEpTT04gPSBnZXRBY2Nlc3NMaXN0SlNPTih0aGlzLmFjY2Vzc0xpc3QpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhaW5JZDogYmlnSW50VG9IZXgodGhpcy5jaGFpbklkKSxcbiAgICAgICAgICAgIG5vbmNlOiBiaWdJbnRUb0hleCh0aGlzLm5vbmNlKSxcbiAgICAgICAgICAgIGdhc1ByaWNlOiBiaWdJbnRUb0hleCh0aGlzLmdhc1ByaWNlKSxcbiAgICAgICAgICAgIGdhc0xpbWl0OiBiaWdJbnRUb0hleCh0aGlzLmdhc0xpbWl0KSxcbiAgICAgICAgICAgIHRvOiB0aGlzLnRvICE9PSB1bmRlZmluZWQgPyB0aGlzLnRvLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWx1ZTogYmlnSW50VG9IZXgodGhpcy52YWx1ZSksXG4gICAgICAgICAgICBkYXRhOiBieXRlc1RvSGV4KHRoaXMuZGF0YSksXG4gICAgICAgICAgICBhY2Nlc3NMaXN0OiBhY2Nlc3NMaXN0SlNPTixcbiAgICAgICAgICAgIHY6IHRoaXMudiAhPT0gdW5kZWZpbmVkID8gYmlnSW50VG9IZXgodGhpcy52KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHI6IHRoaXMuciAhPT0gdW5kZWZpbmVkID8gYmlnSW50VG9IZXgodGhpcy5yKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHM6IHRoaXMucyAhPT0gdW5kZWZpbmVkID8gYmlnSW50VG9IZXgodGhpcy5zKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgY29tcGFjdCBlcnJvciBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxuICAgICAqL1xuICAgIGVycm9yU3RyKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBsZXQgZXJyb3JTdHIgPSB0aGlzLl9nZXRTaGFyZWRFcnJvclBvc3RmaXgoKTtcbiAgICAgICAgLy8gS2VlcCA/IGZvciB0aGlzLmFjY2Vzc0xpc3Qgc2luY2UgdGhpcyBvdGhlcndpc2UgY2F1c2VzIEhhcmRoYXQgRTJFIHRlc3RzIHRvIGZhaWxcbiAgICAgICAgZXJyb3JTdHIgKz0gYCBnYXNQcmljZT0ke3RoaXMuZ2FzUHJpY2V9IGFjY2Vzc0xpc3RDb3VudD0keyhfYiA9IChfYSA9IHRoaXMuYWNjZXNzTGlzdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogMH1gO1xuICAgICAgICByZXR1cm4gZXJyb3JTdHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYW4gYW5ub3RhdGVkIGVycm9yIG1lc3NhZ2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtc2cgQmFzZSBlcnJvciBtZXNzYWdlXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9lcnJvck1zZyhtc2cpIHtcbiAgICAgICAgcmV0dXJuIGAke21zZ30gKCR7dGhpcy5lcnJvclN0cigpfSlgO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVpcDI5MzBUcmFuc2FjdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsia2VjY2FrMjU2IiwidmFsaWRhdGVOb0xlYWRpbmdaZXJvZXMiLCJSTFAiLCJieXRlc1RvSGV4IiwiaGV4VG9CeXRlcyIsInVpbnQ4QXJyYXlDb25jYXQiLCJ1aW50OEFycmF5RXF1YWxzIiwiTUFYX0lOVEVHRVIiLCJnZXRBY2Nlc3NMaXN0RGF0YSIsInZlcmlmeUFjY2Vzc0xpc3QiLCJnZXRBY2Nlc3NMaXN0SlNPTiIsImdldERhdGFGZWVFSVAyOTMwIiwiYmlnSW50VG9IZXgiLCJ0b1VpbnQ4QXJyYXkiLCJlY3JlY292ZXIiLCJ1aW50OEFycmF5VG9CaWdJbnQiLCJiaWdJbnRUb1VucGFkZGVkVWludDhBcnJheSIsIkJhc2VUcmFuc2FjdGlvbiIsIlRSQU5TQUNUSU9OX1RZUEUiLCJUUkFOU0FDVElPTl9UWVBFX1VJTlQ4QVJSQVkiLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiQWNjZXNzTGlzdEVJUDI5MzBUcmFuc2FjdGlvbiIsImNvbnN0cnVjdG9yIiwidHhEYXRhIiwib3B0cyIsIl9hIiwiT2JqZWN0IiwiYXNzaWduIiwidHlwZSIsIkRFRkFVTFRfSEFSREZPUksiLCJjaGFpbklkIiwiYWNjZXNzTGlzdCIsImdhc1ByaWNlIiwiY29tbW9uIiwiX2dldENvbW1vbiIsImlzQWN0aXZhdGVkRUlQIiwiRXJyb3IiLCJhY3RpdmVDYXBhYmlsaXRpZXMiLCJjb25jYXQiLCJhY2Nlc3NMaXN0RGF0YSIsIkFjY2Vzc0xpc3RKU09OIiwiX3ZhbGlkYXRlQ2Fubm90RXhjZWVkTWF4SW50ZWdlciIsIl92YWxpZGF0ZU5vdEFycmF5IiwiZ2FzTGltaXQiLCJtc2ciLCJfZXJyb3JNc2ciLCJfdmFsaWRhdGVZUGFyaXR5IiwiX3ZhbGlkYXRlSGlnaFMiLCJmcmVlemUiLCJmcm9tVHhEYXRhIiwiZnJvbVNlcmlhbGl6ZWRUeCIsInNlcmlhbGl6ZWQiLCJzdWJhcnJheSIsInZhbHVlcyIsImRlY29kZSIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwiQXJyYXkiLCJpc0FycmF5IiwiZnJvbVZhbHVlc0FycmF5IiwibGVuZ3RoIiwibm9uY2UiLCJ0byIsInZhbHVlIiwiZGF0YSIsInYiLCJyIiwicyIsImVtcHR5QWNjZXNzTGlzdCIsInVuZGVmaW5lZCIsImdldERhdGFGZWUiLCJjYWNoZSIsImRhdGFGZWUiLCJoYXJkZm9yayIsImNvc3QiLCJCaWdJbnQiLCJpc0Zyb3plbiIsImdldFVwZnJvbnRDb3N0IiwicmF3IiwiYnVmIiwic2VyaWFsaXplIiwiYmFzZSIsImVuY29kZSIsImdldE1lc3NhZ2VUb1NpZ24iLCJoYXNoTWVzc2FnZSIsInNsaWNlIiwibWVzc2FnZSIsImhhc2giLCJpc1NpZ25lZCIsImdldE1lc3NhZ2VUb1ZlcmlmeVNpZ25hdHVyZSIsImdldFNlbmRlclB1YmxpY0tleSIsIm1zZ0hhc2giLCJlIiwiX3Byb2Nlc3NTaWduYXR1cmUiLCJ0eE9wdGlvbnMiLCJ0b0pTT04iLCJhY2Nlc3NMaXN0SlNPTiIsImVycm9yU3RyIiwiX2IiLCJfZ2V0U2hhcmVkRXJyb3JQb3N0Zml4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/eip2930Transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/index.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/tx/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessListEIP2930Transaction: () => (/* reexport safe */ _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_1__.AccessListEIP2930Transaction),\n/* harmony export */   BaseTransaction: () => (/* reexport safe */ _baseTransaction_js__WEBPACK_IMPORTED_MODULE_4__.BaseTransaction),\n/* harmony export */   Capability: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_6__.Capability),\n/* harmony export */   FeeMarketEIP1559Transaction: () => (/* reexport safe */ _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_0__.FeeMarketEIP1559Transaction),\n/* harmony export */   Transaction: () => (/* reexport safe */ _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_2__.Transaction),\n/* harmony export */   TransactionFactory: () => (/* reexport safe */ _transactionFactory_js__WEBPACK_IMPORTED_MODULE_3__.TransactionFactory),\n/* harmony export */   isAccessList: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_6__.isAccessList),\n/* harmony export */   isAccessListUint8Array: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_6__.isAccessListUint8Array),\n/* harmony export */   txUtils: () => (/* reexport module object */ _utils_js__WEBPACK_IMPORTED_MODULE_5__)\n/* harmony export */ });\n/* harmony import */ var _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eip1559Transaction.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/eip1559Transaction.js\");\n/* harmony import */ var _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eip2930Transaction.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/eip2930Transaction.js\");\n/* harmony import */ var _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./legacyTransaction.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/legacyTransaction.js\");\n/* harmony import */ var _transactionFactory_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transactionFactory.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/transactionFactory.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./baseTransaction.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/baseTransaction.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/utils.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/types.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ // @ethereumjs/tx version 4.1.1\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS90eC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQ0EsK0JBQStCO0FBQ3VDO0FBQ0M7QUFDbEI7QUFDUTtBQUNOO0FBQ2pCO0FBQ1gsQ0FDM0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWFjY291bnRzL2xpYi9lc20vdHgvaW5kZXguanM/YzQwMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxud2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG5pdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbnRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4oYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG53ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG5idXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8vIEBldGhlcmV1bWpzL3R4IHZlcnNpb24gNC4xLjFcbmV4cG9ydCB7IEZlZU1hcmtldEVJUDE1NTlUcmFuc2FjdGlvbiB9IGZyb20gJy4vZWlwMTU1OVRyYW5zYWN0aW9uLmpzJztcbmV4cG9ydCB7IEFjY2Vzc0xpc3RFSVAyOTMwVHJhbnNhY3Rpb24gfSBmcm9tICcuL2VpcDI5MzBUcmFuc2FjdGlvbi5qcyc7XG5leHBvcnQgeyBUcmFuc2FjdGlvbiB9IGZyb20gJy4vbGVnYWN5VHJhbnNhY3Rpb24uanMnO1xuZXhwb3J0IHsgVHJhbnNhY3Rpb25GYWN0b3J5IH0gZnJvbSAnLi90cmFuc2FjdGlvbkZhY3RvcnkuanMnO1xuZXhwb3J0IHsgQmFzZVRyYW5zYWN0aW9uIH0gZnJvbSAnLi9iYXNlVHJhbnNhY3Rpb24uanMnO1xuZXhwb3J0ICogYXMgdHhVdGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIkZlZU1hcmtldEVJUDE1NTlUcmFuc2FjdGlvbiIsIkFjY2Vzc0xpc3RFSVAyOTMwVHJhbnNhY3Rpb24iLCJUcmFuc2FjdGlvbiIsIlRyYW5zYWN0aW9uRmFjdG9yeSIsIkJhc2VUcmFuc2FjdGlvbiIsInR4VXRpbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/legacyTransaction.js":
/*!************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/tx/legacyTransaction.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transaction: () => (/* binding */ Transaction)\n/* harmony export */ });\n/* harmony import */ var _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@ethereumjs/rlp/dist/index.js\");\n/* harmony import */ var ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereum-cryptography/keccak.js */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var web3_validator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-validator */ \"(ssr)/./node_modules/web3-validator/lib/esm/index.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/constants.js\");\n/* harmony import */ var _baseTransaction_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./baseTransaction.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/baseTransaction.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/types.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n\n\n\nconst TRANSACTION_TYPE = 0;\nfunction meetsEIP155(_v, chainId) {\n    const v = Number(_v);\n    const chainIdDoubled = Number(chainId) * 2;\n    return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */ // eslint-disable-next-line no-use-before-define\nclass Transaction extends _baseTransaction_js__WEBPACK_IMPORTED_MODULE_6__.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */ constructor(txData, opts = {}){\n        var _a;\n        super(Object.assign(Object.assign({}, txData), {\n            type: TRANSACTION_TYPE\n        }), opts);\n        this.common = this._validateTxV(this.v, opts.common);\n        this.gasPrice = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.uint8ArrayToBigInt)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.toUint8Array)(txData.gasPrice === \"\" ? \"0x\" : txData.gasPrice));\n        if (this.gasPrice * this.gasLimit > _constants_js__WEBPACK_IMPORTED_MODULE_5__.MAX_INTEGER) {\n            const msg = this._errorMsg(\"gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)\");\n            throw new Error(msg);\n        }\n        this._validateCannotExceedMaxInteger({\n            gasPrice: this.gasPrice\n        });\n        _baseTransaction_js__WEBPACK_IMPORTED_MODULE_6__.BaseTransaction._validateNotArray(txData);\n        if (this.common.gteHardfork(\"spuriousDragon\")) {\n            if (!this.isSigned()) {\n                this.activeCapabilities.push(_types_js__WEBPACK_IMPORTED_MODULE_7__.Capability.EIP155ReplayProtection);\n            } else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                // v and chain ID meet EIP-155 conditions\n                // eslint-disable-next-line no-lonely-if\n                if (meetsEIP155(this.v, this.common.chainId())) {\n                    this.activeCapabilities.push(_types_js__WEBPACK_IMPORTED_MODULE_7__.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */ static fromTxData(txData, opts = {}) {\n        return new Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */ static fromSerializedTx(serialized, opts = {}) {\n        const values = _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized tx input. Must be array\");\n        }\n        return this.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */ static fromValuesArray(values, opts = {}) {\n        // If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error(\"Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).\");\n        }\n        const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n        (0,web3_validator__WEBPACK_IMPORTED_MODULE_3__.validateNoLeadingZeroes)({\n            nonce,\n            gasPrice,\n            gasLimit,\n            value,\n            v,\n            r,\n            s\n        });\n        return new Transaction({\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            v,\n            r,\n            s\n        }, opts);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Uint8Array values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */ raw() {\n        return [\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.nonce),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.gasPrice),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Uint8Array.from([]),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.value),\n            this.data,\n            this.v !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.v) : Uint8Array.from([]),\n            this.r !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.r) : Uint8Array.from([]),\n            this.s !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.s) : Uint8Array.from([])\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Uint8Array values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */ serialize() {\n        return _ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw());\n    }\n    _getMessageToSign() {\n        const values = [\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.nonce),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.gasPrice),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Uint8Array.from([]),\n            (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(this.value),\n            this.data\n        ];\n        if (this.supports(_types_js__WEBPACK_IMPORTED_MODULE_7__.Capability.EIP155ReplayProtection)) {\n            values.push((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.toUint8Array)(this.common.chainId()));\n            values.push((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.unpadUint8Array)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.toUint8Array)(0)));\n            values.push((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.unpadUint8Array)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.toUint8Array)(0)));\n        }\n        return values;\n    }\n    getMessageToSign(hashMessage = true) {\n        const message = this._getMessageToSign();\n        if (hashMessage) {\n            return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(message));\n        }\n        return message;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */ getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: super.getDataFee(),\n                hardfork: this.common.hardfork()\n            };\n        }\n        return super.getDataFee();\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */ getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */ hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg(\"Cannot call hash method if transaction is not signed\");\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw()));\n            }\n            return this.cache.hash;\n        }\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(this.raw()));\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */ getMessageToVerifySignature() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg(\"This transaction is not signed\");\n            throw new Error(msg);\n        }\n        const message = this._getMessageToSign();\n        return (0,ethereum_cryptography_keccak_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)(_ethereumjs_rlp__WEBPACK_IMPORTED_MODULE_0__.RLP.encode(message));\n    }\n    /**\n     * Returns the public key of the sender\n     */ getSenderPublicKey() {\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.ecrecover)(msgHash, v, (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(r), (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToUnpaddedUint8Array)(s), this.supports(_types_js__WEBPACK_IMPORTED_MODULE_7__.Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n        } catch (e) {\n            const msg = this._errorMsg(\"Invalid Signature\");\n            throw new Error(msg);\n        }\n    }\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */ _processSignature(_v, r, s) {\n        let v = _v;\n        if (this.supports(_types_js__WEBPACK_IMPORTED_MODULE_7__.Capability.EIP155ReplayProtection)) {\n            v += this.common.chainId() * BigInt(2) + BigInt(8);\n        }\n        const opts = Object.assign(Object.assign({}, this.txOptions), {\n            common: this.common\n        });\n        return Transaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v,\n            r: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.uint8ArrayToBigInt)(r),\n            s: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.uint8ArrayToBigInt)(s)\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */ toJSON() {\n        return {\n            nonce: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToHex)(this.nonce),\n            gasPrice: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToHex)(this.gasPrice),\n            gasLimit: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToHex)(this.value),\n            data: (0,web3_utils__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)(this.data),\n            v: this.v !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_4__.bigIntToHex)(this.s) : undefined\n        };\n    }\n    /**\n     * Validates tx's `v` value\n     */ _validateTxV(_v, common) {\n        let chainIdBigInt;\n        const v = _v !== undefined ? Number(_v) : undefined;\n        // Check for valid v values in the scope of a signed legacy tx\n        if (v !== undefined) {\n            // v is 1. not matching the EIP-155 chainId included case and...\n            // v is 2. not matching the classic v=27 or v=28 case\n            if (v < 37 && v !== 27 && v !== 28) {\n                throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n            }\n        }\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined && v !== 0 && (!common || common.gteHardfork(\"spuriousDragon\")) && v !== 27 && v !== 28) {\n            if (common) {\n                if (!meetsEIP155(BigInt(v), common.chainId())) {\n                    throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n                }\n            } else {\n                // Derive the original chain ID\n                let numSub;\n                if ((v - 35) % 2 === 0) {\n                    numSub = 35;\n                } else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n            }\n        }\n        return this._getCommon(common, chainIdBigInt);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */ errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` gasPrice=${this.gasPrice}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */ _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n} //# sourceMappingURL=legacyTransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/legacyTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/transactionFactory.js":
/*!*************************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/tx/transactionFactory.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransactionFactory: () => (/* binding */ TransactionFactory)\n/* harmony export */ });\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js\");\n/* harmony import */ var _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eip1559Transaction.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/eip1559Transaction.js\");\n/* harmony import */ var _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eip2930Transaction.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/eip2930Transaction.js\");\n/* harmony import */ var _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./legacyTransaction.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/legacyTransaction.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\nconst extraTxTypes = new Map();\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass TransactionFactory {\n    // It is not possible to instantiate a TransactionFactory object.\n    // eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n    constructor(){}\n    static typeToInt(txType) {\n        return Number((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_1__.uint8ArrayToBigInt)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(txType)));\n    }\n    static registerTransactionType(type, txClass) {\n        const txType = TransactionFactory.typeToInt(type);\n        extraTxTypes.set(txType, txClass);\n    }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param txOptions - Options to pass on to the constructor of the transaction\n     */ static fromTxData(txData, txOptions = {}) {\n        if (!(\"type\" in txData) || txData.type === undefined) {\n            // Assume legacy transaction\n            return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_4__.Transaction.fromTxData(txData, txOptions);\n        }\n        const txType = TransactionFactory.typeToInt(txData.type);\n        if (txType === 0) {\n            return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_4__.Transaction.fromTxData(txData, txOptions);\n        }\n        if (txType === 1) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_3__.AccessListEIP2930Transaction.fromTxData(// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            txData, txOptions);\n        }\n        if (txType === 2) {\n            return _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_2__.FeeMarketEIP1559Transaction.fromTxData(// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            txData, txOptions);\n        }\n        const ExtraTransaction = extraTxTypes.get(txType);\n        if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromTxData) {\n            return ExtraTransaction.fromTxData(txData, txOptions);\n        }\n        throw new Error(`Tx instantiation with type ${txType} not supported`);\n    }\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Uint8Array\n     * @param txOptions - The transaction options\n     */ static fromSerializedData(data, txOptions = {}) {\n        if (data[0] <= 0x7f) {\n            // Determine the type.\n            switch(data[0]){\n                case 1:\n                    return _eip2930Transaction_js__WEBPACK_IMPORTED_MODULE_3__.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n                case 2:\n                    return _eip1559Transaction_js__WEBPACK_IMPORTED_MODULE_2__.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n                default:\n                    {\n                        const ExtraTransaction = extraTxTypes.get(Number(data[0]));\n                        if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromSerializedTx) {\n                            return ExtraTransaction.fromSerializedTx(data, txOptions);\n                        }\n                        throw new Error(`TypedTransaction with ID ${data[0]} unknown`);\n                    }\n            }\n        } else {\n            return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_4__.Transaction.fromSerializedTx(data, txOptions);\n        }\n    }\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Uint8Array[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Uint8Array or Uint8Array[]\n     * @param txOptions - The transaction options\n     */ static fromBlockBodyData(data, txOptions = {}) {\n        if ((0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.isUint8Array)(data)) {\n            return this.fromSerializedData(data, txOptions);\n        }\n        if (Array.isArray(data)) {\n            // It is a legacy transaction\n            return _legacyTransaction_js__WEBPACK_IMPORTED_MODULE_4__.Transaction.fromValuesArray(data, txOptions);\n        }\n        throw new Error(\"Cannot decode transaction: unknown type input\");\n    }\n} //# sourceMappingURL=transactionFactory.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS90eC90cmFuc2FjdGlvbkZhY3RvcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQzBDO0FBQzRCO0FBQ0E7QUFDQztBQUNsQjtBQUNyRCxNQUFNTSxlQUFlLElBQUlDO0FBQ3pCLGtFQUFrRTtBQUMzRCxNQUFNQztJQUNULGlFQUFpRTtJQUNqRSx3RkFBd0Y7SUFDeEZDLGFBQWMsQ0FBRTtJQUNoQixPQUFPQyxVQUFVQyxNQUFNLEVBQUU7UUFDckIsT0FBT0MsT0FBT1Ysb0VBQWtCQSxDQUFDRCw4REFBWUEsQ0FBQ1U7SUFDbEQ7SUFDQSxPQUFPRSx3QkFBd0JDLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQzFDLE1BQU1KLFNBQVNILG1CQUFtQkUsU0FBUyxDQUFDSTtRQUM1Q1IsYUFBYVUsR0FBRyxDQUFDTCxRQUFRSTtJQUM3QjtJQUNBOzs7OztLQUtDLEdBQ0QsT0FBT0UsV0FBV0MsTUFBTSxFQUFFQyxZQUFZLENBQUMsQ0FBQyxFQUFFO1FBQ3RDLElBQUksQ0FBRSxXQUFVRCxNQUFLLEtBQU1BLE9BQU9KLElBQUksS0FBS00sV0FBVztZQUNsRCw0QkFBNEI7WUFDNUIsT0FBT2YsOERBQVdBLENBQUNZLFVBQVUsQ0FBQ0MsUUFBUUM7UUFDMUM7UUFDQSxNQUFNUixTQUFTSCxtQkFBbUJFLFNBQVMsQ0FBQ1EsT0FBT0osSUFBSTtRQUN2RCxJQUFJSCxXQUFXLEdBQUc7WUFDZCxPQUFPTiw4REFBV0EsQ0FBQ1ksVUFBVSxDQUFDQyxRQUFRQztRQUMxQztRQUNBLElBQUlSLFdBQVcsR0FBRztZQUNkLHlFQUF5RTtZQUN6RSxPQUFPUCxnRkFBNEJBLENBQUNhLFVBQVUsQ0FDOUMseUVBQXlFO1lBQ3pFQyxRQUFRQztRQUNaO1FBQ0EsSUFBSVIsV0FBVyxHQUFHO1lBQ2QsT0FBT1IsK0VBQTJCQSxDQUFDYyxVQUFVLENBQzdDLHlFQUF5RTtZQUN6RUMsUUFBUUM7UUFDWjtRQUNBLE1BQU1FLG1CQUFtQmYsYUFBYWdCLEdBQUcsQ0FBQ1g7UUFDMUMsSUFBSVUscUJBQXFCLFFBQVFBLHFCQUFxQixLQUFLLElBQUksS0FBSyxJQUFJQSxpQkFBaUJKLFVBQVUsRUFBRTtZQUNqRyxPQUFPSSxpQkFBaUJKLFVBQVUsQ0FBQ0MsUUFBUUM7UUFDL0M7UUFDQSxNQUFNLElBQUlJLE1BQU0sQ0FBQywyQkFBMkIsRUFBRVosT0FBTyxjQUFjLENBQUM7SUFDeEU7SUFDQTs7Ozs7S0FLQyxHQUNELE9BQU9hLG1CQUFtQkMsSUFBSSxFQUFFTixZQUFZLENBQUMsQ0FBQyxFQUFFO1FBQzVDLElBQUlNLElBQUksQ0FBQyxFQUFFLElBQUksTUFBTTtZQUNqQixzQkFBc0I7WUFDdEIsT0FBUUEsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsS0FBSztvQkFDRCxPQUFPckIsZ0ZBQTRCQSxDQUFDc0IsZ0JBQWdCLENBQUNELE1BQU1OO2dCQUMvRCxLQUFLO29CQUNELE9BQU9oQiwrRUFBMkJBLENBQUN1QixnQkFBZ0IsQ0FBQ0QsTUFBTU47Z0JBQzlEO29CQUFTO3dCQUNMLE1BQU1FLG1CQUFtQmYsYUFBYWdCLEdBQUcsQ0FBQ1YsT0FBT2EsSUFBSSxDQUFDLEVBQUU7d0JBQ3hELElBQUlKLHFCQUFxQixRQUFRQSxxQkFBcUIsS0FBSyxJQUFJLEtBQUssSUFBSUEsaUJBQWlCSyxnQkFBZ0IsRUFBRTs0QkFDdkcsT0FBT0wsaUJBQWlCSyxnQkFBZ0IsQ0FBQ0QsTUFBTU47d0JBQ25EO3dCQUNBLE1BQU0sSUFBSUksTUFBTSxDQUFDLHlCQUF5QixFQUFFRSxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQztvQkFDakU7WUFDSjtRQUNKLE9BQ0s7WUFDRCxPQUFPcEIsOERBQVdBLENBQUNxQixnQkFBZ0IsQ0FBQ0QsTUFBTU47UUFDOUM7SUFDSjtJQUNBOzs7Ozs7OztLQVFDLEdBQ0QsT0FBT1Esa0JBQWtCRixJQUFJLEVBQUVOLFlBQVksQ0FBQyxDQUFDLEVBQUU7UUFDM0MsSUFBSW5CLHdEQUFZQSxDQUFDeUIsT0FBTztZQUNwQixPQUFPLElBQUksQ0FBQ0Qsa0JBQWtCLENBQUNDLE1BQU1OO1FBQ3pDO1FBQ0EsSUFBSVMsTUFBTUMsT0FBTyxDQUFDSixPQUFPO1lBQ3JCLDZCQUE2QjtZQUM3QixPQUFPcEIsOERBQVdBLENBQUN5QixlQUFlLENBQUNMLE1BQU1OO1FBQzdDO1FBQ0EsTUFBTSxJQUFJSSxNQUFNO0lBQ3BCO0FBQ0osRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS90eC90cmFuc2FjdGlvbkZhY3RvcnkuanM/MjM0OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxud2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG5pdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbnRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4oYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG53ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG5idXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbllvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbmltcG9ydCB7IGlzVWludDhBcnJheSB9IGZyb20gJ3dlYjMtdXRpbHMnO1xuaW1wb3J0IHsgdG9VaW50OEFycmF5LCB1aW50OEFycmF5VG9CaWdJbnQgfSBmcm9tICcuLi9jb21tb24vdXRpbHMuanMnO1xuaW1wb3J0IHsgRmVlTWFya2V0RUlQMTU1OVRyYW5zYWN0aW9uIH0gZnJvbSAnLi9laXAxNTU5VHJhbnNhY3Rpb24uanMnO1xuaW1wb3J0IHsgQWNjZXNzTGlzdEVJUDI5MzBUcmFuc2FjdGlvbiB9IGZyb20gJy4vZWlwMjkzMFRyYW5zYWN0aW9uLmpzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uIH0gZnJvbSAnLi9sZWdhY3lUcmFuc2FjdGlvbi5qcyc7XG5jb25zdCBleHRyYVR4VHlwZXMgPSBuZXcgTWFwKCk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhbmVvdXMtY2xhc3NcbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbkZhY3Rvcnkge1xuICAgIC8vIEl0IGlzIG5vdCBwb3NzaWJsZSB0byBpbnN0YW50aWF0ZSBhIFRyYW5zYWN0aW9uRmFjdG9yeSBvYmplY3QuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvbiwgbm8tdXNlbGVzcy1jb25zdHJ1Y3RvclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG4gICAgc3RhdGljIHR5cGVUb0ludCh0eFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcih1aW50OEFycmF5VG9CaWdJbnQodG9VaW50OEFycmF5KHR4VHlwZSkpKTtcbiAgICB9XG4gICAgc3RhdGljIHJlZ2lzdGVyVHJhbnNhY3Rpb25UeXBlKHR5cGUsIHR4Q2xhc3MpIHtcbiAgICAgICAgY29uc3QgdHhUeXBlID0gVHJhbnNhY3Rpb25GYWN0b3J5LnR5cGVUb0ludCh0eXBlKTtcbiAgICAgICAgZXh0cmFUeFR5cGVzLnNldCh0eFR5cGUsIHR4Q2xhc3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSB0cmFuc2FjdGlvbiBmcm9tIGEgYHR4RGF0YWAgb2JqZWN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHhEYXRhIC0gVGhlIHRyYW5zYWN0aW9uIGRhdGEuIFRoZSBgdHlwZWAgZmllbGQgd2lsbCBkZXRlcm1pbmUgd2hpY2ggdHJhbnNhY3Rpb24gdHlwZSBpcyByZXR1cm5lZCAoaWYgdW5kZWZpbmVkLCBjcmVhdGVzIGEgbGVnYWN5IHRyYW5zYWN0aW9uKVxuICAgICAqIEBwYXJhbSB0eE9wdGlvbnMgLSBPcHRpb25zIHRvIHBhc3Mgb24gdG8gdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSB0cmFuc2FjdGlvblxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tVHhEYXRhKHR4RGF0YSwgdHhPcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKCEoJ3R5cGUnIGluIHR4RGF0YSkgfHwgdHhEYXRhLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gQXNzdW1lIGxlZ2FjeSB0cmFuc2FjdGlvblxuICAgICAgICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uLmZyb21UeERhdGEodHhEYXRhLCB0eE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHR4VHlwZSA9IFRyYW5zYWN0aW9uRmFjdG9yeS50eXBlVG9JbnQodHhEYXRhLnR5cGUpO1xuICAgICAgICBpZiAodHhUeXBlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbVR4RGF0YSh0eERhdGEsIHR4T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR4VHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9jb25zaXN0ZW50LXR5cGUtYXNzZXJ0aW9uc1xuICAgICAgICAgICAgcmV0dXJuIEFjY2Vzc0xpc3RFSVAyOTMwVHJhbnNhY3Rpb24uZnJvbVR4RGF0YShcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcbiAgICAgICAgICAgIHR4RGF0YSwgdHhPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHhUeXBlID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gRmVlTWFya2V0RUlQMTU1OVRyYW5zYWN0aW9uLmZyb21UeERhdGEoXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NvbnNpc3RlbnQtdHlwZS1hc3NlcnRpb25zXG4gICAgICAgICAgICB0eERhdGEsIHR4T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgRXh0cmFUcmFuc2FjdGlvbiA9IGV4dHJhVHhUeXBlcy5nZXQodHhUeXBlKTtcbiAgICAgICAgaWYgKEV4dHJhVHJhbnNhY3Rpb24gPT09IG51bGwgfHwgRXh0cmFUcmFuc2FjdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogRXh0cmFUcmFuc2FjdGlvbi5mcm9tVHhEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gRXh0cmFUcmFuc2FjdGlvbi5mcm9tVHhEYXRhKHR4RGF0YSwgdHhPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFR4IGluc3RhbnRpYXRpb24gd2l0aCB0eXBlICR7dHhUeXBlfSBub3Qgc3VwcG9ydGVkYCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHRyaWVzIHRvIGRlY29kZSBzZXJpYWxpemVkIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIFVpbnQ4QXJyYXlcbiAgICAgKiBAcGFyYW0gdHhPcHRpb25zIC0gVGhlIHRyYW5zYWN0aW9uIG9wdGlvbnNcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVNlcmlhbGl6ZWREYXRhKGRhdGEsIHR4T3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmIChkYXRhWzBdIDw9IDB4N2YpIHtcbiAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgdHlwZS5cbiAgICAgICAgICAgIHN3aXRjaCAoZGF0YVswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFjY2Vzc0xpc3RFSVAyOTMwVHJhbnNhY3Rpb24uZnJvbVNlcmlhbGl6ZWRUeChkYXRhLCB0eE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZlZU1hcmtldEVJUDE1NTlUcmFuc2FjdGlvbi5mcm9tU2VyaWFsaXplZFR4KGRhdGEsIHR4T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBFeHRyYVRyYW5zYWN0aW9uID0gZXh0cmFUeFR5cGVzLmdldChOdW1iZXIoZGF0YVswXSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoRXh0cmFUcmFuc2FjdGlvbiA9PT0gbnVsbCB8fCBFeHRyYVRyYW5zYWN0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBFeHRyYVRyYW5zYWN0aW9uLmZyb21TZXJpYWxpemVkVHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBFeHRyYVRyYW5zYWN0aW9uLmZyb21TZXJpYWxpemVkVHgoZGF0YSwgdHhPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFR5cGVkVHJhbnNhY3Rpb24gd2l0aCBJRCAke2RhdGFbMF19IHVua25vd25gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gVHJhbnNhY3Rpb24uZnJvbVNlcmlhbGl6ZWRUeChkYXRhLCB0eE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gZGVjb2RpbmcgYSBCbG9ja0JvZHksIGluIHRoZSB0cmFuc2FjdGlvbnMgZmllbGQsIGEgZmllbGQgaXMgZWl0aGVyOlxuICAgICAqIEEgVWludDhBcnJheSAoYSBUeXBlZFRyYW5zYWN0aW9uIC0gZW5jb2RlZCBhcyBUcmFuc2FjdGlvblR5cGUgfHwgcmxwKFRyYW5zYWN0aW9uUGF5bG9hZCkpXG4gICAgICogQSBVaW50OEFycmF5W10gKExlZ2FjeSBUcmFuc2FjdGlvbilcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSByaWdodCB0cmFuc2FjdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIC0gQSBVaW50OEFycmF5IG9yIFVpbnQ4QXJyYXlbXVxuICAgICAqIEBwYXJhbSB0eE9wdGlvbnMgLSBUaGUgdHJhbnNhY3Rpb24gb3B0aW9uc1xuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tQmxvY2tCb2R5RGF0YShkYXRhLCB0eE9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAoaXNVaW50OEFycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9tU2VyaWFsaXplZERhdGEoZGF0YSwgdHhPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgLy8gSXQgaXMgYSBsZWdhY3kgdHJhbnNhY3Rpb25cbiAgICAgICAgICAgIHJldHVybiBUcmFuc2FjdGlvbi5mcm9tVmFsdWVzQXJyYXkoZGF0YSwgdHhPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZWNvZGUgdHJhbnNhY3Rpb246IHVua25vd24gdHlwZSBpbnB1dCcpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zYWN0aW9uRmFjdG9yeS5qcy5tYXAiXSwibmFtZXMiOlsiaXNVaW50OEFycmF5IiwidG9VaW50OEFycmF5IiwidWludDhBcnJheVRvQmlnSW50IiwiRmVlTWFya2V0RUlQMTU1OVRyYW5zYWN0aW9uIiwiQWNjZXNzTGlzdEVJUDI5MzBUcmFuc2FjdGlvbiIsIlRyYW5zYWN0aW9uIiwiZXh0cmFUeFR5cGVzIiwiTWFwIiwiVHJhbnNhY3Rpb25GYWN0b3J5IiwiY29uc3RydWN0b3IiLCJ0eXBlVG9JbnQiLCJ0eFR5cGUiLCJOdW1iZXIiLCJyZWdpc3RlclRyYW5zYWN0aW9uVHlwZSIsInR5cGUiLCJ0eENsYXNzIiwic2V0IiwiZnJvbVR4RGF0YSIsInR4RGF0YSIsInR4T3B0aW9ucyIsInVuZGVmaW5lZCIsIkV4dHJhVHJhbnNhY3Rpb24iLCJnZXQiLCJFcnJvciIsImZyb21TZXJpYWxpemVkRGF0YSIsImRhdGEiLCJmcm9tU2VyaWFsaXplZFR4IiwiZnJvbUJsb2NrQm9keURhdGEiLCJBcnJheSIsImlzQXJyYXkiLCJmcm9tVmFsdWVzQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/transactionFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/types.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/tx/types.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Capability: () => (/* binding */ Capability),\n/* harmony export */   isAccessList: () => (/* binding */ isAccessList),\n/* harmony export */   isAccessListUint8Array: () => (/* binding */ isAccessListUint8Array)\n/* harmony export */ });\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */ var Capability;\n(function(Capability) {\n    /**\n     * Tx supports EIP-155 replay protection\n     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n     */ Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n    /**\n     * Tx supports EIP-1559 gas fee market mechanism\n     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n     */ Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n    /**\n     * Tx is a typed transaction as defined in EIP-2718\n     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n     */ Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n    /**\n     * Tx supports access list generation as defined in EIP-2930\n     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n     */ Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n})(Capability || (Capability = {}));\nfunction isAccessListUint8Array(input) {\n    if (input.length === 0) {\n        return true;\n    }\n    const firstItem = input[0];\n    if (Array.isArray(firstItem)) {\n        return true;\n    }\n    return false;\n}\nfunction isAccessList(input) {\n    return !isAccessListUint8Array(input); // This is exactly the same method, except the output is negated.\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS90eC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7O0NBR0MsR0FDTSxJQUFJQSxXQUFXO0FBQ3JCLFVBQVVBLFVBQVU7SUFDakI7OztLQUdDLEdBQ0RBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLHlCQUF5QixHQUFHLElBQUksR0FBRztJQUN6RDs7O0tBR0MsR0FDREEsVUFBVSxDQUFDQSxVQUFVLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxHQUFHO0lBQ3BEOzs7S0FHQyxHQUNEQSxVQUFVLENBQUNBLFVBQVUsQ0FBQywwQkFBMEIsR0FBRyxLQUFLLEdBQUc7SUFDM0Q7OztLQUdDLEdBQ0RBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLHFCQUFxQixHQUFHLEtBQUssR0FBRztBQUMxRCxHQUFHQSxjQUFlQSxDQUFBQSxhQUFhLENBQUM7QUFDekIsU0FBU0MsdUJBQXVCQyxLQUFLO0lBQ3hDLElBQUlBLE1BQU1DLE1BQU0sS0FBSyxHQUFHO1FBQ3BCLE9BQU87SUFDWDtJQUNBLE1BQU1DLFlBQVlGLEtBQUssQ0FBQyxFQUFFO0lBQzFCLElBQUlHLE1BQU1DLE9BQU8sQ0FBQ0YsWUFBWTtRQUMxQixPQUFPO0lBQ1g7SUFDQSxPQUFPO0FBQ1g7QUFDTyxTQUFTRyxhQUFhTCxLQUFLO0lBQzlCLE9BQU8sQ0FBQ0QsdUJBQXVCQyxRQUFRLGlFQUFpRTtBQUM1RyxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy93ZWIzLWV0aC1hY2NvdW50cy9saWIvZXNtL3R4L3R5cGVzLmpzPzQ4ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHtAbGluayBUcmFuc2FjdGlvbi5zdXBwb3J0c31cbiAqIHRvIHF1ZXJ5IG9uIHR4IGNhcGFiaWxpdGllc1xuICovXG5leHBvcnQgdmFyIENhcGFiaWxpdHk7XG4oZnVuY3Rpb24gKENhcGFiaWxpdHkpIHtcbiAgICAvKipcbiAgICAgKiBUeCBzdXBwb3J0cyBFSVAtMTU1IHJlcGxheSBwcm90ZWN0aW9uXG4gICAgICogU2VlOiBbMTU1XShodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTE1NSkgUmVwbGF5IEF0dGFjayBQcm90ZWN0aW9uIEVJUFxuICAgICAqL1xuICAgIENhcGFiaWxpdHlbQ2FwYWJpbGl0eVtcIkVJUDE1NVJlcGxheVByb3RlY3Rpb25cIl0gPSAxNTVdID0gXCJFSVAxNTVSZXBsYXlQcm90ZWN0aW9uXCI7XG4gICAgLyoqXG4gICAgICogVHggc3VwcG9ydHMgRUlQLTE1NTkgZ2FzIGZlZSBtYXJrZXQgbWVjaGFuaXNtXG4gICAgICogU2VlOiBbMTU1OV0oaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xNTU5KSBGZWUgTWFya2V0IEVJUFxuICAgICAqL1xuICAgIENhcGFiaWxpdHlbQ2FwYWJpbGl0eVtcIkVJUDE1NTlGZWVNYXJrZXRcIl0gPSAxNTU5XSA9IFwiRUlQMTU1OUZlZU1hcmtldFwiO1xuICAgIC8qKlxuICAgICAqIFR4IGlzIGEgdHlwZWQgdHJhbnNhY3Rpb24gYXMgZGVmaW5lZCBpbiBFSVAtMjcxOFxuICAgICAqIFNlZTogWzI3MThdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjcxOCkgVHJhbnNhY3Rpb24gVHlwZSBFSVBcbiAgICAgKi9cbiAgICBDYXBhYmlsaXR5W0NhcGFiaWxpdHlbXCJFSVAyNzE4VHlwZWRUcmFuc2FjdGlvblwiXSA9IDI3MThdID0gXCJFSVAyNzE4VHlwZWRUcmFuc2FjdGlvblwiO1xuICAgIC8qKlxuICAgICAqIFR4IHN1cHBvcnRzIGFjY2VzcyBsaXN0IGdlbmVyYXRpb24gYXMgZGVmaW5lZCBpbiBFSVAtMjkzMFxuICAgICAqIFNlZTogWzI5MzBdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjkzMCkgQWNjZXNzIExpc3RzIEVJUFxuICAgICAqL1xuICAgIENhcGFiaWxpdHlbQ2FwYWJpbGl0eVtcIkVJUDI5MzBBY2Nlc3NMaXN0c1wiXSA9IDI5MzBdID0gXCJFSVAyOTMwQWNjZXNzTGlzdHNcIjtcbn0pKENhcGFiaWxpdHkgfHwgKENhcGFiaWxpdHkgPSB7fSkpO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWNjZXNzTGlzdFVpbnQ4QXJyYXkoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBmaXJzdEl0ZW0gPSBpbnB1dFswXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmaXJzdEl0ZW0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNBY2Nlc3NMaXN0KGlucHV0KSB7XG4gICAgcmV0dXJuICFpc0FjY2Vzc0xpc3RVaW50OEFycmF5KGlucHV0KTsgLy8gVGhpcyBpcyBleGFjdGx5IHRoZSBzYW1lIG1ldGhvZCwgZXhjZXB0IHRoZSBvdXRwdXQgaXMgbmVnYXRlZC5cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJDYXBhYmlsaXR5IiwiaXNBY2Nlc3NMaXN0VWludDhBcnJheSIsImlucHV0IiwibGVuZ3RoIiwiZmlyc3RJdGVtIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNBY2Nlc3NMaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/tx/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkMaxInitCodeSize: () => (/* binding */ checkMaxInitCodeSize),\n/* harmony export */   getAccessListData: () => (/* binding */ getAccessListData),\n/* harmony export */   getAccessListJSON: () => (/* binding */ getAccessListJSON),\n/* harmony export */   getDataFeeEIP2930: () => (/* binding */ getDataFeeEIP2930),\n/* harmony export */   verifyAccessList: () => (/* binding */ verifyAccessList)\n/* harmony export */ });\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _common_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/utils.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/common/utils.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/types.js\");\n\n\n\nconst checkMaxInitCodeSize = (common, length)=>{\n    const maxInitCodeSize = common.param(\"vm\", \"maxInitCodeSize\");\n    if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n        throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param(\"vm\", \"maxInitCodeSize\")}`);\n    }\n};\nconst getAccessListData = (accessList)=>{\n    let AccessListJSON;\n    let uint8arrayAccessList;\n    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_2__.isAccessList)(accessList)) {\n        AccessListJSON = accessList;\n        const newAccessList = [];\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let i = 0; i < accessList.length; i += 1){\n            const item = accessList[i];\n            const addressBytes = (0,_common_utils_js__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(item.address);\n            const storageItems = [];\n            // eslint-disable-next-line @typescript-eslint/prefer-for-of\n            for(let index = 0; index < item.storageKeys.length; index += 1){\n                storageItems.push((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_1__.toUint8Array)(item.storageKeys[index]));\n            }\n            newAccessList.push([\n                addressBytes,\n                storageItems\n            ]);\n        }\n        uint8arrayAccessList = newAccessList;\n    } else {\n        uint8arrayAccessList = accessList !== null && accessList !== void 0 ? accessList : [];\n        // build the JSON\n        const json = [];\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let i = 0; i < uint8arrayAccessList.length; i += 1){\n            const data = uint8arrayAccessList[i];\n            const address = (0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(data[0]);\n            const storageKeys = [];\n            // eslint-disable-next-line @typescript-eslint/prefer-for-of\n            for(let item = 0; item < data[1].length; item += 1){\n                storageKeys.push((0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(data[1][item]));\n            }\n            const jsonItem = {\n                address,\n                storageKeys\n            };\n            json.push(jsonItem);\n        }\n        AccessListJSON = json;\n    }\n    return {\n        AccessListJSON,\n        accessList: uint8arrayAccessList\n    };\n};\nconst verifyAccessList = (accessList)=>{\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for(let key = 0; key < accessList.length; key += 1){\n        const accessListItem = accessList[key];\n        const address = accessListItem[0];\n        const storageSlots = accessListItem[1];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions\n        if (accessListItem[2] !== undefined) {\n            throw new Error(\"Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.\");\n        }\n        if (address.length !== 20) {\n            throw new Error(\"Invalid EIP-2930 transaction: address length should be 20 bytes\");\n        }\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let storageSlot = 0; storageSlot < storageSlots.length; storageSlot += 1){\n            if (storageSlots[storageSlot].length !== 32) {\n                throw new Error(\"Invalid EIP-2930 transaction: storage slot length should be 32 bytes\");\n            }\n        }\n    }\n};\nconst getAccessListJSON = (accessList)=>{\n    const accessListJSON = [];\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for(let index = 0; index < accessList.length; index += 1){\n        const item = accessList[index];\n        const JSONItem = {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions\n            address: (0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_1__.setLengthLeft)(item[0], 20)),\n            storageKeys: []\n        };\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/prefer-optional-chain\n        const storageSlots = item && item[1];\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for(let slot = 0; slot < storageSlots.length; slot += 1){\n            const storageSlot = storageSlots[slot];\n            JSONItem.storageKeys.push((0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)((0,_common_utils_js__WEBPACK_IMPORTED_MODULE_1__.setLengthLeft)(storageSlot, 32)));\n        }\n        accessListJSON.push(JSONItem);\n    }\n    return accessListJSON;\n};\nconst getDataFeeEIP2930 = (accessList, common)=>{\n    const accessListStorageKeyCost = common.param(\"gasPrices\", \"accessListStorageKeyCost\");\n    const accessListAddressCost = common.param(\"gasPrices\", \"accessListAddressCost\");\n    let slots = 0;\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for(let index = 0; index < accessList.length; index += 1){\n        const item = accessList[index];\n        const storageSlots = item[1];\n        slots += storageSlots.length;\n    }\n    const addresses = accessList.length;\n    return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n}; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/tx/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/  //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQ1UsQ0FDVixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtYWNjb3VudHMvbGliL2VzbS90eXBlcy5qcz80ZjcxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-accounts/lib/esm/wallet.js":
/*!**********************************************************!*\
  !*** ./node_modules/web3-eth-accounts/lib/esm/wallet.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Wallet: () => (/* binding */ Wallet)\n/* harmony export */ });\n/* harmony import */ var web3_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-types */ \"(ssr)/./node_modules/web3-types/lib/esm/index.js\");\n/* harmony import */ var web3_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-validator */ \"(ssr)/./node_modules/web3-validator/lib/esm/index.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n/**\n * Wallet is an in memory `wallet` that can hold multiple accounts.\n * These accounts can be used when using web3.eth.sendTransaction() or web3.eth.contract.methods.contractfunction().send();\n *\n * For using Wallet functionality, install Web3 package using `npm i web3` or `yarn add web3`.\n * After that, Wallet functionality will be available as mentioned below.\n *\n * ```ts\n * import { Web3 } from 'web3';\n * const web3 = new Web3('http://127.0.0.1:7545');\n *\n * const wallet = await web3.eth.accounts.wallet.create(2);\n *\n * const signature = wallet.at(0).sign(\"Test Data\"); // use wallet\n *\n * // fund account before sending following transaction ...\n *\n * const receipt = await web3.eth.sendTransaction({ // internally sign transaction using wallet\n *    from: wallet.at(0).address,\n *    to: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n *    value: 1\n *    //....\n * });\n * ```\n */ class Wallet extends web3_types__WEBPACK_IMPORTED_MODULE_0__.Web3BaseWallet {\n    constructor(){\n        super(...arguments);\n        this._addressMap = new Map();\n        this._defaultKeyName = \"web3js_wallet\";\n    }\n    /**\n     * Get the storage object of the browser\n     *\n     * @returns the storage\n     */ static getStorage() {\n        let storage;\n        try {\n            storage = window.localStorage;\n            const x = \"__storage_test__\";\n            storage.setItem(x, x);\n            storage.removeItem(x);\n            return storage;\n        } catch (e) {\n            return e && // everything except Firefox\n            (e.code === 22 || // Firefox\n            e.code === 1014 || // test name field too, because code might not be present\n            // everything except Firefox\n            e.name === \"QuotaExceededError\" || // Firefox\n            e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n            !(0,web3_validator__WEBPACK_IMPORTED_MODULE_1__.isNullish)(storage) && storage.length !== 0 ? storage : undefined;\n        }\n    }\n    /**\n     * Generates one or more accounts in the wallet. If wallets already exist they will not be overridden.\n     *\n     * @param numberOfAccounts - Number of accounts to create. Leave empty to create an empty wallet.\n     * @returns The wallet\n     * ```ts\n     * web3.eth.accounts.wallet.create(2)\n     * > Wallet(2) [\n     *   {\n     *     address: '0xde38310a42B751AE57d30cFFF4a0A3c52A442fCE',\n     *     privateKey: '0x6422c9d28efdcbee93c1d32a5fc6fd6fa081b985487885296cf8c9bbb5872600',\n     *     signTransaction: [Function: signTransaction],\n     *     sign: [Function: sign],\n     *     encrypt: [Function: encrypt]\n     *   },\n     *   {\n     *     address: '0x766BF755246d924B1d017Fdb5390f38a60166691',\n     *     privateKey: '0x756530f13c0eb636ebdda655335f5dea9921e3362e2e588b0ad59e556f7751f0',\n     *     signTransaction: [Function: signTransaction],\n     *     sign: [Function: sign],\n     *     encrypt: [Function: encrypt]\n     *   },\n     *   _accountProvider: {\n     *     create: [Function: create],\n     *     privateKeyToAccount: [Function: privateKeyToAccount],\n     *     decrypt: [Function: decrypt]\n     *   },\n     *   _addressMap: Map(2) {\n     *     '0xde38310a42b751ae57d30cfff4a0a3c52a442fce' => 0,\n     *     '0x766bf755246d924b1d017fdb5390f38a60166691' => 1\n     *   },\n     *   _defaultKeyName: 'web3js_wallet'\n     * ]\n     *\n     * ```\n     */ create(numberOfAccounts) {\n        for(let i = 0; i < numberOfAccounts; i += 1){\n            this.add(this._accountProvider.create());\n        }\n        return this;\n    }\n    /**\n     * Adds an account using a private key or account object to the wallet.\n     *\n     * @param account - A private key or account object\n     * @returns The wallet\n     *\n     * ```ts\n     * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');\n     * > Wallet(1) [\n     *   {\n     *     address: '0x85D70633b90e03e0276B98880286D0D055685ed7',\n     *     privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',\n     *     signTransaction: [Function: signTransaction],\n     *     sign: [Function: sign],\n     *     encrypt: [Function: encrypt]\n     *   },\n     *   _accountProvider: {\n     *     create: [Function: create],\n     *     privateKeyToAccount: [Function: privateKeyToAccount],\n     *     decrypt: [Function: decrypt]\n     *   },\n     *   _addressMap: Map(1) { '0x85d70633b90e03e0276b98880286d0d055685ed7' => 0 },\n     *   _defaultKeyName: 'web3js_wallet'\n     * ]\n     * ```\n     */ add(account) {\n        var _a;\n        if (typeof account === \"string\") {\n            return this.add(this._accountProvider.privateKeyToAccount(account));\n        }\n        let index = this.length;\n        const existAccount = this.get(account.address);\n        if (existAccount) {\n            console.warn(`Account ${account.address.toLowerCase()} already exists.`);\n            index = (_a = this._addressMap.get(account.address.toLowerCase())) !== null && _a !== void 0 ? _a : index;\n        }\n        this._addressMap.set(account.address.toLowerCase(), index);\n        this[index] = account;\n        return this;\n    }\n    /**\n     * Get the account of the wallet with either the index or public address.\n     *\n     * @param addressOrIndex - A string of the address or number index within the wallet.\n     * @returns The account object or undefined if the account doesn't exist\n     */ get(addressOrIndex) {\n        if (typeof addressOrIndex === \"string\") {\n            const index = this._addressMap.get(addressOrIndex.toLowerCase());\n            if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_1__.isNullish)(index)) {\n                return this[index];\n            }\n            return undefined;\n        }\n        return this[addressOrIndex];\n    }\n    /**\n     * Removes an account from the wallet.\n     *\n     * @param addressOrIndex - The account address, or index in the wallet.\n     * @returns true if the wallet was removed. false if it couldn't be found.\n     * ```ts\n     * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');\n     *\n     * web3.eth.accounts.wallet.remove('0x85D70633b90e03e0276B98880286D0D055685ed7');\n     * > true\n     * web3.eth.accounts.wallet\n     * > Wallet(0) [\n     * _accountProvider: {\n     *   create: [Function: create],\n     *   privateKeyToAccount: [Function: privateKeyToAccount],\n     *   decrypt: [Function: decrypt]\n     * },\n     * _addressMap: Map(0) {},\n     * _defaultKeyName: 'web3js_wallet'\n     * ]\n     * ```\n     */ remove(addressOrIndex) {\n        if (typeof addressOrIndex === \"string\") {\n            const index = this._addressMap.get(addressOrIndex.toLowerCase());\n            if ((0,web3_validator__WEBPACK_IMPORTED_MODULE_1__.isNullish)(index)) {\n                return false;\n            }\n            this._addressMap.delete(addressOrIndex.toLowerCase());\n            this.splice(index, 1);\n            return true;\n        }\n        if (this[addressOrIndex]) {\n            this.splice(addressOrIndex, 1);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Securely empties the wallet and removes all its accounts.\n     * Use this with *caution as it will remove all accounts stored in local wallet.\n     *\n     * @returns The wallet object\n     * ```ts\n     *\n     * web3.eth.accounts.wallet.clear();\n     * > Wallet(0) [\n     * _accountProvider: {\n     *   create: [Function: create],\n     *   privateKeyToAccount: [Function: privateKeyToAccount],\n     *   decrypt: [Function: decrypt]\n     * },\n     * _addressMap: Map(0) {},\n     * _defaultKeyName: 'web3js_wallet'\n     * ]\n     * ```\n     */ clear() {\n        this._addressMap.clear();\n        // Setting length clears the Array in JS.\n        this.length = 0;\n        return this;\n    }\n    /**\n     * Encrypts all wallet accounts to an array of encrypted keystore v3 objects.\n     *\n     * @param password - The password which will be used for encryption\n     * @param options - encryption options\n     * @returns An array of the encrypted keystore v3.\n     *\n     * ```ts\n     * web3.eth.accounts.wallet.create(1)\n     * web3.eth.accounts.wallet.encrypt(\"abc\").then(console.log);\n     * > [\n     * '{\"version\":3,\"id\":\"fa46e213-a7c3-4844-b903-dd14d39cc7db\",\n     * \"address\":\"fa3e41a401609103c241431cbdee8623ae2a321a\",\"crypto\":\n     * {\"ciphertext\":\"8d179a911d6146ad2924e86bf493ed89b8ff3596ffec0816e761c542016ab13c\",\n     * \"cipherparams\":{\"iv\":\"acc888c6cf4a19b86846cef0185a7164\"},\"cipher\":\"aes-128-ctr\",\n     * \"kdf\":\"scrypt\",\"kdfparams\":{\"n\":8192,\"r\":8,\"p\":1,\"dklen\":32,\"salt\":\"6a743c9b367d15f4758e4f3f3378ff0fd443708d1c64854e07588ea5331823ae\"},\n     * \"mac\":\"410544c8307e3691fda305eb3722d82c3431f212a87daa119a21587d96698b57\"}}'\n     * ]\n     * ```\n     */ encrypt(password, options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            return Promise.all(this.map((account)=>__awaiter(this, void 0, void 0, function*() {\n                    return account.encrypt(password, options);\n                })));\n        });\n    }\n    /**\n     * Decrypts keystore v3 objects.\n     *\n     * @param encryptedWallets - An array of encrypted keystore v3 objects to decrypt\n     * @param password - The password to encrypt with\n     * @param options - decrypt options for the wallets\n     * @returns The decrypted wallet object\n     *\n     * ```ts\n     * web3.eth.accounts.wallet.decrypt([\n     * { version: 3,\n     * id: '83191a81-aaca-451f-b63d-0c5f3b849289',\n     * address: '06f702337909c06c82b09b7a22f0a2f0855d1f68',\n     * crypto:\n     * { ciphertext: '7d34deae112841fba86e3e6cf08f5398dda323a8e4d29332621534e2c4069e8d',\n     *   cipherparams: { iv: '497f4d26997a84d570778eae874b2333' },\n     *   cipher: 'aes-128-ctr',\n     *   kdf: 'scrypt',\n     *   kdfparams:\n     *    { dklen: 32,\n     *      salt: '208dd732a27aa4803bb760228dff18515d5313fd085bbce60594a3919ae2d88d',\n     *      n: 262144,\n     *      r: 8,\n     *      p: 1 },\n     *   mac: '0062a853de302513c57bfe3108ab493733034bf3cb313326f42cf26ea2619cf9' } },\n     * { version: 3,\n     * id: '7d6b91fa-3611-407b-b16b-396efb28f97e',\n     * address: 'b5d89661b59a9af0b34f58d19138baa2de48baaf',\n     * crypto:\n     * { ciphertext: 'cb9712d1982ff89f571fa5dbef447f14b7e5f142232bd2a913aac833730eeb43',\n     *   cipherparams: { iv: '8cccb91cb84e435437f7282ec2ffd2db' },\n     *   cipher: 'aes-128-ctr',\n     *   kdf: 'scrypt',\n     *   kdfparams:\n     *    { dklen: 32,\n     *      salt: '08ba6736363c5586434cd5b895e6fe41ea7db4785bd9b901dedce77a1514e8b8',\n     *      n: 262144,\n     *      r: 8,\n     *      p: 1 },\n     *   mac: 'd2eb068b37e2df55f56fa97a2bf4f55e072bef0dd703bfd917717d9dc54510f0' } }\n     * ], 'test').then(console.log)\n     * > Wallet {\n     *   _accountProvider: {\n     *     create: [Function: create],\n     *     privateKeyToAccount: [Function: privateKeyToAccount],\n     *     decrypt: [Function: decrypt]\n     *   },\n     *   _defaultKeyName: 'web3js_wallet',\n     *   _accounts: {\n     *     '0x85d70633b90e03e0276b98880286d0d055685ed7': {\n     *       address: '0x85D70633b90e03e0276B98880286D0D055685ed7',\n     *       privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',\n     *       signTransaction: [Function: signTransaction],\n     *       sign: [Function: sign],\n     *       encrypt: [Function: encrypt]\n     *     },\n     *     '0x06f702337909c06c82b09b7a22f0a2f0855d1f68': {\n     *       address: '0x06F702337909C06C82B09B7A22F0a2f0855d1F68',\n     *       privateKey: '87a51da18900da7398b3bab03996833138f269f8f66dd1237b98df6b9ce14573',\n     *       signTransaction: [Function: signTransaction],\n     *       sign: [Function: sign],\n     *       encrypt: [Function: encrypt]\n     *     },\n     *     '0xb5d89661b59a9af0b34f58d19138baa2de48baaf': {\n     *       address: '0xB5d89661B59a9aF0b34f58D19138bAa2de48BAaf',\n     *       privateKey: '7ee61c5282979aae9dd795bb6a54e8bdc2bfe009acb64eb9a67322eec3b3da6e',\n     *       signTransaction: [Function: signTransaction],\n     *       sign: [Function: sign],\n     *       encrypt: [Function: encrypt]\n     *     }\n     *   }\n     * }\n     * ```\n     */ decrypt(encryptedWallets, password, options) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const results = yield Promise.all(encryptedWallets.map((wallet)=>__awaiter(this, void 0, void 0, function*() {\n                    return this._accountProvider.decrypt(wallet, password, options);\n                })));\n            for (const res of results){\n                this.add(res);\n            }\n            return this;\n        });\n    }\n    /**\n     * Stores the wallet encrypted and as string in local storage.\n     * **__NOTE:__** Browser only\n     *\n     * @param password - The password to encrypt the wallet\n     * @param keyName - (optional) The key used for the local storage position, defaults to `\"web3js_wallet\"`.\n     * @returns Will return boolean value true if saved properly\n     * ```ts\n     * web3.eth.accounts.wallet.save('test#!$');\n     * >true\n     * ```\n     */ save(password, keyName) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const storage = Wallet.getStorage();\n            if (!storage) {\n                throw new Error(\"Local storage not available.\");\n            }\n            storage.setItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName, JSON.stringify((yield this.encrypt(password))));\n            return true;\n        });\n    }\n    /**\n     * Loads a wallet from local storage and decrypts it.\n     * **__NOTE:__** Browser only\n     *\n     * @param password - The password to decrypt the wallet.\n     * @param keyName - (optional)The key used for local storage position, defaults to `web3js_wallet\"`\n     * @returns Returns the wallet object\n     *\n     * ```ts\n     * web3.eth.accounts.wallet.save('test#!$');\n     * > true\n     * web3.eth.accounts.wallet.load('test#!$');\n     * { defaultKeyName: \"web3js_wallet\",\n     *   length: 0,\n     *   _accounts: Accounts {_requestManager: RequestManager, givenProvider: Proxy, providers: {…}, _provider: WebsocketProvider, …},\n     *   [[Prototype]]: Object\n     * }\n     * ```\n     */ load(password, keyName) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const storage = Wallet.getStorage();\n            if (!storage) {\n                throw new Error(\"Local storage not available.\");\n            }\n            const keystore = storage.getItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName);\n            if (keystore) {\n                yield this.decrypt(JSON.parse(keystore) || [], password);\n            }\n            return this;\n        });\n    }\n} //# sourceMappingURL=wallet.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-accounts/lib/esm/wallet.js\n");

/***/ })

};
;