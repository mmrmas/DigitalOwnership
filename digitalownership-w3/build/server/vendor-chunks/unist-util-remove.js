"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unist-util-remove";
exports.ids = ["vendor-chunks/unist-util-remove"];
exports.modules = {

/***/ "(ssr)/./node_modules/unist-util-remove/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/unist-util-remove/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   remove: () => (/* binding */ remove)\n/* harmony export */ });\n/* harmony import */ var unist_util_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-is */ \"(ssr)/./node_modules/unist-util-remove/node_modules/unist-util-is/lib/index.js\");\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [cascade=true]\n *   Whether to drop parent nodes if they had children, but all their children\n *   were filtered out.\n */ \n/** @type {Array<unknown>} */ const empty = [];\n/**\n * Change the given `tree` by removing all nodes that pass `test`.\n *\n * The tree is walked in preorder (NLR), visiting the node itself, then its\n * head, etc.\n *\n * @param tree\n *   Tree to change.\n * @param options\n *   Configuration (optional).\n * @param test\n *   `unist-util-is` compatible test.\n * @returns\n *   The given `tree` without nodes that pass `test`.\n *\n *   `null` is returned if `tree` itself didn’t pass the test or is cascaded\n *   away.\n */ // To do: next major: don’t return `tree`.\nconst remove = /**\n   * @type {(\n   *  (<Tree extends Node>(node: Tree, options: Options, test: Test) => Tree | null) &\n   *  (<Tree extends Node>(node: Tree, test: Test) => Tree | null)\n   * )}\n   */ /**\n     * @param {Node} tree\n     * @param {Options | null | undefined} [options]\n     * @param {Test | null | undefined} [test]\n     * @returns {Node | null}\n     */ function(tree, options, test) {\n    const is = (0,unist_util_is__WEBPACK_IMPORTED_MODULE_0__.convert)(test || options);\n    const cascade = !options || options.cascade === undefined || options.cascade === null ? true : options.cascade;\n    return preorder(tree);\n    /**\n       * Check and remove nodes recursively in preorder.\n       * For each composite node, modify its children array in-place.\n       *\n       * @param {Node} node\n       * @param {number | null | undefined} [index]\n       * @param {Parent | null | undefined} [parent]\n       * @returns {Node | null}\n       */ function preorder(node, index, parent) {\n        /** @type {Array<Node>} */ // @ts-expect-error looks like a parent.\n        const children = node.children || empty;\n        let childIndex = -1;\n        let position = 0;\n        if (is(node, index, parent)) {\n            return null;\n        }\n        if (children.length > 0) {\n            // Move all living children to the beginning of the children array.\n            while(++childIndex < children.length){\n                // @ts-expect-error looks like a parent.\n                if (preorder(children[childIndex], childIndex, node)) {\n                    children[position++] = children[childIndex];\n                }\n            }\n            // Cascade delete.\n            if (cascade && !position) {\n                return null;\n            }\n            // Drop other nodes.\n            children.length = position;\n        }\n        return node;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1yZW1vdmUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Q0FVQyxHQUVvQztBQUVyQywyQkFBMkIsR0FDM0IsTUFBTUMsUUFBUSxFQUFFO0FBRWhCOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNELDBDQUEwQztBQUNuQyxNQUFNQyxTQUNYOzs7OztHQUtDLEdBRUM7Ozs7O0tBS0MsR0FDRCxTQUFVQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsSUFBSTtJQUMzQixNQUFNQyxLQUFLTixzREFBT0EsQ0FBQ0ssUUFBUUQ7SUFDM0IsTUFBTUcsVUFDSixDQUFDSCxXQUFXQSxRQUFRRyxPQUFPLEtBQUtDLGFBQWFKLFFBQVFHLE9BQU8sS0FBSyxPQUM3RCxPQUNBSCxRQUFRRyxPQUFPO0lBRXJCLE9BQU9FLFNBQVNOO0lBRWhCOzs7Ozs7OztPQVFDLEdBQ0QsU0FBU00sU0FBU0MsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLE1BQU07UUFDbkMsd0JBQXdCLEdBQ3hCLHdDQUF3QztRQUN4QyxNQUFNQyxXQUFXSCxLQUFLRyxRQUFRLElBQUlaO1FBQ2xDLElBQUlhLGFBQWEsQ0FBQztRQUNsQixJQUFJQyxXQUFXO1FBRWYsSUFBSVQsR0FBR0ksTUFBTUMsT0FBT0MsU0FBUztZQUMzQixPQUFPO1FBQ1Q7UUFFQSxJQUFJQyxTQUFTRyxNQUFNLEdBQUcsR0FBRztZQUN2QixtRUFBbUU7WUFDbkUsTUFBTyxFQUFFRixhQUFhRCxTQUFTRyxNQUFNLENBQUU7Z0JBQ3JDLHdDQUF3QztnQkFDeEMsSUFBSVAsU0FBU0ksUUFBUSxDQUFDQyxXQUFXLEVBQUVBLFlBQVlKLE9BQU87b0JBQ3BERyxRQUFRLENBQUNFLFdBQVcsR0FBR0YsUUFBUSxDQUFDQyxXQUFXO2dCQUM3QztZQUNGO1lBRUEsa0JBQWtCO1lBQ2xCLElBQUlQLFdBQVcsQ0FBQ1EsVUFBVTtnQkFDeEIsT0FBTztZQUNUO1lBRUEsb0JBQW9CO1lBQ3BCRixTQUFTRyxNQUFNLEdBQUdEO1FBQ3BCO1FBRUEsT0FBT0w7SUFDVDtBQUNGLEVBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1yZW1vdmUvbGliL2luZGV4LmpzPzMwYTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUGFyZW50fSBQYXJlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0LXV0aWwtaXMnKS5UZXN0fSBUZXN0XG4gKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Nhc2NhZGU9dHJ1ZV1cbiAqICAgV2hldGhlciB0byBkcm9wIHBhcmVudCBub2RlcyBpZiB0aGV5IGhhZCBjaGlsZHJlbiwgYnV0IGFsbCB0aGVpciBjaGlsZHJlblxuICogICB3ZXJlIGZpbHRlcmVkIG91dC5cbiAqL1xuXG5pbXBvcnQge2NvbnZlcnR9IGZyb20gJ3VuaXN0LXV0aWwtaXMnXG5cbi8qKiBAdHlwZSB7QXJyYXk8dW5rbm93bj59ICovXG5jb25zdCBlbXB0eSA9IFtdXG5cbi8qKlxuICogQ2hhbmdlIHRoZSBnaXZlbiBgdHJlZWAgYnkgcmVtb3ZpbmcgYWxsIG5vZGVzIHRoYXQgcGFzcyBgdGVzdGAuXG4gKlxuICogVGhlIHRyZWUgaXMgd2Fsa2VkIGluIHByZW9yZGVyIChOTFIpLCB2aXNpdGluZyB0aGUgbm9kZSBpdHNlbGYsIHRoZW4gaXRzXG4gKiBoZWFkLCBldGMuXG4gKlxuICogQHBhcmFtIHRyZWVcbiAqICAgVHJlZSB0byBjaGFuZ2UuXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcGFyYW0gdGVzdFxuICogICBgdW5pc3QtdXRpbC1pc2AgY29tcGF0aWJsZSB0ZXN0LlxuICogQHJldHVybnNcbiAqICAgVGhlIGdpdmVuIGB0cmVlYCB3aXRob3V0IG5vZGVzIHRoYXQgcGFzcyBgdGVzdGAuXG4gKlxuICogICBgbnVsbGAgaXMgcmV0dXJuZWQgaWYgYHRyZWVgIGl0c2VsZiBkaWRu4oCZdCBwYXNzIHRoZSB0ZXN0IG9yIGlzIGNhc2NhZGVkXG4gKiAgIGF3YXkuXG4gKi9cbi8vIFRvIGRvOiBuZXh0IG1ham9yOiBkb27igJl0IHJldHVybiBgdHJlZWAuXG5leHBvcnQgY29uc3QgcmVtb3ZlID1cbiAgLyoqXG4gICAqIEB0eXBlIHsoXG4gICAqICAoPFRyZWUgZXh0ZW5kcyBOb2RlPihub2RlOiBUcmVlLCBvcHRpb25zOiBPcHRpb25zLCB0ZXN0OiBUZXN0KSA9PiBUcmVlIHwgbnVsbCkgJlxuICAgKiAgKDxUcmVlIGV4dGVuZHMgTm9kZT4obm9kZTogVHJlZSwgdGVzdDogVGVzdCkgPT4gVHJlZSB8IG51bGwpXG4gICAqICl9XG4gICAqL1xuICAoXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSB0cmVlXG4gICAgICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gICAgICogQHBhcmFtIHtUZXN0IHwgbnVsbCB8IHVuZGVmaW5lZH0gW3Rlc3RdXG4gICAgICogQHJldHVybnMge05vZGUgfCBudWxsfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0cmVlLCBvcHRpb25zLCB0ZXN0KSB7XG4gICAgICBjb25zdCBpcyA9IGNvbnZlcnQodGVzdCB8fCBvcHRpb25zKVxuICAgICAgY29uc3QgY2FzY2FkZSA9XG4gICAgICAgICFvcHRpb25zIHx8IG9wdGlvbnMuY2FzY2FkZSA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuY2FzY2FkZSA9PT0gbnVsbFxuICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgIDogb3B0aW9ucy5jYXNjYWRlXG5cbiAgICAgIHJldHVybiBwcmVvcmRlcih0cmVlKVxuXG4gICAgICAvKipcbiAgICAgICAqIENoZWNrIGFuZCByZW1vdmUgbm9kZXMgcmVjdXJzaXZlbHkgaW4gcHJlb3JkZXIuXG4gICAgICAgKiBGb3IgZWFjaCBjb21wb3NpdGUgbm9kZSwgbW9kaWZ5IGl0cyBjaGlsZHJlbiBhcnJheSBpbi1wbGFjZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2luZGV4XVxuICAgICAgICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGFyZW50XVxuICAgICAgICogQHJldHVybnMge05vZGUgfCBudWxsfVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBwcmVvcmRlcihub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gICAgICAgIC8qKiBAdHlwZSB7QXJyYXk8Tm9kZT59ICovXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgbG9va3MgbGlrZSBhIHBhcmVudC5cbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuIHx8IGVtcHR5XG4gICAgICAgIGxldCBjaGlsZEluZGV4ID0gLTFcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gMFxuXG4gICAgICAgIGlmIChpcyhub2RlLCBpbmRleCwgcGFyZW50KSkge1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIE1vdmUgYWxsIGxpdmluZyBjaGlsZHJlbiB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjaGlsZHJlbiBhcnJheS5cbiAgICAgICAgICB3aGlsZSAoKytjaGlsZEluZGV4IDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGxvb2tzIGxpa2UgYSBwYXJlbnQuXG4gICAgICAgICAgICBpZiAocHJlb3JkZXIoY2hpbGRyZW5bY2hpbGRJbmRleF0sIGNoaWxkSW5kZXgsIG5vZGUpKSB7XG4gICAgICAgICAgICAgIGNoaWxkcmVuW3Bvc2l0aW9uKytdID0gY2hpbGRyZW5bY2hpbGRJbmRleF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDYXNjYWRlIGRlbGV0ZS5cbiAgICAgICAgICBpZiAoY2FzY2FkZSAmJiAhcG9zaXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRHJvcCBvdGhlciBub2Rlcy5cbiAgICAgICAgICBjaGlsZHJlbi5sZW5ndGggPSBwb3NpdGlvblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vZGVcbiAgICAgIH1cbiAgICB9XG4gIClcbiJdLCJuYW1lcyI6WyJjb252ZXJ0IiwiZW1wdHkiLCJyZW1vdmUiLCJ0cmVlIiwib3B0aW9ucyIsInRlc3QiLCJpcyIsImNhc2NhZGUiLCJ1bmRlZmluZWQiLCJwcmVvcmRlciIsIm5vZGUiLCJpbmRleCIsInBhcmVudCIsImNoaWxkcmVuIiwiY2hpbGRJbmRleCIsInBvc2l0aW9uIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/unist-util-remove/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/unist-util-remove/node_modules/unist-util-is/lib/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/unist-util-remove/node_modules/unist-util-is/lib/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   is: () => (/* binding */ is)\n/* harmony export */ });\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */ /**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */ /**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */ /**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */ /**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */ /**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */ /**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */ const is = /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */ /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */ // eslint-disable-next-line max-params\nfunction is(node, test, index, parent, context) {\n    const check = convert(test);\n    if (index !== undefined && index !== null && (typeof index !== \"number\" || index < 0 || index === Number.POSITIVE_INFINITY)) {\n        throw new Error(\"Expected positive finite index\");\n    }\n    if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {\n        throw new Error(\"Expected parent node\");\n    }\n    if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {\n        throw new Error(\"Expected both parent and index\");\n    }\n    // @ts-expect-error Looks like a node.\n    return node && node.type && typeof node.type === \"string\" ? Boolean(check.call(context, node, index, parent)) : false;\n};\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */ const convert = /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */ /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */ function(test) {\n    if (test === undefined || test === null) {\n        return ok;\n    }\n    if (typeof test === \"string\") {\n        return typeFactory(test);\n    }\n    if (typeof test === \"object\") {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);\n    }\n    if (typeof test === \"function\") {\n        return castFactory(test);\n    }\n    throw new Error(\"Expected function, string, or object as test\");\n};\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */ function anyFactory(tests) {\n    /** @type {Array<AssertAnything>} */ const checks = [];\n    let index = -1;\n    while(++index < tests.length){\n        checks[index] = convert(tests[index]);\n    }\n    return castFactory(any);\n    /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */ function any(...parameters) {\n        let index = -1;\n        while(++index < checks.length){\n            if (checks[index].call(this, ...parameters)) return true;\n        }\n        return false;\n    }\n}\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */ function propsFactory(check) {\n    return castFactory(all);\n    /**\n   * @param {Node} node\n   * @returns {boolean}\n   */ function all(node) {\n        /** @type {string} */ let key;\n        for(key in check){\n            // @ts-expect-error: hush, it sure works as an index.\n            if (node[key] !== check[key]) return false;\n        }\n        return true;\n    }\n}\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */ function typeFactory(check) {\n    return castFactory(type);\n    /**\n   * @param {Node} node\n   */ function type(node) {\n        return node && node.type === check;\n    }\n}\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */ function castFactory(check) {\n    return assertion;\n    /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */ function assertion(node, ...parameters) {\n        return Boolean(node && typeof node === \"object\" && \"type\" in node && // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters)));\n    }\n}\nfunction ok() {\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/unist-util-remove/node_modules/unist-util-is/lib/index.js\n");

/***/ })

};
;