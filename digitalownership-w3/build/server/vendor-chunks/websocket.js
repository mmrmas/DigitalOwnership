/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/websocket";
exports.ids = ["vendor-chunks/websocket"];
exports.modules = {

/***/ "(ssr)/../node_modules/websocket/index.js":
/*!******************************************!*\
  !*** ../node_modules/websocket/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./lib/websocket */ \"(ssr)/../node_modules/websocket/lib/websocket.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLCtHQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2luZGV4LmpzPzdhZjEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi93ZWJzb2NrZXQnKTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/Deprecation.js":
/*!****************************************************!*\
  !*** ../node_modules/websocket/lib/Deprecation.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar Deprecation = {\n    disableWarnings: false,\n    deprecationWarningMap: {},\n    warn: function(deprecationName) {\n        if (!this.disableWarnings && this.deprecationWarningMap[deprecationName]) {\n            console.warn(\"DEPRECATION WARNING: \" + this.deprecationWarningMap[deprecationName]);\n            this.deprecationWarningMap[deprecationName] = false;\n        }\n    }\n};\nmodule.exports = Deprecation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvRGVwcmVjYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O3VFQWN1RTtBQUV2RSxJQUFJQSxjQUFjO0lBQ2RDLGlCQUFpQjtJQUVqQkMsdUJBQXVCLENBRXZCO0lBRUFDLE1BQU0sU0FBU0MsZUFBZTtRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDSCxlQUFlLElBQUksSUFBSSxDQUFDQyxxQkFBcUIsQ0FBQ0UsZ0JBQWdCLEVBQUU7WUFDdEVDLFFBQVFGLElBQUksQ0FBQywwQkFBMEIsSUFBSSxDQUFDRCxxQkFBcUIsQ0FBQ0UsZ0JBQWdCO1lBQ2xGLElBQUksQ0FBQ0YscUJBQXFCLENBQUNFLGdCQUFnQixHQUFHO1FBQ2xEO0lBQ0o7QUFDSjtBQUVBRSxPQUFPQyxPQUFPLEdBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4uL25vZGVfbW9kdWxlcy93ZWJzb2NrZXQvbGliL0RlcHJlY2F0aW9uLmpzP2Y2Y2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogIENvcHlyaWdodCAyMDEwLTIwMTUgQnJpYW4gTWNLZWx2ZXkuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgRGVwcmVjYXRpb24gPSB7XG4gICAgZGlzYWJsZVdhcm5pbmdzOiBmYWxzZSxcblxuICAgIGRlcHJlY2F0aW9uV2FybmluZ01hcDoge1xuXG4gICAgfSxcblxuICAgIHdhcm46IGZ1bmN0aW9uKGRlcHJlY2F0aW9uTmFtZSkge1xuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZVdhcm5pbmdzICYmIHRoaXMuZGVwcmVjYXRpb25XYXJuaW5nTWFwW2RlcHJlY2F0aW9uTmFtZV0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignREVQUkVDQVRJT04gV0FSTklORzogJyArIHRoaXMuZGVwcmVjYXRpb25XYXJuaW5nTWFwW2RlcHJlY2F0aW9uTmFtZV0pO1xuICAgICAgICAgICAgdGhpcy5kZXByZWNhdGlvbldhcm5pbmdNYXBbZGVwcmVjYXRpb25OYW1lXSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZXByZWNhdGlvbjtcbiJdLCJuYW1lcyI6WyJEZXByZWNhdGlvbiIsImRpc2FibGVXYXJuaW5ncyIsImRlcHJlY2F0aW9uV2FybmluZ01hcCIsIndhcm4iLCJkZXByZWNhdGlvbk5hbWUiLCJjb25zb2xlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/Deprecation.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/W3CWebSocket.js":
/*!*****************************************************!*\
  !*** ../node_modules/websocket/lib/W3CWebSocket.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar WebSocketClient = __webpack_require__(/*! ./WebSocketClient */ \"(ssr)/../node_modules/websocket/lib/WebSocketClient.js\");\nvar toBuffer = __webpack_require__(/*! typedarray-to-buffer */ \"(ssr)/../node_modules/typedarray-to-buffer/index.js\");\nvar yaeti = __webpack_require__(/*! yaeti */ \"(ssr)/../node_modules/yaeti/index.js\");\nconst CONNECTING = 0;\nconst OPEN = 1;\nconst CLOSING = 2;\nconst CLOSED = 3;\nmodule.exports = W3CWebSocket;\nfunction W3CWebSocket(url, protocols, origin, headers, requestOptions, clientConfig) {\n    // Make this an EventTarget.\n    yaeti.EventTarget.call(this);\n    // Sanitize clientConfig.\n    clientConfig = clientConfig || {};\n    clientConfig.assembleFragments = true; // Required in the W3C API.\n    var self = this;\n    this._url = url;\n    this._readyState = CONNECTING;\n    this._protocol = undefined;\n    this._extensions = \"\";\n    this._bufferedAmount = 0; // Hack, always 0.\n    this._binaryType = \"arraybuffer\"; // TODO: Should be 'blob' by default, but Node has no Blob.\n    // The WebSocketConnection instance.\n    this._connection = undefined;\n    // WebSocketClient instance.\n    this._client = new WebSocketClient(clientConfig);\n    this._client.on(\"connect\", function(connection) {\n        onConnect.call(self, connection);\n    });\n    this._client.on(\"connectFailed\", function() {\n        onConnectFailed.call(self);\n    });\n    this._client.connect(url, protocols, origin, headers, requestOptions);\n}\n// Expose W3C read only attributes.\nObject.defineProperties(W3CWebSocket.prototype, {\n    url: {\n        get: function() {\n            return this._url;\n        }\n    },\n    readyState: {\n        get: function() {\n            return this._readyState;\n        }\n    },\n    protocol: {\n        get: function() {\n            return this._protocol;\n        }\n    },\n    extensions: {\n        get: function() {\n            return this._extensions;\n        }\n    },\n    bufferedAmount: {\n        get: function() {\n            return this._bufferedAmount;\n        }\n    }\n});\n// Expose W3C write/read attributes.\nObject.defineProperties(W3CWebSocket.prototype, {\n    binaryType: {\n        get: function() {\n            return this._binaryType;\n        },\n        set: function(type) {\n            // TODO: Just 'arraybuffer' supported.\n            if (type !== \"arraybuffer\") {\n                throw new SyntaxError('just \"arraybuffer\" type allowed for \"binaryType\" attribute');\n            }\n            this._binaryType = type;\n        }\n    }\n});\n// Expose W3C readyState constants into the WebSocket instance as W3C states.\n[\n    [\n        \"CONNECTING\",\n        CONNECTING\n    ],\n    [\n        \"OPEN\",\n        OPEN\n    ],\n    [\n        \"CLOSING\",\n        CLOSING\n    ],\n    [\n        \"CLOSED\",\n        CLOSED\n    ]\n].forEach(function(property) {\n    Object.defineProperty(W3CWebSocket.prototype, property[0], {\n        get: function() {\n            return property[1];\n        }\n    });\n});\n// Also expose W3C readyState constants into the WebSocket class (not defined by the W3C,\n// but there are so many libs relying on them).\n[\n    [\n        \"CONNECTING\",\n        CONNECTING\n    ],\n    [\n        \"OPEN\",\n        OPEN\n    ],\n    [\n        \"CLOSING\",\n        CLOSING\n    ],\n    [\n        \"CLOSED\",\n        CLOSED\n    ]\n].forEach(function(property) {\n    Object.defineProperty(W3CWebSocket, property[0], {\n        get: function() {\n            return property[1];\n        }\n    });\n});\nW3CWebSocket.prototype.send = function(data) {\n    if (this._readyState !== OPEN) {\n        throw new Error(\"cannot call send() while not connected\");\n    }\n    // Text.\n    if (typeof data === \"string\" || data instanceof String) {\n        this._connection.sendUTF(data);\n    } else {\n        // Node Buffer.\n        if (data instanceof Buffer) {\n            this._connection.sendBytes(data);\n        } else if (data.byteLength || data.byteLength === 0) {\n            data = toBuffer(data);\n            this._connection.sendBytes(data);\n        } else {\n            throw new Error(\"unknown binary data:\", data);\n        }\n    }\n};\nW3CWebSocket.prototype.close = function(code, reason) {\n    switch(this._readyState){\n        case CONNECTING:\n            // NOTE: We don't have the WebSocketConnection instance yet so no\n            // way to close the TCP connection.\n            // Artificially invoke the onConnectFailed event.\n            onConnectFailed.call(this);\n            // And close if it connects after a while.\n            this._client.on(\"connect\", function(connection) {\n                if (code) {\n                    connection.close(code, reason);\n                } else {\n                    connection.close();\n                }\n            });\n            break;\n        case OPEN:\n            this._readyState = CLOSING;\n            if (code) {\n                this._connection.close(code, reason);\n            } else {\n                this._connection.close();\n            }\n            break;\n        case CLOSING:\n        case CLOSED:\n            break;\n    }\n};\n/**\n * Private API.\n */ function createCloseEvent(code, reason) {\n    var event = new yaeti.Event(\"close\");\n    event.code = code;\n    event.reason = reason;\n    event.wasClean = typeof code === \"undefined\" || code === 1000;\n    return event;\n}\nfunction createMessageEvent(data) {\n    var event = new yaeti.Event(\"message\");\n    event.data = data;\n    return event;\n}\nfunction onConnect(connection) {\n    var self = this;\n    this._readyState = OPEN;\n    this._connection = connection;\n    this._protocol = connection.protocol;\n    this._extensions = connection.extensions;\n    this._connection.on(\"close\", function(code, reason) {\n        onClose.call(self, code, reason);\n    });\n    this._connection.on(\"message\", function(msg) {\n        onMessage.call(self, msg);\n    });\n    this.dispatchEvent(new yaeti.Event(\"open\"));\n}\nfunction onConnectFailed() {\n    destroy.call(this);\n    this._readyState = CLOSED;\n    try {\n        this.dispatchEvent(new yaeti.Event(\"error\"));\n    } finally{\n        this.dispatchEvent(createCloseEvent(1006, \"connection failed\"));\n    }\n}\nfunction onClose(code, reason) {\n    destroy.call(this);\n    this._readyState = CLOSED;\n    this.dispatchEvent(createCloseEvent(code, reason || \"\"));\n}\nfunction onMessage(message) {\n    if (message.utf8Data) {\n        this.dispatchEvent(createMessageEvent(message.utf8Data));\n    } else if (message.binaryData) {\n        // Must convert from Node Buffer to ArrayBuffer.\n        // TODO: or to a Blob (which does not exist in Node!).\n        if (this.binaryType === \"arraybuffer\") {\n            var buffer = message.binaryData;\n            var arraybuffer = new ArrayBuffer(buffer.length);\n            var view = new Uint8Array(arraybuffer);\n            for(var i = 0, len = buffer.length; i < len; ++i){\n                view[i] = buffer[i];\n            }\n            this.dispatchEvent(createMessageEvent(arraybuffer));\n        }\n    }\n}\nfunction destroy() {\n    this._client.removeAllListeners();\n    if (this._connection) {\n        this._connection.removeAllListeners();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvVzNDV2ViU29ja2V0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozt1RUFjdUU7QUFFdkUsSUFBSUEsa0JBQWtCQyxtQkFBT0EsQ0FBQztBQUM5QixJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUN2QixJQUFJRSxRQUFRRixtQkFBT0EsQ0FBQztBQUdwQixNQUFNRyxhQUFhO0FBQ25CLE1BQU1DLE9BQU87QUFDYixNQUFNQyxVQUFVO0FBQ2hCLE1BQU1DLFNBQVM7QUFHZkMsT0FBT0MsT0FBTyxHQUFHQztBQUdqQixTQUFTQSxhQUFhQyxHQUFHLEVBQUVDLFNBQVMsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLGNBQWMsRUFBRUMsWUFBWTtJQUMvRSw0QkFBNEI7SUFDNUJiLE1BQU1jLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7SUFFM0IseUJBQXlCO0lBQ3pCRixlQUFlQSxnQkFBZ0IsQ0FBQztJQUNoQ0EsYUFBYUcsaUJBQWlCLEdBQUcsTUFBTywyQkFBMkI7SUFFbkUsSUFBSUMsT0FBTyxJQUFJO0lBRWYsSUFBSSxDQUFDQyxJQUFJLEdBQUdWO0lBQ1osSUFBSSxDQUFDVyxXQUFXLEdBQUdsQjtJQUNuQixJQUFJLENBQUNtQixTQUFTLEdBQUdDO0lBQ2pCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO0lBQ25CLElBQUksQ0FBQ0MsZUFBZSxHQUFHLEdBQUksa0JBQWtCO0lBQzdDLElBQUksQ0FBQ0MsV0FBVyxHQUFHLGVBQWdCLDJEQUEyRDtJQUU5RixvQ0FBb0M7SUFDcEMsSUFBSSxDQUFDQyxXQUFXLEdBQUdKO0lBRW5CLDRCQUE0QjtJQUM1QixJQUFJLENBQUNLLE9BQU8sR0FBRyxJQUFJN0IsZ0JBQWdCZ0I7SUFFbkMsSUFBSSxDQUFDYSxPQUFPLENBQUNDLEVBQUUsQ0FBQyxXQUFXLFNBQVNDLFVBQVU7UUFDMUNDLFVBQVVkLElBQUksQ0FBQ0UsTUFBTVc7SUFDekI7SUFF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TUFBTTtZQUMvQyxJQUFJQyxPQUFPLElBQUlDLFdBQVdKO1lBQzFCLElBQUssSUFBSUssSUFBRSxHQUFHQyxNQUFJUCxPQUFPRyxNQUFNLEVBQUVHLElBQUVDLEtBQUssRUFBRUQsRUFBRztnQkFDekNGLElBQUksQ0FBQ0UsRUFBRSxHQUFHTixNQUFNLENBQUNNLEVBQUU7WUFDdkI7WUFDQSxJQUFJLENBQUNYLGFBQWEsQ0FBQ0osbUJBQW1CVTtRQUMxQztJQUNKO0FBQ0o7QUFHQSxTQUFTTDtJQUNMLElBQUksQ0FBQ3pDLE9BQU8sQ0FBQ3FELGtCQUFrQjtJQUMvQixJQUFJLElBQUksQ0FBQ3RELFdBQVcsRUFBRTtRQUNsQixJQUFJLENBQUNBLFdBQVcsQ0FBQ3NELGtCQUFrQjtJQUN2QztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4uL25vZGVfbW9kdWxlcy93ZWJzb2NrZXQvbGliL1czQ1dlYlNvY2tldC5qcz9jZDc0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICBDb3B5cmlnaHQgMjAxMC0yMDE1IEJyaWFuIE1jS2VsdmV5LlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIFdlYlNvY2tldENsaWVudCA9IHJlcXVpcmUoJy4vV2ViU29ja2V0Q2xpZW50Jyk7XG52YXIgdG9CdWZmZXIgPSByZXF1aXJlKCd0eXBlZGFycmF5LXRvLWJ1ZmZlcicpO1xudmFyIHlhZXRpID0gcmVxdWlyZSgneWFldGknKTtcblxuXG5jb25zdCBDT05ORUNUSU5HID0gMDtcbmNvbnN0IE9QRU4gPSAxO1xuY29uc3QgQ0xPU0lORyA9IDI7XG5jb25zdCBDTE9TRUQgPSAzO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gVzNDV2ViU29ja2V0O1xuXG5cbmZ1bmN0aW9uIFczQ1dlYlNvY2tldCh1cmwsIHByb3RvY29scywgb3JpZ2luLCBoZWFkZXJzLCByZXF1ZXN0T3B0aW9ucywgY2xpZW50Q29uZmlnKSB7XG4gICAgLy8gTWFrZSB0aGlzIGFuIEV2ZW50VGFyZ2V0LlxuICAgIHlhZXRpLkV2ZW50VGFyZ2V0LmNhbGwodGhpcyk7XG5cbiAgICAvLyBTYW5pdGl6ZSBjbGllbnRDb25maWcuXG4gICAgY2xpZW50Q29uZmlnID0gY2xpZW50Q29uZmlnIHx8IHt9O1xuICAgIGNsaWVudENvbmZpZy5hc3NlbWJsZUZyYWdtZW50cyA9IHRydWU7ICAvLyBSZXF1aXJlZCBpbiB0aGUgVzNDIEFQSS5cblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB0aGlzLl9yZWFkeVN0YXRlID0gQ09OTkVDVElORztcbiAgICB0aGlzLl9wcm90b2NvbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9leHRlbnNpb25zID0gJyc7XG4gICAgdGhpcy5fYnVmZmVyZWRBbW91bnQgPSAwOyAgLy8gSGFjaywgYWx3YXlzIDAuXG4gICAgdGhpcy5fYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7ICAvLyBUT0RPOiBTaG91bGQgYmUgJ2Jsb2InIGJ5IGRlZmF1bHQsIGJ1dCBOb2RlIGhhcyBubyBCbG9iLlxuXG4gICAgLy8gVGhlIFdlYlNvY2tldENvbm5lY3Rpb24gaW5zdGFuY2UuXG4gICAgdGhpcy5fY29ubmVjdGlvbiA9IHVuZGVmaW5lZDtcblxuICAgIC8vIFdlYlNvY2tldENsaWVudCBpbnN0YW5jZS5cbiAgICB0aGlzLl9jbGllbnQgPSBuZXcgV2ViU29ja2V0Q2xpZW50KGNsaWVudENvbmZpZyk7XG5cbiAgICB0aGlzLl9jbGllbnQub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbihjb25uZWN0aW9uKSB7XG4gICAgICAgIG9uQ29ubmVjdC5jYWxsKHNlbGYsIGNvbm5lY3Rpb24pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fY2xpZW50Lm9uKCdjb25uZWN0RmFpbGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIG9uQ29ubmVjdEZhaWxlZC5jYWxsKHNlbGYpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fY2xpZW50LmNvbm5lY3QodXJsLCBwcm90b2NvbHMsIG9yaWdpbiwgaGVhZGVycywgcmVxdWVzdE9wdGlvbnMpO1xufVxuXG5cbi8vIEV4cG9zZSBXM0MgcmVhZCBvbmx5IGF0dHJpYnV0ZXMuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhXM0NXZWJTb2NrZXQucHJvdG90eXBlLCB7XG4gICAgdXJsOiAgICAgICAgICAgIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3VybDsgICAgICAgICAgICB9IH0sXG4gICAgcmVhZHlTdGF0ZTogICAgIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3JlYWR5U3RhdGU7ICAgICB9IH0sXG4gICAgcHJvdG9jb2w6ICAgICAgIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX3Byb3RvY29sOyAgICAgICB9IH0sXG4gICAgZXh0ZW5zaW9uczogICAgIHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX2V4dGVuc2lvbnM7ICAgICB9IH0sXG4gICAgYnVmZmVyZWRBbW91bnQ6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuX2J1ZmZlcmVkQW1vdW50OyB9IH1cbn0pO1xuXG5cbi8vIEV4cG9zZSBXM0Mgd3JpdGUvcmVhZCBhdHRyaWJ1dGVzLlxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVzNDV2ViU29ja2V0LnByb3RvdHlwZSwge1xuICAgIGJpbmFyeVR5cGU6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9iaW5hcnlUeXBlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IEp1c3QgJ2FycmF5YnVmZmVyJyBzdXBwb3J0ZWQuXG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gJ2FycmF5YnVmZmVyJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignanVzdCBcImFycmF5YnVmZmVyXCIgdHlwZSBhbGxvd2VkIGZvciBcImJpbmFyeVR5cGVcIiBhdHRyaWJ1dGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2JpbmFyeVR5cGUgPSB0eXBlO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cblxuLy8gRXhwb3NlIFczQyByZWFkeVN0YXRlIGNvbnN0YW50cyBpbnRvIHRoZSBXZWJTb2NrZXQgaW5zdGFuY2UgYXMgVzNDIHN0YXRlcy5cbltbJ0NPTk5FQ1RJTkcnLENPTk5FQ1RJTkddLCBbJ09QRU4nLE9QRU5dLCBbJ0NMT1NJTkcnLENMT1NJTkddLCBbJ0NMT1NFRCcsQ0xPU0VEXV0uZm9yRWFjaChmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXM0NXZWJTb2NrZXQucHJvdG90eXBlLCBwcm9wZXJ0eVswXSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gcHJvcGVydHlbMV07IH1cbiAgICB9KTtcbn0pO1xuXG4vLyBBbHNvIGV4cG9zZSBXM0MgcmVhZHlTdGF0ZSBjb25zdGFudHMgaW50byB0aGUgV2ViU29ja2V0IGNsYXNzIChub3QgZGVmaW5lZCBieSB0aGUgVzNDLFxuLy8gYnV0IHRoZXJlIGFyZSBzbyBtYW55IGxpYnMgcmVseWluZyBvbiB0aGVtKS5cbltbJ0NPTk5FQ1RJTkcnLENPTk5FQ1RJTkddLCBbJ09QRU4nLE9QRU5dLCBbJ0NMT1NJTkcnLENMT1NJTkddLCBbJ0NMT1NFRCcsQ0xPU0VEXV0uZm9yRWFjaChmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXM0NXZWJTb2NrZXQsIHByb3BlcnR5WzBdLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBwcm9wZXJ0eVsxXTsgfVxuICAgIH0pO1xufSk7XG5cblxuVzNDV2ViU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIGlmICh0aGlzLl9yZWFkeVN0YXRlICE9PSBPUEVOKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGNhbGwgc2VuZCgpIHdoaWxlIG5vdCBjb25uZWN0ZWQnKTtcbiAgICB9XG5cbiAgICAvLyBUZXh0LlxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgfHwgZGF0YSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgICB0aGlzLl9jb25uZWN0aW9uLnNlbmRVVEYoZGF0YSk7XG4gICAgfVxuICAgIC8vIEJpbmFyeS5cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gTm9kZSBCdWZmZXIuXG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uLnNlbmRCeXRlcyhkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBBcnJheUJ1ZmZlciBvciBBcnJheUJ1ZmZlclZpZXcgY29udmVydCBpdCB0byBOb2RlIEJ1ZmZlci5cbiAgICAgICAgZWxzZSBpZiAoZGF0YS5ieXRlTGVuZ3RoIHx8IGRhdGEuYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZGF0YSA9IHRvQnVmZmVyKGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5zZW5kQnl0ZXMoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gYmluYXJ5IGRhdGE6JywgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cblczQ1dlYlNvY2tldC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbihjb2RlLCByZWFzb24pIHtcbiAgICBzd2l0Y2godGhpcy5fcmVhZHlTdGF0ZSkge1xuICAgICAgICBjYXNlIENPTk5FQ1RJTkc6XG4gICAgICAgICAgICAvLyBOT1RFOiBXZSBkb24ndCBoYXZlIHRoZSBXZWJTb2NrZXRDb25uZWN0aW9uIGluc3RhbmNlIHlldCBzbyBub1xuICAgICAgICAgICAgLy8gd2F5IHRvIGNsb3NlIHRoZSBUQ1AgY29ubmVjdGlvbi5cbiAgICAgICAgICAgIC8vIEFydGlmaWNpYWxseSBpbnZva2UgdGhlIG9uQ29ubmVjdEZhaWxlZCBldmVudC5cbiAgICAgICAgICAgIG9uQ29ubmVjdEZhaWxlZC5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgLy8gQW5kIGNsb3NlIGlmIGl0IGNvbm5lY3RzIGFmdGVyIGEgd2hpbGUuXG4gICAgICAgICAgICB0aGlzLl9jbGllbnQub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbihjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jbG9zZShjb2RlLCByZWFzb24pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE9QRU46XG4gICAgICAgICAgICB0aGlzLl9yZWFkeVN0YXRlID0gQ0xPU0lORztcbiAgICAgICAgICAgIGlmIChjb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbi5jbG9zZShjb2RlLCByZWFzb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDTE9TSU5HOlxuICAgICAgICBjYXNlIENMT1NFRDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn07XG5cblxuLyoqXG4gKiBQcml2YXRlIEFQSS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNsb3NlRXZlbnQoY29kZSwgcmVhc29uKSB7XG4gICAgdmFyIGV2ZW50ID0gbmV3IHlhZXRpLkV2ZW50KCdjbG9zZScpO1xuXG4gICAgZXZlbnQuY29kZSA9IGNvZGU7XG4gICAgZXZlbnQucmVhc29uID0gcmVhc29uO1xuICAgIGV2ZW50Lndhc0NsZWFuID0gKHR5cGVvZiBjb2RlID09PSAndW5kZWZpbmVkJyB8fCBjb2RlID09PSAxMDAwKTtcblxuICAgIHJldHVybiBldmVudDtcbn1cblxuXG5mdW5jdGlvbiBjcmVhdGVNZXNzYWdlRXZlbnQoZGF0YSkge1xuICAgIHZhciBldmVudCA9IG5ldyB5YWV0aS5FdmVudCgnbWVzc2FnZScpO1xuXG4gICAgZXZlbnQuZGF0YSA9IGRhdGE7XG5cbiAgICByZXR1cm4gZXZlbnQ7XG59XG5cblxuZnVuY3Rpb24gb25Db25uZWN0KGNvbm5lY3Rpb24pIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLl9yZWFkeVN0YXRlID0gT1BFTjtcbiAgICB0aGlzLl9jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICB0aGlzLl9wcm90b2NvbCA9IGNvbm5lY3Rpb24ucHJvdG9jb2w7XG4gICAgdGhpcy5fZXh0ZW5zaW9ucyA9IGNvbm5lY3Rpb24uZXh0ZW5zaW9ucztcblxuICAgIHRoaXMuX2Nvbm5lY3Rpb24ub24oJ2Nsb3NlJywgZnVuY3Rpb24oY29kZSwgcmVhc29uKSB7XG4gICAgICAgIG9uQ2xvc2UuY2FsbChzZWxmLCBjb2RlLCByZWFzb24pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fY29ubmVjdGlvbi5vbignbWVzc2FnZScsIGZ1bmN0aW9uKG1zZykge1xuICAgICAgICBvbk1lc3NhZ2UuY2FsbChzZWxmLCBtc2cpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyB5YWV0aS5FdmVudCgnb3BlbicpKTtcbn1cblxuXG5mdW5jdGlvbiBvbkNvbm5lY3RGYWlsZWQoKSB7XG4gICAgZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBDTE9TRUQ7XG5cbiAgICB0cnkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IHlhZXRpLkV2ZW50KCdlcnJvcicpKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoY3JlYXRlQ2xvc2VFdmVudCgxMDA2LCAnY29ubmVjdGlvbiBmYWlsZWQnKSk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIG9uQ2xvc2UoY29kZSwgcmVhc29uKSB7XG4gICAgZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBDTE9TRUQ7XG5cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoY3JlYXRlQ2xvc2VFdmVudChjb2RlLCByZWFzb24gfHwgJycpKTtcbn1cblxuXG5mdW5jdGlvbiBvbk1lc3NhZ2UobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlLnV0ZjhEYXRhKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChjcmVhdGVNZXNzYWdlRXZlbnQobWVzc2FnZS51dGY4RGF0YSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChtZXNzYWdlLmJpbmFyeURhdGEpIHtcbiAgICAgICAgLy8gTXVzdCBjb252ZXJ0IGZyb20gTm9kZSBCdWZmZXIgdG8gQXJyYXlCdWZmZXIuXG4gICAgICAgIC8vIFRPRE86IG9yIHRvIGEgQmxvYiAod2hpY2ggZG9lcyBub3QgZXhpc3QgaW4gTm9kZSEpLlxuICAgICAgICBpZiAodGhpcy5iaW5hcnlUeXBlID09PSAnYXJyYXlidWZmZXInKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gbWVzc2FnZS5iaW5hcnlEYXRhO1xuICAgICAgICAgICAgdmFyIGFycmF5YnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gICAgICAgICAgICBmb3IgKHZhciBpPTAsIGxlbj1idWZmZXIubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmlld1tpXSA9IGJ1ZmZlcltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChjcmVhdGVNZXNzYWdlRXZlbnQoYXJyYXlidWZmZXIpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHRoaXMuX2NsaWVudC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICBpZiAodGhpcy5fY29ubmVjdGlvbikge1xuICAgICAgICB0aGlzLl9jb25uZWN0aW9uLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJXZWJTb2NrZXRDbGllbnQiLCJyZXF1aXJlIiwidG9CdWZmZXIiLCJ5YWV0aSIsIkNPTk5FQ1RJTkciLCJPUEVOIiwiQ0xPU0lORyIsIkNMT1NFRCIsIm1vZHVsZSIsImV4cG9ydHMiLCJXM0NXZWJTb2NrZXQiLCJ1cmwiLCJwcm90b2NvbHMiLCJvcmlnaW4iLCJoZWFkZXJzIiwicmVxdWVzdE9wdGlvbnMiLCJjbGllbnRDb25maWciLCJFdmVudFRhcmdldCIsImNhbGwiLCJhc3NlbWJsZUZyYWdtZW50cyIsInNlbGYiLCJfdXJsIiwiX3JlYWR5U3RhdGUiLCJfcHJvdG9jb2wiLCJ1bmRlZmluZWQiLCJfZXh0ZW5zaW9ucyIsIl9idWZmZXJlZEFtb3VudCIsIl9iaW5hcnlUeXBlIiwiX2Nvbm5lY3Rpb24iLCJfY2xpZW50Iiwib24iLCJjb25uZWN0aW9uIiwib25Db25uZWN0Iiwib25Db25uZWN0RmFpbGVkIiwiY29ubmVjdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJwcm90b3R5cGUiLCJnZXQiLCJyZWFkeVN0YXRlIiwicHJvdG9jb2wiLCJleHRlbnNpb25zIiwiYnVmZmVyZWRBbW91bnQiLCJiaW5hcnlUeXBlIiwic2V0IiwidHlwZSIsIlN5bnRheEVycm9yIiwiZm9yRWFjaCIsInByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJzZW5kIiwiZGF0YSIsIkVycm9yIiwiU3RyaW5nIiwic2VuZFVURiIsIkJ1ZmZlciIsInNlbmRCeXRlcyIsImJ5dGVMZW5ndGgiLCJjbG9zZSIsImNvZGUiLCJyZWFzb24iLCJjcmVhdGVDbG9zZUV2ZW50IiwiZXZlbnQiLCJFdmVudCIsIndhc0NsZWFuIiwiY3JlYXRlTWVzc2FnZUV2ZW50Iiwib25DbG9zZSIsIm1zZyIsIm9uTWVzc2FnZSIsImRpc3BhdGNoRXZlbnQiLCJkZXN0cm95IiwibWVzc2FnZSIsInV0ZjhEYXRhIiwiYmluYXJ5RGF0YSIsImJ1ZmZlciIsImFycmF5YnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJsZW5ndGgiLCJ2aWV3IiwiVWludDhBcnJheSIsImkiLCJsZW4iLCJyZW1vdmVBbGxMaXN0ZW5lcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/W3CWebSocket.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/WebSocketClient.js":
/*!********************************************************!*\
  !*** ../node_modules/websocket/lib/WebSocketClient.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/../node_modules/websocket/lib/utils.js\");\nvar extend = utils.extend;\nvar util = __webpack_require__(/*! util */ \"util\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar WebSocketConnection = __webpack_require__(/*! ./WebSocketConnection */ \"(ssr)/../node_modules/websocket/lib/WebSocketConnection.js\");\nvar bufferAllocUnsafe = utils.bufferAllocUnsafe;\nvar protocolSeparators = [\n    \"(\",\n    \")\",\n    \"<\",\n    \">\",\n    \"@\",\n    \",\",\n    \";\",\n    \":\",\n    \"\\\\\",\n    '\"',\n    \"/\",\n    \"[\",\n    \"]\",\n    \"?\",\n    \"=\",\n    \"{\",\n    \"}\",\n    \" \",\n    String.fromCharCode(9)\n];\nvar excludedTlsOptions = [\n    \"hostname\",\n    \"port\",\n    \"method\",\n    \"path\",\n    \"headers\"\n];\nfunction WebSocketClient(config) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n    // TODO: Implement extensions\n    this.config = {\n        // 1MiB max frame size.\n        maxReceivedFrameSize: 0x100000,\n        // 8MiB max message size, only applicable if\n        // assembleFragments is true\n        maxReceivedMessageSize: 0x800000,\n        // Outgoing messages larger than fragmentationThreshold will be\n        // split into multiple fragments.\n        fragmentOutgoingMessages: true,\n        // Outgoing frames are fragmented if they exceed this threshold.\n        // Default is 16KiB\n        fragmentationThreshold: 0x4000,\n        // Which version of the protocol to use for this session.  This\n        // option will be removed once the protocol is finalized by the IETF\n        // It is only available to ease the transition through the\n        // intermediate draft protocol versions.\n        // At present, it only affects the name of the Origin header.\n        webSocketVersion: 13,\n        // If true, fragmented messages will be automatically assembled\n        // and the full message will be emitted via a 'message' event.\n        // If false, each frame will be emitted via a 'frame' event and\n        // the application will be responsible for aggregating multiple\n        // fragmented frames.  Single-frame messages will emit a 'message'\n        // event in addition to the 'frame' event.\n        // Most users will want to leave this set to 'true'\n        assembleFragments: true,\n        // The Nagle Algorithm makes more efficient use of network resources\n        // by introducing a small delay before sending small packets so that\n        // multiple messages can be batched together before going onto the\n        // wire.  This however comes at the cost of latency, so the default\n        // is to disable it.  If you don't need low latency and are streaming\n        // lots of small messages, you can change this to 'false'\n        disableNagleAlgorithm: true,\n        // The number of milliseconds to wait after sending a close frame\n        // for an acknowledgement to come back before giving up and just\n        // closing the socket.\n        closeTimeout: 5000,\n        // Options to pass to https.connect if connecting via TLS\n        tlsOptions: {}\n    };\n    if (config) {\n        var tlsOptions;\n        if (config.tlsOptions) {\n            tlsOptions = config.tlsOptions;\n            delete config.tlsOptions;\n        } else {\n            tlsOptions = {};\n        }\n        extend(this.config, config);\n        extend(this.config.tlsOptions, tlsOptions);\n    }\n    this._req = null;\n    switch(this.config.webSocketVersion){\n        case 8:\n        case 13:\n            break;\n        default:\n            throw new Error(\"Requested webSocketVersion is not supported. Allowed values are 8 and 13.\");\n    }\n}\nutil.inherits(WebSocketClient, EventEmitter);\nWebSocketClient.prototype.connect = function(requestUrl, protocols, origin, headers, extraRequestOptions) {\n    var self = this;\n    if (typeof protocols === \"string\") {\n        if (protocols.length > 0) {\n            protocols = [\n                protocols\n            ];\n        } else {\n            protocols = [];\n        }\n    }\n    if (!(protocols instanceof Array)) {\n        protocols = [];\n    }\n    this.protocols = protocols;\n    this.origin = origin;\n    if (typeof requestUrl === \"string\") {\n        this.url = url.parse(requestUrl);\n    } else {\n        this.url = requestUrl; // in case an already parsed url is passed in.\n    }\n    if (!this.url.protocol) {\n        throw new Error(\"You must specify a full WebSocket URL, including protocol.\");\n    }\n    if (!this.url.host) {\n        throw new Error(\"You must specify a full WebSocket URL, including hostname. Relative URLs are not supported.\");\n    }\n    this.secure = this.url.protocol === \"wss:\";\n    // validate protocol characters:\n    this.protocols.forEach(function(protocol) {\n        for(var i = 0; i < protocol.length; i++){\n            var charCode = protocol.charCodeAt(i);\n            var character = protocol.charAt(i);\n            if (charCode < 0x0021 || charCode > 0x007E || protocolSeparators.indexOf(character) !== -1) {\n                throw new Error('Protocol list contains invalid character \"' + String.fromCharCode(charCode) + '\"');\n            }\n        }\n    });\n    var defaultPorts = {\n        \"ws:\": \"80\",\n        \"wss:\": \"443\"\n    };\n    if (!this.url.port) {\n        this.url.port = defaultPorts[this.url.protocol];\n    }\n    var nonce = bufferAllocUnsafe(16);\n    for(var i = 0; i < 16; i++){\n        nonce[i] = Math.round(Math.random() * 0xFF);\n    }\n    this.base64nonce = nonce.toString(\"base64\");\n    var hostHeaderValue = this.url.hostname;\n    if (this.url.protocol === \"ws:\" && this.url.port !== \"80\" || this.url.protocol === \"wss:\" && this.url.port !== \"443\") {\n        hostHeaderValue += \":\" + this.url.port;\n    }\n    var reqHeaders = {};\n    if (this.secure && this.config.tlsOptions.hasOwnProperty(\"headers\")) {\n        // Allow for additional headers to be provided when connecting via HTTPS\n        extend(reqHeaders, this.config.tlsOptions.headers);\n    }\n    if (headers) {\n        // Explicitly provided headers take priority over any from tlsOptions\n        extend(reqHeaders, headers);\n    }\n    extend(reqHeaders, {\n        \"Upgrade\": \"websocket\",\n        \"Connection\": \"Upgrade\",\n        \"Sec-WebSocket-Version\": this.config.webSocketVersion.toString(10),\n        \"Sec-WebSocket-Key\": this.base64nonce,\n        \"Host\": reqHeaders.Host || hostHeaderValue\n    });\n    if (this.protocols.length > 0) {\n        reqHeaders[\"Sec-WebSocket-Protocol\"] = this.protocols.join(\", \");\n    }\n    if (this.origin) {\n        if (this.config.webSocketVersion === 13) {\n            reqHeaders[\"Origin\"] = this.origin;\n        } else if (this.config.webSocketVersion === 8) {\n            reqHeaders[\"Sec-WebSocket-Origin\"] = this.origin;\n        }\n    }\n    // TODO: Implement extensions\n    var pathAndQuery;\n    // Ensure it begins with '/'.\n    if (this.url.pathname) {\n        pathAndQuery = this.url.path;\n    } else if (this.url.path) {\n        pathAndQuery = \"/\" + this.url.path;\n    } else {\n        pathAndQuery = \"/\";\n    }\n    function handleRequestError(error) {\n        self._req = null;\n        self.emit(\"connectFailed\", error);\n    }\n    var requestOptions = {\n        agent: false\n    };\n    if (extraRequestOptions) {\n        extend(requestOptions, extraRequestOptions);\n    }\n    // These options are always overridden by the library.  The user is not\n    // allowed to specify these directly.\n    extend(requestOptions, {\n        hostname: this.url.hostname,\n        port: this.url.port,\n        method: \"GET\",\n        path: pathAndQuery,\n        headers: reqHeaders\n    });\n    if (this.secure) {\n        var tlsOptions = this.config.tlsOptions;\n        for(var key in tlsOptions){\n            if (tlsOptions.hasOwnProperty(key) && excludedTlsOptions.indexOf(key) === -1) {\n                requestOptions[key] = tlsOptions[key];\n            }\n        }\n    }\n    var req = this._req = (this.secure ? https : http).request(requestOptions);\n    req.on(\"upgrade\", function handleRequestUpgrade(response, socket, head) {\n        self._req = null;\n        req.removeListener(\"error\", handleRequestError);\n        self.socket = socket;\n        self.response = response;\n        self.firstDataChunk = head;\n        self.validateHandshake();\n    });\n    req.on(\"error\", handleRequestError);\n    req.on(\"response\", function(response) {\n        self._req = null;\n        if (utils.eventEmitterListenerCount(self, \"httpResponse\") > 0) {\n            self.emit(\"httpResponse\", response, self);\n            if (response.socket) {\n                response.socket.end();\n            }\n        } else {\n            var headerDumpParts = [];\n            for(var headerName in response.headers){\n                headerDumpParts.push(headerName + \": \" + response.headers[headerName]);\n            }\n            self.failHandshake(\"Server responded with a non-101 status: \" + response.statusCode + \" \" + response.statusMessage + \"\\nResponse Headers Follow:\\n\" + headerDumpParts.join(\"\\n\") + \"\\n\");\n        }\n    });\n    req.end();\n};\nWebSocketClient.prototype.validateHandshake = function() {\n    var headers = this.response.headers;\n    if (this.protocols.length > 0) {\n        this.protocol = headers[\"sec-websocket-protocol\"];\n        if (this.protocol) {\n            if (this.protocols.indexOf(this.protocol) === -1) {\n                this.failHandshake(\"Server did not respond with a requested protocol.\");\n                return;\n            }\n        } else {\n            this.failHandshake(\"Expected a Sec-WebSocket-Protocol header.\");\n            return;\n        }\n    }\n    if (!(headers[\"connection\"] && headers[\"connection\"].toLocaleLowerCase() === \"upgrade\")) {\n        this.failHandshake(\"Expected a Connection: Upgrade header from the server\");\n        return;\n    }\n    if (!(headers[\"upgrade\"] && headers[\"upgrade\"].toLocaleLowerCase() === \"websocket\")) {\n        this.failHandshake(\"Expected an Upgrade: websocket header from the server\");\n        return;\n    }\n    var sha1 = crypto.createHash(\"sha1\");\n    sha1.update(this.base64nonce + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\");\n    var expectedKey = sha1.digest(\"base64\");\n    if (!headers[\"sec-websocket-accept\"]) {\n        this.failHandshake(\"Expected Sec-WebSocket-Accept header from server\");\n        return;\n    }\n    if (headers[\"sec-websocket-accept\"] !== expectedKey) {\n        this.failHandshake(\"Sec-WebSocket-Accept header from server didn't match expected value of \" + expectedKey);\n        return;\n    }\n    // TODO: Support extensions\n    this.succeedHandshake();\n};\nWebSocketClient.prototype.failHandshake = function(errorDescription) {\n    if (this.socket && this.socket.writable) {\n        this.socket.end();\n    }\n    this.emit(\"connectFailed\", new Error(errorDescription));\n};\nWebSocketClient.prototype.succeedHandshake = function() {\n    var connection = new WebSocketConnection(this.socket, [], this.protocol, true, this.config);\n    connection.webSocketVersion = this.config.webSocketVersion;\n    connection._addSocketEventListeners();\n    this.emit(\"connect\", connection);\n    if (this.firstDataChunk.length > 0) {\n        connection.handleSocketData(this.firstDataChunk);\n    }\n    this.firstDataChunk = null;\n};\nWebSocketClient.prototype.abort = function() {\n    if (this._req) {\n        this._req.abort();\n    }\n};\nmodule.exports = WebSocketClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/WebSocketClient.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/WebSocketConnection.js":
/*!************************************************************!*\
  !*** ../node_modules/websocket/lib/WebSocketConnection.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/../node_modules/websocket/lib/utils.js\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar WebSocketFrame = __webpack_require__(/*! ./WebSocketFrame */ \"(ssr)/../node_modules/websocket/lib/WebSocketFrame.js\");\nvar BufferList = __webpack_require__(/*! ../vendor/FastBufferList */ \"(ssr)/../node_modules/websocket/vendor/FastBufferList.js\");\nvar isValidUTF8 = __webpack_require__(/*! utf-8-validate */ \"(ssr)/../node_modules/utf-8-validate/index.js\");\nvar bufferAllocUnsafe = utils.bufferAllocUnsafe;\nvar bufferFromString = utils.bufferFromString;\n// Connected, fully-open, ready to send and receive frames\nconst STATE_OPEN = \"open\";\n// Received a close frame from the remote peer\nconst STATE_PEER_REQUESTED_CLOSE = \"peer_requested_close\";\n// Sent close frame to remote peer.  No further data can be sent.\nconst STATE_ENDING = \"ending\";\n// Connection is fully closed.  No further data can be sent or received.\nconst STATE_CLOSED = \"closed\";\nvar setImmediateImpl = \"setImmediate\" in global ? global.setImmediate.bind(global) : process.nextTick.bind(process);\nvar idCounter = 0;\nfunction WebSocketConnection(socket, extensions, protocol, maskOutgoingPackets, config) {\n    this._debug = utils.BufferingLogger(\"websocket:connection\", ++idCounter);\n    this._debug(\"constructor\");\n    if (this._debug.enabled) {\n        instrumentSocketForDebugging(this, socket);\n    }\n    // Superclass Constructor\n    EventEmitter.call(this);\n    this._pingListenerCount = 0;\n    this.on(\"newListener\", function(ev) {\n        if (ev === \"ping\") {\n            this._pingListenerCount++;\n        }\n    }).on(\"removeListener\", function(ev) {\n        if (ev === \"ping\") {\n            this._pingListenerCount--;\n        }\n    });\n    this.config = config;\n    this.socket = socket;\n    this.protocol = protocol;\n    this.extensions = extensions;\n    this.remoteAddress = socket.remoteAddress;\n    this.closeReasonCode = -1;\n    this.closeDescription = null;\n    this.closeEventEmitted = false;\n    // We have to mask outgoing packets if we're acting as a WebSocket client.\n    this.maskOutgoingPackets = maskOutgoingPackets;\n    // We re-use the same buffers for the mask and frame header for all frames\n    // received on each connection to avoid a small memory allocation for each\n    // frame.\n    this.maskBytes = bufferAllocUnsafe(4);\n    this.frameHeader = bufferAllocUnsafe(10);\n    // the BufferList will handle the data streaming in\n    this.bufferList = new BufferList();\n    // Prepare for receiving first frame\n    this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    this.fragmentationSize = 0; // data received so far...\n    this.frameQueue = [];\n    // Various bits of connection state\n    this.connected = true;\n    this.state = STATE_OPEN;\n    this.waitingForCloseResponse = false;\n    // Received TCP FIN, socket's readable stream is finished.\n    this.receivedEnd = false;\n    this.closeTimeout = this.config.closeTimeout;\n    this.assembleFragments = this.config.assembleFragments;\n    this.maxReceivedMessageSize = this.config.maxReceivedMessageSize;\n    this.outputBufferFull = false;\n    this.inputPaused = false;\n    this.receivedDataHandler = this.processReceivedData.bind(this);\n    this._closeTimerHandler = this.handleCloseTimer.bind(this);\n    // Disable nagle algorithm?\n    this.socket.setNoDelay(this.config.disableNagleAlgorithm);\n    // Make sure there is no socket inactivity timeout\n    this.socket.setTimeout(0);\n    if (this.config.keepalive && !this.config.useNativeKeepalive) {\n        if (typeof this.config.keepaliveInterval !== \"number\") {\n            throw new Error(\"keepaliveInterval must be specified and numeric \" + \"if keepalive is true.\");\n        }\n        this._keepaliveTimerHandler = this.handleKeepaliveTimer.bind(this);\n        this.setKeepaliveTimer();\n        if (this.config.dropConnectionOnKeepaliveTimeout) {\n            if (typeof this.config.keepaliveGracePeriod !== \"number\") {\n                throw new Error(\"keepaliveGracePeriod  must be specified and \" + \"numeric if dropConnectionOnKeepaliveTimeout \" + \"is true.\");\n            }\n            this._gracePeriodTimerHandler = this.handleGracePeriodTimer.bind(this);\n        }\n    } else if (this.config.keepalive && this.config.useNativeKeepalive) {\n        if (!(\"setKeepAlive\" in this.socket)) {\n            throw new Error(\"Unable to use native keepalive: unsupported by \" + \"this version of Node.\");\n        }\n        this.socket.setKeepAlive(true, this.config.keepaliveInterval);\n    }\n    // The HTTP Client seems to subscribe to socket error events\n    // and re-dispatch them in such a way that doesn't make sense\n    // for users of our client, so we want to make sure nobody\n    // else is listening for error events on the socket besides us.\n    this.socket.removeAllListeners(\"error\");\n}\nWebSocketConnection.CLOSE_REASON_NORMAL = 1000;\nWebSocketConnection.CLOSE_REASON_GOING_AWAY = 1001;\nWebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR = 1002;\nWebSocketConnection.CLOSE_REASON_UNPROCESSABLE_INPUT = 1003;\nWebSocketConnection.CLOSE_REASON_RESERVED = 1004; // Reserved value.  Undefined meaning.\nWebSocketConnection.CLOSE_REASON_NOT_PROVIDED = 1005; // Not to be used on the wire\nWebSocketConnection.CLOSE_REASON_ABNORMAL = 1006; // Not to be used on the wire\nWebSocketConnection.CLOSE_REASON_INVALID_DATA = 1007;\nWebSocketConnection.CLOSE_REASON_POLICY_VIOLATION = 1008;\nWebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG = 1009;\nWebSocketConnection.CLOSE_REASON_EXTENSION_REQUIRED = 1010;\nWebSocketConnection.CLOSE_REASON_INTERNAL_SERVER_ERROR = 1011;\nWebSocketConnection.CLOSE_REASON_TLS_HANDSHAKE_FAILED = 1015; // Not to be used on the wire\nWebSocketConnection.CLOSE_DESCRIPTIONS = {\n    1000: \"Normal connection closure\",\n    1001: \"Remote peer is going away\",\n    1002: \"Protocol error\",\n    1003: \"Unprocessable input\",\n    1004: \"Reserved\",\n    1005: \"Reason not provided\",\n    1006: \"Abnormal closure, no further detail available\",\n    1007: \"Invalid data received\",\n    1008: \"Policy violation\",\n    1009: \"Message too big\",\n    1010: \"Extension requested by client is required\",\n    1011: \"Internal Server Error\",\n    1015: \"TLS Handshake Failed\"\n};\nfunction validateCloseReason(code) {\n    if (code < 1000) {\n        // Status codes in the range 0-999 are not used\n        return false;\n    }\n    if (code >= 1000 && code <= 2999) {\n        // Codes from 1000 - 2999 are reserved for use by the protocol.  Only\n        // a few codes are defined, all others are currently illegal.\n        return [\n            1000,\n            1001,\n            1002,\n            1003,\n            1007,\n            1008,\n            1009,\n            1010,\n            1011,\n            1012,\n            1013,\n            1014,\n            1015\n        ].indexOf(code) !== -1;\n    }\n    if (code >= 3000 && code <= 3999) {\n        // Reserved for use by libraries, frameworks, and applications.\n        // Should be registered with IANA.  Interpretation of these codes is\n        // undefined by the WebSocket protocol.\n        return true;\n    }\n    if (code >= 4000 && code <= 4999) {\n        // Reserved for private use.  Interpretation of these codes is\n        // undefined by the WebSocket protocol.\n        return true;\n    }\n    if (code >= 5000) {\n        return false;\n    }\n}\nutil.inherits(WebSocketConnection, EventEmitter);\nWebSocketConnection.prototype._addSocketEventListeners = function() {\n    this.socket.on(\"error\", this.handleSocketError.bind(this));\n    this.socket.on(\"end\", this.handleSocketEnd.bind(this));\n    this.socket.on(\"close\", this.handleSocketClose.bind(this));\n    this.socket.on(\"drain\", this.handleSocketDrain.bind(this));\n    this.socket.on(\"pause\", this.handleSocketPause.bind(this));\n    this.socket.on(\"resume\", this.handleSocketResume.bind(this));\n    this.socket.on(\"data\", this.handleSocketData.bind(this));\n};\n// set or reset the keepalive timer when data is received.\nWebSocketConnection.prototype.setKeepaliveTimer = function() {\n    this._debug(\"setKeepaliveTimer\");\n    if (!this.config.keepalive || this.config.useNativeKeepalive) {\n        return;\n    }\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n    this._keepaliveTimeoutID = setTimeout(this._keepaliveTimerHandler, this.config.keepaliveInterval);\n};\nWebSocketConnection.prototype.clearKeepaliveTimer = function() {\n    if (this._keepaliveTimeoutID) {\n        clearTimeout(this._keepaliveTimeoutID);\n    }\n};\n// No data has been received within config.keepaliveTimeout ms.\nWebSocketConnection.prototype.handleKeepaliveTimer = function() {\n    this._debug(\"handleKeepaliveTimer\");\n    this._keepaliveTimeoutID = null;\n    this.ping();\n    // If we are configured to drop connections if the client doesn't respond\n    // then set the grace period timer.\n    if (this.config.dropConnectionOnKeepaliveTimeout) {\n        this.setGracePeriodTimer();\n    } else {\n        // Otherwise reset the keepalive timer to send the next ping.\n        this.setKeepaliveTimer();\n    }\n};\nWebSocketConnection.prototype.setGracePeriodTimer = function() {\n    this._debug(\"setGracePeriodTimer\");\n    this.clearGracePeriodTimer();\n    this._gracePeriodTimeoutID = setTimeout(this._gracePeriodTimerHandler, this.config.keepaliveGracePeriod);\n};\nWebSocketConnection.prototype.clearGracePeriodTimer = function() {\n    if (this._gracePeriodTimeoutID) {\n        clearTimeout(this._gracePeriodTimeoutID);\n    }\n};\nWebSocketConnection.prototype.handleGracePeriodTimer = function() {\n    this._debug(\"handleGracePeriodTimer\");\n    // If this is called, the client has not responded and is assumed dead.\n    this._gracePeriodTimeoutID = null;\n    this.drop(WebSocketConnection.CLOSE_REASON_ABNORMAL, \"Peer not responding.\", true);\n};\nWebSocketConnection.prototype.handleSocketData = function(data) {\n    this._debug(\"handleSocketData\");\n    // Reset the keepalive timer when receiving data of any kind.\n    this.setKeepaliveTimer();\n    // Add received data to our bufferList, which efficiently holds received\n    // data chunks in a linked list of Buffer objects.\n    this.bufferList.write(data);\n    this.processReceivedData();\n};\nWebSocketConnection.prototype.processReceivedData = function() {\n    this._debug(\"processReceivedData\");\n    // If we're not connected, we should ignore any data remaining on the buffer.\n    if (!this.connected) {\n        return;\n    }\n    // Receiving/parsing is expected to be halted when paused.\n    if (this.inputPaused) {\n        return;\n    }\n    var frame = this.currentFrame;\n    // WebSocketFrame.prototype.addData returns true if all data necessary to\n    // parse the frame was available.  It returns false if we are waiting for\n    // more data to come in on the wire.\n    if (!frame.addData(this.bufferList)) {\n        this._debug(\"-- insufficient data for frame\");\n        return;\n    }\n    var self = this;\n    // Handle possible parsing errors\n    if (frame.protocolError) {\n        // Something bad happened.. get rid of this client.\n        this._debug(\"-- protocol error\");\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, frame.dropReason);\n        });\n        return;\n    } else if (frame.frameTooLarge) {\n        this._debug(\"-- frame too large\");\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG, frame.dropReason);\n        });\n        return;\n    }\n    // For now since we don't support extensions, all RSV bits are illegal\n    if (frame.rsv1 || frame.rsv2 || frame.rsv3) {\n        this._debug(\"-- illegal rsv flag\");\n        process.nextTick(function() {\n            self.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, \"Unsupported usage of rsv bits without negotiated extension.\");\n        });\n        return;\n    }\n    if (!this.assembleFragments) {\n        this._debug(\"-- emitting frame\");\n        process.nextTick(function() {\n            self.emit(\"frame\", frame);\n        });\n    }\n    process.nextTick(function() {\n        self.processFrame(frame);\n    });\n    this.currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    // If there's data remaining, schedule additional processing, but yield\n    // for now so that other connections have a chance to have their data\n    // processed.  We use setImmediate here instead of process.nextTick to\n    // explicitly indicate that we wish for other I/O to be handled first.\n    if (this.bufferList.length > 0) {\n        setImmediateImpl(this.receivedDataHandler);\n    }\n};\nWebSocketConnection.prototype.handleSocketError = function(error) {\n    this._debug(\"handleSocketError: %j\", error);\n    if (this.state === STATE_CLOSED) {\n        // See https://github.com/theturtle32/WebSocket-Node/issues/288\n        this._debug(\"  --- Socket 'error' after 'close'\");\n        return;\n    }\n    this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;\n    this.closeDescription = \"Socket Error: \" + error.syscall + \" \" + error.code;\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    this.fragmentationSize = 0;\n    if (utils.eventEmitterListenerCount(this, \"error\") > 0) {\n        this.emit(\"error\", error);\n    }\n    this.socket.destroy();\n    this._debug.printOutput();\n};\nWebSocketConnection.prototype.handleSocketEnd = function() {\n    this._debug(\"handleSocketEnd: received socket end.  state = %s\", this.state);\n    this.receivedEnd = true;\n    if (this.state === STATE_CLOSED) {\n        // When using the TLS module, sometimes the socket will emit 'end'\n        // after it emits 'close'.  I don't think that's correct behavior,\n        // but we should deal with it gracefully by ignoring it.\n        this._debug(\"  --- Socket 'end' after 'close'\");\n        return;\n    }\n    if (this.state !== STATE_PEER_REQUESTED_CLOSE && this.state !== STATE_ENDING) {\n        this._debug(\"  --- UNEXPECTED socket end.\");\n        this.socket.end();\n    }\n};\nWebSocketConnection.prototype.handleSocketClose = function(hadError) {\n    this._debug(\"handleSocketClose: received socket close\");\n    this.socketHadError = hadError;\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    // If closeReasonCode is still set to -1 at this point then we must\n    // not have received a close frame!!\n    if (this.closeReasonCode === -1) {\n        this.closeReasonCode = WebSocketConnection.CLOSE_REASON_ABNORMAL;\n        this.closeDescription = \"Connection dropped by remote peer.\";\n    }\n    this.clearCloseTimer();\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n    if (!this.closeEventEmitted) {\n        this.closeEventEmitted = true;\n        this._debug(\"-- Emitting WebSocketConnection close event\");\n        this.emit(\"close\", this.closeReasonCode, this.closeDescription);\n    }\n};\nWebSocketConnection.prototype.handleSocketDrain = function() {\n    this._debug(\"handleSocketDrain: socket drain event\");\n    this.outputBufferFull = false;\n    this.emit(\"drain\");\n};\nWebSocketConnection.prototype.handleSocketPause = function() {\n    this._debug(\"handleSocketPause: socket pause event\");\n    this.inputPaused = true;\n    this.emit(\"pause\");\n};\nWebSocketConnection.prototype.handleSocketResume = function() {\n    this._debug(\"handleSocketResume: socket resume event\");\n    this.inputPaused = false;\n    this.emit(\"resume\");\n    this.processReceivedData();\n};\nWebSocketConnection.prototype.pause = function() {\n    this._debug(\"pause: pause requested\");\n    this.socket.pause();\n};\nWebSocketConnection.prototype.resume = function() {\n    this._debug(\"resume: resume requested\");\n    this.socket.resume();\n};\nWebSocketConnection.prototype.close = function(reasonCode, description) {\n    if (this.connected) {\n        this._debug(\"close: Initating clean WebSocket close sequence.\");\n        if (\"number\" !== typeof reasonCode) {\n            reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n        }\n        if (!validateCloseReason(reasonCode)) {\n            throw new Error(\"Close code \" + reasonCode + \" is not valid.\");\n        }\n        if (\"string\" !== typeof description) {\n            description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];\n        }\n        this.closeReasonCode = reasonCode;\n        this.closeDescription = description;\n        this.setCloseTimer();\n        this.sendCloseFrame(this.closeReasonCode, this.closeDescription);\n        this.state = STATE_ENDING;\n        this.connected = false;\n    }\n};\nWebSocketConnection.prototype.drop = function(reasonCode, description, skipCloseFrame) {\n    this._debug(\"drop\");\n    if (typeof reasonCode !== \"number\") {\n        reasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n    }\n    if (typeof description !== \"string\") {\n        // If no description is provided, try to look one up based on the\n        // specified reasonCode.\n        description = WebSocketConnection.CLOSE_DESCRIPTIONS[reasonCode];\n    }\n    this._debug(\"Forcefully dropping connection. skipCloseFrame: %s, code: %d, description: %s\", skipCloseFrame, reasonCode, description);\n    this.closeReasonCode = reasonCode;\n    this.closeDescription = description;\n    this.frameQueue = [];\n    this.fragmentationSize = 0;\n    if (!skipCloseFrame) {\n        this.sendCloseFrame(reasonCode, description);\n    }\n    this.connected = false;\n    this.state = STATE_CLOSED;\n    this.clearCloseTimer();\n    this.clearKeepaliveTimer();\n    this.clearGracePeriodTimer();\n    if (!this.closeEventEmitted) {\n        this.closeEventEmitted = true;\n        this._debug(\"Emitting WebSocketConnection close event\");\n        this.emit(\"close\", this.closeReasonCode, this.closeDescription);\n    }\n    this._debug(\"Drop: destroying socket\");\n    this.socket.destroy();\n};\nWebSocketConnection.prototype.setCloseTimer = function() {\n    this._debug(\"setCloseTimer\");\n    this.clearCloseTimer();\n    this._debug(\"Setting close timer\");\n    this.waitingForCloseResponse = true;\n    this.closeTimer = setTimeout(this._closeTimerHandler, this.closeTimeout);\n};\nWebSocketConnection.prototype.clearCloseTimer = function() {\n    this._debug(\"clearCloseTimer\");\n    if (this.closeTimer) {\n        this._debug(\"Clearing close timer\");\n        clearTimeout(this.closeTimer);\n        this.waitingForCloseResponse = false;\n        this.closeTimer = null;\n    }\n};\nWebSocketConnection.prototype.handleCloseTimer = function() {\n    this._debug(\"handleCloseTimer\");\n    this.closeTimer = null;\n    if (this.waitingForCloseResponse) {\n        this._debug(\"Close response not received from client.  Forcing socket end.\");\n        this.waitingForCloseResponse = false;\n        this.state = STATE_CLOSED;\n        this.socket.end();\n    }\n};\nWebSocketConnection.prototype.processFrame = function(frame) {\n    this._debug(\"processFrame\");\n    this._debug(\" -- frame: %s\", frame);\n    // Any non-control opcode besides 0x00 (continuation) received in the\n    // middle of a fragmented message is illegal.\n    if (this.frameQueue.length !== 0 && frame.opcode > 0x00 && frame.opcode < 0x08) {\n        this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, \"Illegal frame opcode 0x\" + frame.opcode.toString(16) + \" \" + \"received in middle of fragmented message.\");\n        return;\n    }\n    switch(frame.opcode){\n        case 0x02:\n            this._debug(\"-- Binary Frame\");\n            if (this.assembleFragments) {\n                if (frame.fin) {\n                    // Complete single-frame message received\n                    this._debug(\"---- Emitting 'message' event\");\n                    this.emit(\"message\", {\n                        type: \"binary\",\n                        binaryData: frame.binaryPayload\n                    });\n                } else {\n                    // beginning of a fragmented message\n                    this.frameQueue.push(frame);\n                    this.fragmentationSize = frame.length;\n                }\n            }\n            break;\n        case 0x01:\n            this._debug(\"-- Text Frame\");\n            if (this.assembleFragments) {\n                if (frame.fin) {\n                    if (!isValidUTF8(frame.binaryPayload)) {\n                        this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, \"Invalid UTF-8 Data Received\");\n                        return;\n                    }\n                    // Complete single-frame message received\n                    this._debug(\"---- Emitting 'message' event\");\n                    this.emit(\"message\", {\n                        type: \"utf8\",\n                        utf8Data: frame.binaryPayload.toString(\"utf8\")\n                    });\n                } else {\n                    // beginning of a fragmented message\n                    this.frameQueue.push(frame);\n                    this.fragmentationSize = frame.length;\n                }\n            }\n            break;\n        case 0x00:\n            this._debug(\"-- Continuation Frame\");\n            if (this.assembleFragments) {\n                if (this.frameQueue.length === 0) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, \"Unexpected Continuation Frame\");\n                    return;\n                }\n                this.fragmentationSize += frame.length;\n                if (this.fragmentationSize > this.maxReceivedMessageSize) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_MESSAGE_TOO_BIG, \"Maximum message size exceeded.\");\n                    return;\n                }\n                this.frameQueue.push(frame);\n                if (frame.fin) {\n                    // end of fragmented message, so we process the whole\n                    // message now.  We also have to decode the utf-8 data\n                    // for text frames after combining all the fragments.\n                    var bytesCopied = 0;\n                    var binaryPayload = bufferAllocUnsafe(this.fragmentationSize);\n                    var opcode = this.frameQueue[0].opcode;\n                    this.frameQueue.forEach(function(currentFrame) {\n                        currentFrame.binaryPayload.copy(binaryPayload, bytesCopied);\n                        bytesCopied += currentFrame.binaryPayload.length;\n                    });\n                    this.frameQueue = [];\n                    this.fragmentationSize = 0;\n                    switch(opcode){\n                        case 0x02:\n                            this.emit(\"message\", {\n                                type: \"binary\",\n                                binaryData: binaryPayload\n                            });\n                            break;\n                        case 0x01:\n                            if (!isValidUTF8(binaryPayload)) {\n                                this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, \"Invalid UTF-8 Data Received\");\n                                return;\n                            }\n                            this.emit(\"message\", {\n                                type: \"utf8\",\n                                utf8Data: binaryPayload.toString(\"utf8\")\n                            });\n                            break;\n                        default:\n                            this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, \"Unexpected first opcode in fragmentation sequence: 0x\" + opcode.toString(16));\n                            return;\n                    }\n                }\n            }\n            break;\n        case 0x09:\n            this._debug(\"-- Ping Frame\");\n            if (this._pingListenerCount > 0) {\n                // logic to emit the ping frame: this is only done when a listener is known to exist\n                // Expose a function allowing the user to override the default ping() behavior\n                var cancelled = false;\n                var cancel = function() {\n                    cancelled = true;\n                };\n                this.emit(\"ping\", cancel, frame.binaryPayload);\n                // Only send a pong if the client did not indicate that he would like to cancel\n                if (!cancelled) {\n                    this.pong(frame.binaryPayload);\n                }\n            } else {\n                this.pong(frame.binaryPayload);\n            }\n            break;\n        case 0x0A:\n            this._debug(\"-- Pong Frame\");\n            this.emit(\"pong\", frame.binaryPayload);\n            break;\n        case 0x08:\n            this._debug(\"-- Close Frame\");\n            if (this.waitingForCloseResponse) {\n                // Got response to our request to close the connection.\n                // Close is complete, so we just hang up.\n                this._debug(\"---- Got close response from peer.  Completing closing handshake.\");\n                this.clearCloseTimer();\n                this.waitingForCloseResponse = false;\n                this.state = STATE_CLOSED;\n                this.socket.end();\n                return;\n            }\n            this._debug(\"---- Closing handshake initiated by peer.\");\n            // Got request from other party to close connection.\n            // Send back acknowledgement and then hang up.\n            this.state = STATE_PEER_REQUESTED_CLOSE;\n            var respondCloseReasonCode;\n            // Make sure the close reason provided is legal according to\n            // the protocol spec.  Providing no close status is legal.\n            // WebSocketFrame sets closeStatus to -1 by default, so if it\n            // is still -1, then no status was provided.\n            if (frame.invalidCloseFrameLength) {\n                this.closeReasonCode = 1005; // 1005 = No reason provided.\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n            } else if (frame.closeStatus === -1 || validateCloseReason(frame.closeStatus)) {\n                this.closeReasonCode = frame.closeStatus;\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n            } else {\n                this.closeReasonCode = frame.closeStatus;\n                respondCloseReasonCode = WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR;\n            }\n            // If there is a textual description in the close frame, extract it.\n            if (frame.binaryPayload.length > 1) {\n                if (!isValidUTF8(frame.binaryPayload)) {\n                    this.drop(WebSocketConnection.CLOSE_REASON_INVALID_DATA, \"Invalid UTF-8 Data Received\");\n                    return;\n                }\n                this.closeDescription = frame.binaryPayload.toString(\"utf8\");\n            } else {\n                this.closeDescription = WebSocketConnection.CLOSE_DESCRIPTIONS[this.closeReasonCode];\n            }\n            this._debug(\"------ Remote peer %s - code: %d - %s - close frame payload length: %d\", this.remoteAddress, this.closeReasonCode, this.closeDescription, frame.length);\n            this._debug(\"------ responding to remote peer's close request.\");\n            this.sendCloseFrame(respondCloseReasonCode, null);\n            this.connected = false;\n            break;\n        default:\n            this._debug(\"-- Unrecognized Opcode %d\", frame.opcode);\n            this.drop(WebSocketConnection.CLOSE_REASON_PROTOCOL_ERROR, \"Unrecognized Opcode: 0x\" + frame.opcode.toString(16));\n            break;\n    }\n};\nWebSocketConnection.prototype.send = function(data, cb) {\n    this._debug(\"send\");\n    if (Buffer.isBuffer(data)) {\n        this.sendBytes(data, cb);\n    } else if (typeof data[\"toString\"] === \"function\") {\n        this.sendUTF(data, cb);\n    } else {\n        throw new Error(\"Data provided must either be a Node Buffer or implement toString()\");\n    }\n};\nWebSocketConnection.prototype.sendUTF = function(data, cb) {\n    data = bufferFromString(data.toString(), \"utf8\");\n    this._debug(\"sendUTF: %d bytes\", data.length);\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x01; // WebSocketOpcode.TEXT_FRAME\n    frame.binaryPayload = data;\n    this.fragmentAndSend(frame, cb);\n};\nWebSocketConnection.prototype.sendBytes = function(data, cb) {\n    this._debug(\"sendBytes\");\n    if (!Buffer.isBuffer(data)) {\n        throw new Error(\"You must pass a Node Buffer object to WebSocketConnection.prototype.sendBytes()\");\n    }\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x02; // WebSocketOpcode.BINARY_FRAME\n    frame.binaryPayload = data;\n    this.fragmentAndSend(frame, cb);\n};\nWebSocketConnection.prototype.ping = function(data) {\n    this._debug(\"ping\");\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x09; // WebSocketOpcode.PING\n    frame.fin = true;\n    if (data) {\n        if (!Buffer.isBuffer(data)) {\n            data = bufferFromString(data.toString(), \"utf8\");\n        }\n        if (data.length > 125) {\n            this._debug(\"WebSocket: Data for ping is longer than 125 bytes.  Truncating.\");\n            data = data.slice(0, 124);\n        }\n        frame.binaryPayload = data;\n    }\n    this.sendFrame(frame);\n};\n// Pong frames have to echo back the contents of the data portion of the\n// ping frame exactly, byte for byte.\nWebSocketConnection.prototype.pong = function(binaryPayload) {\n    this._debug(\"pong\");\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.opcode = 0x0A; // WebSocketOpcode.PONG\n    if (Buffer.isBuffer(binaryPayload) && binaryPayload.length > 125) {\n        this._debug(\"WebSocket: Data for pong is longer than 125 bytes.  Truncating.\");\n        binaryPayload = binaryPayload.slice(0, 124);\n    }\n    frame.binaryPayload = binaryPayload;\n    frame.fin = true;\n    this.sendFrame(frame);\n};\nWebSocketConnection.prototype.fragmentAndSend = function(frame, cb) {\n    this._debug(\"fragmentAndSend\");\n    if (frame.opcode > 0x07) {\n        throw new Error(\"You cannot fragment control frames.\");\n    }\n    var threshold = this.config.fragmentationThreshold;\n    var length = frame.binaryPayload.length;\n    // Send immediately if fragmentation is disabled or the message is not\n    // larger than the fragmentation threshold.\n    if (!this.config.fragmentOutgoingMessages || frame.binaryPayload && length <= threshold) {\n        frame.fin = true;\n        this.sendFrame(frame, cb);\n        return;\n    }\n    var numFragments = Math.ceil(length / threshold);\n    var sentFragments = 0;\n    var sentCallback = function fragmentSentCallback(err) {\n        if (err) {\n            if (typeof cb === \"function\") {\n                // pass only the first error\n                cb(err);\n                cb = null;\n            }\n            return;\n        }\n        ++sentFragments;\n        if (sentFragments === numFragments && typeof cb === \"function\") {\n            cb();\n        }\n    };\n    for(var i = 1; i <= numFragments; i++){\n        var currentFrame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n        // continuation opcode except for first frame.\n        currentFrame.opcode = i === 1 ? frame.opcode : 0x00;\n        // fin set on last frame only\n        currentFrame.fin = i === numFragments;\n        // length is likely to be shorter on the last fragment\n        var currentLength = i === numFragments ? length - threshold * (i - 1) : threshold;\n        var sliceStart = threshold * (i - 1);\n        // Slice the right portion of the original payload\n        currentFrame.binaryPayload = frame.binaryPayload.slice(sliceStart, sliceStart + currentLength);\n        this.sendFrame(currentFrame, sentCallback);\n    }\n};\nWebSocketConnection.prototype.sendCloseFrame = function(reasonCode, description, cb) {\n    if (typeof reasonCode !== \"number\") {\n        reasonCode = WebSocketConnection.CLOSE_REASON_NORMAL;\n    }\n    this._debug(\"sendCloseFrame state: %s, reasonCode: %d, description: %s\", this.state, reasonCode, description);\n    if (this.state !== STATE_OPEN && this.state !== STATE_PEER_REQUESTED_CLOSE) {\n        return;\n    }\n    var frame = new WebSocketFrame(this.maskBytes, this.frameHeader, this.config);\n    frame.fin = true;\n    frame.opcode = 0x08; // WebSocketOpcode.CONNECTION_CLOSE\n    frame.closeStatus = reasonCode;\n    if (typeof description === \"string\") {\n        frame.binaryPayload = bufferFromString(description, \"utf8\");\n    }\n    this.sendFrame(frame, cb);\n    this.socket.end();\n};\nWebSocketConnection.prototype.sendFrame = function(frame, cb) {\n    this._debug(\"sendFrame\");\n    frame.mask = this.maskOutgoingPackets;\n    var flushed = this.socket.write(frame.toBuffer(), cb);\n    this.outputBufferFull = !flushed;\n    return flushed;\n};\nmodule.exports = WebSocketConnection;\nfunction instrumentSocketForDebugging(connection, socket) {\n    /* jshint loopfunc: true */ if (!connection._debug.enabled) {\n        return;\n    }\n    var originalSocketEmit = socket.emit;\n    socket.emit = function(event) {\n        connection._debug(\"||| Socket Event  '%s'\", event);\n        originalSocketEmit.apply(this, arguments);\n    };\n    for(var key in socket){\n        if (\"function\" !== typeof socket[key]) {\n            continue;\n        }\n        if ([\n            \"emit\"\n        ].indexOf(key) !== -1) {\n            continue;\n        }\n        (function(key) {\n            var original = socket[key];\n            if (key === \"on\") {\n                socket[key] = function proxyMethod__EventEmitter__On() {\n                    connection._debug(\"||| Socket method called:  %s (%s)\", key, arguments[0]);\n                    return original.apply(this, arguments);\n                };\n                return;\n            }\n            socket[key] = function proxyMethod() {\n                connection._debug(\"||| Socket method called:  %s\", key);\n                return original.apply(this, arguments);\n            };\n        })(key);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvV2ViU29ja2V0Q29ubmVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7dUVBY3VFO0FBRXZFLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLFFBQVFELG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlFLGVBQWVGLDBEQUE4QjtBQUNqRCxJQUFJRyxpQkFBaUJILG1CQUFPQSxDQUFDO0FBQzdCLElBQUlJLGFBQWFKLG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlLLGNBQWNMLG1CQUFPQSxDQUFDO0FBQzFCLElBQUlNLG9CQUFvQkwsTUFBTUssaUJBQWlCO0FBQy9DLElBQUlDLG1CQUFtQk4sTUFBTU0sZ0JBQWdCO0FBRTdDLDBEQUEwRDtBQUMxRCxNQUFNQyxhQUFhO0FBQ25CLDhDQUE4QztBQUM5QyxNQUFNQyw2QkFBNkI7QUFDbkMsaUVBQWlFO0FBQ2pFLE1BQU1DLGVBQWU7QUFDckIsd0VBQXdFO0FBQ3hFLE1BQU1DLGVBQWU7QUFFckIsSUFBSUMsbUJBQW1CLGtCQUFtQkMsU0FDZEEsT0FBT0MsWUFBWSxDQUFDQyxJQUFJLENBQUNGLFVBQ3pCRyxRQUFRQyxRQUFRLENBQUNGLElBQUksQ0FBQ0M7QUFFbEQsSUFBSUUsWUFBWTtBQUVoQixTQUFTQyxvQkFBb0JDLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxRQUFRLEVBQUVDLG1CQUFtQixFQUFFQyxNQUFNO0lBQ2xGLElBQUksQ0FBQ0MsTUFBTSxHQUFHeEIsTUFBTXlCLGVBQWUsQ0FBQyx3QkFBd0IsRUFBRVI7SUFDOUQsSUFBSSxDQUFDTyxNQUFNLENBQUM7SUFFWixJQUFJLElBQUksQ0FBQ0EsTUFBTSxDQUFDRSxPQUFPLEVBQUU7UUFDckJDLDZCQUE2QixJQUFJLEVBQUVSO0lBQ3ZDO0lBRUEseUJBQXlCO0lBQ3pCbEIsYUFBYTJCLElBQUksQ0FBQyxJQUFJO0lBRXRCLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUc7SUFD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RSxPQUFPRSxTQUFTSCxLQUFLLENBQUMsSUFBSSxFQUFFQztnQkFDaEM7Z0JBQ0E7WUFDSjtZQUNBdkssTUFBTSxDQUFDd0ssSUFBSSxHQUFHLFNBQVNHO2dCQUNuQlIsV0FBVzlKLE1BQU0sQ0FBQyxpQ0FBaUNtSztnQkFDbkQsT0FBT0MsU0FBU0gsS0FBSyxDQUFDLElBQUksRUFBRUM7WUFDaEM7UUFDSixHQUFHQztJQUNQO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvV2ViU29ja2V0Q29ubmVjdGlvbi5qcz82MmUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICBDb3B5cmlnaHQgMjAxMC0yMDE1IEJyaWFuIE1jS2VsdmV5LlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xudmFyIFdlYlNvY2tldEZyYW1lID0gcmVxdWlyZSgnLi9XZWJTb2NrZXRGcmFtZScpO1xudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuLi92ZW5kb3IvRmFzdEJ1ZmZlckxpc3QnKTtcbnZhciBpc1ZhbGlkVVRGOCA9IHJlcXVpcmUoJ3V0Zi04LXZhbGlkYXRlJyk7XG52YXIgYnVmZmVyQWxsb2NVbnNhZmUgPSB1dGlscy5idWZmZXJBbGxvY1Vuc2FmZTtcbnZhciBidWZmZXJGcm9tU3RyaW5nID0gdXRpbHMuYnVmZmVyRnJvbVN0cmluZztcblxuLy8gQ29ubmVjdGVkLCBmdWxseS1vcGVuLCByZWFkeSB0byBzZW5kIGFuZCByZWNlaXZlIGZyYW1lc1xuY29uc3QgU1RBVEVfT1BFTiA9ICdvcGVuJztcbi8vIFJlY2VpdmVkIGEgY2xvc2UgZnJhbWUgZnJvbSB0aGUgcmVtb3RlIHBlZXJcbmNvbnN0IFNUQVRFX1BFRVJfUkVRVUVTVEVEX0NMT1NFID0gJ3BlZXJfcmVxdWVzdGVkX2Nsb3NlJztcbi8vIFNlbnQgY2xvc2UgZnJhbWUgdG8gcmVtb3RlIHBlZXIuICBObyBmdXJ0aGVyIGRhdGEgY2FuIGJlIHNlbnQuXG5jb25zdCBTVEFURV9FTkRJTkcgPSAnZW5kaW5nJztcbi8vIENvbm5lY3Rpb24gaXMgZnVsbHkgY2xvc2VkLiAgTm8gZnVydGhlciBkYXRhIGNhbiBiZSBzZW50IG9yIHJlY2VpdmVkLlxuY29uc3QgU1RBVEVfQ0xPU0VEID0gJ2Nsb3NlZCc7XG5cbnZhciBzZXRJbW1lZGlhdGVJbXBsID0gKCdzZXRJbW1lZGlhdGUnIGluIGdsb2JhbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5zZXRJbW1lZGlhdGUuYmluZChnbG9iYWwpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrLmJpbmQocHJvY2Vzcyk7XG5cbnZhciBpZENvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBXZWJTb2NrZXRDb25uZWN0aW9uKHNvY2tldCwgZXh0ZW5zaW9ucywgcHJvdG9jb2wsIG1hc2tPdXRnb2luZ1BhY2tldHMsIGNvbmZpZykge1xuICAgIHRoaXMuX2RlYnVnID0gdXRpbHMuQnVmZmVyaW5nTG9nZ2VyKCd3ZWJzb2NrZXQ6Y29ubmVjdGlvbicsICsraWRDb3VudGVyKTtcbiAgICB0aGlzLl9kZWJ1ZygnY29uc3RydWN0b3InKTtcbiAgICBcbiAgICBpZiAodGhpcy5fZGVidWcuZW5hYmxlZCkge1xuICAgICAgICBpbnN0cnVtZW50U29ja2V0Rm9yRGVidWdnaW5nKHRoaXMsIHNvY2tldCk7XG4gICAgfVxuICAgIFxuICAgIC8vIFN1cGVyY2xhc3MgQ29uc3RydWN0b3JcbiAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuX3BpbmdMaXN0ZW5lckNvdW50ID0gMDtcbiAgICB0aGlzLm9uKCduZXdMaXN0ZW5lcicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGlmIChldiA9PT0gJ3BpbmcnKXtcbiAgICAgICAgICAgIHRoaXMuX3BpbmdMaXN0ZW5lckNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdyZW1vdmVMaXN0ZW5lcicsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGlmIChldiA9PT0gJ3BpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLl9waW5nTGlzdGVuZXJDb3VudC0tO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgICB0aGlzLnByb3RvY29sID0gcHJvdG9jb2w7XG4gICAgdGhpcy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcbiAgICB0aGlzLnJlbW90ZUFkZHJlc3MgPSBzb2NrZXQucmVtb3RlQWRkcmVzcztcbiAgICB0aGlzLmNsb3NlUmVhc29uQ29kZSA9IC0xO1xuICAgIHRoaXMuY2xvc2VEZXNjcmlwdGlvbiA9IG51bGw7XG4gICAgdGhpcy5jbG9zZUV2ZW50RW1pdHRlZCA9IGZhbHNlO1xuXG4gICAgLy8gV2UgaGF2ZSB0byBtYXNrIG91dGdvaW5nIHBhY2tldHMgaWYgd2UncmUgYWN0aW5nIGFzIGEgV2ViU29ja2V0IGNsaWVudC5cbiAgICB0aGlzLm1hc2tPdXRnb2luZ1BhY2tldHMgPSBtYXNrT3V0Z29pbmdQYWNrZXRzO1xuXG4gICAgLy8gV2UgcmUtdXNlIHRoZSBzYW1lIGJ1ZmZlcnMgZm9yIHRoZSBtYXNrIGFuZCBmcmFtZSBoZWFkZXIgZm9yIGFsbCBmcmFtZXNcbiAgICAvLyByZWNlaXZlZCBvbiBlYWNoIGNvbm5lY3Rpb24gdG8gYXZvaWQgYSBzbWFsbCBtZW1vcnkgYWxsb2NhdGlvbiBmb3IgZWFjaFxuICAgIC8vIGZyYW1lLlxuICAgIHRoaXMubWFza0J5dGVzID0gYnVmZmVyQWxsb2NVbnNhZmUoNCk7XG4gICAgdGhpcy5mcmFtZUhlYWRlciA9IGJ1ZmZlckFsbG9jVW5zYWZlKDEwKTtcblxuICAgIC8vIHRoZSBCdWZmZXJMaXN0IHdpbGwgaGFuZGxlIHRoZSBkYXRhIHN0cmVhbWluZyBpblxuICAgIHRoaXMuYnVmZmVyTGlzdCA9IG5ldyBCdWZmZXJMaXN0KCk7XG5cbiAgICAvLyBQcmVwYXJlIGZvciByZWNlaXZpbmcgZmlyc3QgZnJhbWVcbiAgICB0aGlzLmN1cnJlbnRGcmFtZSA9IG5ldyBXZWJTb2NrZXRGcmFtZSh0aGlzLm1hc2tCeXRlcywgdGhpcy5mcmFtZUhlYWRlciwgdGhpcy5jb25maWcpO1xuICAgIHRoaXMuZnJhZ21lbnRhdGlvblNpemUgPSAwOyAvLyBkYXRhIHJlY2VpdmVkIHNvIGZhci4uLlxuICAgIHRoaXMuZnJhbWVRdWV1ZSA9IFtdO1xuICAgIFxuICAgIC8vIFZhcmlvdXMgYml0cyBvZiBjb25uZWN0aW9uIHN0YXRlXG4gICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGUgPSBTVEFURV9PUEVOO1xuICAgIHRoaXMud2FpdGluZ0ZvckNsb3NlUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAvLyBSZWNlaXZlZCBUQ1AgRklOLCBzb2NrZXQncyByZWFkYWJsZSBzdHJlYW0gaXMgZmluaXNoZWQuXG4gICAgdGhpcy5yZWNlaXZlZEVuZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5jbG9zZVRpbWVvdXQgPSB0aGlzLmNvbmZpZy5jbG9zZVRpbWVvdXQ7XG4gICAgdGhpcy5hc3NlbWJsZUZyYWdtZW50cyA9IHRoaXMuY29uZmlnLmFzc2VtYmxlRnJhZ21lbnRzO1xuICAgIHRoaXMubWF4UmVjZWl2ZWRNZXNzYWdlU2l6ZSA9IHRoaXMuY29uZmlnLm1heFJlY2VpdmVkTWVzc2FnZVNpemU7XG5cbiAgICB0aGlzLm91dHB1dEJ1ZmZlckZ1bGwgPSBmYWxzZTtcbiAgICB0aGlzLmlucHV0UGF1c2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZWNlaXZlZERhdGFIYW5kbGVyID0gdGhpcy5wcm9jZXNzUmVjZWl2ZWREYXRhLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fY2xvc2VUaW1lckhhbmRsZXIgPSB0aGlzLmhhbmRsZUNsb3NlVGltZXIuYmluZCh0aGlzKTtcblxuICAgIC8vIERpc2FibGUgbmFnbGUgYWxnb3JpdGhtP1xuICAgIHRoaXMuc29ja2V0LnNldE5vRGVsYXkodGhpcy5jb25maWcuZGlzYWJsZU5hZ2xlQWxnb3JpdGhtKTtcblxuICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSBpcyBubyBzb2NrZXQgaW5hY3Rpdml0eSB0aW1lb3V0XG4gICAgdGhpcy5zb2NrZXQuc2V0VGltZW91dCgwKTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5rZWVwYWxpdmUgJiYgIXRoaXMuY29uZmlnLnVzZU5hdGl2ZUtlZXBhbGl2ZSkge1xuICAgICAgICBpZiAodHlwZW9mKHRoaXMuY29uZmlnLmtlZXBhbGl2ZUludGVydmFsKSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigna2VlcGFsaXZlSW50ZXJ2YWwgbXVzdCBiZSBzcGVjaWZpZWQgYW5kIG51bWVyaWMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lmIGtlZXBhbGl2ZSBpcyB0cnVlLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2tlZXBhbGl2ZVRpbWVySGFuZGxlciA9IHRoaXMuaGFuZGxlS2VlcGFsaXZlVGltZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZXRLZWVwYWxpdmVUaW1lcigpO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5kcm9wQ29ubmVjdGlvbk9uS2VlcGFsaXZlVGltZW91dCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZih0aGlzLmNvbmZpZy5rZWVwYWxpdmVHcmFjZVBlcmlvZCkgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdrZWVwYWxpdmVHcmFjZVBlcmlvZCAgbXVzdCBiZSBzcGVjaWZpZWQgYW5kICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbnVtZXJpYyBpZiBkcm9wQ29ubmVjdGlvbk9uS2VlcGFsaXZlVGltZW91dCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzIHRydWUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ncmFjZVBlcmlvZFRpbWVySGFuZGxlciA9IHRoaXMuaGFuZGxlR3JhY2VQZXJpb2RUaW1lci5iaW5kKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuY29uZmlnLmtlZXBhbGl2ZSAmJiB0aGlzLmNvbmZpZy51c2VOYXRpdmVLZWVwYWxpdmUpIHtcbiAgICAgICAgaWYgKCEoJ3NldEtlZXBBbGl2ZScgaW4gdGhpcy5zb2NrZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byB1c2UgbmF0aXZlIGtlZXBhbGl2ZTogdW5zdXBwb3J0ZWQgYnkgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RoaXMgdmVyc2lvbiBvZiBOb2RlLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc29ja2V0LnNldEtlZXBBbGl2ZSh0cnVlLCB0aGlzLmNvbmZpZy5rZWVwYWxpdmVJbnRlcnZhbCk7XG4gICAgfVxuICAgIFxuICAgIC8vIFRoZSBIVFRQIENsaWVudCBzZWVtcyB0byBzdWJzY3JpYmUgdG8gc29ja2V0IGVycm9yIGV2ZW50c1xuICAgIC8vIGFuZCByZS1kaXNwYXRjaCB0aGVtIGluIHN1Y2ggYSB3YXkgdGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyBmb3IgdXNlcnMgb2Ygb3VyIGNsaWVudCwgc28gd2Ugd2FudCB0byBtYWtlIHN1cmUgbm9ib2R5XG4gICAgLy8gZWxzZSBpcyBsaXN0ZW5pbmcgZm9yIGVycm9yIGV2ZW50cyBvbiB0aGUgc29ja2V0IGJlc2lkZXMgdXMuXG4gICAgdGhpcy5zb2NrZXQucmVtb3ZlQWxsTGlzdGVuZXJzKCdlcnJvcicpO1xufVxuXG5XZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9OT1JNQUwgPSAxMDAwO1xuV2ViU29ja2V0Q29ubmVjdGlvbi5DTE9TRV9SRUFTT05fR09JTkdfQVdBWSA9IDEwMDE7XG5XZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9QUk9UT0NPTF9FUlJPUiA9IDEwMDI7XG5XZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9VTlBST0NFU1NBQkxFX0lOUFVUID0gMTAwMztcbldlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfUkVBU09OX1JFU0VSVkVEID0gMTAwNDsgLy8gUmVzZXJ2ZWQgdmFsdWUuICBVbmRlZmluZWQgbWVhbmluZy5cbldlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfUkVBU09OX05PVF9QUk9WSURFRCA9IDEwMDU7IC8vIE5vdCB0byBiZSB1c2VkIG9uIHRoZSB3aXJlXG5XZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9BQk5PUk1BTCA9IDEwMDY7IC8vIE5vdCB0byBiZSB1c2VkIG9uIHRoZSB3aXJlXG5XZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9JTlZBTElEX0RBVEEgPSAxMDA3O1xuV2ViU29ja2V0Q29ubmVjdGlvbi5DTE9TRV9SRUFTT05fUE9MSUNZX1ZJT0xBVElPTiA9IDEwMDg7XG5XZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9NRVNTQUdFX1RPT19CSUcgPSAxMDA5O1xuV2ViU29ja2V0Q29ubmVjdGlvbi5DTE9TRV9SRUFTT05fRVhURU5TSU9OX1JFUVVJUkVEID0gMTAxMDtcbldlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfUkVBU09OX0lOVEVSTkFMX1NFUlZFUl9FUlJPUiA9IDEwMTE7XG5XZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9UTFNfSEFORFNIQUtFX0ZBSUxFRCA9IDEwMTU7IC8vIE5vdCB0byBiZSB1c2VkIG9uIHRoZSB3aXJlXG5cbldlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfREVTQ1JJUFRJT05TID0ge1xuICAgIDEwMDA6ICdOb3JtYWwgY29ubmVjdGlvbiBjbG9zdXJlJyxcbiAgICAxMDAxOiAnUmVtb3RlIHBlZXIgaXMgZ29pbmcgYXdheScsXG4gICAgMTAwMjogJ1Byb3RvY29sIGVycm9yJyxcbiAgICAxMDAzOiAnVW5wcm9jZXNzYWJsZSBpbnB1dCcsXG4gICAgMTAwNDogJ1Jlc2VydmVkJyxcbiAgICAxMDA1OiAnUmVhc29uIG5vdCBwcm92aWRlZCcsXG4gICAgMTAwNjogJ0Fibm9ybWFsIGNsb3N1cmUsIG5vIGZ1cnRoZXIgZGV0YWlsIGF2YWlsYWJsZScsXG4gICAgMTAwNzogJ0ludmFsaWQgZGF0YSByZWNlaXZlZCcsXG4gICAgMTAwODogJ1BvbGljeSB2aW9sYXRpb24nLFxuICAgIDEwMDk6ICdNZXNzYWdlIHRvbyBiaWcnLFxuICAgIDEwMTA6ICdFeHRlbnNpb24gcmVxdWVzdGVkIGJ5IGNsaWVudCBpcyByZXF1aXJlZCcsXG4gICAgMTAxMTogJ0ludGVybmFsIFNlcnZlciBFcnJvcicsXG4gICAgMTAxNTogJ1RMUyBIYW5kc2hha2UgRmFpbGVkJ1xufTtcblxuZnVuY3Rpb24gdmFsaWRhdGVDbG9zZVJlYXNvbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPCAxMDAwKSB7XG4gICAgICAgIC8vIFN0YXR1cyBjb2RlcyBpbiB0aGUgcmFuZ2UgMC05OTkgYXJlIG5vdCB1c2VkXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPj0gMTAwMCAmJiBjb2RlIDw9IDI5OTkpIHtcbiAgICAgICAgLy8gQ29kZXMgZnJvbSAxMDAwIC0gMjk5OSBhcmUgcmVzZXJ2ZWQgZm9yIHVzZSBieSB0aGUgcHJvdG9jb2wuICBPbmx5XG4gICAgICAgIC8vIGEgZmV3IGNvZGVzIGFyZSBkZWZpbmVkLCBhbGwgb3RoZXJzIGFyZSBjdXJyZW50bHkgaWxsZWdhbC5cbiAgICAgICAgcmV0dXJuIFsxMDAwLCAxMDAxLCAxMDAyLCAxMDAzLCAxMDA3LCAxMDA4LCAxMDA5LCAxMDEwLCAxMDExLCAxMDEyLCAxMDEzLCAxMDE0LCAxMDE1XS5pbmRleE9mKGNvZGUpICE9PSAtMTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPj0gMzAwMCAmJiBjb2RlIDw9IDM5OTkpIHtcbiAgICAgICAgLy8gUmVzZXJ2ZWQgZm9yIHVzZSBieSBsaWJyYXJpZXMsIGZyYW1ld29ya3MsIGFuZCBhcHBsaWNhdGlvbnMuXG4gICAgICAgIC8vIFNob3VsZCBiZSByZWdpc3RlcmVkIHdpdGggSUFOQS4gIEludGVycHJldGF0aW9uIG9mIHRoZXNlIGNvZGVzIGlzXG4gICAgICAgIC8vIHVuZGVmaW5lZCBieSB0aGUgV2ViU29ja2V0IHByb3RvY29sLlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGNvZGUgPj0gNDAwMCAmJiBjb2RlIDw9IDQ5OTkpIHtcbiAgICAgICAgLy8gUmVzZXJ2ZWQgZm9yIHByaXZhdGUgdXNlLiAgSW50ZXJwcmV0YXRpb24gb2YgdGhlc2UgY29kZXMgaXNcbiAgICAgICAgLy8gdW5kZWZpbmVkIGJ5IHRoZSBXZWJTb2NrZXQgcHJvdG9jb2wuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY29kZSA+PSA1MDAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbnV0aWwuaW5oZXJpdHMoV2ViU29ja2V0Q29ubmVjdGlvbiwgRXZlbnRFbWl0dGVyKTtcblxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuX2FkZFNvY2tldEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zb2NrZXQub24oJ2Vycm9yJywgdGhpcy5oYW5kbGVTb2NrZXRFcnJvci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnNvY2tldC5vbignZW5kJywgdGhpcy5oYW5kbGVTb2NrZXRFbmQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5zb2NrZXQub24oJ2Nsb3NlJywgdGhpcy5oYW5kbGVTb2NrZXRDbG9zZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnNvY2tldC5vbignZHJhaW4nLCB0aGlzLmhhbmRsZVNvY2tldERyYWluLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc29ja2V0Lm9uKCdwYXVzZScsIHRoaXMuaGFuZGxlU29ja2V0UGF1c2UuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5zb2NrZXQub24oJ3Jlc3VtZScsIHRoaXMuaGFuZGxlU29ja2V0UmVzdW1lLmJpbmQodGhpcykpO1xuICAgIHRoaXMuc29ja2V0Lm9uKCdkYXRhJywgdGhpcy5oYW5kbGVTb2NrZXREYXRhLmJpbmQodGhpcykpO1xufTtcblxuLy8gc2V0IG9yIHJlc2V0IHRoZSBrZWVwYWxpdmUgdGltZXIgd2hlbiBkYXRhIGlzIHJlY2VpdmVkLlxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuc2V0S2VlcGFsaXZlVGltZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9kZWJ1Zygnc2V0S2VlcGFsaXZlVGltZXInKTtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmtlZXBhbGl2ZSAgfHwgdGhpcy5jb25maWcudXNlTmF0aXZlS2VlcGFsaXZlKSB7IHJldHVybjsgfVxuICAgIHRoaXMuY2xlYXJLZWVwYWxpdmVUaW1lcigpO1xuICAgIHRoaXMuY2xlYXJHcmFjZVBlcmlvZFRpbWVyKCk7XG4gICAgdGhpcy5fa2VlcGFsaXZlVGltZW91dElEID0gc2V0VGltZW91dCh0aGlzLl9rZWVwYWxpdmVUaW1lckhhbmRsZXIsIHRoaXMuY29uZmlnLmtlZXBhbGl2ZUludGVydmFsKTtcbn07XG5cbldlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLmNsZWFyS2VlcGFsaXZlVGltZXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fa2VlcGFsaXZlVGltZW91dElEKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9rZWVwYWxpdmVUaW1lb3V0SUQpO1xuICAgIH1cbn07XG5cbi8vIE5vIGRhdGEgaGFzIGJlZW4gcmVjZWl2ZWQgd2l0aGluIGNvbmZpZy5rZWVwYWxpdmVUaW1lb3V0IG1zLlxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuaGFuZGxlS2VlcGFsaXZlVGltZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9kZWJ1ZygnaGFuZGxlS2VlcGFsaXZlVGltZXInKTtcbiAgICB0aGlzLl9rZWVwYWxpdmVUaW1lb3V0SUQgPSBudWxsO1xuICAgIHRoaXMucGluZygpO1xuXG4gICAgLy8gSWYgd2UgYXJlIGNvbmZpZ3VyZWQgdG8gZHJvcCBjb25uZWN0aW9ucyBpZiB0aGUgY2xpZW50IGRvZXNuJ3QgcmVzcG9uZFxuICAgIC8vIHRoZW4gc2V0IHRoZSBncmFjZSBwZXJpb2QgdGltZXIuXG4gICAgaWYgKHRoaXMuY29uZmlnLmRyb3BDb25uZWN0aW9uT25LZWVwYWxpdmVUaW1lb3V0KSB7XG4gICAgICAgIHRoaXMuc2V0R3JhY2VQZXJpb2RUaW1lcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIHJlc2V0IHRoZSBrZWVwYWxpdmUgdGltZXIgdG8gc2VuZCB0aGUgbmV4dCBwaW5nLlxuICAgICAgICB0aGlzLnNldEtlZXBhbGl2ZVRpbWVyKCk7XG4gICAgfVxufTtcblxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuc2V0R3JhY2VQZXJpb2RUaW1lciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2RlYnVnKCdzZXRHcmFjZVBlcmlvZFRpbWVyJyk7XG4gICAgdGhpcy5jbGVhckdyYWNlUGVyaW9kVGltZXIoKTtcbiAgICB0aGlzLl9ncmFjZVBlcmlvZFRpbWVvdXRJRCA9IHNldFRpbWVvdXQodGhpcy5fZ3JhY2VQZXJpb2RUaW1lckhhbmRsZXIsIHRoaXMuY29uZmlnLmtlZXBhbGl2ZUdyYWNlUGVyaW9kKTtcbn07XG5cbldlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLmNsZWFyR3JhY2VQZXJpb2RUaW1lciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9ncmFjZVBlcmlvZFRpbWVvdXRJRCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fZ3JhY2VQZXJpb2RUaW1lb3V0SUQpO1xuICAgIH1cbn07XG5cbldlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLmhhbmRsZUdyYWNlUGVyaW9kVGltZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9kZWJ1ZygnaGFuZGxlR3JhY2VQZXJpb2RUaW1lcicpO1xuICAgIC8vIElmIHRoaXMgaXMgY2FsbGVkLCB0aGUgY2xpZW50IGhhcyBub3QgcmVzcG9uZGVkIGFuZCBpcyBhc3N1bWVkIGRlYWQuXG4gICAgdGhpcy5fZ3JhY2VQZXJpb2RUaW1lb3V0SUQgPSBudWxsO1xuICAgIHRoaXMuZHJvcChXZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9BQk5PUk1BTCwgJ1BlZXIgbm90IHJlc3BvbmRpbmcuJywgdHJ1ZSk7XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVTb2NrZXREYXRhID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHRoaXMuX2RlYnVnKCdoYW5kbGVTb2NrZXREYXRhJyk7XG4gICAgLy8gUmVzZXQgdGhlIGtlZXBhbGl2ZSB0aW1lciB3aGVuIHJlY2VpdmluZyBkYXRhIG9mIGFueSBraW5kLlxuICAgIHRoaXMuc2V0S2VlcGFsaXZlVGltZXIoKTtcblxuICAgIC8vIEFkZCByZWNlaXZlZCBkYXRhIHRvIG91ciBidWZmZXJMaXN0LCB3aGljaCBlZmZpY2llbnRseSBob2xkcyByZWNlaXZlZFxuICAgIC8vIGRhdGEgY2h1bmtzIGluIGEgbGlua2VkIGxpc3Qgb2YgQnVmZmVyIG9iamVjdHMuXG4gICAgdGhpcy5idWZmZXJMaXN0LndyaXRlKGRhdGEpO1xuXG4gICAgdGhpcy5wcm9jZXNzUmVjZWl2ZWREYXRhKCk7XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5wcm9jZXNzUmVjZWl2ZWREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fZGVidWcoJ3Byb2Nlc3NSZWNlaXZlZERhdGEnKTtcbiAgICAvLyBJZiB3ZSdyZSBub3QgY29ubmVjdGVkLCB3ZSBzaG91bGQgaWdub3JlIGFueSBkYXRhIHJlbWFpbmluZyBvbiB0aGUgYnVmZmVyLlxuICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAvLyBSZWNlaXZpbmcvcGFyc2luZyBpcyBleHBlY3RlZCB0byBiZSBoYWx0ZWQgd2hlbiBwYXVzZWQuXG4gICAgaWYgKHRoaXMuaW5wdXRQYXVzZWQpIHsgcmV0dXJuOyB9XG5cbiAgICB2YXIgZnJhbWUgPSB0aGlzLmN1cnJlbnRGcmFtZTtcblxuICAgIC8vIFdlYlNvY2tldEZyYW1lLnByb3RvdHlwZS5hZGREYXRhIHJldHVybnMgdHJ1ZSBpZiBhbGwgZGF0YSBuZWNlc3NhcnkgdG9cbiAgICAvLyBwYXJzZSB0aGUgZnJhbWUgd2FzIGF2YWlsYWJsZS4gIEl0IHJldHVybnMgZmFsc2UgaWYgd2UgYXJlIHdhaXRpbmcgZm9yXG4gICAgLy8gbW9yZSBkYXRhIHRvIGNvbWUgaW4gb24gdGhlIHdpcmUuXG4gICAgaWYgKCFmcmFtZS5hZGREYXRhKHRoaXMuYnVmZmVyTGlzdCkpIHsgdGhpcy5fZGVidWcoJy0tIGluc3VmZmljaWVudCBkYXRhIGZvciBmcmFtZScpOyByZXR1cm47IH1cblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIEhhbmRsZSBwb3NzaWJsZSBwYXJzaW5nIGVycm9yc1xuICAgIGlmIChmcmFtZS5wcm90b2NvbEVycm9yKSB7XG4gICAgICAgIC8vIFNvbWV0aGluZyBiYWQgaGFwcGVuZWQuLiBnZXQgcmlkIG9mIHRoaXMgY2xpZW50LlxuICAgICAgICB0aGlzLl9kZWJ1ZygnLS0gcHJvdG9jb2wgZXJyb3InKTtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuZHJvcChXZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9QUk9UT0NPTF9FUlJPUiwgZnJhbWUuZHJvcFJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2UgaWYgKGZyYW1lLmZyYW1lVG9vTGFyZ2UpIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJy0tIGZyYW1lIHRvbyBsYXJnZScpO1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5kcm9wKFdlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfUkVBU09OX01FU1NBR0VfVE9PX0JJRywgZnJhbWUuZHJvcFJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRm9yIG5vdyBzaW5jZSB3ZSBkb24ndCBzdXBwb3J0IGV4dGVuc2lvbnMsIGFsbCBSU1YgYml0cyBhcmUgaWxsZWdhbFxuICAgIGlmIChmcmFtZS5yc3YxIHx8IGZyYW1lLnJzdjIgfHwgZnJhbWUucnN2Mykge1xuICAgICAgICB0aGlzLl9kZWJ1ZygnLS0gaWxsZWdhbCByc3YgZmxhZycpO1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5kcm9wKFdlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfUkVBU09OX1BST1RPQ09MX0VSUk9SLFxuICAgICAgICAgICAgICAnVW5zdXBwb3J0ZWQgdXNhZ2Ugb2YgcnN2IGJpdHMgd2l0aG91dCBuZWdvdGlhdGVkIGV4dGVuc2lvbi4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuYXNzZW1ibGVGcmFnbWVudHMpIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJy0tIGVtaXR0aW5nIGZyYW1lJyk7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7IHNlbGYuZW1pdCgnZnJhbWUnLCBmcmFtZSk7IH0pO1xuICAgIH1cblxuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7IHNlbGYucHJvY2Vzc0ZyYW1lKGZyYW1lKTsgfSk7XG4gICAgXG4gICAgdGhpcy5jdXJyZW50RnJhbWUgPSBuZXcgV2ViU29ja2V0RnJhbWUodGhpcy5tYXNrQnl0ZXMsIHRoaXMuZnJhbWVIZWFkZXIsIHRoaXMuY29uZmlnKTtcblxuICAgIC8vIElmIHRoZXJlJ3MgZGF0YSByZW1haW5pbmcsIHNjaGVkdWxlIGFkZGl0aW9uYWwgcHJvY2Vzc2luZywgYnV0IHlpZWxkXG4gICAgLy8gZm9yIG5vdyBzbyB0aGF0IG90aGVyIGNvbm5lY3Rpb25zIGhhdmUgYSBjaGFuY2UgdG8gaGF2ZSB0aGVpciBkYXRhXG4gICAgLy8gcHJvY2Vzc2VkLiAgV2UgdXNlIHNldEltbWVkaWF0ZSBoZXJlIGluc3RlYWQgb2YgcHJvY2Vzcy5uZXh0VGljayB0b1xuICAgIC8vIGV4cGxpY2l0bHkgaW5kaWNhdGUgdGhhdCB3ZSB3aXNoIGZvciBvdGhlciBJL08gdG8gYmUgaGFuZGxlZCBmaXJzdC5cbiAgICBpZiAodGhpcy5idWZmZXJMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2V0SW1tZWRpYXRlSW1wbCh0aGlzLnJlY2VpdmVkRGF0YUhhbmRsZXIpO1xuICAgIH1cbn07XG5cbldlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLmhhbmRsZVNvY2tldEVycm9yID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICB0aGlzLl9kZWJ1ZygnaGFuZGxlU29ja2V0RXJyb3I6ICVqJywgZXJyb3IpO1xuICAgIGlmICh0aGlzLnN0YXRlID09PSBTVEFURV9DTE9TRUQpIHtcblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3RoZXR1cnRsZTMyL1dlYlNvY2tldC1Ob2RlL2lzc3Vlcy8yODhcbiAgICAgICAgdGhpcy5fZGVidWcoJyAgLS0tIFNvY2tldCBcXCdlcnJvclxcJyBhZnRlciBcXCdjbG9zZVxcJycpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY2xvc2VSZWFzb25Db2RlID0gV2ViU29ja2V0Q29ubmVjdGlvbi5DTE9TRV9SRUFTT05fQUJOT1JNQUw7XG4gICAgdGhpcy5jbG9zZURlc2NyaXB0aW9uID0gJ1NvY2tldCBFcnJvcjogJyArIGVycm9yLnN5c2NhbGwgKyAnICcgKyBlcnJvci5jb2RlO1xuICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0NMT1NFRDtcbiAgICB0aGlzLmZyYWdtZW50YXRpb25TaXplID0gMDtcbiAgICBpZiAodXRpbHMuZXZlbnRFbWl0dGVyTGlzdGVuZXJDb3VudCh0aGlzLCAnZXJyb3InKSA+IDApIHtcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICB9XG4gICAgdGhpcy5zb2NrZXQuZGVzdHJveSgpO1xuICAgIHRoaXMuX2RlYnVnLnByaW50T3V0cHV0KCk7XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVTb2NrZXRFbmQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9kZWJ1ZygnaGFuZGxlU29ja2V0RW5kOiByZWNlaXZlZCBzb2NrZXQgZW5kLiAgc3RhdGUgPSAlcycsIHRoaXMuc3RhdGUpO1xuICAgIHRoaXMucmVjZWl2ZWRFbmQgPSB0cnVlO1xuICAgIGlmICh0aGlzLnN0YXRlID09PSBTVEFURV9DTE9TRUQpIHtcbiAgICAgICAgLy8gV2hlbiB1c2luZyB0aGUgVExTIG1vZHVsZSwgc29tZXRpbWVzIHRoZSBzb2NrZXQgd2lsbCBlbWl0ICdlbmQnXG4gICAgICAgIC8vIGFmdGVyIGl0IGVtaXRzICdjbG9zZScuICBJIGRvbid0IHRoaW5rIHRoYXQncyBjb3JyZWN0IGJlaGF2aW9yLFxuICAgICAgICAvLyBidXQgd2Ugc2hvdWxkIGRlYWwgd2l0aCBpdCBncmFjZWZ1bGx5IGJ5IGlnbm9yaW5nIGl0LlxuICAgICAgICB0aGlzLl9kZWJ1ZygnICAtLS0gU29ja2V0IFxcJ2VuZFxcJyBhZnRlciBcXCdjbG9zZVxcJycpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlICE9PSBTVEFURV9QRUVSX1JFUVVFU1RFRF9DTE9TRSAmJlxuICAgICAgICB0aGlzLnN0YXRlICE9PSBTVEFURV9FTkRJTkcpIHtcbiAgICAgIHRoaXMuX2RlYnVnKCcgIC0tLSBVTkVYUEVDVEVEIHNvY2tldCBlbmQuJyk7XG4gICAgICB0aGlzLnNvY2tldC5lbmQoKTtcbiAgICB9XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVTb2NrZXRDbG9zZSA9IGZ1bmN0aW9uKGhhZEVycm9yKSB7XG4gICAgdGhpcy5fZGVidWcoJ2hhbmRsZVNvY2tldENsb3NlOiByZWNlaXZlZCBzb2NrZXQgY2xvc2UnKTtcbiAgICB0aGlzLnNvY2tldEhhZEVycm9yID0gaGFkRXJyb3I7XG4gICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0YXRlID0gU1RBVEVfQ0xPU0VEO1xuICAgIC8vIElmIGNsb3NlUmVhc29uQ29kZSBpcyBzdGlsbCBzZXQgdG8gLTEgYXQgdGhpcyBwb2ludCB0aGVuIHdlIG11c3RcbiAgICAvLyBub3QgaGF2ZSByZWNlaXZlZCBhIGNsb3NlIGZyYW1lISFcbiAgICBpZiAodGhpcy5jbG9zZVJlYXNvbkNvZGUgPT09IC0xKSB7XG4gICAgICAgIHRoaXMuY2xvc2VSZWFzb25Db2RlID0gV2ViU29ja2V0Q29ubmVjdGlvbi5DTE9TRV9SRUFTT05fQUJOT1JNQUw7XG4gICAgICAgIHRoaXMuY2xvc2VEZXNjcmlwdGlvbiA9ICdDb25uZWN0aW9uIGRyb3BwZWQgYnkgcmVtb3RlIHBlZXIuJztcbiAgICB9XG4gICAgdGhpcy5jbGVhckNsb3NlVGltZXIoKTtcbiAgICB0aGlzLmNsZWFyS2VlcGFsaXZlVGltZXIoKTtcbiAgICB0aGlzLmNsZWFyR3JhY2VQZXJpb2RUaW1lcigpO1xuICAgIGlmICghdGhpcy5jbG9zZUV2ZW50RW1pdHRlZCkge1xuICAgICAgICB0aGlzLmNsb3NlRXZlbnRFbWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZGVidWcoJy0tIEVtaXR0aW5nIFdlYlNvY2tldENvbm5lY3Rpb24gY2xvc2UgZXZlbnQnKTtcbiAgICAgICAgdGhpcy5lbWl0KCdjbG9zZScsIHRoaXMuY2xvc2VSZWFzb25Db2RlLCB0aGlzLmNsb3NlRGVzY3JpcHRpb24pO1xuICAgIH1cbn07XG5cbldlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLmhhbmRsZVNvY2tldERyYWluID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fZGVidWcoJ2hhbmRsZVNvY2tldERyYWluOiBzb2NrZXQgZHJhaW4gZXZlbnQnKTtcbiAgICB0aGlzLm91dHB1dEJ1ZmZlckZ1bGwgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ2RyYWluJyk7XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVTb2NrZXRQYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2RlYnVnKCdoYW5kbGVTb2NrZXRQYXVzZTogc29ja2V0IHBhdXNlIGV2ZW50Jyk7XG4gICAgdGhpcy5pbnB1dFBhdXNlZCA9IHRydWU7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xufTtcblxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuaGFuZGxlU29ja2V0UmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fZGVidWcoJ2hhbmRsZVNvY2tldFJlc3VtZTogc29ja2V0IHJlc3VtZSBldmVudCcpO1xuICAgIHRoaXMuaW5wdXRQYXVzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3Jlc3VtZScpO1xuICAgIHRoaXMucHJvY2Vzc1JlY2VpdmVkRGF0YSgpO1xufTtcblxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9kZWJ1ZygncGF1c2U6IHBhdXNlIHJlcXVlc3RlZCcpO1xuICAgIHRoaXMuc29ja2V0LnBhdXNlKCk7XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9kZWJ1ZygncmVzdW1lOiByZXN1bWUgcmVxdWVzdGVkJyk7XG4gICAgdGhpcy5zb2NrZXQucmVzdW1lKCk7XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKHJlYXNvbkNvZGUsIGRlc2NyaXB0aW9uKSB7XG4gICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgIHRoaXMuX2RlYnVnKCdjbG9zZTogSW5pdGF0aW5nIGNsZWFuIFdlYlNvY2tldCBjbG9zZSBzZXF1ZW5jZS4nKTtcbiAgICAgICAgaWYgKCdudW1iZXInICE9PSB0eXBlb2YgcmVhc29uQ29kZSkge1xuICAgICAgICAgICAgcmVhc29uQ29kZSA9IFdlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfUkVBU09OX05PUk1BTDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbGlkYXRlQ2xvc2VSZWFzb24ocmVhc29uQ29kZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2xvc2UgY29kZSAnICsgcmVhc29uQ29kZSArICcgaXMgbm90IHZhbGlkLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9IFdlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfREVTQ1JJUFRJT05TW3JlYXNvbkNvZGVdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2VSZWFzb25Db2RlID0gcmVhc29uQ29kZTtcbiAgICAgICAgdGhpcy5jbG9zZURlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuc2V0Q2xvc2VUaW1lcigpO1xuICAgICAgICB0aGlzLnNlbmRDbG9zZUZyYW1lKHRoaXMuY2xvc2VSZWFzb25Db2RlLCB0aGlzLmNsb3NlRGVzY3JpcHRpb24pO1xuICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRU5ESU5HO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIH1cbn07XG5cbldlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLmRyb3AgPSBmdW5jdGlvbihyZWFzb25Db2RlLCBkZXNjcmlwdGlvbiwgc2tpcENsb3NlRnJhbWUpIHtcbiAgICB0aGlzLl9kZWJ1ZygnZHJvcCcpO1xuICAgIGlmICh0eXBlb2YocmVhc29uQ29kZSkgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJlYXNvbkNvZGUgPSBXZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9QUk9UT0NPTF9FUlJPUjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mKGRlc2NyaXB0aW9uKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gSWYgbm8gZGVzY3JpcHRpb24gaXMgcHJvdmlkZWQsIHRyeSB0byBsb29rIG9uZSB1cCBiYXNlZCBvbiB0aGVcbiAgICAgICAgLy8gc3BlY2lmaWVkIHJlYXNvbkNvZGUuXG4gICAgICAgIGRlc2NyaXB0aW9uID0gV2ViU29ja2V0Q29ubmVjdGlvbi5DTE9TRV9ERVNDUklQVElPTlNbcmVhc29uQ29kZV07XG4gICAgfVxuXG4gICAgdGhpcy5fZGVidWcoJ0ZvcmNlZnVsbHkgZHJvcHBpbmcgY29ubmVjdGlvbi4gc2tpcENsb3NlRnJhbWU6ICVzLCBjb2RlOiAlZCwgZGVzY3JpcHRpb246ICVzJyxcbiAgICAgICAgc2tpcENsb3NlRnJhbWUsIHJlYXNvbkNvZGUsIGRlc2NyaXB0aW9uXG4gICAgKTtcblxuICAgIHRoaXMuY2xvc2VSZWFzb25Db2RlID0gcmVhc29uQ29kZTtcbiAgICB0aGlzLmNsb3NlRGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB0aGlzLmZyYW1lUXVldWUgPSBbXTtcbiAgICB0aGlzLmZyYWdtZW50YXRpb25TaXplID0gMDtcbiAgICBpZiAoIXNraXBDbG9zZUZyYW1lKSB7XG4gICAgICAgIHRoaXMuc2VuZENsb3NlRnJhbWUocmVhc29uQ29kZSwgZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuc3RhdGUgPSBTVEFURV9DTE9TRUQ7XG4gICAgdGhpcy5jbGVhckNsb3NlVGltZXIoKTtcbiAgICB0aGlzLmNsZWFyS2VlcGFsaXZlVGltZXIoKTtcbiAgICB0aGlzLmNsZWFyR3JhY2VQZXJpb2RUaW1lcigpO1xuXG4gICAgaWYgKCF0aGlzLmNsb3NlRXZlbnRFbWl0dGVkKSB7XG4gICAgICAgIHRoaXMuY2xvc2VFdmVudEVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9kZWJ1ZygnRW1pdHRpbmcgV2ViU29ja2V0Q29ubmVjdGlvbiBjbG9zZSBldmVudCcpO1xuICAgICAgICB0aGlzLmVtaXQoJ2Nsb3NlJywgdGhpcy5jbG9zZVJlYXNvbkNvZGUsIHRoaXMuY2xvc2VEZXNjcmlwdGlvbik7XG4gICAgfVxuICAgIFxuICAgIHRoaXMuX2RlYnVnKCdEcm9wOiBkZXN0cm95aW5nIHNvY2tldCcpO1xuICAgIHRoaXMuc29ja2V0LmRlc3Ryb3koKTtcbn07XG5cbldlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLnNldENsb3NlVGltZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9kZWJ1Zygnc2V0Q2xvc2VUaW1lcicpO1xuICAgIHRoaXMuY2xlYXJDbG9zZVRpbWVyKCk7XG4gICAgdGhpcy5fZGVidWcoJ1NldHRpbmcgY2xvc2UgdGltZXInKTtcbiAgICB0aGlzLndhaXRpbmdGb3JDbG9zZVJlc3BvbnNlID0gdHJ1ZTtcbiAgICB0aGlzLmNsb3NlVGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuX2Nsb3NlVGltZXJIYW5kbGVyLCB0aGlzLmNsb3NlVGltZW91dCk7XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5jbGVhckNsb3NlVGltZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9kZWJ1ZygnY2xlYXJDbG9zZVRpbWVyJyk7XG4gICAgaWYgKHRoaXMuY2xvc2VUaW1lcikge1xuICAgICAgICB0aGlzLl9kZWJ1ZygnQ2xlYXJpbmcgY2xvc2UgdGltZXInKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VUaW1lcik7XG4gICAgICAgIHRoaXMud2FpdGluZ0ZvckNsb3NlUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jbG9zZVRpbWVyID0gbnVsbDtcbiAgICB9XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5oYW5kbGVDbG9zZVRpbWVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fZGVidWcoJ2hhbmRsZUNsb3NlVGltZXInKTtcbiAgICB0aGlzLmNsb3NlVGltZXIgPSBudWxsO1xuICAgIGlmICh0aGlzLndhaXRpbmdGb3JDbG9zZVJlc3BvbnNlKSB7XG4gICAgICAgIHRoaXMuX2RlYnVnKCdDbG9zZSByZXNwb25zZSBub3QgcmVjZWl2ZWQgZnJvbSBjbGllbnQuICBGb3JjaW5nIHNvY2tldCBlbmQuJyk7XG4gICAgICAgIHRoaXMud2FpdGluZ0ZvckNsb3NlUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0NMT1NFRDtcbiAgICAgICAgdGhpcy5zb2NrZXQuZW5kKCk7XG4gICAgfVxufTtcblxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUucHJvY2Vzc0ZyYW1lID0gZnVuY3Rpb24oZnJhbWUpIHtcbiAgICB0aGlzLl9kZWJ1ZygncHJvY2Vzc0ZyYW1lJyk7XG4gICAgdGhpcy5fZGVidWcoJyAtLSBmcmFtZTogJXMnLCBmcmFtZSk7XG4gICAgXG4gICAgLy8gQW55IG5vbi1jb250cm9sIG9wY29kZSBiZXNpZGVzIDB4MDAgKGNvbnRpbnVhdGlvbikgcmVjZWl2ZWQgaW4gdGhlXG4gICAgLy8gbWlkZGxlIG9mIGEgZnJhZ21lbnRlZCBtZXNzYWdlIGlzIGlsbGVnYWwuXG4gICAgaWYgKHRoaXMuZnJhbWVRdWV1ZS5sZW5ndGggIT09IDAgJiYgKGZyYW1lLm9wY29kZSA+IDB4MDAgJiYgZnJhbWUub3Bjb2RlIDwgMHgwOCkpIHtcbiAgICAgICAgdGhpcy5kcm9wKFdlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfUkVBU09OX1BST1RPQ09MX0VSUk9SLFxuICAgICAgICAgICdJbGxlZ2FsIGZyYW1lIG9wY29kZSAweCcgKyBmcmFtZS5vcGNvZGUudG9TdHJpbmcoMTYpICsgJyAnICtcbiAgICAgICAgICAncmVjZWl2ZWQgaW4gbWlkZGxlIG9mIGZyYWdtZW50ZWQgbWVzc2FnZS4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXRjaChmcmFtZS5vcGNvZGUpIHtcbiAgICAgICAgY2FzZSAweDAyOiAvLyBXZWJTb2NrZXRGcmFtZS5CSU5BUllfRlJBTUVcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCctLSBCaW5hcnkgRnJhbWUnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFzc2VtYmxlRnJhZ21lbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZyYW1lLmZpbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBDb21wbGV0ZSBzaW5nbGUtZnJhbWUgbWVzc2FnZSByZWNlaXZlZFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWJ1ZygnLS0tLSBFbWl0dGluZyBcXCdtZXNzYWdlXFwnIGV2ZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnbWVzc2FnZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdiaW5hcnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmluYXJ5RGF0YTogZnJhbWUuYmluYXJ5UGF5bG9hZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJlZ2lubmluZyBvZiBhIGZyYWdtZW50ZWQgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lUXVldWUucHVzaChmcmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnJhZ21lbnRhdGlvblNpemUgPSBmcmFtZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMHgwMTogLy8gV2ViU29ja2V0RnJhbWUuVEVYVF9GUkFNRVxuICAgICAgICAgICAgdGhpcy5fZGVidWcoJy0tIFRleHQgRnJhbWUnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFzc2VtYmxlRnJhZ21lbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZyYW1lLmZpbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWRVVEY4KGZyYW1lLmJpbmFyeVBheWxvYWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3AoV2ViU29ja2V0Q29ubmVjdGlvbi5DTE9TRV9SRUFTT05fSU5WQUxJRF9EQVRBLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnSW52YWxpZCBVVEYtOCBEYXRhIFJlY2VpdmVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQ29tcGxldGUgc2luZ2xlLWZyYW1lIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJy0tLS0gRW1pdHRpbmcgXFwnbWVzc2FnZVxcJyBldmVudCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndXRmOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGY4RGF0YTogZnJhbWUuYmluYXJ5UGF5bG9hZC50b1N0cmluZygndXRmOCcpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYmVnaW5uaW5nIG9mIGEgZnJhZ21lbnRlZCBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVRdWV1ZS5wdXNoKGZyYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudGF0aW9uU2l6ZSA9IGZyYW1lLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAweDAwOiAvLyBXZWJTb2NrZXRGcmFtZS5DT05USU5VQVRJT05cbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCctLSBDb250aW51YXRpb24gRnJhbWUnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFzc2VtYmxlRnJhZ21lbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWVRdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wKFdlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfUkVBU09OX1BST1RPQ09MX0VSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICdVbmV4cGVjdGVkIENvbnRpbnVhdGlvbiBGcmFtZScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudGF0aW9uU2l6ZSArPSBmcmFtZS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mcmFnbWVudGF0aW9uU2l6ZSA+IHRoaXMubWF4UmVjZWl2ZWRNZXNzYWdlU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyb3AoV2ViU29ja2V0Q29ubmVjdGlvbi5DTE9TRV9SRUFTT05fTUVTU0FHRV9UT09fQklHLFxuICAgICAgICAgICAgICAgICAgICAgICdNYXhpbXVtIG1lc3NhZ2Ugc2l6ZSBleGNlZWRlZC4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVRdWV1ZS5wdXNoKGZyYW1lKTtcblxuICAgICAgICAgICAgICAgIGlmIChmcmFtZS5maW4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5kIG9mIGZyYWdtZW50ZWQgbWVzc2FnZSwgc28gd2UgcHJvY2VzcyB0aGUgd2hvbGVcbiAgICAgICAgICAgICAgICAgICAgLy8gbWVzc2FnZSBub3cuICBXZSBhbHNvIGhhdmUgdG8gZGVjb2RlIHRoZSB1dGYtOCBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciB0ZXh0IGZyYW1lcyBhZnRlciBjb21iaW5pbmcgYWxsIHRoZSBmcmFnbWVudHMuXG4gICAgICAgICAgICAgICAgICAgIHZhciBieXRlc0NvcGllZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiaW5hcnlQYXlsb2FkID0gYnVmZmVyQWxsb2NVbnNhZmUodGhpcy5mcmFnbWVudGF0aW9uU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcGNvZGUgPSB0aGlzLmZyYW1lUXVldWVbMF0ub3Bjb2RlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lUXVldWUuZm9yRWFjaChmdW5jdGlvbiAoY3VycmVudEZyYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RnJhbWUuYmluYXJ5UGF5bG9hZC5jb3B5KGJpbmFyeVBheWxvYWQsIGJ5dGVzQ29waWVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzQ29waWVkICs9IGN1cnJlbnRGcmFtZS5iaW5hcnlQYXlsb2FkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVRdWV1ZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYWdtZW50YXRpb25TaXplID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG9wY29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAweDAyOiAvLyBXZWJTb2NrZXRPcGNvZGUuQklOQVJZX0ZSQU1FXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmluYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluYXJ5RGF0YTogYmluYXJ5UGF5bG9hZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAweDAxOiAvLyBXZWJTb2NrZXRPcGNvZGUuVEVYVF9GUkFNRVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZFVURjgoYmluYXJ5UGF5bG9hZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wKFdlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfUkVBU09OX0lOVkFMSURfREFUQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSW52YWxpZCBVVEYtOCBEYXRhIFJlY2VpdmVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndXRmOCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0ZjhEYXRhOiBiaW5hcnlQYXlsb2FkLnRvU3RyaW5nKCd1dGY4JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wKFdlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfUkVBU09OX1BST1RPQ09MX0VSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VuZXhwZWN0ZWQgZmlyc3Qgb3Bjb2RlIGluIGZyYWdtZW50YXRpb24gc2VxdWVuY2U6IDB4JyArIG9wY29kZS50b1N0cmluZygxNikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDB4MDk6IC8vIFdlYlNvY2tldEZyYW1lLlBJTkdcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCctLSBQaW5nIEZyYW1lJyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9waW5nTGlzdGVuZXJDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBsb2dpYyB0byBlbWl0IHRoZSBwaW5nIGZyYW1lOiB0aGlzIGlzIG9ubHkgZG9uZSB3aGVuIGEgbGlzdGVuZXIgaXMga25vd24gdG8gZXhpc3RcbiAgICAgICAgICAgICAgICAvLyBFeHBvc2UgYSBmdW5jdGlvbiBhbGxvd2luZyB0aGUgdXNlciB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBwaW5nKCkgYmVoYXZpb3JcbiAgICAgICAgICAgICAgICB2YXIgY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGNhbmNlbCA9IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgICAgICAgICAgIGNhbmNlbGxlZCA9IHRydWU7IFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdwaW5nJywgY2FuY2VsLCBmcmFtZS5iaW5hcnlQYXlsb2FkKTtcblxuICAgICAgICAgICAgICAgIC8vIE9ubHkgc2VuZCBhIHBvbmcgaWYgdGhlIGNsaWVudCBkaWQgbm90IGluZGljYXRlIHRoYXQgaGUgd291bGQgbGlrZSB0byBjYW5jZWxcbiAgICAgICAgICAgICAgICBpZiAoIWNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbmcoZnJhbWUuYmluYXJ5UGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb25nKGZyYW1lLmJpbmFyeVBheWxvYWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAweDBBOiAvLyBXZWJTb2NrZXRGcmFtZS5QT05HXG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZygnLS0gUG9uZyBGcmFtZScpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdwb25nJywgZnJhbWUuYmluYXJ5UGF5bG9hZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAweDA4OiAvLyBXZWJTb2NrZXRGcmFtZS5DT05ORUNUSU9OX0NMT1NFXG4gICAgICAgICAgICB0aGlzLl9kZWJ1ZygnLS0gQ2xvc2UgRnJhbWUnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLndhaXRpbmdGb3JDbG9zZVJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gR290IHJlc3BvbnNlIHRvIG91ciByZXF1ZXN0IHRvIGNsb3NlIHRoZSBjb25uZWN0aW9uLlxuICAgICAgICAgICAgICAgIC8vIENsb3NlIGlzIGNvbXBsZXRlLCBzbyB3ZSBqdXN0IGhhbmcgdXAuXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVidWcoJy0tLS0gR290IGNsb3NlIHJlc3BvbnNlIGZyb20gcGVlci4gIENvbXBsZXRpbmcgY2xvc2luZyBoYW5kc2hha2UuJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckNsb3NlVGltZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLndhaXRpbmdGb3JDbG9zZVJlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0NMT1NFRDtcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC5lbmQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCctLS0tIENsb3NpbmcgaGFuZHNoYWtlIGluaXRpYXRlZCBieSBwZWVyLicpO1xuICAgICAgICAgICAgLy8gR290IHJlcXVlc3QgZnJvbSBvdGhlciBwYXJ0eSB0byBjbG9zZSBjb25uZWN0aW9uLlxuICAgICAgICAgICAgLy8gU2VuZCBiYWNrIGFja25vd2xlZGdlbWVudCBhbmQgdGhlbiBoYW5nIHVwLlxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1BFRVJfUkVRVUVTVEVEX0NMT1NFO1xuICAgICAgICAgICAgdmFyIHJlc3BvbmRDbG9zZVJlYXNvbkNvZGU7XG5cbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgY2xvc2UgcmVhc29uIHByb3ZpZGVkIGlzIGxlZ2FsIGFjY29yZGluZyB0b1xuICAgICAgICAgICAgLy8gdGhlIHByb3RvY29sIHNwZWMuICBQcm92aWRpbmcgbm8gY2xvc2Ugc3RhdHVzIGlzIGxlZ2FsLlxuICAgICAgICAgICAgLy8gV2ViU29ja2V0RnJhbWUgc2V0cyBjbG9zZVN0YXR1cyB0byAtMSBieSBkZWZhdWx0LCBzbyBpZiBpdFxuICAgICAgICAgICAgLy8gaXMgc3RpbGwgLTEsIHRoZW4gbm8gc3RhdHVzIHdhcyBwcm92aWRlZC5cbiAgICAgICAgICAgIGlmIChmcmFtZS5pbnZhbGlkQ2xvc2VGcmFtZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VSZWFzb25Db2RlID0gMTAwNTsgLy8gMTAwNSA9IE5vIHJlYXNvbiBwcm92aWRlZC5cbiAgICAgICAgICAgICAgICByZXNwb25kQ2xvc2VSZWFzb25Db2RlID0gV2ViU29ja2V0Q29ubmVjdGlvbi5DTE9TRV9SRUFTT05fUFJPVE9DT0xfRVJST1I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmcmFtZS5jbG9zZVN0YXR1cyA9PT0gLTEgfHwgdmFsaWRhdGVDbG9zZVJlYXNvbihmcmFtZS5jbG9zZVN0YXR1cykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUmVhc29uQ29kZSA9IGZyYW1lLmNsb3NlU3RhdHVzO1xuICAgICAgICAgICAgICAgIHJlc3BvbmRDbG9zZVJlYXNvbkNvZGUgPSBXZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9OT1JNQUw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUmVhc29uQ29kZSA9IGZyYW1lLmNsb3NlU3RhdHVzO1xuICAgICAgICAgICAgICAgIHJlc3BvbmRDbG9zZVJlYXNvbkNvZGUgPSBXZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9QUk9UT0NPTF9FUlJPUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSB0ZXh0dWFsIGRlc2NyaXB0aW9uIGluIHRoZSBjbG9zZSBmcmFtZSwgZXh0cmFjdCBpdC5cbiAgICAgICAgICAgIGlmIChmcmFtZS5iaW5hcnlQYXlsb2FkLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWRVVEY4KGZyYW1lLmJpbmFyeVBheWxvYWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJvcChXZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9JTlZBTElEX0RBVEEsXG4gICAgICAgICAgICAgICAgICAgICAgJ0ludmFsaWQgVVRGLTggRGF0YSBSZWNlaXZlZCcpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VEZXNjcmlwdGlvbiA9IGZyYW1lLmJpbmFyeVBheWxvYWQudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VEZXNjcmlwdGlvbiA9IFdlYlNvY2tldENvbm5lY3Rpb24uQ0xPU0VfREVTQ1JJUFRJT05TW3RoaXMuY2xvc2VSZWFzb25Db2RlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKFxuICAgICAgICAgICAgICAgICctLS0tLS0gUmVtb3RlIHBlZXIgJXMgLSBjb2RlOiAlZCAtICVzIC0gY2xvc2UgZnJhbWUgcGF5bG9hZCBsZW5ndGg6ICVkJyxcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW90ZUFkZHJlc3MsIHRoaXMuY2xvc2VSZWFzb25Db2RlLFxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VEZXNjcmlwdGlvbiwgZnJhbWUubGVuZ3RoXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoJy0tLS0tLSByZXNwb25kaW5nIHRvIHJlbW90ZSBwZWVyXFwncyBjbG9zZSByZXF1ZXN0LicpO1xuICAgICAgICAgICAgdGhpcy5zZW5kQ2xvc2VGcmFtZShyZXNwb25kQ2xvc2VSZWFzb25Db2RlLCBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRoaXMuX2RlYnVnKCctLSBVbnJlY29nbml6ZWQgT3Bjb2RlICVkJywgZnJhbWUub3Bjb2RlKTtcbiAgICAgICAgICAgIHRoaXMuZHJvcChXZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9QUk9UT0NPTF9FUlJPUixcbiAgICAgICAgICAgICAgJ1VucmVjb2duaXplZCBPcGNvZGU6IDB4JyArIGZyYW1lLm9wY29kZS50b1N0cmluZygxNikpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufTtcblxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGRhdGEsIGNiKSB7XG4gICAgdGhpcy5fZGVidWcoJ3NlbmQnKTtcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICAgIHRoaXMuc2VuZEJ5dGVzKGRhdGEsIGNiKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mKGRhdGFbJ3RvU3RyaW5nJ10pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuc2VuZFVURihkYXRhLCBjYik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGEgcHJvdmlkZWQgbXVzdCBlaXRoZXIgYmUgYSBOb2RlIEJ1ZmZlciBvciBpbXBsZW1lbnQgdG9TdHJpbmcoKScpO1xuICAgIH1cbn07XG5cbldlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRVVEYgPSBmdW5jdGlvbihkYXRhLCBjYikge1xuICAgIGRhdGEgPSBidWZmZXJGcm9tU3RyaW5nKGRhdGEudG9TdHJpbmcoKSwgJ3V0ZjgnKTtcbiAgICB0aGlzLl9kZWJ1Zygnc2VuZFVURjogJWQgYnl0ZXMnLCBkYXRhLmxlbmd0aCk7XG4gICAgdmFyIGZyYW1lID0gbmV3IFdlYlNvY2tldEZyYW1lKHRoaXMubWFza0J5dGVzLCB0aGlzLmZyYW1lSGVhZGVyLCB0aGlzLmNvbmZpZyk7XG4gICAgZnJhbWUub3Bjb2RlID0gMHgwMTsgLy8gV2ViU29ja2V0T3Bjb2RlLlRFWFRfRlJBTUVcbiAgICBmcmFtZS5iaW5hcnlQYXlsb2FkID0gZGF0YTtcbiAgICB0aGlzLmZyYWdtZW50QW5kU2VuZChmcmFtZSwgY2IpO1xufTtcblxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZEJ5dGVzID0gZnVuY3Rpb24oZGF0YSwgY2IpIHtcbiAgICB0aGlzLl9kZWJ1Zygnc2VuZEJ5dGVzJyk7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBwYXNzIGEgTm9kZSBCdWZmZXIgb2JqZWN0IHRvIFdlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmRCeXRlcygpJyk7XG4gICAgfVxuICAgIHZhciBmcmFtZSA9IG5ldyBXZWJTb2NrZXRGcmFtZSh0aGlzLm1hc2tCeXRlcywgdGhpcy5mcmFtZUhlYWRlciwgdGhpcy5jb25maWcpO1xuICAgIGZyYW1lLm9wY29kZSA9IDB4MDI7IC8vIFdlYlNvY2tldE9wY29kZS5CSU5BUllfRlJBTUVcbiAgICBmcmFtZS5iaW5hcnlQYXlsb2FkID0gZGF0YTtcbiAgICB0aGlzLmZyYWdtZW50QW5kU2VuZChmcmFtZSwgY2IpO1xufTtcblxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICB0aGlzLl9kZWJ1ZygncGluZycpO1xuICAgIHZhciBmcmFtZSA9IG5ldyBXZWJTb2NrZXRGcmFtZSh0aGlzLm1hc2tCeXRlcywgdGhpcy5mcmFtZUhlYWRlciwgdGhpcy5jb25maWcpO1xuICAgIGZyYW1lLm9wY29kZSA9IDB4MDk7IC8vIFdlYlNvY2tldE9wY29kZS5QSU5HXG4gICAgZnJhbWUuZmluID0gdHJ1ZTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICAgICAgZGF0YSA9IGJ1ZmZlckZyb21TdHJpbmcoZGF0YS50b1N0cmluZygpLCAndXRmOCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDEyNSkge1xuICAgICAgICAgICAgdGhpcy5fZGVidWcoJ1dlYlNvY2tldDogRGF0YSBmb3IgcGluZyBpcyBsb25nZXIgdGhhbiAxMjUgYnl0ZXMuICBUcnVuY2F0aW5nLicpO1xuICAgICAgICAgICAgZGF0YSA9IGRhdGEuc2xpY2UoMCwxMjQpO1xuICAgICAgICB9XG4gICAgICAgIGZyYW1lLmJpbmFyeVBheWxvYWQgPSBkYXRhO1xuICAgIH1cbiAgICB0aGlzLnNlbmRGcmFtZShmcmFtZSk7XG59O1xuXG4vLyBQb25nIGZyYW1lcyBoYXZlIHRvIGVjaG8gYmFjayB0aGUgY29udGVudHMgb2YgdGhlIGRhdGEgcG9ydGlvbiBvZiB0aGVcbi8vIHBpbmcgZnJhbWUgZXhhY3RseSwgYnl0ZSBmb3IgYnl0ZS5cbldlYlNvY2tldENvbm5lY3Rpb24ucHJvdG90eXBlLnBvbmcgPSBmdW5jdGlvbihiaW5hcnlQYXlsb2FkKSB7XG4gICAgdGhpcy5fZGVidWcoJ3BvbmcnKTtcbiAgICB2YXIgZnJhbWUgPSBuZXcgV2ViU29ja2V0RnJhbWUodGhpcy5tYXNrQnl0ZXMsIHRoaXMuZnJhbWVIZWFkZXIsIHRoaXMuY29uZmlnKTtcbiAgICBmcmFtZS5vcGNvZGUgPSAweDBBOyAvLyBXZWJTb2NrZXRPcGNvZGUuUE9OR1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoYmluYXJ5UGF5bG9hZCkgJiYgYmluYXJ5UGF5bG9hZC5sZW5ndGggPiAxMjUpIHtcbiAgICAgICAgdGhpcy5fZGVidWcoJ1dlYlNvY2tldDogRGF0YSBmb3IgcG9uZyBpcyBsb25nZXIgdGhhbiAxMjUgYnl0ZXMuICBUcnVuY2F0aW5nLicpO1xuICAgICAgICBiaW5hcnlQYXlsb2FkID0gYmluYXJ5UGF5bG9hZC5zbGljZSgwLDEyNCk7XG4gICAgfVxuICAgIGZyYW1lLmJpbmFyeVBheWxvYWQgPSBiaW5hcnlQYXlsb2FkO1xuICAgIGZyYW1lLmZpbiA9IHRydWU7XG4gICAgdGhpcy5zZW5kRnJhbWUoZnJhbWUpO1xufTtcblxuV2ViU29ja2V0Q29ubmVjdGlvbi5wcm90b3R5cGUuZnJhZ21lbnRBbmRTZW5kID0gZnVuY3Rpb24oZnJhbWUsIGNiKSB7XG4gICAgdGhpcy5fZGVidWcoJ2ZyYWdtZW50QW5kU2VuZCcpO1xuICAgIGlmIChmcmFtZS5vcGNvZGUgPiAweDA3KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGNhbm5vdCBmcmFnbWVudCBjb250cm9sIGZyYW1lcy4nKTtcbiAgICB9XG5cbiAgICB2YXIgdGhyZXNob2xkID0gdGhpcy5jb25maWcuZnJhZ21lbnRhdGlvblRocmVzaG9sZDtcbiAgICB2YXIgbGVuZ3RoID0gZnJhbWUuYmluYXJ5UGF5bG9hZC5sZW5ndGg7XG5cbiAgICAvLyBTZW5kIGltbWVkaWF0ZWx5IGlmIGZyYWdtZW50YXRpb24gaXMgZGlzYWJsZWQgb3IgdGhlIG1lc3NhZ2UgaXMgbm90XG4gICAgLy8gbGFyZ2VyIHRoYW4gdGhlIGZyYWdtZW50YXRpb24gdGhyZXNob2xkLlxuICAgIGlmICghdGhpcy5jb25maWcuZnJhZ21lbnRPdXRnb2luZ01lc3NhZ2VzIHx8IChmcmFtZS5iaW5hcnlQYXlsb2FkICYmIGxlbmd0aCA8PSB0aHJlc2hvbGQpKSB7XG4gICAgICAgIGZyYW1lLmZpbiA9IHRydWU7XG4gICAgICAgIHRoaXMuc2VuZEZyYW1lKGZyYW1lLCBjYik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgdmFyIG51bUZyYWdtZW50cyA9IE1hdGguY2VpbChsZW5ndGggLyB0aHJlc2hvbGQpO1xuICAgIHZhciBzZW50RnJhZ21lbnRzID0gMDtcbiAgICB2YXIgc2VudENhbGxiYWNrID0gZnVuY3Rpb24gZnJhZ21lbnRTZW50Q2FsbGJhY2soZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAvLyBwYXNzIG9ubHkgdGhlIGZpcnN0IGVycm9yXG4gICAgICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICAgICAgICBjYiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgKytzZW50RnJhZ21lbnRzO1xuICAgICAgICBpZiAoKHNlbnRGcmFnbWVudHMgPT09IG51bUZyYWdtZW50cykgJiYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZvciAodmFyIGk9MTsgaSA8PSBudW1GcmFnbWVudHM7IGkrKykge1xuICAgICAgICB2YXIgY3VycmVudEZyYW1lID0gbmV3IFdlYlNvY2tldEZyYW1lKHRoaXMubWFza0J5dGVzLCB0aGlzLmZyYW1lSGVhZGVyLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgIFxuICAgICAgICAvLyBjb250aW51YXRpb24gb3Bjb2RlIGV4Y2VwdCBmb3IgZmlyc3QgZnJhbWUuXG4gICAgICAgIGN1cnJlbnRGcmFtZS5vcGNvZGUgPSAoaSA9PT0gMSkgPyBmcmFtZS5vcGNvZGUgOiAweDAwO1xuICAgICAgICBcbiAgICAgICAgLy8gZmluIHNldCBvbiBsYXN0IGZyYW1lIG9ubHlcbiAgICAgICAgY3VycmVudEZyYW1lLmZpbiA9IChpID09PSBudW1GcmFnbWVudHMpO1xuICAgICAgICBcbiAgICAgICAgLy8gbGVuZ3RoIGlzIGxpa2VseSB0byBiZSBzaG9ydGVyIG9uIHRoZSBsYXN0IGZyYWdtZW50XG4gICAgICAgIHZhciBjdXJyZW50TGVuZ3RoID0gKGkgPT09IG51bUZyYWdtZW50cykgPyBsZW5ndGggLSAodGhyZXNob2xkICogKGktMSkpIDogdGhyZXNob2xkO1xuICAgICAgICB2YXIgc2xpY2VTdGFydCA9IHRocmVzaG9sZCAqIChpLTEpO1xuICAgICAgICBcbiAgICAgICAgLy8gU2xpY2UgdGhlIHJpZ2h0IHBvcnRpb24gb2YgdGhlIG9yaWdpbmFsIHBheWxvYWRcbiAgICAgICAgY3VycmVudEZyYW1lLmJpbmFyeVBheWxvYWQgPSBmcmFtZS5iaW5hcnlQYXlsb2FkLnNsaWNlKHNsaWNlU3RhcnQsIHNsaWNlU3RhcnQgKyBjdXJyZW50TGVuZ3RoKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2VuZEZyYW1lKGN1cnJlbnRGcmFtZSwgc2VudENhbGxiYWNrKTtcbiAgICB9XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kQ2xvc2VGcmFtZSA9IGZ1bmN0aW9uKHJlYXNvbkNvZGUsIGRlc2NyaXB0aW9uLCBjYikge1xuICAgIGlmICh0eXBlb2YocmVhc29uQ29kZSkgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJlYXNvbkNvZGUgPSBXZWJTb2NrZXRDb25uZWN0aW9uLkNMT1NFX1JFQVNPTl9OT1JNQUw7XG4gICAgfVxuICAgIFxuICAgIHRoaXMuX2RlYnVnKCdzZW5kQ2xvc2VGcmFtZSBzdGF0ZTogJXMsIHJlYXNvbkNvZGU6ICVkLCBkZXNjcmlwdGlvbjogJXMnLCB0aGlzLnN0YXRlLCByZWFzb25Db2RlLCBkZXNjcmlwdGlvbik7XG4gICAgXG4gICAgaWYgKHRoaXMuc3RhdGUgIT09IFNUQVRFX09QRU4gJiYgdGhpcy5zdGF0ZSAhPT0gU1RBVEVfUEVFUl9SRVFVRVNURURfQ0xPU0UpIHsgcmV0dXJuOyB9XG4gICAgXG4gICAgdmFyIGZyYW1lID0gbmV3IFdlYlNvY2tldEZyYW1lKHRoaXMubWFza0J5dGVzLCB0aGlzLmZyYW1lSGVhZGVyLCB0aGlzLmNvbmZpZyk7XG4gICAgZnJhbWUuZmluID0gdHJ1ZTtcbiAgICBmcmFtZS5vcGNvZGUgPSAweDA4OyAvLyBXZWJTb2NrZXRPcGNvZGUuQ09OTkVDVElPTl9DTE9TRVxuICAgIGZyYW1lLmNsb3NlU3RhdHVzID0gcmVhc29uQ29kZTtcbiAgICBpZiAodHlwZW9mKGRlc2NyaXB0aW9uKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZnJhbWUuYmluYXJ5UGF5bG9hZCA9IGJ1ZmZlckZyb21TdHJpbmcoZGVzY3JpcHRpb24sICd1dGY4Jyk7XG4gICAgfVxuICAgIFxuICAgIHRoaXMuc2VuZEZyYW1lKGZyYW1lLCBjYik7XG4gICAgdGhpcy5zb2NrZXQuZW5kKCk7XG59O1xuXG5XZWJTb2NrZXRDb25uZWN0aW9uLnByb3RvdHlwZS5zZW5kRnJhbWUgPSBmdW5jdGlvbihmcmFtZSwgY2IpIHtcbiAgICB0aGlzLl9kZWJ1Zygnc2VuZEZyYW1lJyk7XG4gICAgZnJhbWUubWFzayA9IHRoaXMubWFza091dGdvaW5nUGFja2V0cztcbiAgICB2YXIgZmx1c2hlZCA9IHRoaXMuc29ja2V0LndyaXRlKGZyYW1lLnRvQnVmZmVyKCksIGNiKTtcbiAgICB0aGlzLm91dHB1dEJ1ZmZlckZ1bGwgPSAhZmx1c2hlZDtcbiAgICByZXR1cm4gZmx1c2hlZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0Q29ubmVjdGlvbjtcblxuXG5cbmZ1bmN0aW9uIGluc3RydW1lbnRTb2NrZXRGb3JEZWJ1Z2dpbmcoY29ubmVjdGlvbiwgc29ja2V0KSB7XG4gICAgLyoganNoaW50IGxvb3BmdW5jOiB0cnVlICovXG4gICAgaWYgKCFjb25uZWN0aW9uLl9kZWJ1Zy5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgIFxuICAgIHZhciBvcmlnaW5hbFNvY2tldEVtaXQgPSBzb2NrZXQuZW1pdDtcbiAgICBzb2NrZXQuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGNvbm5lY3Rpb24uX2RlYnVnKCd8fHwgU29ja2V0IEV2ZW50ICBcXCclc1xcJycsIGV2ZW50KTtcbiAgICAgICAgb3JpZ2luYWxTb2NrZXRFbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICBcbiAgICBmb3IgKHZhciBrZXkgaW4gc29ja2V0KSB7XG4gICAgICAgIGlmICgnZnVuY3Rpb24nICE9PSB0eXBlb2Yoc29ja2V0W2tleV0pKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgIGlmIChbJ2VtaXQnXS5pbmRleE9mKGtleSkgIT09IC0xKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgIChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciBvcmlnaW5hbCA9IHNvY2tldFtrZXldO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ29uJykge1xuICAgICAgICAgICAgICAgIHNvY2tldFtrZXldID0gZnVuY3Rpb24gcHJveHlNZXRob2RfX0V2ZW50RW1pdHRlcl9fT24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uX2RlYnVnKCd8fHwgU29ja2V0IG1ldGhvZCBjYWxsZWQ6ICAlcyAoJXMpJywga2V5LCBhcmd1bWVudHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvY2tldFtrZXldID0gZnVuY3Rpb24gcHJveHlNZXRob2QoKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5fZGVidWcoJ3x8fCBTb2NrZXQgbWV0aG9kIGNhbGxlZDogICVzJywga2V5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKGtleSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwidXRpbHMiLCJFdmVudEVtaXR0ZXIiLCJXZWJTb2NrZXRGcmFtZSIsIkJ1ZmZlckxpc3QiLCJpc1ZhbGlkVVRGOCIsImJ1ZmZlckFsbG9jVW5zYWZlIiwiYnVmZmVyRnJvbVN0cmluZyIsIlNUQVRFX09QRU4iLCJTVEFURV9QRUVSX1JFUVVFU1RFRF9DTE9TRSIsIlNUQVRFX0VORElORyIsIlNUQVRFX0NMT1NFRCIsInNldEltbWVkaWF0ZUltcGwiLCJnbG9iYWwiLCJzZXRJbW1lZGlhdGUiLCJiaW5kIiwicHJvY2VzcyIsIm5leHRUaWNrIiwiaWRDb3VudGVyIiwiV2ViU29ja2V0Q29ubmVjdGlvbiIsInNvY2tldCIsImV4dGVuc2lvbnMiLCJwcm90b2NvbCIsIm1hc2tPdXRnb2luZ1BhY2tldHMiLCJjb25maWciLCJfZGVidWciLCJCdWZmZXJpbmdMb2dnZXIiLCJlbmFibGVkIiwiaW5zdHJ1bWVudFNvY2tldEZvckRlYnVnZ2luZyIsImNhbGwiLCJfcGluZ0xpc3RlbmVyQ291bnQiLCJvbiIsImV2IiwicmVtb3RlQWRkcmVzcyIsImNsb3NlUmVhc29uQ29kZSIsImNsb3NlRGVzY3JpcHRpb24iLCJjbG9zZUV2ZW50RW1pdHRlZCIsIm1hc2tCeXRlcyIsImZyYW1lSGVhZGVyIiwiYnVmZmVyTGlzdCIsImN1cnJlbnRGcmFtZSIsImZyYWdtZW50YXRpb25TaXplIiwiZnJhbWVRdWV1ZSIsImNvbm5lY3RlZCIsInN0YXRlIiwid2FpdGluZ0ZvckNsb3NlUmVzcG9uc2UiLCJyZWNlaXZlZEVuZCIsImNsb3NlVGltZW91dCIsImFzc2VtYmxlRnJhZ21lbnRzIiwibWF4UmVjZWl2ZWRNZXNzYWdlU2l6ZSIsIm91dHB1dEJ1ZmZlckZ1bGwiLCJpbnB1dFBhdXNlZCIsInJlY2VpdmVkRGF0YUhhbmRsZXIiLCJwcm9jZXNzUmVjZWl2ZWREYXRhIiwiX2Nsb3NlVGltZXJIYW5kbGVyIiwiaGFuZGxlQ2xvc2VUaW1lciIsInNldE5vRGVsYXkiLCJkaXNhYmxlTmFnbGVBbGdvcml0aG0iLCJzZXRUaW1lb3V0Iiwia2VlcGFsaXZlIiwidXNlTmF0aXZlS2VlcGFsaXZlIiwia2VlcGFsaXZlSW50ZXJ2YWwiLCJFcnJvciIsIl9rZWVwYWxpdmVUaW1lckhhbmRsZXIiLCJoYW5kbGVLZWVwYWxpdmVUaW1lciIsInNldEtlZXBhbGl2ZVRpbWVyIiwiZHJvcENvbm5lY3Rpb25PbktlZXBhbGl2ZVRpbWVvdXQiLCJrZWVwYWxpdmVHcmFjZVBlcmlvZCIsIl9ncmFjZVBlcmlvZFRpbWVySGFuZGxlciIsImhhbmRsZUdyYWNlUGVyaW9kVGltZXIiLCJzZXRLZWVwQWxpdmUiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJDTE9TRV9SRUFTT05fTk9STUFMIiwiQ0xPU0VfUkVBU09OX0dPSU5HX0FXQVkiLCJDTE9TRV9SRUFTT05fUFJPVE9DT0xfRVJST1IiLCJDTE9TRV9SRUFTT05fVU5QUk9DRVNTQUJMRV9JTlBVVCIsIkNMT1NFX1JFQVNPTl9SRVNFUlZFRCIsIkNMT1NFX1JFQVNPTl9OT1RfUFJPVklERUQiLCJDTE9TRV9SRUFTT05fQUJOT1JNQUwiLCJDTE9TRV9SRUFTT05fSU5WQUxJRF9EQVRBIiwiQ0xPU0VfUkVBU09OX1BPTElDWV9WSU9MQVRJT04iLCJDTE9TRV9SRUFTT05fTUVTU0FHRV9UT09fQklHIiwiQ0xPU0VfUkVBU09OX0VYVEVOU0lPTl9SRVFVSVJFRCIsIkNMT1NFX1JFQVNPTl9JTlRFUk5BTF9TRVJWRVJfRVJST1IiLCJDTE9TRV9SRUFTT05fVExTX0hBTkRTSEFLRV9GQUlMRUQiLCJDTE9TRV9ERVNDUklQVElPTlMiLCJ2YWxpZGF0ZUNsb3NlUmVhc29uIiwiY29kZSIsImluZGV4T2YiLCJpbmhlcml0cyIsInByb3RvdHlwZSIsIl9hZGRTb2NrZXRFdmVudExpc3RlbmVycyIsImhhbmRsZVNvY2tldEVycm9yIiwiaGFuZGxlU29ja2V0RW5kIiwiaGFuZGxlU29ja2V0Q2xvc2UiLCJoYW5kbGVTb2NrZXREcmFpbiIsImhhbmRsZVNvY2tldFBhdXNlIiwiaGFuZGxlU29ja2V0UmVzdW1lIiwiaGFuZGxlU29ja2V0RGF0YSIsImNsZWFyS2VlcGFsaXZlVGltZXIiLCJjbGVhckdyYWNlUGVyaW9kVGltZXIiLCJfa2VlcGFsaXZlVGltZW91dElEIiwiY2xlYXJUaW1lb3V0IiwicGluZyIsInNldEdyYWNlUGVyaW9kVGltZXIiLCJfZ3JhY2VQZXJpb2RUaW1lb3V0SUQiLCJkcm9wIiwiZGF0YSIsIndyaXRlIiwiZnJhbWUiLCJhZGREYXRhIiwic2VsZiIsInByb3RvY29sRXJyb3IiLCJkcm9wUmVhc29uIiwiZnJhbWVUb29MYXJnZSIsInJzdjEiLCJyc3YyIiwicnN2MyIsImVtaXQiLCJwcm9jZXNzRnJhbWUiLCJsZW5ndGgiLCJlcnJvciIsInN5c2NhbGwiLCJldmVudEVtaXR0ZXJMaXN0ZW5lckNvdW50IiwiZGVzdHJveSIsInByaW50T3V0cHV0IiwiZW5kIiwiaGFkRXJyb3IiLCJzb2NrZXRIYWRFcnJvciIsImNsZWFyQ2xvc2VUaW1lciIsInBhdXNlIiwicmVzdW1lIiwiY2xvc2UiLCJyZWFzb25Db2RlIiwiZGVzY3JpcHRpb24iLCJzZXRDbG9zZVRpbWVyIiwic2VuZENsb3NlRnJhbWUiLCJza2lwQ2xvc2VGcmFtZSIsImNsb3NlVGltZXIiLCJvcGNvZGUiLCJ0b1N0cmluZyIsImZpbiIsInR5cGUiLCJiaW5hcnlEYXRhIiwiYmluYXJ5UGF5bG9hZCIsInB1c2giLCJ1dGY4RGF0YSIsImJ5dGVzQ29waWVkIiwiZm9yRWFjaCIsImNvcHkiLCJjYW5jZWxsZWQiLCJjYW5jZWwiLCJwb25nIiwicmVzcG9uZENsb3NlUmVhc29uQ29kZSIsImludmFsaWRDbG9zZUZyYW1lTGVuZ3RoIiwiY2xvc2VTdGF0dXMiLCJzZW5kIiwiY2IiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInNlbmRCeXRlcyIsInNlbmRVVEYiLCJmcmFnbWVudEFuZFNlbmQiLCJzbGljZSIsInNlbmRGcmFtZSIsInRocmVzaG9sZCIsImZyYWdtZW50YXRpb25UaHJlc2hvbGQiLCJmcmFnbWVudE91dGdvaW5nTWVzc2FnZXMiLCJudW1GcmFnbWVudHMiLCJNYXRoIiwiY2VpbCIsInNlbnRGcmFnbWVudHMiLCJzZW50Q2FsbGJhY2siLCJmcmFnbWVudFNlbnRDYWxsYmFjayIsImVyciIsImkiLCJjdXJyZW50TGVuZ3RoIiwic2xpY2VTdGFydCIsIm1hc2siLCJmbHVzaGVkIiwidG9CdWZmZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29ubmVjdGlvbiIsIm9yaWdpbmFsU29ja2V0RW1pdCIsImV2ZW50IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJrZXkiLCJvcmlnaW5hbCIsInByb3h5TWV0aG9kX19FdmVudEVtaXR0ZXJfX09uIiwicHJveHlNZXRob2QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/WebSocketConnection.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/WebSocketFrame.js":
/*!*******************************************************!*\
  !*** ../node_modules/websocket/lib/WebSocketFrame.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar bufferUtil = __webpack_require__(/*! bufferutil */ \"(ssr)/../node_modules/bufferutil/index.js\");\nvar bufferAllocUnsafe = (__webpack_require__(/*! ./utils */ \"(ssr)/../node_modules/websocket/lib/utils.js\").bufferAllocUnsafe);\nconst DECODE_HEADER = 1;\nconst WAITING_FOR_16_BIT_LENGTH = 2;\nconst WAITING_FOR_64_BIT_LENGTH = 3;\nconst WAITING_FOR_MASK_KEY = 4;\nconst WAITING_FOR_PAYLOAD = 5;\nconst COMPLETE = 6;\n// WebSocketConnection will pass shared buffer objects for maskBytes and\n// frameHeader into the constructor to avoid tons of small memory allocations\n// for each frame we have to parse.  This is only used for parsing frames\n// we receive off the wire.\nfunction WebSocketFrame(maskBytes, frameHeader, config) {\n    this.maskBytes = maskBytes;\n    this.frameHeader = frameHeader;\n    this.config = config;\n    this.maxReceivedFrameSize = config.maxReceivedFrameSize;\n    this.protocolError = false;\n    this.frameTooLarge = false;\n    this.invalidCloseFrameLength = false;\n    this.parseState = DECODE_HEADER;\n    this.closeStatus = -1;\n}\nWebSocketFrame.prototype.addData = function(bufferList) {\n    if (this.parseState === DECODE_HEADER) {\n        if (bufferList.length >= 2) {\n            bufferList.joinInto(this.frameHeader, 0, 0, 2);\n            bufferList.advance(2);\n            var firstByte = this.frameHeader[0];\n            var secondByte = this.frameHeader[1];\n            this.fin = Boolean(firstByte & 0x80);\n            this.rsv1 = Boolean(firstByte & 0x40);\n            this.rsv2 = Boolean(firstByte & 0x20);\n            this.rsv3 = Boolean(firstByte & 0x10);\n            this.mask = Boolean(secondByte & 0x80);\n            this.opcode = firstByte & 0x0F;\n            this.length = secondByte & 0x7F;\n            // Control frame sanity check\n            if (this.opcode >= 0x08) {\n                if (this.length > 125) {\n                    this.protocolError = true;\n                    this.dropReason = \"Illegal control frame longer than 125 bytes.\";\n                    return true;\n                }\n                if (!this.fin) {\n                    this.protocolError = true;\n                    this.dropReason = \"Control frames must not be fragmented.\";\n                    return true;\n                }\n            }\n            if (this.length === 126) {\n                this.parseState = WAITING_FOR_16_BIT_LENGTH;\n            } else if (this.length === 127) {\n                this.parseState = WAITING_FOR_64_BIT_LENGTH;\n            } else {\n                this.parseState = WAITING_FOR_MASK_KEY;\n            }\n        }\n    }\n    if (this.parseState === WAITING_FOR_16_BIT_LENGTH) {\n        if (bufferList.length >= 2) {\n            bufferList.joinInto(this.frameHeader, 2, 0, 2);\n            bufferList.advance(2);\n            this.length = this.frameHeader.readUInt16BE(2);\n            this.parseState = WAITING_FOR_MASK_KEY;\n        }\n    } else if (this.parseState === WAITING_FOR_64_BIT_LENGTH) {\n        if (bufferList.length >= 8) {\n            bufferList.joinInto(this.frameHeader, 2, 0, 8);\n            bufferList.advance(8);\n            var lengthPair = [\n                this.frameHeader.readUInt32BE(2),\n                this.frameHeader.readUInt32BE(2 + 4)\n            ];\n            if (lengthPair[0] !== 0) {\n                this.protocolError = true;\n                this.dropReason = \"Unsupported 64-bit length frame received\";\n                return true;\n            }\n            this.length = lengthPair[1];\n            this.parseState = WAITING_FOR_MASK_KEY;\n        }\n    }\n    if (this.parseState === WAITING_FOR_MASK_KEY) {\n        if (this.mask) {\n            if (bufferList.length >= 4) {\n                bufferList.joinInto(this.maskBytes, 0, 0, 4);\n                bufferList.advance(4);\n                this.parseState = WAITING_FOR_PAYLOAD;\n            }\n        } else {\n            this.parseState = WAITING_FOR_PAYLOAD;\n        }\n    }\n    if (this.parseState === WAITING_FOR_PAYLOAD) {\n        if (this.length > this.maxReceivedFrameSize) {\n            this.frameTooLarge = true;\n            this.dropReason = \"Frame size of \" + this.length.toString(10) + \" bytes exceeds maximum accepted frame size\";\n            return true;\n        }\n        if (this.length === 0) {\n            this.binaryPayload = bufferAllocUnsafe(0);\n            this.parseState = COMPLETE;\n            return true;\n        }\n        if (bufferList.length >= this.length) {\n            this.binaryPayload = bufferList.take(this.length);\n            bufferList.advance(this.length);\n            if (this.mask) {\n                bufferUtil.unmask(this.binaryPayload, this.maskBytes);\n            // xor(this.binaryPayload, this.maskBytes, 0);\n            }\n            if (this.opcode === 0x08) {\n                if (this.length === 1) {\n                    // Invalid length for a close frame.  Must be zero or at least two.\n                    this.binaryPayload = bufferAllocUnsafe(0);\n                    this.invalidCloseFrameLength = true;\n                }\n                if (this.length >= 2) {\n                    this.closeStatus = this.binaryPayload.readUInt16BE(0);\n                    this.binaryPayload = this.binaryPayload.slice(2);\n                }\n            }\n            this.parseState = COMPLETE;\n            return true;\n        }\n    }\n    return false;\n};\nWebSocketFrame.prototype.throwAwayPayload = function(bufferList) {\n    if (bufferList.length >= this.length) {\n        bufferList.advance(this.length);\n        this.parseState = COMPLETE;\n        return true;\n    }\n    return false;\n};\nWebSocketFrame.prototype.toBuffer = function(nullMask) {\n    var maskKey;\n    var headerLength = 2;\n    var data;\n    var outputPos;\n    var firstByte = 0x00;\n    var secondByte = 0x00;\n    if (this.fin) {\n        firstByte |= 0x80;\n    }\n    if (this.rsv1) {\n        firstByte |= 0x40;\n    }\n    if (this.rsv2) {\n        firstByte |= 0x20;\n    }\n    if (this.rsv3) {\n        firstByte |= 0x10;\n    }\n    if (this.mask) {\n        secondByte |= 0x80;\n    }\n    firstByte |= this.opcode & 0x0F;\n    // the close frame is a special case because the close reason is\n    // prepended to the payload data.\n    if (this.opcode === 0x08) {\n        this.length = 2;\n        if (this.binaryPayload) {\n            this.length += this.binaryPayload.length;\n        }\n        data = bufferAllocUnsafe(this.length);\n        data.writeUInt16BE(this.closeStatus, 0);\n        if (this.length > 2) {\n            this.binaryPayload.copy(data, 2);\n        }\n    } else if (this.binaryPayload) {\n        data = this.binaryPayload;\n        this.length = data.length;\n    } else {\n        this.length = 0;\n    }\n    if (this.length <= 125) {\n        // encode the length directly into the two-byte frame header\n        secondByte |= this.length & 0x7F;\n    } else if (this.length > 125 && this.length <= 0xFFFF) {\n        // Use 16-bit length\n        secondByte |= 126;\n        headerLength += 2;\n    } else if (this.length > 0xFFFF) {\n        // Use 64-bit length\n        secondByte |= 127;\n        headerLength += 8;\n    }\n    var output = bufferAllocUnsafe(this.length + headerLength + (this.mask ? 4 : 0));\n    // write the frame header\n    output[0] = firstByte;\n    output[1] = secondByte;\n    outputPos = 2;\n    if (this.length > 125 && this.length <= 0xFFFF) {\n        // write 16-bit length\n        output.writeUInt16BE(this.length, outputPos);\n        outputPos += 2;\n    } else if (this.length > 0xFFFF) {\n        // write 64-bit length\n        output.writeUInt32BE(0x00000000, outputPos);\n        output.writeUInt32BE(this.length, outputPos + 4);\n        outputPos += 8;\n    }\n    if (this.mask) {\n        maskKey = nullMask ? 0 : Math.random() * 0xFFFFFFFF >>> 0;\n        this.maskBytes.writeUInt32BE(maskKey, 0);\n        // write the mask key\n        this.maskBytes.copy(output, outputPos);\n        outputPos += 4;\n        if (data) {\n            bufferUtil.mask(data, this.maskBytes, output, outputPos, this.length);\n        }\n    } else if (data) {\n        data.copy(output, outputPos);\n    }\n    return output;\n};\nWebSocketFrame.prototype.toString = function() {\n    return \"Opcode: \" + this.opcode + \", fin: \" + this.fin + \", length: \" + this.length + \", hasPayload: \" + Boolean(this.binaryPayload) + \", masked: \" + this.mask;\n};\nmodule.exports = WebSocketFrame;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/WebSocketFrame.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/WebSocketRequest.js":
/*!*********************************************************!*\
  !*** ../node_modules/websocket/lib/WebSocketRequest.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar WebSocketConnection = __webpack_require__(/*! ./WebSocketConnection */ \"(ssr)/../node_modules/websocket/lib/WebSocketConnection.js\");\nvar headerValueSplitRegExp = /,\\s*/;\nvar headerParamSplitRegExp = /;\\s*/;\nvar headerSanitizeRegExp = /[\\r\\n]/g;\nvar xForwardedForSeparatorRegExp = /,\\s*/;\nvar separators = [\n    \"(\",\n    \")\",\n    \"<\",\n    \">\",\n    \"@\",\n    \",\",\n    \";\",\n    \":\",\n    \"\\\\\",\n    '\"',\n    \"/\",\n    \"[\",\n    \"]\",\n    \"?\",\n    \"=\",\n    \"{\",\n    \"}\",\n    \" \",\n    String.fromCharCode(9)\n];\nvar controlChars = [\n    String.fromCharCode(127)\n];\nfor(var i = 0; i < 31; i++){\n    /* US-ASCII Control Characters */ controlChars.push(String.fromCharCode(i));\n}\nvar cookieNameValidateRegEx = /([\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2f\\x3a-\\x3f\\x40\\x5b-\\x5e\\x7b\\x7d\\x7f])/;\nvar cookieValueValidateRegEx = /[^\\x21\\x23-\\x2b\\x2d-\\x3a\\x3c-\\x5b\\x5d-\\x7e]/;\nvar cookieValueDQuoteValidateRegEx = /^\"[^\"]*\"$/;\nvar controlCharsAndSemicolonRegEx = /[\\x00-\\x20\\x3b]/g;\nvar cookieSeparatorRegEx = /[;,] */;\nvar httpStatusDescriptions = {\n    100: \"Continue\",\n    101: \"Switching Protocols\",\n    200: \"OK\",\n    201: \"Created\",\n    203: \"Non-Authoritative Information\",\n    204: \"No Content\",\n    205: \"Reset Content\",\n    206: \"Partial Content\",\n    300: \"Multiple Choices\",\n    301: \"Moved Permanently\",\n    302: \"Found\",\n    303: \"See Other\",\n    304: \"Not Modified\",\n    305: \"Use Proxy\",\n    307: \"Temporary Redirect\",\n    400: \"Bad Request\",\n    401: \"Unauthorized\",\n    402: \"Payment Required\",\n    403: \"Forbidden\",\n    404: \"Not Found\",\n    406: \"Not Acceptable\",\n    407: \"Proxy Authorization Required\",\n    408: \"Request Timeout\",\n    409: \"Conflict\",\n    410: \"Gone\",\n    411: \"Length Required\",\n    412: \"Precondition Failed\",\n    413: \"Request Entity Too Long\",\n    414: \"Request-URI Too Long\",\n    415: \"Unsupported Media Type\",\n    416: \"Requested Range Not Satisfiable\",\n    417: \"Expectation Failed\",\n    426: \"Upgrade Required\",\n    500: \"Internal Server Error\",\n    501: \"Not Implemented\",\n    502: \"Bad Gateway\",\n    503: \"Service Unavailable\",\n    504: \"Gateway Timeout\",\n    505: \"HTTP Version Not Supported\"\n};\nfunction WebSocketRequest(socket, httpRequest, serverConfig) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n    this.socket = socket;\n    this.httpRequest = httpRequest;\n    this.resource = httpRequest.url;\n    this.remoteAddress = socket.remoteAddress;\n    this.remoteAddresses = [\n        this.remoteAddress\n    ];\n    this.serverConfig = serverConfig;\n    // Watch for the underlying TCP socket closing before we call accept\n    this._socketIsClosing = false;\n    this._socketCloseHandler = this._handleSocketCloseBeforeAccept.bind(this);\n    this.socket.on(\"end\", this._socketCloseHandler);\n    this.socket.on(\"close\", this._socketCloseHandler);\n    this._resolved = false;\n}\nutil.inherits(WebSocketRequest, EventEmitter);\nWebSocketRequest.prototype.readHandshake = function() {\n    var self = this;\n    var request = this.httpRequest;\n    // Decode URL\n    this.resourceURL = url.parse(this.resource, true);\n    this.host = request.headers[\"host\"];\n    if (!this.host) {\n        throw new Error(\"Client must provide a Host header.\");\n    }\n    this.key = request.headers[\"sec-websocket-key\"];\n    if (!this.key) {\n        throw new Error(\"Client must provide a value for Sec-WebSocket-Key.\");\n    }\n    this.webSocketVersion = parseInt(request.headers[\"sec-websocket-version\"], 10);\n    if (!this.webSocketVersion || isNaN(this.webSocketVersion)) {\n        throw new Error(\"Client must provide a value for Sec-WebSocket-Version.\");\n    }\n    switch(this.webSocketVersion){\n        case 8:\n        case 13:\n            break;\n        default:\n            var e = new Error(\"Unsupported websocket client version: \" + this.webSocketVersion + \"Only versions 8 and 13 are supported.\");\n            e.httpCode = 426;\n            e.headers = {\n                \"Sec-WebSocket-Version\": \"13\"\n            };\n            throw e;\n    }\n    if (this.webSocketVersion === 13) {\n        this.origin = request.headers[\"origin\"];\n    } else if (this.webSocketVersion === 8) {\n        this.origin = request.headers[\"sec-websocket-origin\"];\n    }\n    // Protocol is optional.\n    var protocolString = request.headers[\"sec-websocket-protocol\"];\n    this.protocolFullCaseMap = {};\n    this.requestedProtocols = [];\n    if (protocolString) {\n        var requestedProtocolsFullCase = protocolString.split(headerValueSplitRegExp);\n        requestedProtocolsFullCase.forEach(function(protocol) {\n            var lcProtocol = protocol.toLocaleLowerCase();\n            self.requestedProtocols.push(lcProtocol);\n            self.protocolFullCaseMap[lcProtocol] = protocol;\n        });\n    }\n    if (!this.serverConfig.ignoreXForwardedFor && request.headers[\"x-forwarded-for\"]) {\n        var immediatePeerIP = this.remoteAddress;\n        this.remoteAddresses = request.headers[\"x-forwarded-for\"].split(xForwardedForSeparatorRegExp);\n        this.remoteAddresses.push(immediatePeerIP);\n        this.remoteAddress = this.remoteAddresses[0];\n    }\n    // Extensions are optional.\n    if (this.serverConfig.parseExtensions) {\n        var extensionsString = request.headers[\"sec-websocket-extensions\"];\n        this.requestedExtensions = this.parseExtensions(extensionsString);\n    } else {\n        this.requestedExtensions = [];\n    }\n    // Cookies are optional\n    if (this.serverConfig.parseCookies) {\n        var cookieString = request.headers[\"cookie\"];\n        this.cookies = this.parseCookies(cookieString);\n    } else {\n        this.cookies = [];\n    }\n};\nWebSocketRequest.prototype.parseExtensions = function(extensionsString) {\n    if (!extensionsString || extensionsString.length === 0) {\n        return [];\n    }\n    var extensions = extensionsString.toLocaleLowerCase().split(headerValueSplitRegExp);\n    extensions.forEach(function(extension, index, array) {\n        var params = extension.split(headerParamSplitRegExp);\n        var extensionName = params[0];\n        var extensionParams = params.slice(1);\n        extensionParams.forEach(function(rawParam, index, array) {\n            var arr = rawParam.split(\"=\");\n            var obj = {\n                name: arr[0],\n                value: arr[1]\n            };\n            array.splice(index, 1, obj);\n        });\n        var obj = {\n            name: extensionName,\n            params: extensionParams\n        };\n        array.splice(index, 1, obj);\n    });\n    return extensions;\n};\n// This function adapted from node-cookie\n// https://github.com/shtylman/node-cookie\nWebSocketRequest.prototype.parseCookies = function(str) {\n    // Sanity Check\n    if (!str || typeof str !== \"string\") {\n        return [];\n    }\n    var cookies = [];\n    var pairs = str.split(cookieSeparatorRegEx);\n    pairs.forEach(function(pair) {\n        var eq_idx = pair.indexOf(\"=\");\n        if (eq_idx === -1) {\n            cookies.push({\n                name: pair,\n                value: null\n            });\n            return;\n        }\n        var key = pair.substr(0, eq_idx).trim();\n        var val = pair.substr(++eq_idx, pair.length).trim();\n        // quoted values\n        if ('\"' === val[0]) {\n            val = val.slice(1, -1);\n        }\n        cookies.push({\n            name: key,\n            value: decodeURIComponent(val)\n        });\n    });\n    return cookies;\n};\nWebSocketRequest.prototype.accept = function(acceptedProtocol, allowedOrigin, cookies) {\n    this._verifyResolution();\n    // TODO: Handle extensions\n    var protocolFullCase;\n    if (acceptedProtocol) {\n        protocolFullCase = this.protocolFullCaseMap[acceptedProtocol.toLocaleLowerCase()];\n        if (typeof protocolFullCase === \"undefined\") {\n            protocolFullCase = acceptedProtocol;\n        }\n    } else {\n        protocolFullCase = acceptedProtocol;\n    }\n    this.protocolFullCaseMap = null;\n    // Create key validation hash\n    var sha1 = crypto.createHash(\"sha1\");\n    sha1.update(this.key + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\");\n    var acceptKey = sha1.digest(\"base64\");\n    var response = \"HTTP/1.1 101 Switching Protocols\\r\\n\" + \"Upgrade: websocket\\r\\n\" + \"Connection: Upgrade\\r\\n\" + \"Sec-WebSocket-Accept: \" + acceptKey + \"\\r\\n\";\n    if (protocolFullCase) {\n        // validate protocol\n        for(var i = 0; i < protocolFullCase.length; i++){\n            var charCode = protocolFullCase.charCodeAt(i);\n            var character = protocolFullCase.charAt(i);\n            if (charCode < 0x21 || charCode > 0x7E || separators.indexOf(character) !== -1) {\n                this.reject(500);\n                throw new Error('Illegal character \"' + String.fromCharCode(character) + '\" in subprotocol.');\n            }\n        }\n        if (this.requestedProtocols.indexOf(acceptedProtocol) === -1) {\n            this.reject(500);\n            throw new Error(\"Specified protocol was not requested by the client.\");\n        }\n        protocolFullCase = protocolFullCase.replace(headerSanitizeRegExp, \"\");\n        response += \"Sec-WebSocket-Protocol: \" + protocolFullCase + \"\\r\\n\";\n    }\n    this.requestedProtocols = null;\n    if (allowedOrigin) {\n        allowedOrigin = allowedOrigin.replace(headerSanitizeRegExp, \"\");\n        if (this.webSocketVersion === 13) {\n            response += \"Origin: \" + allowedOrigin + \"\\r\\n\";\n        } else if (this.webSocketVersion === 8) {\n            response += \"Sec-WebSocket-Origin: \" + allowedOrigin + \"\\r\\n\";\n        }\n    }\n    if (cookies) {\n        if (!Array.isArray(cookies)) {\n            this.reject(500);\n            throw new Error('Value supplied for \"cookies\" argument must be an array.');\n        }\n        var seenCookies = {};\n        cookies.forEach((function(cookie) {\n            if (!cookie.name || !cookie.value) {\n                this.reject(500);\n                throw new Error('Each cookie to set must at least provide a \"name\" and \"value\"');\n            }\n            // Make sure there are no \\r\\n sequences inserted\n            cookie.name = cookie.name.replace(controlCharsAndSemicolonRegEx, \"\");\n            cookie.value = cookie.value.replace(controlCharsAndSemicolonRegEx, \"\");\n            if (seenCookies[cookie.name]) {\n                this.reject(500);\n                throw new Error(\"You may not specify the same cookie name twice.\");\n            }\n            seenCookies[cookie.name] = true;\n            // token (RFC 2616, Section 2.2)\n            var invalidChar = cookie.name.match(cookieNameValidateRegEx);\n            if (invalidChar) {\n                this.reject(500);\n                throw new Error(\"Illegal character \" + invalidChar[0] + \" in cookie name\");\n            }\n            // RFC 6265, Section 4.1.1\n            // *cookie-octet / ( DQUOTE *cookie-octet DQUOTE ) | %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n            if (cookie.value.match(cookieValueDQuoteValidateRegEx)) {\n                invalidChar = cookie.value.slice(1, -1).match(cookieValueValidateRegEx);\n            } else {\n                invalidChar = cookie.value.match(cookieValueValidateRegEx);\n            }\n            if (invalidChar) {\n                this.reject(500);\n                throw new Error(\"Illegal character \" + invalidChar[0] + \" in cookie value\");\n            }\n            var cookieParts = [\n                cookie.name + \"=\" + cookie.value\n            ];\n            // RFC 6265, Section 4.1.1\n            // 'Path=' path-value | <any CHAR except CTLs or ';'>\n            if (cookie.path) {\n                invalidChar = cookie.path.match(controlCharsAndSemicolonRegEx);\n                if (invalidChar) {\n                    this.reject(500);\n                    throw new Error(\"Illegal character \" + invalidChar[0] + \" in cookie path\");\n                }\n                cookieParts.push(\"Path=\" + cookie.path);\n            }\n            // RFC 6265, Section 4.1.2.3\n            // 'Domain=' subdomain\n            if (cookie.domain) {\n                if (typeof cookie.domain !== \"string\") {\n                    this.reject(500);\n                    throw new Error(\"Domain must be specified and must be a string.\");\n                }\n                invalidChar = cookie.domain.match(controlCharsAndSemicolonRegEx);\n                if (invalidChar) {\n                    this.reject(500);\n                    throw new Error(\"Illegal character \" + invalidChar[0] + \" in cookie domain\");\n                }\n                cookieParts.push(\"Domain=\" + cookie.domain.toLowerCase());\n            }\n            // RFC 6265, Section 4.1.1\n            //'Expires=' sane-cookie-date | Force Date object requirement by using only epoch\n            if (cookie.expires) {\n                if (!(cookie.expires instanceof Date)) {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"expires\" must be a vaild date object');\n                }\n                cookieParts.push(\"Expires=\" + cookie.expires.toGMTString());\n            }\n            // RFC 6265, Section 4.1.1\n            //'Max-Age=' non-zero-digit *DIGIT\n            if (cookie.maxage) {\n                var maxage = cookie.maxage;\n                if (typeof maxage === \"string\") {\n                    maxage = parseInt(maxage, 10);\n                }\n                if (isNaN(maxage) || maxage <= 0) {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"maxage\" must be a non-zero number');\n                }\n                maxage = Math.round(maxage);\n                cookieParts.push(\"Max-Age=\" + maxage.toString(10));\n            }\n            // RFC 6265, Section 4.1.1\n            //'Secure;'\n            if (cookie.secure) {\n                if (typeof cookie.secure !== \"boolean\") {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"secure\" must be of type boolean');\n                }\n                cookieParts.push(\"Secure\");\n            }\n            // RFC 6265, Section 4.1.1\n            //'HttpOnly;'\n            if (cookie.httponly) {\n                if (typeof cookie.httponly !== \"boolean\") {\n                    this.reject(500);\n                    throw new Error('Value supplied for cookie \"httponly\" must be of type boolean');\n                }\n                cookieParts.push(\"HttpOnly\");\n            }\n            response += \"Set-Cookie: \" + cookieParts.join(\";\") + \"\\r\\n\";\n        }).bind(this));\n    }\n    // TODO: handle negotiated extensions\n    // if (negotiatedExtensions) {\n    //     response += 'Sec-WebSocket-Extensions: ' + negotiatedExtensions.join(', ') + '\\r\\n';\n    // }\n    // Mark the request resolved now so that the user can't call accept or\n    // reject a second time.\n    this._resolved = true;\n    this.emit(\"requestResolved\", this);\n    response += \"\\r\\n\";\n    var connection = new WebSocketConnection(this.socket, [], acceptedProtocol, false, this.serverConfig);\n    connection.webSocketVersion = this.webSocketVersion;\n    connection.remoteAddress = this.remoteAddress;\n    connection.remoteAddresses = this.remoteAddresses;\n    var self = this;\n    if (this._socketIsClosing) {\n        // Handle case when the client hangs up before we get a chance to\n        // accept the connection and send our side of the opening handshake.\n        cleanupFailedConnection(connection);\n    } else {\n        this.socket.write(response, \"ascii\", function(error) {\n            if (error) {\n                cleanupFailedConnection(connection);\n                return;\n            }\n            self._removeSocketCloseListeners();\n            connection._addSocketEventListeners();\n        });\n    }\n    this.emit(\"requestAccepted\", connection);\n    return connection;\n};\nWebSocketRequest.prototype.reject = function(status, reason, extraHeaders) {\n    this._verifyResolution();\n    // Mark the request resolved now so that the user can't call accept or\n    // reject a second time.\n    this._resolved = true;\n    this.emit(\"requestResolved\", this);\n    if (typeof status !== \"number\") {\n        status = 403;\n    }\n    var response = \"HTTP/1.1 \" + status + \" \" + httpStatusDescriptions[status] + \"\\r\\n\" + \"Connection: close\\r\\n\";\n    if (reason) {\n        reason = reason.replace(headerSanitizeRegExp, \"\");\n        response += \"X-WebSocket-Reject-Reason: \" + reason + \"\\r\\n\";\n    }\n    if (extraHeaders) {\n        for(var key in extraHeaders){\n            var sanitizedValue = extraHeaders[key].toString().replace(headerSanitizeRegExp, \"\");\n            var sanitizedKey = key.replace(headerSanitizeRegExp, \"\");\n            response += sanitizedKey + \": \" + sanitizedValue + \"\\r\\n\";\n        }\n    }\n    response += \"\\r\\n\";\n    this.socket.end(response, \"ascii\");\n    this.emit(\"requestRejected\", this);\n};\nWebSocketRequest.prototype._handleSocketCloseBeforeAccept = function() {\n    this._socketIsClosing = true;\n    this._removeSocketCloseListeners();\n};\nWebSocketRequest.prototype._removeSocketCloseListeners = function() {\n    this.socket.removeListener(\"end\", this._socketCloseHandler);\n    this.socket.removeListener(\"close\", this._socketCloseHandler);\n};\nWebSocketRequest.prototype._verifyResolution = function() {\n    if (this._resolved) {\n        throw new Error(\"WebSocketRequest may only be accepted or rejected one time.\");\n    }\n};\nfunction cleanupFailedConnection(connection) {\n    // Since we have to return a connection object even if the socket is\n    // already dead in order not to break the API, we schedule a 'close'\n    // event on the connection object to occur immediately.\n    process.nextTick(function() {\n        // WebSocketConnection.CLOSE_REASON_ABNORMAL = 1006\n        // Third param: Skip sending the close frame to a dead socket\n        connection.drop(1006, \"TCP connection lost before handshake completed.\", true);\n    });\n}\nmodule.exports = WebSocketRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/WebSocketRequest.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/WebSocketRouter.js":
/*!********************************************************!*\
  !*** ../node_modules/websocket/lib/WebSocketRouter.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar extend = (__webpack_require__(/*! ./utils */ \"(ssr)/../node_modules/websocket/lib/utils.js\").extend);\nvar util = __webpack_require__(/*! util */ \"util\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar WebSocketRouterRequest = __webpack_require__(/*! ./WebSocketRouterRequest */ \"(ssr)/../node_modules/websocket/lib/WebSocketRouterRequest.js\");\nfunction WebSocketRouter(config) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n    this.config = {\n        // The WebSocketServer instance to attach to.\n        server: null\n    };\n    if (config) {\n        extend(this.config, config);\n    }\n    this.handlers = [];\n    this._requestHandler = this.handleRequest.bind(this);\n    if (this.config.server) {\n        this.attachServer(this.config.server);\n    }\n}\nutil.inherits(WebSocketRouter, EventEmitter);\nWebSocketRouter.prototype.attachServer = function(server) {\n    if (server) {\n        this.server = server;\n        this.server.on(\"request\", this._requestHandler);\n    } else {\n        throw new Error(\"You must specify a WebSocketServer instance to attach to.\");\n    }\n};\nWebSocketRouter.prototype.detachServer = function() {\n    if (this.server) {\n        this.server.removeListener(\"request\", this._requestHandler);\n        this.server = null;\n    } else {\n        throw new Error(\"Cannot detach from server: not attached.\");\n    }\n};\nWebSocketRouter.prototype.mount = function(path, protocol, callback) {\n    if (!path) {\n        throw new Error(\"You must specify a path for this handler.\");\n    }\n    if (!protocol) {\n        protocol = \"____no_protocol____\";\n    }\n    if (!callback) {\n        throw new Error(\"You must specify a callback for this handler.\");\n    }\n    path = this.pathToRegExp(path);\n    if (!(path instanceof RegExp)) {\n        throw new Error(\"Path must be specified as either a string or a RegExp.\");\n    }\n    var pathString = path.toString();\n    // normalize protocol to lower-case\n    protocol = protocol.toLocaleLowerCase();\n    if (this.findHandlerIndex(pathString, protocol) !== -1) {\n        throw new Error(\"You may only mount one handler per path/protocol combination.\");\n    }\n    this.handlers.push({\n        \"path\": path,\n        \"pathString\": pathString,\n        \"protocol\": protocol,\n        \"callback\": callback\n    });\n};\nWebSocketRouter.prototype.unmount = function(path, protocol) {\n    var index = this.findHandlerIndex(this.pathToRegExp(path).toString(), protocol);\n    if (index !== -1) {\n        this.handlers.splice(index, 1);\n    } else {\n        throw new Error(\"Unable to find a route matching the specified path and protocol.\");\n    }\n};\nWebSocketRouter.prototype.findHandlerIndex = function(pathString, protocol) {\n    protocol = protocol.toLocaleLowerCase();\n    for(var i = 0, len = this.handlers.length; i < len; i++){\n        var handler = this.handlers[i];\n        if (handler.pathString === pathString && handler.protocol === protocol) {\n            return i;\n        }\n    }\n    return -1;\n};\nWebSocketRouter.prototype.pathToRegExp = function(path) {\n    if (typeof path === \"string\") {\n        if (path === \"*\") {\n            path = /^.*$/;\n        } else {\n            path = path.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n            path = new RegExp(\"^\" + path + \"$\");\n        }\n    }\n    return path;\n};\nWebSocketRouter.prototype.handleRequest = function(request) {\n    var requestedProtocols = request.requestedProtocols;\n    if (requestedProtocols.length === 0) {\n        requestedProtocols = [\n            \"____no_protocol____\"\n        ];\n    }\n    // Find a handler with the first requested protocol first\n    for(var i = 0; i < requestedProtocols.length; i++){\n        var requestedProtocol = requestedProtocols[i].toLocaleLowerCase();\n        // find the first handler that can process this request\n        for(var j = 0, len = this.handlers.length; j < len; j++){\n            var handler = this.handlers[j];\n            if (handler.path.test(request.resourceURL.pathname)) {\n                if (requestedProtocol === handler.protocol || handler.protocol === \"*\") {\n                    var routerRequest = new WebSocketRouterRequest(request, requestedProtocol);\n                    handler.callback(routerRequest);\n                    return;\n                }\n            }\n        }\n    }\n    // If we get here we were unable to find a suitable handler.\n    request.reject(404, \"No handler is available for the given request.\");\n};\nmodule.exports = WebSocketRouter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/WebSocketRouter.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/WebSocketRouterRequest.js":
/*!***************************************************************!*\
  !*** ../node_modules/websocket/lib/WebSocketRouterRequest.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar util = __webpack_require__(/*! util */ \"util\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nfunction WebSocketRouterRequest(webSocketRequest, resolvedProtocol) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n    this.webSocketRequest = webSocketRequest;\n    if (resolvedProtocol === \"____no_protocol____\") {\n        this.protocol = null;\n    } else {\n        this.protocol = resolvedProtocol;\n    }\n    this.origin = webSocketRequest.origin;\n    this.resource = webSocketRequest.resource;\n    this.resourceURL = webSocketRequest.resourceURL;\n    this.httpRequest = webSocketRequest.httpRequest;\n    this.remoteAddress = webSocketRequest.remoteAddress;\n    this.webSocketVersion = webSocketRequest.webSocketVersion;\n    this.requestedExtensions = webSocketRequest.requestedExtensions;\n    this.cookies = webSocketRequest.cookies;\n}\nutil.inherits(WebSocketRouterRequest, EventEmitter);\nWebSocketRouterRequest.prototype.accept = function(origin, cookies) {\n    var connection = this.webSocketRequest.accept(this.protocol, origin, cookies);\n    this.emit(\"requestAccepted\", connection);\n    return connection;\n};\nWebSocketRouterRequest.prototype.reject = function(status, reason, extraHeaders) {\n    this.webSocketRequest.reject(status, reason, extraHeaders);\n    this.emit(\"requestRejected\", this);\n};\nmodule.exports = WebSocketRouterRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvV2ViU29ja2V0Um91dGVyUmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7dUVBY3VFO0FBRXZFLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLGVBQWVELDBEQUE4QjtBQUVqRCxTQUFTRSx1QkFBdUJDLGdCQUFnQixFQUFFQyxnQkFBZ0I7SUFDOUQseUJBQXlCO0lBQ3pCSCxhQUFhSSxJQUFJLENBQUMsSUFBSTtJQUV0QixJQUFJLENBQUNGLGdCQUFnQixHQUFHQTtJQUN4QixJQUFJQyxxQkFBcUIsdUJBQXVCO1FBQzVDLElBQUksQ0FBQ0UsUUFBUSxHQUFHO0lBQ3BCLE9BQ0s7UUFDRCxJQUFJLENBQUNBLFFBQVEsR0FBR0Y7SUFDcEI7SUFDQSxJQUFJLENBQUNHLE1BQU0sR0FBR0osaUJBQWlCSSxNQUFNO0lBQ3JDLElBQUksQ0FBQ0MsUUFBUSxHQUFHTCxpQkFBaUJLLFFBQVE7SUFDekMsSUFBSSxDQUFDQyxXQUFXLEdBQUdOLGlCQUFpQk0sV0FBVztJQUMvQyxJQUFJLENBQUNDLFdBQVcsR0FBR1AsaUJBQWlCTyxXQUFXO0lBQy9DLElBQUksQ0FBQ0MsYUFBYSxHQUFHUixpQkFBaUJRLGFBQWE7SUFDbkQsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR1QsaUJBQWlCUyxnQkFBZ0I7SUFDekQsSUFBSSxDQUFDQyxtQkFBbUIsR0FBR1YsaUJBQWlCVSxtQkFBbUI7SUFDL0QsSUFBSSxDQUFDQyxPQUFPLEdBQUdYLGlCQUFpQlcsT0FBTztBQUMzQztBQUVBZixLQUFLZ0IsUUFBUSxDQUFDYix3QkFBd0JEO0FBRXRDQyx1QkFBdUJjLFNBQVMsQ0FBQ0MsTUFBTSxHQUFHLFNBQVNWLE1BQU0sRUFBRU8sT0FBTztJQUM5RCxJQUFJSSxhQUFhLElBQUksQ0FBQ2YsZ0JBQWdCLENBQUNjLE1BQU0sQ0FBQyxJQUFJLENBQUNYLFFBQVEsRUFBRUMsUUFBUU87SUFDckUsSUFBSSxDQUFDSyxJQUFJLENBQUMsbUJBQW1CRDtJQUM3QixPQUFPQTtBQUNYO0FBRUFoQix1QkFBdUJjLFNBQVMsQ0FBQ0ksTUFBTSxHQUFHLFNBQVNDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxZQUFZO0lBQzNFLElBQUksQ0FBQ3BCLGdCQUFnQixDQUFDaUIsTUFBTSxDQUFDQyxRQUFRQyxRQUFRQztJQUM3QyxJQUFJLENBQUNKLElBQUksQ0FBQyxtQkFBbUIsSUFBSTtBQUNyQztBQUVBSyxPQUFPQyxPQUFPLEdBQUd2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi9XZWJTb2NrZXRSb3V0ZXJSZXF1ZXN0LmpzPzQ5YzciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogIENvcHlyaWdodCAyMDEwLTIwMTUgQnJpYW4gTWNLZWx2ZXkuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbmZ1bmN0aW9uIFdlYlNvY2tldFJvdXRlclJlcXVlc3Qod2ViU29ja2V0UmVxdWVzdCwgcmVzb2x2ZWRQcm90b2NvbCkge1xuICAgIC8vIFN1cGVyY2xhc3MgQ29uc3RydWN0b3JcbiAgICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMud2ViU29ja2V0UmVxdWVzdCA9IHdlYlNvY2tldFJlcXVlc3Q7XG4gICAgaWYgKHJlc29sdmVkUHJvdG9jb2wgPT09ICdfX19fbm9fcHJvdG9jb2xfX19fJykge1xuICAgICAgICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRoaXMucHJvdG9jb2wgPSByZXNvbHZlZFByb3RvY29sO1xuICAgIH1cbiAgICB0aGlzLm9yaWdpbiA9IHdlYlNvY2tldFJlcXVlc3Qub3JpZ2luO1xuICAgIHRoaXMucmVzb3VyY2UgPSB3ZWJTb2NrZXRSZXF1ZXN0LnJlc291cmNlO1xuICAgIHRoaXMucmVzb3VyY2VVUkwgPSB3ZWJTb2NrZXRSZXF1ZXN0LnJlc291cmNlVVJMO1xuICAgIHRoaXMuaHR0cFJlcXVlc3QgPSB3ZWJTb2NrZXRSZXF1ZXN0Lmh0dHBSZXF1ZXN0O1xuICAgIHRoaXMucmVtb3RlQWRkcmVzcyA9IHdlYlNvY2tldFJlcXVlc3QucmVtb3RlQWRkcmVzcztcbiAgICB0aGlzLndlYlNvY2tldFZlcnNpb24gPSB3ZWJTb2NrZXRSZXF1ZXN0LndlYlNvY2tldFZlcnNpb247XG4gICAgdGhpcy5yZXF1ZXN0ZWRFeHRlbnNpb25zID0gd2ViU29ja2V0UmVxdWVzdC5yZXF1ZXN0ZWRFeHRlbnNpb25zO1xuICAgIHRoaXMuY29va2llcyA9IHdlYlNvY2tldFJlcXVlc3QuY29va2llcztcbn1cblxudXRpbC5pbmhlcml0cyhXZWJTb2NrZXRSb3V0ZXJSZXF1ZXN0LCBFdmVudEVtaXR0ZXIpO1xuXG5XZWJTb2NrZXRSb3V0ZXJSZXF1ZXN0LnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbihvcmlnaW4sIGNvb2tpZXMpIHtcbiAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXMud2ViU29ja2V0UmVxdWVzdC5hY2NlcHQodGhpcy5wcm90b2NvbCwgb3JpZ2luLCBjb29raWVzKTtcbiAgICB0aGlzLmVtaXQoJ3JlcXVlc3RBY2NlcHRlZCcsIGNvbm5lY3Rpb24pO1xuICAgIHJldHVybiBjb25uZWN0aW9uO1xufTtcblxuV2ViU29ja2V0Um91dGVyUmVxdWVzdC5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24oc3RhdHVzLCByZWFzb24sIGV4dHJhSGVhZGVycykge1xuICAgIHRoaXMud2ViU29ja2V0UmVxdWVzdC5yZWplY3Qoc3RhdHVzLCByZWFzb24sIGV4dHJhSGVhZGVycyk7XG4gICAgdGhpcy5lbWl0KCdyZXF1ZXN0UmVqZWN0ZWQnLCB0aGlzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0Um91dGVyUmVxdWVzdDtcbiJdLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsIkV2ZW50RW1pdHRlciIsIldlYlNvY2tldFJvdXRlclJlcXVlc3QiLCJ3ZWJTb2NrZXRSZXF1ZXN0IiwicmVzb2x2ZWRQcm90b2NvbCIsImNhbGwiLCJwcm90b2NvbCIsIm9yaWdpbiIsInJlc291cmNlIiwicmVzb3VyY2VVUkwiLCJodHRwUmVxdWVzdCIsInJlbW90ZUFkZHJlc3MiLCJ3ZWJTb2NrZXRWZXJzaW9uIiwicmVxdWVzdGVkRXh0ZW5zaW9ucyIsImNvb2tpZXMiLCJpbmhlcml0cyIsInByb3RvdHlwZSIsImFjY2VwdCIsImNvbm5lY3Rpb24iLCJlbWl0IiwicmVqZWN0Iiwic3RhdHVzIiwicmVhc29uIiwiZXh0cmFIZWFkZXJzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/WebSocketRouterRequest.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/WebSocketServer.js":
/*!********************************************************!*\
  !*** ../node_modules/websocket/lib/WebSocketServer.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/************************************************************************\n *  Copyright 2010-2015 Brian McKelvey.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ***********************************************************************/ \nvar extend = (__webpack_require__(/*! ./utils */ \"(ssr)/../node_modules/websocket/lib/utils.js\").extend);\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/../node_modules/websocket/lib/utils.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar debug = __webpack_require__(/*! debug */ \"(ssr)/../node_modules/websocket/node_modules/debug/src/index.js\")(\"websocket:server\");\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar WebSocketRequest = __webpack_require__(/*! ./WebSocketRequest */ \"(ssr)/../node_modules/websocket/lib/WebSocketRequest.js\");\nvar WebSocketServer = function WebSocketServer(config) {\n    // Superclass Constructor\n    EventEmitter.call(this);\n    this._handlers = {\n        upgrade: this.handleUpgrade.bind(this),\n        requestAccepted: this.handleRequestAccepted.bind(this),\n        requestResolved: this.handleRequestResolved.bind(this)\n    };\n    this.connections = [];\n    this.pendingRequests = [];\n    if (config) {\n        this.mount(config);\n    }\n};\nutil.inherits(WebSocketServer, EventEmitter);\nWebSocketServer.prototype.mount = function(config) {\n    this.config = {\n        // The http server instance to attach to.  Required.\n        httpServer: null,\n        // 64KiB max frame size.\n        maxReceivedFrameSize: 0x10000,\n        // 1MiB max message size, only applicable if\n        // assembleFragments is true\n        maxReceivedMessageSize: 0x100000,\n        // Outgoing messages larger than fragmentationThreshold will be\n        // split into multiple fragments.\n        fragmentOutgoingMessages: true,\n        // Outgoing frames are fragmented if they exceed this threshold.\n        // Default is 16KiB\n        fragmentationThreshold: 0x4000,\n        // If true, the server will automatically send a ping to all\n        // clients every 'keepaliveInterval' milliseconds.  The timer is\n        // reset on any received data from the client.\n        keepalive: true,\n        // The interval to send keepalive pings to connected clients if the\n        // connection is idle.  Any received data will reset the counter.\n        keepaliveInterval: 20000,\n        // If true, the server will consider any connection that has not\n        // received any data within the amount of time specified by\n        // 'keepaliveGracePeriod' after a keepalive ping has been sent to\n        // be dead, and will drop the connection.\n        // Ignored if keepalive is false.\n        dropConnectionOnKeepaliveTimeout: true,\n        // The amount of time to wait after sending a keepalive ping before\n        // closing the connection if the connected peer does not respond.\n        // Ignored if keepalive is false.\n        keepaliveGracePeriod: 10000,\n        // Whether to use native TCP keep-alive instead of WebSockets ping\n        // and pong packets.  Native TCP keep-alive sends smaller packets\n        // on the wire and so uses bandwidth more efficiently.  This may\n        // be more important when talking to mobile devices.\n        // If this value is set to true, then these values will be ignored:\n        //   keepaliveGracePeriod\n        //   dropConnectionOnKeepaliveTimeout\n        useNativeKeepalive: false,\n        // If true, fragmented messages will be automatically assembled\n        // and the full message will be emitted via a 'message' event.\n        // If false, each frame will be emitted via a 'frame' event and\n        // the application will be responsible for aggregating multiple\n        // fragmented frames.  Single-frame messages will emit a 'message'\n        // event in addition to the 'frame' event.\n        // Most users will want to leave this set to 'true'\n        assembleFragments: true,\n        // If this is true, websocket connections will be accepted\n        // regardless of the path and protocol specified by the client.\n        // The protocol accepted will be the first that was requested\n        // by the client.  Clients from any origin will be accepted.\n        // This should only be used in the simplest of cases.  You should\n        // probably leave this set to 'false' and inspect the request\n        // object to make sure it's acceptable before accepting it.\n        autoAcceptConnections: false,\n        // Whether or not the X-Forwarded-For header should be respected.\n        // It's important to set this to 'true' when accepting connections\n        // from untrusted clients, as a malicious client could spoof its\n        // IP address by simply setting this header.  It's meant to be added\n        // by a trusted proxy or other intermediary within your own\n        // infrastructure.\n        // See:  http://en.wikipedia.org/wiki/X-Forwarded-For\n        ignoreXForwardedFor: false,\n        // If this is true, 'cookie' headers are parsed and exposed as WebSocketRequest.cookies\n        parseCookies: true,\n        // If this is true, 'sec-websocket-extensions' headers are parsed and exposed as WebSocketRequest.requestedExtensions\n        parseExtensions: true,\n        // The Nagle Algorithm makes more efficient use of network resources\n        // by introducing a small delay before sending small packets so that\n        // multiple messages can be batched together before going onto the\n        // wire.  This however comes at the cost of latency, so the default\n        // is to disable it.  If you don't need low latency and are streaming\n        // lots of small messages, you can change this to 'false'\n        disableNagleAlgorithm: true,\n        // The number of milliseconds to wait after sending a close frame\n        // for an acknowledgement to come back before giving up and just\n        // closing the socket.\n        closeTimeout: 5000\n    };\n    extend(this.config, config);\n    if (this.config.httpServer) {\n        if (!Array.isArray(this.config.httpServer)) {\n            this.config.httpServer = [\n                this.config.httpServer\n            ];\n        }\n        var upgradeHandler = this._handlers.upgrade;\n        this.config.httpServer.forEach(function(httpServer) {\n            httpServer.on(\"upgrade\", upgradeHandler);\n        });\n    } else {\n        throw new Error(\"You must specify an httpServer on which to mount the WebSocket server.\");\n    }\n};\nWebSocketServer.prototype.unmount = function() {\n    var upgradeHandler = this._handlers.upgrade;\n    this.config.httpServer.forEach(function(httpServer) {\n        httpServer.removeListener(\"upgrade\", upgradeHandler);\n    });\n};\nWebSocketServer.prototype.closeAllConnections = function() {\n    this.connections.forEach(function(connection) {\n        connection.close();\n    });\n    this.pendingRequests.forEach(function(request) {\n        process.nextTick(function() {\n            request.reject(503); // HTTP 503 Service Unavailable\n        });\n    });\n};\nWebSocketServer.prototype.broadcast = function(data) {\n    if (Buffer.isBuffer(data)) {\n        this.broadcastBytes(data);\n    } else if (typeof data.toString === \"function\") {\n        this.broadcastUTF(data);\n    }\n};\nWebSocketServer.prototype.broadcastUTF = function(utfData) {\n    this.connections.forEach(function(connection) {\n        connection.sendUTF(utfData);\n    });\n};\nWebSocketServer.prototype.broadcastBytes = function(binaryData) {\n    this.connections.forEach(function(connection) {\n        connection.sendBytes(binaryData);\n    });\n};\nWebSocketServer.prototype.shutDown = function() {\n    this.unmount();\n    this.closeAllConnections();\n};\nWebSocketServer.prototype.handleUpgrade = function(request, socket) {\n    var self = this;\n    var wsRequest = new WebSocketRequest(socket, request, this.config);\n    try {\n        wsRequest.readHandshake();\n    } catch (e) {\n        wsRequest.reject(e.httpCode ? e.httpCode : 400, e.message, e.headers);\n        debug(\"Invalid handshake: %s\", e.message);\n        this.emit(\"upgradeError\", e);\n        return;\n    }\n    this.pendingRequests.push(wsRequest);\n    wsRequest.once(\"requestAccepted\", this._handlers.requestAccepted);\n    wsRequest.once(\"requestResolved\", this._handlers.requestResolved);\n    socket.once(\"close\", function() {\n        self._handlers.requestResolved(wsRequest);\n    });\n    if (!this.config.autoAcceptConnections && utils.eventEmitterListenerCount(this, \"request\") > 0) {\n        this.emit(\"request\", wsRequest);\n    } else if (this.config.autoAcceptConnections) {\n        wsRequest.accept(wsRequest.requestedProtocols[0], wsRequest.origin);\n    } else {\n        wsRequest.reject(404, \"No handler is configured to accept the connection.\");\n    }\n};\nWebSocketServer.prototype.handleRequestAccepted = function(connection) {\n    var self = this;\n    connection.once(\"close\", function(closeReason, description) {\n        self.handleConnectionClose(connection, closeReason, description);\n    });\n    this.connections.push(connection);\n    this.emit(\"connect\", connection);\n};\nWebSocketServer.prototype.handleConnectionClose = function(connection, closeReason, description) {\n    var index = this.connections.indexOf(connection);\n    if (index !== -1) {\n        this.connections.splice(index, 1);\n    }\n    this.emit(\"close\", connection, closeReason, description);\n};\nWebSocketServer.prototype.handleRequestResolved = function(request) {\n    var index = this.pendingRequests.indexOf(request);\n    if (index !== -1) {\n        this.pendingRequests.splice(index, 1);\n    }\n};\nmodule.exports = WebSocketServer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/WebSocketServer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/utils.js":
/*!**********************************************!*\
  !*** ../node_modules/websocket/lib/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var noop = exports.noop = function() {};\nexports.extend = function extend(dest, source) {\n    for(var prop in source){\n        dest[prop] = source[prop];\n    }\n};\nexports.eventEmitterListenerCount = (__webpack_require__(/*! events */ \"events\").EventEmitter.listenerCount) || function(emitter, type) {\n    return emitter.listeners(type).length;\n};\nexports.bufferAllocUnsafe = Buffer.allocUnsafe ? Buffer.allocUnsafe : function oldBufferAllocUnsafe(size) {\n    return new Buffer(size);\n};\nexports.bufferFromString = Buffer.from ? Buffer.from : function oldBufferFromString(string, encoding) {\n    return new Buffer(string, encoding);\n};\nexports.BufferingLogger = function createBufferingLogger(identifier, uniqueID) {\n    var logFunction = __webpack_require__(/*! debug */ \"(ssr)/../node_modules/websocket/node_modules/debug/src/index.js\")(identifier);\n    if (logFunction.enabled) {\n        var logger = new BufferingLogger(identifier, uniqueID, logFunction);\n        var debug = logger.log.bind(logger);\n        debug.printOutput = logger.printOutput.bind(logger);\n        debug.enabled = logFunction.enabled;\n        return debug;\n    }\n    logFunction.printOutput = noop;\n    return logFunction;\n};\nfunction BufferingLogger(identifier, uniqueID, logFunction) {\n    this.logFunction = logFunction;\n    this.identifier = identifier;\n    this.uniqueID = uniqueID;\n    this.buffer = [];\n}\nBufferingLogger.prototype.log = function() {\n    this.buffer.push([\n        new Date(),\n        Array.prototype.slice.call(arguments)\n    ]);\n    return this;\n};\nBufferingLogger.prototype.clear = function() {\n    this.buffer = [];\n    return this;\n};\nBufferingLogger.prototype.printOutput = function(logFunction) {\n    if (!logFunction) {\n        logFunction = this.logFunction;\n    }\n    var uniqueID = this.uniqueID;\n    this.buffer.forEach(function(entry) {\n        var date = entry[0].toLocaleString();\n        var args = entry[1].slice();\n        var formatString = args[0];\n        if (formatString !== void 0 && formatString !== null) {\n            formatString = \"%s - %s - \" + formatString.toString();\n            args.splice(0, 1, formatString, date, uniqueID);\n            logFunction.apply(global, args);\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBT0MsWUFBWSxHQUFHLFlBQVc7QUFFckNBLGNBQWMsR0FBRyxTQUFTQyxPQUFPQyxJQUFJLEVBQUVDLE1BQU07SUFDekMsSUFBSyxJQUFJQyxRQUFRRCxPQUFRO1FBQ3JCRCxJQUFJLENBQUNFLEtBQUssR0FBR0QsTUFBTSxDQUFDQyxLQUFLO0lBQzdCO0FBQ0o7QUFFQUosaUNBQWlDLEdBQzdCTSx3RUFBNEMsSUFDNUMsU0FBU0csT0FBTyxFQUFFQyxJQUFJO0lBQUksT0FBT0QsUUFBUUUsU0FBUyxDQUFDRCxNQUFNRSxNQUFNO0FBQUU7QUFFckVaLHlCQUF5QixHQUFHYyxPQUFPQyxXQUFXLEdBQzFDRCxPQUFPQyxXQUFXLEdBQ2xCLFNBQVNDLHFCQUFxQkMsSUFBSTtJQUFJLE9BQU8sSUFBSUgsT0FBT0c7QUFBTztBQUVuRWpCLHdCQUF3QixHQUFHYyxPQUFPSyxJQUFJLEdBQ2xDTCxPQUFPSyxJQUFJLEdBQ1gsU0FBU0Msb0JBQW9CQyxNQUFNLEVBQUVDLFFBQVE7SUFDM0MsT0FBTyxJQUFJUixPQUFPTyxRQUFRQztBQUM1QjtBQUVKdEIsdUJBQXVCLEdBQUcsU0FBU3dCLHNCQUFzQkMsVUFBVSxFQUFFQyxRQUFRO0lBQ3pFLElBQUlDLGNBQWNyQixtQkFBT0EsQ0FBQyxnRkFBU21CO0lBQ25DLElBQUlFLFlBQVlDLE9BQU8sRUFBRTtRQUNyQixJQUFJQyxTQUFTLElBQUlOLGdCQUFnQkUsWUFBWUMsVUFBVUM7UUFDdkQsSUFBSUcsUUFBUUQsT0FBT0UsR0FBRyxDQUFDQyxJQUFJLENBQUNIO1FBQzVCQyxNQUFNRyxXQUFXLEdBQUdKLE9BQU9JLFdBQVcsQ0FBQ0QsSUFBSSxDQUFDSDtRQUM1Q0MsTUFBTUYsT0FBTyxHQUFHRCxZQUFZQyxPQUFPO1FBQ25DLE9BQU9FO0lBQ1g7SUFDQUgsWUFBWU0sV0FBVyxHQUFHbEM7SUFDMUIsT0FBTzRCO0FBQ1g7QUFFQSxTQUFTSixnQkFBZ0JFLFVBQVUsRUFBRUMsUUFBUSxFQUFFQyxXQUFXO0lBQ3RELElBQUksQ0FBQ0EsV0FBVyxHQUFHQTtJQUNuQixJQUFJLENBQUNGLFVBQVUsR0FBR0E7SUFDbEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdBO0lBQ2hCLElBQUksQ0FBQ1EsTUFBTSxHQUFHLEVBQUU7QUFDcEI7QUFFQVgsZ0JBQWdCWSxTQUFTLENBQUNKLEdBQUcsR0FBRztJQUM5QixJQUFJLENBQUNHLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDO1FBQUUsSUFBSUM7UUFBUUMsTUFBTUgsU0FBUyxDQUFDSSxLQUFLLENBQUNDLElBQUksQ0FBQ0M7S0FBWTtJQUN0RSxPQUFPLElBQUk7QUFDYjtBQUVBbEIsZ0JBQWdCWSxTQUFTLENBQUNPLEtBQUssR0FBRztJQUNoQyxJQUFJLENBQUNSLE1BQU0sR0FBRyxFQUFFO0lBQ2hCLE9BQU8sSUFBSTtBQUNiO0FBRUFYLGdCQUFnQlksU0FBUyxDQUFDRixXQUFXLEdBQUcsU0FBU04sV0FBVztJQUN4RCxJQUFJLENBQUNBLGFBQWE7UUFBRUEsY0FBYyxJQUFJLENBQUNBLFdBQVc7SUFBRTtJQUNwRCxJQUFJRCxXQUFXLElBQUksQ0FBQ0EsUUFBUTtJQUM1QixJQUFJLENBQUNRLE1BQU0sQ0FBQ1MsT0FBTyxDQUFDLFNBQVNDLEtBQUs7UUFDOUIsSUFBSUMsT0FBT0QsS0FBSyxDQUFDLEVBQUUsQ0FBQ0UsY0FBYztRQUNsQyxJQUFJQyxPQUFPSCxLQUFLLENBQUMsRUFBRSxDQUFDTCxLQUFLO1FBQ3pCLElBQUlTLGVBQWVELElBQUksQ0FBQyxFQUFFO1FBQzFCLElBQUlDLGlCQUFrQixLQUFLLEtBQU1BLGlCQUFpQixNQUFNO1lBQ3BEQSxlQUFlLGVBQWVBLGFBQWFDLFFBQVE7WUFDbkRGLEtBQUtHLE1BQU0sQ0FBQyxHQUFHLEdBQUdGLGNBQWNILE1BQU1uQjtZQUN0Q0MsWUFBWXdCLEtBQUssQ0FBQ0MsUUFBUUw7UUFDOUI7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4uL25vZGVfbW9kdWxlcy93ZWJzb2NrZXQvbGliL3V0aWxzLmpzPzJiMWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG5vb3AgPSBleHBvcnRzLm5vb3AgPSBmdW5jdGlvbigpe307XG5cbmV4cG9ydHMuZXh0ZW5kID0gZnVuY3Rpb24gZXh0ZW5kKGRlc3QsIHNvdXJjZSkge1xuICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgIGRlc3RbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgfVxufTtcblxuZXhwb3J0cy5ldmVudEVtaXR0ZXJMaXN0ZW5lckNvdW50ID1cbiAgICByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCB8fFxuICAgIGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHsgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDsgfTtcblxuZXhwb3J0cy5idWZmZXJBbGxvY1Vuc2FmZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSA/XG4gICAgQnVmZmVyLmFsbG9jVW5zYWZlIDpcbiAgICBmdW5jdGlvbiBvbGRCdWZmZXJBbGxvY1Vuc2FmZShzaXplKSB7IHJldHVybiBuZXcgQnVmZmVyKHNpemUpOyB9O1xuXG5leHBvcnRzLmJ1ZmZlckZyb21TdHJpbmcgPSBCdWZmZXIuZnJvbSA/XG4gICAgQnVmZmVyLmZyb20gOlxuICAgIGZ1bmN0aW9uIG9sZEJ1ZmZlckZyb21TdHJpbmcoc3RyaW5nLCBlbmNvZGluZykge1xuICAgICAgcmV0dXJuIG5ldyBCdWZmZXIoc3RyaW5nLCBlbmNvZGluZyk7XG4gICAgfTtcblxuZXhwb3J0cy5CdWZmZXJpbmdMb2dnZXIgPSBmdW5jdGlvbiBjcmVhdGVCdWZmZXJpbmdMb2dnZXIoaWRlbnRpZmllciwgdW5pcXVlSUQpIHtcbiAgICB2YXIgbG9nRnVuY3Rpb24gPSByZXF1aXJlKCdkZWJ1ZycpKGlkZW50aWZpZXIpO1xuICAgIGlmIChsb2dGdW5jdGlvbi5lbmFibGVkKSB7XG4gICAgICAgIHZhciBsb2dnZXIgPSBuZXcgQnVmZmVyaW5nTG9nZ2VyKGlkZW50aWZpZXIsIHVuaXF1ZUlELCBsb2dGdW5jdGlvbik7XG4gICAgICAgIHZhciBkZWJ1ZyA9IGxvZ2dlci5sb2cuYmluZChsb2dnZXIpO1xuICAgICAgICBkZWJ1Zy5wcmludE91dHB1dCA9IGxvZ2dlci5wcmludE91dHB1dC5iaW5kKGxvZ2dlcik7XG4gICAgICAgIGRlYnVnLmVuYWJsZWQgPSBsb2dGdW5jdGlvbi5lbmFibGVkO1xuICAgICAgICByZXR1cm4gZGVidWc7XG4gICAgfVxuICAgIGxvZ0Z1bmN0aW9uLnByaW50T3V0cHV0ID0gbm9vcDtcbiAgICByZXR1cm4gbG9nRnVuY3Rpb247XG59O1xuXG5mdW5jdGlvbiBCdWZmZXJpbmdMb2dnZXIoaWRlbnRpZmllciwgdW5pcXVlSUQsIGxvZ0Z1bmN0aW9uKSB7XG4gICAgdGhpcy5sb2dGdW5jdGlvbiA9IGxvZ0Z1bmN0aW9uO1xuICAgIHRoaXMuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgdGhpcy51bmlxdWVJRCA9IHVuaXF1ZUlEO1xuICAgIHRoaXMuYnVmZmVyID0gW107XG59XG5cbkJ1ZmZlcmluZ0xvZ2dlci5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuYnVmZmVyLnB1c2goWyBuZXcgRGF0ZSgpLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpIF0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkJ1ZmZlcmluZ0xvZ2dlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5idWZmZXIgPSBbXTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CdWZmZXJpbmdMb2dnZXIucHJvdG90eXBlLnByaW50T3V0cHV0ID0gZnVuY3Rpb24obG9nRnVuY3Rpb24pIHtcbiAgICBpZiAoIWxvZ0Z1bmN0aW9uKSB7IGxvZ0Z1bmN0aW9uID0gdGhpcy5sb2dGdW5jdGlvbjsgfVxuICAgIHZhciB1bmlxdWVJRCA9IHRoaXMudW5pcXVlSUQ7XG4gICAgdGhpcy5idWZmZXIuZm9yRWFjaChmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICB2YXIgZGF0ZSA9IGVudHJ5WzBdLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgICAgIHZhciBhcmdzID0gZW50cnlbMV0uc2xpY2UoKTtcbiAgICAgICAgdmFyIGZvcm1hdFN0cmluZyA9IGFyZ3NbMF07XG4gICAgICAgIGlmIChmb3JtYXRTdHJpbmcgIT09ICh2b2lkIDApICYmIGZvcm1hdFN0cmluZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZm9ybWF0U3RyaW5nID0gJyVzIC0gJXMgLSAnICsgZm9ybWF0U3RyaW5nLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBhcmdzLnNwbGljZSgwLCAxLCBmb3JtYXRTdHJpbmcsIGRhdGUsIHVuaXF1ZUlEKTtcbiAgICAgICAgICAgIGxvZ0Z1bmN0aW9uLmFwcGx5KGdsb2JhbCwgYXJncyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG4iXSwibmFtZXMiOlsibm9vcCIsImV4cG9ydHMiLCJleHRlbmQiLCJkZXN0Iiwic291cmNlIiwicHJvcCIsImV2ZW50RW1pdHRlckxpc3RlbmVyQ291bnQiLCJyZXF1aXJlIiwiRXZlbnRFbWl0dGVyIiwibGlzdGVuZXJDb3VudCIsImVtaXR0ZXIiLCJ0eXBlIiwibGlzdGVuZXJzIiwibGVuZ3RoIiwiYnVmZmVyQWxsb2NVbnNhZmUiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIm9sZEJ1ZmZlckFsbG9jVW5zYWZlIiwic2l6ZSIsImJ1ZmZlckZyb21TdHJpbmciLCJmcm9tIiwib2xkQnVmZmVyRnJvbVN0cmluZyIsInN0cmluZyIsImVuY29kaW5nIiwiQnVmZmVyaW5nTG9nZ2VyIiwiY3JlYXRlQnVmZmVyaW5nTG9nZ2VyIiwiaWRlbnRpZmllciIsInVuaXF1ZUlEIiwibG9nRnVuY3Rpb24iLCJlbmFibGVkIiwibG9nZ2VyIiwiZGVidWciLCJsb2ciLCJiaW5kIiwicHJpbnRPdXRwdXQiLCJidWZmZXIiLCJwcm90b3R5cGUiLCJwdXNoIiwiRGF0ZSIsIkFycmF5Iiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwiY2xlYXIiLCJmb3JFYWNoIiwiZW50cnkiLCJkYXRlIiwidG9Mb2NhbGVTdHJpbmciLCJhcmdzIiwiZm9ybWF0U3RyaW5nIiwidG9TdHJpbmciLCJzcGxpY2UiLCJhcHBseSIsImdsb2JhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/version.js":
/*!************************************************!*\
  !*** ../node_modules/websocket/lib/version.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ../package.json */ \"(ssr)/../node_modules/websocket/package.json\").version;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLG1IQUFtRCIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L2xpYi92ZXJzaW9uLmpzPzI0ZGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/version.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/lib/websocket.js":
/*!**************************************************!*\
  !*** ../node_modules/websocket/lib/websocket.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = {\n    \"server\": __webpack_require__(/*! ./WebSocketServer */ \"(ssr)/../node_modules/websocket/lib/WebSocketServer.js\"),\n    \"client\": __webpack_require__(/*! ./WebSocketClient */ \"(ssr)/../node_modules/websocket/lib/WebSocketClient.js\"),\n    \"router\": __webpack_require__(/*! ./WebSocketRouter */ \"(ssr)/../node_modules/websocket/lib/WebSocketRouter.js\"),\n    \"frame\": __webpack_require__(/*! ./WebSocketFrame */ \"(ssr)/../node_modules/websocket/lib/WebSocketFrame.js\"),\n    \"request\": __webpack_require__(/*! ./WebSocketRequest */ \"(ssr)/../node_modules/websocket/lib/WebSocketRequest.js\"),\n    \"connection\": __webpack_require__(/*! ./WebSocketConnection */ \"(ssr)/../node_modules/websocket/lib/WebSocketConnection.js\"),\n    \"w3cwebsocket\": __webpack_require__(/*! ./W3CWebSocket */ \"(ssr)/../node_modules/websocket/lib/W3CWebSocket.js\"),\n    \"deprecation\": __webpack_require__(/*! ./Deprecation */ \"(ssr)/../node_modules/websocket/lib/Deprecation.js\"),\n    \"version\": __webpack_require__(/*! ./version */ \"(ssr)/../node_modules/websocket/lib/version.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9saWIvd2Vic29ja2V0LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2IsVUFBaUJDLG1CQUFPQSxDQUFDO0lBQ3pCLFVBQWlCQSxtQkFBT0EsQ0FBQztJQUN6QixVQUFpQkEsbUJBQU9BLENBQUM7SUFDekIsU0FBaUJBLG1CQUFPQSxDQUFDO0lBQ3pCLFdBQWlCQSxtQkFBT0EsQ0FBQztJQUN6QixjQUFpQkEsbUJBQU9BLENBQUM7SUFDekIsZ0JBQWlCQSxtQkFBT0EsQ0FBQztJQUN6QixlQUFpQkEsbUJBQU9BLENBQUM7SUFDekIsV0FBaUJBLG1CQUFPQSxDQUFDO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4uL25vZGVfbW9kdWxlcy93ZWJzb2NrZXQvbGliL3dlYnNvY2tldC5qcz9jNGI5Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgICdzZXJ2ZXInICAgICAgIDogcmVxdWlyZSgnLi9XZWJTb2NrZXRTZXJ2ZXInKSxcbiAgICAnY2xpZW50JyAgICAgICA6IHJlcXVpcmUoJy4vV2ViU29ja2V0Q2xpZW50JyksXG4gICAgJ3JvdXRlcicgICAgICAgOiByZXF1aXJlKCcuL1dlYlNvY2tldFJvdXRlcicpLFxuICAgICdmcmFtZScgICAgICAgIDogcmVxdWlyZSgnLi9XZWJTb2NrZXRGcmFtZScpLFxuICAgICdyZXF1ZXN0JyAgICAgIDogcmVxdWlyZSgnLi9XZWJTb2NrZXRSZXF1ZXN0JyksXG4gICAgJ2Nvbm5lY3Rpb24nICAgOiByZXF1aXJlKCcuL1dlYlNvY2tldENvbm5lY3Rpb24nKSxcbiAgICAndzNjd2Vic29ja2V0JyA6IHJlcXVpcmUoJy4vVzNDV2ViU29ja2V0JyksXG4gICAgJ2RlcHJlY2F0aW9uJyAgOiByZXF1aXJlKCcuL0RlcHJlY2F0aW9uJyksXG4gICAgJ3ZlcnNpb24nICAgICAgOiByZXF1aXJlKCcuL3ZlcnNpb24nKVxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/lib/websocket.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/node_modules/debug/src/browser.js":
/*!*******************************************************************!*\
  !*** ../node_modules/websocket/node_modules/debug/src/browser.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */ \nexports = module.exports = __webpack_require__(/*! ./debug */ \"(ssr)/../node_modules/websocket/node_modules/debug/src/debug.js\");\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = \"undefined\" != typeof chrome && \"undefined\" != typeof chrome.storage ? chrome.storage.local : localstorage();\n/**\n * Colors.\n */ exports.colors = [\n    \"lightseagreen\",\n    \"forestgreen\",\n    \"goldenrod\",\n    \"dodgerblue\",\n    \"darkorchid\",\n    \"crimson\"\n];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */ function useColors() {\n    // NB: In an Electron preload script, document will be defined but not fully\n    // initialized. Since we know we're in Chrome, we'll just detect this case\n    // explicitly\n    if (false) {}\n    // is webkit? http://stackoverflow.com/a/16459606/376773\n    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n    return typeof document !== \"undefined\" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // is firebug? http://stackoverflow.com/a/398120/376773\n     false && (0) || // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // double check webkit in userAgent just in case we are in a worker\n    typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */ exports.formatters.j = function(v) {\n    try {\n        return JSON.stringify(v);\n    } catch (err) {\n        return \"[UnexpectedJSONParseError]: \" + err.message;\n    }\n};\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */ function formatArgs(args) {\n    var useColors = this.useColors;\n    args[0] = (useColors ? \"%c\" : \"\") + this.namespace + (useColors ? \" %c\" : \" \") + args[0] + (useColors ? \"%c \" : \" \") + \"+\" + exports.humanize(this.diff);\n    if (!useColors) return;\n    var c = \"color: \" + this.color;\n    args.splice(1, 0, c, \"color: inherit\");\n    // the final \"%c\" is somewhat tricky, because there could be other\n    // arguments passed either before or after the %c, so we need to\n    // figure out the correct index to insert the CSS into\n    var index = 0;\n    var lastC = 0;\n    args[0].replace(/%[a-zA-Z%]/g, function(match) {\n        if (\"%%\" === match) return;\n        index++;\n        if (\"%c\" === match) {\n            // we only are interested in the *last* %c\n            // (the user may have provided their own)\n            lastC = index;\n        }\n    });\n    args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */ function log() {\n    // this hackery is required for IE8/9, where\n    // the `console.log` function doesn't have 'apply'\n    return \"object\" === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */ function save(namespaces) {\n    try {\n        if (null == namespaces) {\n            exports.storage.removeItem(\"debug\");\n        } else {\n            exports.storage.debug = namespaces;\n        }\n    } catch (e) {}\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */ function load() {\n    var r;\n    try {\n        r = exports.storage.debug;\n    } catch (e) {}\n    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n    if (!r && typeof process !== \"undefined\" && \"env\" in process) {\n        r = process.env.DEBUG;\n    }\n    return r;\n}\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */ exports.enable(load());\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */ function localstorage() {\n    try {\n        return window.localStorage;\n    } catch (e) {}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/node_modules/debug/src/browser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/node_modules/debug/src/debug.js":
/*!*****************************************************************!*\
  !*** ../node_modules/websocket/node_modules/debug/src/debug.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */ \nexports = module.exports = createDebug.debug = createDebug[\"default\"] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(/*! ms */ \"(ssr)/../node_modules/websocket/node_modules/ms/index.js\");\n/**\n * The currently active debug mode names, and names to skip.\n */ exports.names = [];\nexports.skips = [];\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */ exports.formatters = {};\n/**\n * Previous log timestamp.\n */ var prevTime;\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */ function selectColor(namespace) {\n    var hash = 0, i;\n    for(i in namespace){\n        hash = (hash << 5) - hash + namespace.charCodeAt(i);\n        hash |= 0; // Convert to 32bit integer\n    }\n    return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */ function createDebug(namespace) {\n    function debug() {\n        // disabled?\n        if (!debug.enabled) return;\n        var self = debug;\n        // set `diff` timestamp\n        var curr = +new Date();\n        var ms = curr - (prevTime || curr);\n        self.diff = ms;\n        self.prev = prevTime;\n        self.curr = curr;\n        prevTime = curr;\n        // turn the `arguments` into a proper Array\n        var args = new Array(arguments.length);\n        for(var i = 0; i < args.length; i++){\n            args[i] = arguments[i];\n        }\n        args[0] = exports.coerce(args[0]);\n        if (\"string\" !== typeof args[0]) {\n            // anything else let's inspect with %O\n            args.unshift(\"%O\");\n        }\n        // apply any `formatters` transformations\n        var index = 0;\n        args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n            // if we encounter an escaped % then don't increase the array index\n            if (match === \"%%\") return match;\n            index++;\n            var formatter = exports.formatters[format];\n            if (\"function\" === typeof formatter) {\n                var val = args[index];\n                match = formatter.call(self, val);\n                // now we need to remove `args[index]` since it's inlined in the `format`\n                args.splice(index, 1);\n                index--;\n            }\n            return match;\n        });\n        // apply env-specific formatting (colors, etc.)\n        exports.formatArgs.call(self, args);\n        var logFn = debug.log || exports.log || console.log.bind(console);\n        logFn.apply(self, args);\n    }\n    debug.namespace = namespace;\n    debug.enabled = exports.enabled(namespace);\n    debug.useColors = exports.useColors();\n    debug.color = selectColor(namespace);\n    // env-specific initialization logic for debug instances\n    if (\"function\" === typeof exports.init) {\n        exports.init(debug);\n    }\n    return debug;\n}\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */ function enable(namespaces) {\n    exports.save(namespaces);\n    exports.names = [];\n    exports.skips = [];\n    var split = (typeof namespaces === \"string\" ? namespaces : \"\").split(/[\\s,]+/);\n    var len = split.length;\n    for(var i = 0; i < len; i++){\n        if (!split[i]) continue; // ignore empty strings\n        namespaces = split[i].replace(/\\*/g, \".*?\");\n        if (namespaces[0] === \"-\") {\n            exports.skips.push(new RegExp(\"^\" + namespaces.substr(1) + \"$\"));\n        } else {\n            exports.names.push(new RegExp(\"^\" + namespaces + \"$\"));\n        }\n    }\n}\n/**\n * Disable debug output.\n *\n * @api public\n */ function disable() {\n    exports.enable(\"\");\n}\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */ function enabled(name) {\n    var i, len;\n    for(i = 0, len = exports.skips.length; i < len; i++){\n        if (exports.skips[i].test(name)) {\n            return false;\n        }\n    }\n    for(i = 0, len = exports.names.length; i < len; i++){\n        if (exports.names[i].test(name)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */ function coerce(val) {\n    if (val instanceof Error) return val.stack || val.message;\n    return val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/node_modules/debug/src/debug.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/node_modules/debug/src/index.js":
/*!*****************************************************************!*\
  !*** ../node_modules/websocket/node_modules/debug/src/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */ \nif (typeof process !== \"undefined\" && process.type === \"renderer\") {\n    module.exports = __webpack_require__(/*! ./browser.js */ \"(ssr)/../node_modules/websocket/node_modules/debug/src/browser.js\");\n} else {\n    module.exports = __webpack_require__(/*! ./node.js */ \"(ssr)/../node_modules/websocket/node_modules/debug/src/node.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQztBQUVELElBQUksT0FBT0EsWUFBWSxlQUFlQSxRQUFRQyxJQUFJLEtBQUssWUFBWTtJQUNqRUMsNkhBQXlCO0FBQzNCLE9BQU87SUFDTEEsdUhBQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4uL25vZGVfbW9kdWxlcy93ZWJzb2NrZXQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9pbmRleC5qcz8zNjVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGV0ZWN0IEVsZWN0cm9uIHJlbmRlcmVyIHByb2Nlc3MsIHdoaWNoIGlzIG5vZGUsIGJ1dCB3ZSBzaG91bGRcbiAqIHRyZWF0IGFzIGEgYnJvd3Nlci5cbiAqL1xuXG5pZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnJvd3Nlci5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL25vZGUuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwidHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/node_modules/debug/src/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/node_modules/debug/src/node.js":
/*!****************************************************************!*\
  !*** ../node_modules/websocket/node_modules/debug/src/node.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * Module dependencies.\n */ \nvar tty = __webpack_require__(/*! tty */ \"tty\");\nvar util = __webpack_require__(/*! util */ \"util\");\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */ exports = module.exports = __webpack_require__(/*! ./debug */ \"(ssr)/../node_modules/websocket/node_modules/debug/src/debug.js\");\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n/**\n * Colors.\n */ exports.colors = [\n    6,\n    2,\n    3,\n    4,\n    5,\n    1\n];\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */ exports.inspectOpts = Object.keys(process.env).filter(function(key) {\n    return /^debug_/i.test(key);\n}).reduce(function(obj, key) {\n    // camel-case\n    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_, k) {\n        return k.toUpperCase();\n    });\n    // coerce string value into JS value\n    var val = process.env[key];\n    if (/^(yes|on|true|enabled)$/i.test(val)) val = true;\n    else if (/^(no|off|false|disabled)$/i.test(val)) val = false;\n    else if (val === \"null\") val = null;\n    else val = Number(val);\n    obj[prop] = val;\n    return obj;\n}, {});\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */ var fd = parseInt(process.env.DEBUG_FD, 10) || 2;\nif (1 !== fd && 2 !== fd) {\n    util.deprecate(function() {}, \"except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)\")();\n}\nvar stream = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */ function useColors() {\n    return \"colors\" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(fd);\n}\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */ exports.formatters.o = function(v) {\n    this.inspectOpts.colors = this.useColors;\n    return util.inspect(v, this.inspectOpts).split(\"\\n\").map(function(str) {\n        return str.trim();\n    }).join(\" \");\n};\n/**\n * Map %o to `util.inspect()`, allowing multiple lines if needed.\n */ exports.formatters.O = function(v) {\n    this.inspectOpts.colors = this.useColors;\n    return util.inspect(v, this.inspectOpts);\n};\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */ function formatArgs(args) {\n    var name = this.namespace;\n    var useColors = this.useColors;\n    if (useColors) {\n        var c = this.color;\n        var prefix = \"  \\x1b[3\" + c + \";1m\" + name + \" \" + \"\\x1b[0m\";\n        args[0] = prefix + args[0].split(\"\\n\").join(\"\\n\" + prefix);\n        args.push(\"\\x1b[3\" + c + \"m+\" + exports.humanize(this.diff) + \"\\x1b[0m\");\n    } else {\n        args[0] = new Date().toUTCString() + \" \" + name + \" \" + args[0];\n    }\n}\n/**\n * Invokes `util.format()` with the specified arguments and writes to `stream`.\n */ function log() {\n    return stream.write(util.format.apply(util, arguments) + \"\\n\");\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */ function save(namespaces) {\n    if (null == namespaces) {\n        // If you set a process.env field to null or undefined, it gets cast to the\n        // string 'null' or 'undefined'. Just delete instead.\n        delete process.env.DEBUG;\n    } else {\n        process.env.DEBUG = namespaces;\n    }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */ function load() {\n    return process.env.DEBUG;\n}\n/**\n * Copied from `node/src/node.js`.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n */ function createWritableStdioStream(fd) {\n    var stream;\n    var tty_wrap = process.binding(\"tty_wrap\");\n    // Note stream._type is used for test-module-load-list.js\n    switch(tty_wrap.guessHandleType(fd)){\n        case \"TTY\":\n            stream = new tty.WriteStream(fd);\n            stream._type = \"tty\";\n            // Hack to have stream not keep the event loop alive.\n            // See https://github.com/joyent/node/issues/1726\n            if (stream._handle && stream._handle.unref) {\n                stream._handle.unref();\n            }\n            break;\n        case \"FILE\":\n            var fs = __webpack_require__(/*! fs */ \"fs\");\n            stream = new fs.SyncWriteStream(fd, {\n                autoClose: false\n            });\n            stream._type = \"fs\";\n            break;\n        case \"PIPE\":\n        case \"TCP\":\n            var net = __webpack_require__(/*! net */ \"net\");\n            stream = new net.Socket({\n                fd: fd,\n                readable: false,\n                writable: true\n            });\n            // FIXME Should probably have an option in net.Socket to create a\n            // stream from an existing fd which is writable only. But for now\n            // we'll just add this hack and set the `readable` member to false.\n            // Test: ./node test/fixtures/echo.js < /etc/passwd\n            stream.readable = false;\n            stream.read = null;\n            stream._type = \"pipe\";\n            // FIXME Hack to have stream not keep the event loop alive.\n            // See https://github.com/joyent/node/issues/1726\n            if (stream._handle && stream._handle.unref) {\n                stream._handle.unref();\n            }\n            break;\n        default:\n            // Probably an error on in uv_guess_handle()\n            throw new Error(\"Implement me. Unknown stream file type!\");\n    }\n    // For supporting legacy API we put the FD here.\n    stream.fd = fd;\n    stream._isStdio = true;\n    return stream;\n}\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */ function init(debug) {\n    debug.inspectOpts = {};\n    var keys = Object.keys(exports.inspectOpts);\n    for(var i = 0; i < keys.length; i++){\n        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n    }\n}\n/**\n * Enable namespaces listed in `process.env.DEBUG` initially.\n */ exports.enable(load());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/node_modules/debug/src/node.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/node_modules/ms/index.js":
/*!**********************************************************!*\
  !*** ../node_modules/websocket/node_modules/ms/index.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Helpers.\n */ \nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */ module.exports = function(val, options) {\n    options = options || {};\n    var type = typeof val;\n    if (type === \"string\" && val.length > 0) {\n        return parse(val);\n    } else if (type === \"number\" && isNaN(val) === false) {\n        return options.long ? fmtLong(val) : fmtShort(val);\n    }\n    throw new Error(\"val is not a non-empty string or a valid number. val=\" + JSON.stringify(val));\n};\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */ function parse(str) {\n    str = String(str);\n    if (str.length > 100) {\n        return;\n    }\n    var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n    if (!match) {\n        return;\n    }\n    var n = parseFloat(match[1]);\n    var type = (match[2] || \"ms\").toLowerCase();\n    switch(type){\n        case \"years\":\n        case \"year\":\n        case \"yrs\":\n        case \"yr\":\n        case \"y\":\n            return n * y;\n        case \"days\":\n        case \"day\":\n        case \"d\":\n            return n * d;\n        case \"hours\":\n        case \"hour\":\n        case \"hrs\":\n        case \"hr\":\n        case \"h\":\n            return n * h;\n        case \"minutes\":\n        case \"minute\":\n        case \"mins\":\n        case \"min\":\n        case \"m\":\n            return n * m;\n        case \"seconds\":\n        case \"second\":\n        case \"secs\":\n        case \"sec\":\n        case \"s\":\n            return n * s;\n        case \"milliseconds\":\n        case \"millisecond\":\n        case \"msecs\":\n        case \"msec\":\n        case \"ms\":\n            return n;\n        default:\n            return undefined;\n    }\n}\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */ function fmtShort(ms) {\n    if (ms >= d) {\n        return Math.round(ms / d) + \"d\";\n    }\n    if (ms >= h) {\n        return Math.round(ms / h) + \"h\";\n    }\n    if (ms >= m) {\n        return Math.round(ms / m) + \"m\";\n    }\n    if (ms >= s) {\n        return Math.round(ms / s) + \"s\";\n    }\n    return ms + \"ms\";\n}\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */ function fmtLong(ms) {\n    return plural(ms, d, \"day\") || plural(ms, h, \"hour\") || plural(ms, m, \"minute\") || plural(ms, s, \"second\") || ms + \" ms\";\n}\n/**\n * Pluralization helper.\n */ function plural(ms, n, name) {\n    if (ms < n) {\n        return;\n    }\n    if (ms < n * 1.5) {\n        return Math.floor(ms / n) + \" \" + name;\n    }\n    return Math.ceil(ms / n) + \" \" + name + \"s\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUM7QUFFRCxJQUFJQSxJQUFJO0FBQ1IsSUFBSUMsSUFBSUQsSUFBSTtBQUNaLElBQUlFLElBQUlELElBQUk7QUFDWixJQUFJRSxJQUFJRCxJQUFJO0FBQ1osSUFBSUUsSUFBSUQsSUFBSTtBQUVaOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUVERSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsR0FBRyxFQUFFQyxPQUFPO0lBQ3BDQSxVQUFVQSxXQUFXLENBQUM7SUFDdEIsSUFBSUMsT0FBTyxPQUFPRjtJQUNsQixJQUFJRSxTQUFTLFlBQVlGLElBQUlHLE1BQU0sR0FBRyxHQUFHO1FBQ3ZDLE9BQU9DLE1BQU1KO0lBQ2YsT0FBTyxJQUFJRSxTQUFTLFlBQVlHLE1BQU1MLFNBQVMsT0FBTztRQUNwRCxPQUFPQyxRQUFRSyxJQUFJLEdBQUdDLFFBQVFQLE9BQU9RLFNBQVNSO0lBQ2hEO0lBQ0EsTUFBTSxJQUFJUyxNQUNSLDBEQUNFQyxLQUFLQyxTQUFTLENBQUNYO0FBRXJCO0FBRUE7Ozs7OztDQU1DLEdBRUQsU0FBU0ksTUFBTVEsR0FBRztJQUNoQkEsTUFBTUMsT0FBT0Q7SUFDYixJQUFJQSxJQUFJVCxNQUFNLEdBQUcsS0FBSztRQUNwQjtJQUNGO0lBQ0EsSUFBSVcsUUFBUSx3SEFBd0hDLElBQUksQ0FDdElIO0lBRUYsSUFBSSxDQUFDRSxPQUFPO1FBQ1Y7SUFDRjtJQUNBLElBQUlFLElBQUlDLFdBQVdILEtBQUssQ0FBQyxFQUFFO0lBQzNCLElBQUlaLE9BQU8sQ0FBQ1ksS0FBSyxDQUFDLEVBQUUsSUFBSSxJQUFHLEVBQUdJLFdBQVc7SUFDekMsT0FBUWhCO1FBQ04sS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPYyxJQUFJbkI7UUFDYixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPbUIsSUFBSXBCO1FBQ2IsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPb0IsSUFBSXJCO1FBQ2IsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPcUIsSUFBSXRCO1FBQ2IsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPc0IsSUFBSXZCO1FBQ2IsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPdUI7UUFDVDtZQUNFLE9BQU9HO0lBQ1g7QUFDRjtBQUVBOzs7Ozs7Q0FNQyxHQUVELFNBQVNYLFNBQVNZLEVBQUU7SUFDbEIsSUFBSUEsTUFBTXhCLEdBQUc7UUFDWCxPQUFPeUIsS0FBS0MsS0FBSyxDQUFDRixLQUFLeEIsS0FBSztJQUM5QjtJQUNBLElBQUl3QixNQUFNekIsR0FBRztRQUNYLE9BQU8wQixLQUFLQyxLQUFLLENBQUNGLEtBQUt6QixLQUFLO0lBQzlCO0lBQ0EsSUFBSXlCLE1BQU0xQixHQUFHO1FBQ1gsT0FBTzJCLEtBQUtDLEtBQUssQ0FBQ0YsS0FBSzFCLEtBQUs7SUFDOUI7SUFDQSxJQUFJMEIsTUFBTTNCLEdBQUc7UUFDWCxPQUFPNEIsS0FBS0MsS0FBSyxDQUFDRixLQUFLM0IsS0FBSztJQUM5QjtJQUNBLE9BQU8yQixLQUFLO0FBQ2Q7QUFFQTs7Ozs7O0NBTUMsR0FFRCxTQUFTYixRQUFRYSxFQUFFO0lBQ2pCLE9BQU9HLE9BQU9ILElBQUl4QixHQUFHLFVBQ25CMkIsT0FBT0gsSUFBSXpCLEdBQUcsV0FDZDRCLE9BQU9ILElBQUkxQixHQUFHLGFBQ2Q2QixPQUFPSCxJQUFJM0IsR0FBRyxhQUNkMkIsS0FBSztBQUNUO0FBRUE7O0NBRUMsR0FFRCxTQUFTRyxPQUFPSCxFQUFFLEVBQUVKLENBQUMsRUFBRVEsSUFBSTtJQUN6QixJQUFJSixLQUFLSixHQUFHO1FBQ1Y7SUFDRjtJQUNBLElBQUlJLEtBQUtKLElBQUksS0FBSztRQUNoQixPQUFPSyxLQUFLSSxLQUFLLENBQUNMLEtBQUtKLEtBQUssTUFBTVE7SUFDcEM7SUFDQSxPQUFPSCxLQUFLSyxJQUFJLENBQUNOLEtBQUtKLEtBQUssTUFBTVEsT0FBTztBQUMxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0L25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcz8wZTUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiJdLCJuYW1lcyI6WyJzIiwibSIsImgiLCJkIiwieSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2YWwiLCJvcHRpb25zIiwidHlwZSIsImxlbmd0aCIsInBhcnNlIiwiaXNOYU4iLCJsb25nIiwiZm10TG9uZyIsImZtdFNob3J0IiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwic3RyIiwiU3RyaW5nIiwibWF0Y2giLCJleGVjIiwibiIsInBhcnNlRmxvYXQiLCJ0b0xvd2VyQ2FzZSIsInVuZGVmaW5lZCIsIm1zIiwiTWF0aCIsInJvdW5kIiwicGx1cmFsIiwibmFtZSIsImZsb29yIiwiY2VpbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/node_modules/ms/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/vendor/FastBufferList.js":
/*!**********************************************************!*\
  !*** ../node_modules/websocket/vendor/FastBufferList.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// This file was copied from https://github.com/substack/node-bufferlist\n// and modified to be able to copy bytes from the bufferlist directly into\n// a pre-existing fixed-size buffer without an additional memory allocation.\n// bufferlist.js\n// Treat a linked list of buffers as a single variable-size buffer.\n\nvar Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar bufferAllocUnsafe = (__webpack_require__(/*! ../lib/utils */ \"(ssr)/../node_modules/websocket/lib/utils.js\").bufferAllocUnsafe);\nmodule.exports = BufferList;\nmodule.exports.BufferList = BufferList; // backwards compatibility\nfunction BufferList(opts) {\n    if (!(this instanceof BufferList)) return new BufferList(opts);\n    EventEmitter.call(this);\n    var self = this;\n    if (typeof opts == \"undefined\") opts = {};\n    // default encoding to use for take(). Leaving as 'undefined'\n    // makes take() return a Buffer instead.\n    self.encoding = opts.encoding;\n    var head = {\n        next: null,\n        buffer: null\n    };\n    var last = {\n        next: null,\n        buffer: null\n    };\n    // length can get negative when advanced past the end\n    // and this is the desired behavior\n    var length = 0;\n    self.__defineGetter__(\"length\", function() {\n        return length;\n    });\n    // keep an offset of the head to decide when to head = head.next\n    var offset = 0;\n    // Write to the bufferlist. Emits 'write'. Always returns true.\n    self.write = function(buf) {\n        if (!head.buffer) {\n            head.buffer = buf;\n            last = head;\n        } else {\n            last.next = {\n                next: null,\n                buffer: buf\n            };\n            last = last.next;\n        }\n        length += buf.length;\n        self.emit(\"write\", buf);\n        return true;\n    };\n    self.end = function(buf) {\n        if (Buffer.isBuffer(buf)) self.write(buf);\n    };\n    // Push buffers to the end of the linked list. (deprecated)\n    // Return this (self).\n    self.push = function() {\n        var args = [].concat.apply([], arguments);\n        args.forEach(self.write);\n        return self;\n    };\n    // For each buffer, perform some action.\n    // If fn's result is a true value, cut out early.\n    // Returns this (self).\n    self.forEach = function(fn) {\n        if (!head.buffer) return bufferAllocUnsafe(0);\n        if (head.buffer.length - offset <= 0) return self;\n        var firstBuf = head.buffer.slice(offset);\n        var b = {\n            buffer: firstBuf,\n            next: head.next\n        };\n        while(b && b.buffer){\n            var r = fn(b.buffer);\n            if (r) break;\n            b = b.next;\n        }\n        return self;\n    };\n    // Create a single Buffer out of all the chunks or some subset specified by\n    // start and one-past the end (like slice) in bytes.\n    self.join = function(start, end) {\n        if (!head.buffer) return bufferAllocUnsafe(0);\n        if (start == undefined) start = 0;\n        if (end == undefined) end = self.length;\n        var big = bufferAllocUnsafe(end - start);\n        var ix = 0;\n        self.forEach(function(buffer) {\n            if (start < ix + buffer.length && ix < end) {\n                // at least partially contained in the range\n                buffer.copy(big, Math.max(0, ix - start), Math.max(0, start - ix), Math.min(buffer.length, end - ix));\n            }\n            ix += buffer.length;\n            if (ix > end) return true; // stop processing past end\n        });\n        return big;\n    };\n    self.joinInto = function(targetBuffer, targetStart, sourceStart, sourceEnd) {\n        if (!head.buffer) return new bufferAllocUnsafe(0);\n        if (sourceStart == undefined) sourceStart = 0;\n        if (sourceEnd == undefined) sourceEnd = self.length;\n        var big = targetBuffer;\n        if (big.length - targetStart < sourceEnd - sourceStart) {\n            throw new Error(\"Insufficient space available in target Buffer.\");\n        }\n        var ix = 0;\n        self.forEach(function(buffer) {\n            if (sourceStart < ix + buffer.length && ix < sourceEnd) {\n                // at least partially contained in the range\n                buffer.copy(big, Math.max(targetStart, targetStart + ix - sourceStart), Math.max(0, sourceStart - ix), Math.min(buffer.length, sourceEnd - ix));\n            }\n            ix += buffer.length;\n            if (ix > sourceEnd) return true; // stop processing past end\n        });\n        return big;\n    };\n    // Advance the buffer stream by n bytes.\n    // If n the aggregate advance offset passes the end of the buffer list,\n    // operations such as .take() will return empty strings until enough data is\n    // pushed.\n    // Returns this (self).\n    self.advance = function(n) {\n        offset += n;\n        length -= n;\n        while(head.buffer && offset >= head.buffer.length){\n            offset -= head.buffer.length;\n            head = head.next ? head.next : {\n                buffer: null,\n                next: null\n            };\n        }\n        if (head.buffer === null) last = {\n            next: null,\n            buffer: null\n        };\n        self.emit(\"advance\", n);\n        return self;\n    };\n    // Take n bytes from the start of the buffers.\n    // Returns a string.\n    // If there are less than n bytes in all the buffers or n is undefined,\n    // returns the entire concatenated buffer string.\n    self.take = function(n, encoding) {\n        if (n == undefined) n = self.length;\n        else if (typeof n !== \"number\") {\n            encoding = n;\n            n = self.length;\n        }\n        var b = head;\n        if (!encoding) encoding = self.encoding;\n        if (encoding) {\n            var acc = \"\";\n            self.forEach(function(buffer) {\n                if (n <= 0) return true;\n                acc += buffer.toString(encoding, 0, Math.min(n, buffer.length));\n                n -= buffer.length;\n            });\n            return acc;\n        } else {\n            // If no 'encoding' is specified, then return a Buffer.\n            return self.join(0, n);\n        }\n    };\n    // The entire concatenated buffer as a string.\n    self.toString = function() {\n        return self.take(\"binary\");\n    };\n}\n(__webpack_require__(/*! util */ \"util\").inherits)(BufferList, EventEmitter);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/websocket/vendor/FastBufferList.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/websocket/package.json":
/*!**********************************************!*\
  !*** ../node_modules/websocket/package.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"websocket","description":"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.","keywords":["websocket","websockets","socket","networking","comet","push","RFC-6455","realtime","server","client"],"author":"Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)","contributors":["Iñaki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)"],"version":"1.0.34","repository":{"type":"git","url":"https://github.com/theturtle32/WebSocket-Node.git"},"homepage":"https://github.com/theturtle32/WebSocket-Node","engines":{"node":">=4.0.0"},"dependencies":{"bufferutil":"^4.0.1","debug":"^2.2.0","es5-ext":"^0.10.50","typedarray-to-buffer":"^3.1.5","utf-8-validate":"^5.0.2","yaeti":"^0.0.6"},"devDependencies":{"buffer-equal":"^1.0.0","gulp":"^4.0.2","gulp-jshint":"^2.0.4","jshint-stylish":"^2.2.1","jshint":"^2.0.0","tape":"^4.9.1"},"config":{"verbose":false},"scripts":{"test":"tape test/unit/*.js","gulp":"gulp"},"main":"index","directories":{"lib":"./lib"},"browser":"lib/browser.js","license":"Apache-2.0"}');

/***/ })

};
;