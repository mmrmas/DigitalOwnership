"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/estree-util-visit";
exports.ids = ["vendor-chunks/estree-util-visit"];
exports.modules = {

/***/ "(ssr)/./node_modules/estree-util-visit/lib/color.node.js":
/*!**********************************************************!*\
  !*** ./node_modules/estree-util-visit/lib/color.node.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   color: () => (/* binding */ color)\n/* harmony export */ });\n/**\n * @param {string} d\n * @returns {string}\n */ function color(d) {\n    return \"\\x1b[33m\" + d + \"\\x1b[39m\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXN0cmVlLXV0aWwtdmlzaXQvbGliL2NvbG9yLm5vZGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQUNNLFNBQVNBLE1BQU1DLENBQUM7SUFDckIsT0FBTyxhQUFlQSxJQUFJO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL2VzdHJlZS11dGlsLXZpc2l0L2xpYi9jb2xvci5ub2RlLmpzPzBkMDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbG9yKGQpIHtcbiAgcmV0dXJuICdcXHUwMDFCWzMzbScgKyBkICsgJ1xcdTAwMUJbMzltJ1xufVxuIl0sIm5hbWVzIjpbImNvbG9yIiwiZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/estree-util-visit/lib/color.node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/estree-util-visit/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/estree-util-visit/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTINUE: () => (/* binding */ CONTINUE),\n/* harmony export */   EXIT: () => (/* binding */ EXIT),\n/* harmony export */   SKIP: () => (/* binding */ SKIP),\n/* harmony export */   visit: () => (/* binding */ visit)\n/* harmony export */ });\n/* harmony import */ var estree_util_visit_do_not_use_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-visit/do-not-use-color */ \"(ssr)/./node_modules/estree-util-visit/lib/color.node.js\");\n/**\n * @typedef {import('estree-jsx').Node} Node\n */ /**\n * @typedef {CONTINUE | EXIT | SKIP} Action\n *   Union of the action types.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed), when moving in an array.\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n */ /**\n * @callback Visitor\n *   Handle a node.\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node`, the `Visitor` should\n *   return a new `Index` to specify the sibling to traverse after `node` is\n *   traversed.\n *   Adding or removing next siblings of `node` is handled as expected without\n *   needing to return a new `Index`.\n * @param {Node} node\n *   Found node.\n * @param {string | undefined} key\n *   Field at which `node` lives in its parent (or where a list of nodes lives).\n * @param {number | undefined} index\n *   Index where `node` lives if `parent[key]` is an array.\n * @param {Array<Node>} ancestors\n *   Ancestors of `node`.\n * @returns {Action | ActionTuple | Index | null | undefined | void}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */ /**\n * @typedef Visitors\n *   Handle nodes when entering (preorder) and leaving (postorder).\n * @property {Visitor | null | undefined} [enter]\n *   Handle nodes when entering (preorder) (optional).\n * @property {Visitor | null | undefined} [leave]\n *   Handle nodes when leaving (postorder) (optional).\n */ \nconst own = {}.hasOwnProperty;\n/**\n * Continue traversing as normal.\n */ const CONTINUE = Symbol(\"continue\");\n/**\n * Stop traversing immediately.\n */ const EXIT = Symbol(\"exit\");\n/**\n * Do not traverse this nodeâ€™s children.\n */ const SKIP = Symbol(\"skip\");\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) and/or *postorder* (**LRN**).\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor(s) when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * @param {Node} tree\n *   Tree to traverse\n * @param {Visitor | Visitors | null | undefined} [visitor]\n *   Handle each node (optional).\n * @returns {undefined}\n *   Nothing.\n */ function visit(tree, visitor) {\n    /** @type {Visitor | undefined} */ let enter;\n    /** @type {Visitor | undefined} */ let leave;\n    if (typeof visitor === \"function\") {\n        enter = visitor;\n    } else if (visitor && typeof visitor === \"object\") {\n        if (visitor.enter) enter = visitor.enter;\n        if (visitor.leave) leave = visitor.leave;\n    }\n    build(tree, undefined, undefined, [])();\n    /**\n   * @param {Node} node\n   * @param {string | undefined} key\n   * @param {number | undefined} index\n   * @param {Array<Node>} parents\n   */ function build(node, key, index, parents) {\n        if (nodelike(node)) {\n            visit.displayName = \"node (\" + (0,estree_util_visit_do_not_use_color__WEBPACK_IMPORTED_MODULE_0__.color)(node.type) + \")\";\n        }\n        return visit;\n        /**\n     * @returns {ActionTuple}\n     */ function visit() {\n            /** @type {ActionTuple} */ const result = enter ? toResult(enter(node, key, index, parents)) : [];\n            if (result[0] === EXIT) {\n                return result;\n            }\n            if (result[0] !== SKIP) {\n                /** @type {keyof node} */ let cKey;\n                for(cKey in node){\n                    if (own.call(node, cKey) && node[cKey] && typeof node[cKey] === \"object\" && // @ts-expect-error: custom esast extension.\n                    cKey !== \"data\" && // @ts-expect-error: custom esast extension.\n                    cKey !== \"position\") {\n                        const grandparents = parents.concat(node);\n                        /** @type {unknown} */ const value = node[cKey];\n                        if (Array.isArray(value)) {\n                            const nodes = /** @type {Array<unknown>} */ value;\n                            let cIndex = 0;\n                            while(cIndex > -1 && cIndex < nodes.length){\n                                const subvalue = nodes[cIndex];\n                                if (nodelike(subvalue)) {\n                                    const subresult = build(subvalue, cKey, cIndex, grandparents)();\n                                    if (subresult[0] === EXIT) return subresult;\n                                    cIndex = typeof subresult[1] === \"number\" ? subresult[1] : cIndex + 1;\n                                } else {\n                                    cIndex++;\n                                }\n                            }\n                        } else if (nodelike(value)) {\n                            const subresult = build(value, cKey, undefined, grandparents)();\n                            if (subresult[0] === EXIT) return subresult;\n                        }\n                    }\n                }\n            }\n            return leave ? toResult(leave(node, key, index, parents)) : result;\n        }\n    }\n}\n/**\n * Turn a return value into a clean result.\n *\n * @param {Action | ActionTuple | Index | null | undefined | void} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */ function toResult(value) {\n    if (Array.isArray(value)) {\n        return value;\n    }\n    if (typeof value === \"number\") {\n        return [\n            CONTINUE,\n            value\n        ];\n    }\n    return [\n        value\n    ];\n}\n/**\n * Check if something looks like a node.\n *\n * @param {unknown} value\n *   Anything.\n * @returns {value is Node}\n *   Whether `value` looks like a node.\n */ function nodelike(value) {\n    return Boolean(value && typeof value === \"object\" && \"type\" in value && typeof value.type === \"string\" && value.type.length > 0);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/estree-util-visit/lib/index.js\n");

/***/ })

};
;