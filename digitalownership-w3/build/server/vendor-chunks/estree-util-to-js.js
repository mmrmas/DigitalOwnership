"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/estree-util-to-js";
exports.ids = ["vendor-chunks/estree-util-to-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/estree-util-to-js/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/estree-util-to-js/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toJs: () => (/* binding */ toJs)\n/* harmony export */ });\n/* harmony import */ var astring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! astring */ \"(ssr)/./node_modules/astring/dist/astring.mjs\");\n/**\n * @typedef {import('astring').State} State\n * @typedef {import('estree-jsx').Node} Nodes\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator\n * @typedef {import('source-map').RawSourceMap} Map\n */ /**\n * @typedef {Record<Nodes['type'], Handler>} Generator\n *\n * @callback Handler\n *  Handle a particular node.\n * @param {Generator} this\n *   `astring` generator.\n * @param {any} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {Partial<import('astring').Generator>} Handlers\n */ /**\n * @typedef {OptionsWithMaybeMapGenerator} Options\n *   Configuration.\n *\n * @typedef OptionsFieldsBase\n *   Base shared option fields.\n * @property {Handlers | null | undefined} [handlers]\n *   Object mapping node types to functions handling the corresponding nodes.\n *\n * @typedef OptionsFieldsWithoutSourceMapGenerator\n *   Extra option fields where there’s definitely no source map generator.\n * @property {null | undefined} [SourceMapGenerator]\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in; this works if there is positional info on nodes.\n * @property {null | undefined} [filePath]\n *   Path to input file; only used in source map.\n *\n * @typedef OptionsFieldsWithSourceMapGenerator\n *   Extra option fields where there’s definitely a source map generator.\n * @property {SourceMapGenerator} SourceMapGenerator\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in; this works if there is positional info on nodes.\n * @property {string | null | undefined} [filePath]\n *   Path to input file; only used in source map.\n *\n * @typedef OptionsFieldsMaybeSourceMapGenerator\n *   Extra option fields where there may or may not be a source map generator.\n * @property {SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Generate a source map by passing a `SourceMapGenerator` from `source-map`\n *   in; this works if there is positional info on nodes.\n * @property {string | null | undefined} [filePath]\n *   Path to input file; only used in source map.\n *\n * @typedef {OptionsFieldsBase & OptionsFieldsWithoutSourceMapGenerator} OptionsWithoutSourceMapGenerator\n *   Options where there’s definitely no source map generator.\n * @typedef {OptionsFieldsBase & OptionsFieldsWithSourceMapGenerator} OptionsWithSourceMapGenerator\n *   Options where there’s definitely a source map generator.\n * @typedef {OptionsFieldsBase & OptionsFieldsMaybeSourceMapGenerator} OptionsWithMaybeMapGenerator\n *   Options where there may or may not be a source map generator.\n *\n * @typedef {ResultWithMaybeSourceMapGenerator} Result\n *   Result.\n *\n * @typedef ResultFieldsBase\n *   Base shared result fields.\n * @property {string} value\n *   Serialized JavaScript.\n *\n * @typedef ResultFieldsWithoutSourceMapGenerator\n *   Extra result fields where there’s definitely no source map generator.\n * @property {undefined} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` is passed.\n *\n * @typedef ResultFieldsWithSourceMapGenerator\n *   Extra result fields where there’s definitely a source map generator.\n * @property {Map} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` is not passed.\n *\n * @typedef ResultFieldsMaybeSourceMapGenerator\n *   Extra result fields where there may or may not be a source map generator.\n * @property {Map | undefined} map\n *   Source map as (parsed) JSON, if `SourceMapGenerator` might be passed.\n *\n * @typedef {ResultFieldsBase & ResultFieldsWithoutSourceMapGenerator} ResultWithoutSourceMapGenerator\n *   Result where there’s definitely no source map generator.\n * @typedef {ResultFieldsBase & ResultFieldsWithSourceMapGenerator} ResultWithSourceMapGenerator\n *   Result where there’s definitely a source map generator.\n * @typedef {ResultFieldsBase & ResultFieldsMaybeSourceMapGenerator} ResultWithMaybeSourceMapGenerator\n *   Result where there may or may not be a source map generator.\n */ \n/** @type {Options} */ const emptyOptions = {};\n/**\n * Serialize an estree as JavaScript.\n *\n * @overload\n * @param {Program} tree\n * @param {OptionsWithSourceMapGenerator} options\n * @returns {ResultWithSourceMapGenerator}\n *\n * @overload\n * @param {Program} tree\n * @param {OptionsWithMaybeMapGenerator} options\n * @returns {ResultWithMaybeSourceMapGenerator}\n *\n * @overload\n * @param {Program} tree\n * @param {OptionsWithoutSourceMapGenerator | null | undefined} [options]\n * @returns {ResultWithoutSourceMapGenerator}\n *\n * @param {Program} tree\n *   Estree (esast).\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Result}\n *   Result, optionally with source map.\n */ function toJs(tree, options) {\n    const { SourceMapGenerator, filePath, handlers } = options || emptyOptions;\n    const sourceMap = SourceMapGenerator ? new SourceMapGenerator({\n        file: filePath || \"<unknown>.js\"\n    }) : undefined;\n    const value = (0,astring__WEBPACK_IMPORTED_MODULE_0__.generate)(tree, // @ts-expect-error: `sourceMap` can be undefined, `astring` types are buggy.\n    {\n        comments: true,\n        generator: {\n            ...astring__WEBPACK_IMPORTED_MODULE_0__.GENERATOR,\n            ...handlers\n        },\n        sourceMap: sourceMap || undefined\n    });\n    const map = sourceMap ? sourceMap.toJSON() : undefined;\n    return {\n        value,\n        map\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/estree-util-to-js/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/estree-util-to-js/lib/jsx.js":
/*!***************************************************!*\
  !*** ./node_modules/estree-util-to-js/lib/jsx.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsx: () => (/* binding */ jsx)\n/* harmony export */ });\n/**\n * @typedef {import('estree-jsx').JSXAttribute} JsxAttribute\n * @typedef {import('estree-jsx').JSXClosingElement} JsxClosingElement\n * @typedef {import('estree-jsx').JSXClosingFragment} JsxClosingFragment\n * @typedef {import('estree-jsx').JSXElement} JsxElement\n * @typedef {import('estree-jsx').JSXExpressionContainer} JsxExpressionContainer\n * @typedef {import('estree-jsx').JSXFragment} JsxFragment\n * @typedef {import('estree-jsx').JSXIdentifier} JsxIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JsxMemberExpression\n * @typedef {import('estree-jsx').JSXNamespacedName} JsxNamespacedName\n * @typedef {import('estree-jsx').JSXOpeningElement} JsxOpeningElement\n * @typedef {import('estree-jsx').JSXOpeningFragment} JsxOpeningFragment\n * @typedef {import('estree-jsx').JSXSpreadAttribute} JsxSpreadAttribute\n * @typedef {import('estree-jsx').JSXText} JsxText\n *\n * @typedef {import('./index.js').Generator} Generator\n * @typedef {import('./index.js').State} State\n */ const jsx = {\n    JSXAttribute: jsxAttribute,\n    JSXClosingElement: jsxClosingElement,\n    JSXClosingFragment: jsxClosingFragment,\n    JSXElement: jsxElement,\n    JSXEmptyExpression: jsxEmptyExpression,\n    JSXExpressionContainer: jsxExpressionContainer,\n    JSXFragment: jsxFragment,\n    JSXIdentifier: jsxIdentifier,\n    JSXMemberExpression: jsxMemberExpression,\n    JSXNamespacedName: jsxNamespacedName,\n    JSXOpeningElement: jsxOpeningElement,\n    JSXOpeningFragment: jsxOpeningFragment,\n    JSXSpreadAttribute: jsxSpreadAttribute,\n    JSXText: jsxText\n};\n/**\n * `attr`\n * `attr=\"something\"`\n * `attr={1}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxAttribute} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxAttribute(node, state) {\n    this[node.name.type](node.name, state);\n    if (node.value !== null && node.value !== undefined) {\n        state.write(\"=\");\n        // Encode double quotes in attribute values.\n        if (node.value.type === \"Literal\") {\n            state.write('\"' + encodeJsx(String(node.value.value)).replace(/\"/g, \"&quot;\") + '\"', node);\n        } else {\n            this[node.value.type](node.value, state);\n        }\n    }\n}\n/**\n * `</div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxClosingElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxClosingElement(node, state) {\n    state.write(\"</\");\n    this[node.name.type](node.name, state);\n    state.write(\">\");\n}\n/**\n * `</>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxClosingFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxClosingFragment(node, state) {\n    state.write(\"</>\", node);\n}\n/**\n * `<div />`\n * `<div></div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxElement(node, state) {\n    let index = -1;\n    this[node.openingElement.type](node.openingElement, state);\n    if (node.children) {\n        while(++index < node.children.length){\n            const child = node.children[index];\n            // Supported in types but not by Acorn.\n            /* c8 ignore next 3 */ if (child.type === \"JSXSpreadChild\") {\n                throw new Error(\"JSX spread children are not supported\");\n            }\n            this[child.type](child, state);\n        }\n    }\n    if (node.closingElement) {\n        this[node.closingElement.type](node.closingElement, state);\n    }\n}\n/**\n * `{}` (always in a `JSXExpressionContainer`, which does the curlies)\n *\n * @this {Generator}\n *   `astring` generator.\n * @returns {undefined}\n *   Nothing.\n */ function jsxEmptyExpression() {}\n/**\n * `{expression}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxExpressionContainer} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxExpressionContainer(node, state) {\n    state.write(\"{\");\n    this[node.expression.type](node.expression, state);\n    state.write(\"}\");\n}\n/**\n * `<></>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxFragment(node, state) {\n    let index = -1;\n    this[node.openingFragment.type](node.openingFragment, state);\n    if (node.children) {\n        while(++index < node.children.length){\n            const child = node.children[index];\n            // Supported in types but not by Acorn.\n            /* c8 ignore next 3 */ if (child.type === \"JSXSpreadChild\") {\n                throw new Error(\"JSX spread children are not supported\");\n            }\n            this[child.type](child, state);\n        }\n    }\n    this[node.closingFragment.type](node.closingFragment, state);\n}\n/**\n * `div`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxIdentifier} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxIdentifier(node, state) {\n    state.write(node.name, node);\n}\n/**\n * `member.expression`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxMemberExpression} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxMemberExpression(node, state) {\n    this[node.object.type](node.object, state);\n    state.write(\".\");\n    this[node.property.type](node.property, state);\n}\n/**\n * `ns:name`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxNamespacedName} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxNamespacedName(node, state) {\n    this[node.namespace.type](node.namespace, state);\n    state.write(\":\");\n    this[node.name.type](node.name, state);\n}\n/**\n * `<div>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxOpeningElement} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxOpeningElement(node, state) {\n    let index = -1;\n    state.write(\"<\");\n    this[node.name.type](node.name, state);\n    if (node.attributes) {\n        while(++index < node.attributes.length){\n            state.write(\" \");\n            this[node.attributes[index].type](node.attributes[index], state);\n        }\n    }\n    state.write(node.selfClosing ? \" />\" : \">\");\n}\n/**\n * `<>`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxOpeningFragment} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxOpeningFragment(node, state) {\n    state.write(\"<>\", node);\n}\n/**\n * `{...argument}`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxSpreadAttribute} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxSpreadAttribute(node, state) {\n    state.write(\"{\");\n    // eslint-disable-next-line new-cap\n    this.SpreadElement(node, state);\n    state.write(\"}\");\n}\n/**\n * `!`\n *\n * @this {Generator}\n *   `astring` generator.\n * @param {JsxText} node\n *   Node to serialize.\n * @param {State} state\n *   Info passed around.\n * @returns {undefined}\n *   Nothing.\n */ function jsxText(node, state) {\n    state.write(encodeJsx(node.value).replace(/[<>{}]/g, replaceJsxChar), node);\n}\n/**\n * Make sure that character references don’t pop up.\n *\n * For example, the text `&copy;` should stay that way, and not turn into `©`.\n * We could encode all `&` (easy but verbose) or look for actual valid\n * references (complex but cleanest output).\n * Looking for the 2nd character gives us a middle ground.\n * The `#` is for (decimal and hexadecimal) numeric references, the letters\n * are for the named references.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */ function encodeJsx(value) {\n    return value.replace(/&(?=[#a-z])/gi, \"&amp;\");\n}\n/**\n * @param {string} $0\n * @returns {string}\n */ function replaceJsxChar($0) {\n    return $0 === \"<\" ? \"&lt;\" : $0 === \">\" ? \"&gt;\" : $0 === \"{\" ? \"&#123;\" : \"&#125;\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/estree-util-to-js/lib/jsx.js\n");

/***/ })

};
;