"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-mdx-expression";
exports.ids = ["vendor-chunks/mdast-util-mdx-expression"];
exports.modules = {

/***/ "(ssr)/./node_modules/mdast-util-mdx-expression/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/mdast-util-mdx-expression/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxExpressionFromMarkdown: () => (/* binding */ mdxExpressionFromMarkdown),\n/* harmony export */   mdxExpressionToMarkdown: () => (/* binding */ mdxExpressionToMarkdown)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/**\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('../index.js').MdxFlowExpression} MdxFlowExpression\n * @typedef {import('../index.js').MdxTextExpression} MdxTextExpression\n */ \n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX expressions\n * in markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree `Program` node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX expressions.\n */ function mdxExpressionFromMarkdown() {\n    return {\n        enter: {\n            mdxFlowExpression: enterMdxFlowExpression,\n            mdxTextExpression: enterMdxTextExpression\n        },\n        exit: {\n            mdxFlowExpression: exitMdxExpression,\n            mdxFlowExpressionChunk: exitMdxExpressionData,\n            mdxTextExpression: exitMdxExpression,\n            mdxTextExpressionChunk: exitMdxExpressionData\n        }\n    };\n}\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX expressions\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX expressions.\n */ function mdxExpressionToMarkdown() {\n    return {\n        handlers: {\n            mdxFlowExpression: handleMdxExpression,\n            mdxTextExpression: handleMdxExpression\n        },\n        unsafe: [\n            {\n                character: \"{\",\n                inConstruct: [\n                    \"phrasing\"\n                ]\n            },\n            {\n                atBreak: true,\n                character: \"{\"\n            }\n        ]\n    };\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */ function enterMdxFlowExpression(token) {\n    this.enter({\n        type: \"mdxFlowExpression\",\n        value: \"\"\n    }, token);\n    this.buffer();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */ function enterMdxTextExpression(token) {\n    this.enter({\n        type: \"mdxTextExpression\",\n        value: \"\"\n    }, token);\n    this.buffer();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */ function exitMdxExpression(token) {\n    const value = this.resume();\n    const estree = token.estree;\n    const node = this.stack[this.stack.length - 1];\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === \"mdxFlowExpression\" || node.type === \"mdxTextExpression\");\n    this.exit(token);\n    node.value = value;\n    if (estree) {\n        node.data = {\n            estree\n        };\n    }\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */ function exitMdxExpressionData(token) {\n    this.config.enter.data.call(this, token);\n    this.config.exit.data.call(this, token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxFlowExpression | MdxTextExpression} node\n */ function handleMdxExpression(node) {\n    const value = node.value || \"\";\n    return \"{\" + value + \"}\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1tZHgtZXhwcmVzc2lvbi9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Q0FVQyxHQUVrQztBQUVuQzs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTRTtJQUNkLE9BQU87UUFDTEMsT0FBTztZQUNMQyxtQkFBbUJDO1lBQ25CQyxtQkFBbUJDO1FBQ3JCO1FBQ0FDLE1BQU07WUFDSkosbUJBQW1CSztZQUNuQkMsd0JBQXdCQztZQUN4QkwsbUJBQW1CRztZQUNuQkcsd0JBQXdCRDtRQUMxQjtJQUNGO0FBQ0Y7QUFFQTs7Ozs7O0NBTUMsR0FDTSxTQUFTRTtJQUNkLE9BQU87UUFDTEMsVUFBVTtZQUNSVixtQkFBbUJXO1lBQ25CVCxtQkFBbUJTO1FBQ3JCO1FBQ0FDLFFBQVE7WUFDTjtnQkFBQ0MsV0FBVztnQkFBS0MsYUFBYTtvQkFBQztpQkFBVztZQUFBO1lBQzFDO2dCQUFDQyxTQUFTO2dCQUFNRixXQUFXO1lBQUc7U0FDL0I7SUFDSDtBQUNGO0FBRUE7OztDQUdDLEdBQ0QsU0FBU1osdUJBQXVCZSxLQUFLO0lBQ25DLElBQUksQ0FBQ2pCLEtBQUssQ0FBQztRQUFDa0IsTUFBTTtRQUFxQkMsT0FBTztJQUFFLEdBQUdGO0lBQ25ELElBQUksQ0FBQ0csTUFBTTtBQUNiO0FBRUE7OztDQUdDLEdBQ0QsU0FBU2hCLHVCQUF1QmEsS0FBSztJQUNuQyxJQUFJLENBQUNqQixLQUFLLENBQUM7UUFBQ2tCLE1BQU07UUFBcUJDLE9BQU87SUFBRSxHQUFHRjtJQUNuRCxJQUFJLENBQUNHLE1BQU07QUFDYjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNkLGtCQUFrQlcsS0FBSztJQUM5QixNQUFNRSxRQUFRLElBQUksQ0FBQ0UsTUFBTTtJQUN6QixNQUFNQyxTQUFTTCxNQUFNSyxNQUFNO0lBQzNCLE1BQU1DLE9BQU8sSUFBSSxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDQSxLQUFLLENBQUNDLE1BQU0sR0FBRyxFQUFFO0lBQzlDM0IsMENBQU1BLENBQUN5QixLQUFLTCxJQUFJLEtBQUssdUJBQXVCSyxLQUFLTCxJQUFJLEtBQUs7SUFDMUQsSUFBSSxDQUFDYixJQUFJLENBQUNZO0lBQ1ZNLEtBQUtKLEtBQUssR0FBR0E7SUFFYixJQUFJRyxRQUFRO1FBQ1ZDLEtBQUtHLElBQUksR0FBRztZQUFDSjtRQUFNO0lBQ3JCO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDRCxTQUFTZCxzQkFBc0JTLEtBQUs7SUFDbEMsSUFBSSxDQUFDVSxNQUFNLENBQUMzQixLQUFLLENBQUMwQixJQUFJLENBQUNFLElBQUksQ0FBQyxJQUFJLEVBQUVYO0lBQ2xDLElBQUksQ0FBQ1UsTUFBTSxDQUFDdEIsSUFBSSxDQUFDcUIsSUFBSSxDQUFDRSxJQUFJLENBQUMsSUFBSSxFQUFFWDtBQUNuQztBQUVBOzs7Q0FHQyxHQUNELFNBQVNMLG9CQUFvQlcsSUFBSTtJQUMvQixNQUFNSixRQUFRSSxLQUFLSixLQUFLLElBQUk7SUFDNUIsT0FBTyxNQUFNQSxRQUFRO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtbWR4LWV4cHJlc3Npb24vbGliL2luZGV4LmpzP2NkZDkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nKS5Db21waWxlQ29udGV4dH0gQ29tcGlsZUNvbnRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bicpLkV4dGVuc2lvbn0gRnJvbU1hcmtkb3duRXh0ZW5zaW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nKS5IYW5kbGV9IEZyb21NYXJrZG93bkhhbmRsZVxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtdG8tbWFya2Rvd24nKS5IYW5kbGV9IFRvTWFya2Rvd25IYW5kbGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0LXV0aWwtdG8tbWFya2Rvd24nKS5PcHRpb25zfSBUb01hcmtkb3duRXh0ZW5zaW9uXG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vaW5kZXguanMnKS5NZHhGbG93RXhwcmVzc2lvbn0gTWR4Rmxvd0V4cHJlc3Npb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2luZGV4LmpzJykuTWR4VGV4dEV4cHJlc3Npb259IE1keFRleHRFeHByZXNzaW9uXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcblxuLyoqXG4gKiBDcmVhdGUgYW4gZXh0ZW5zaW9uIGZvciBgbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duYCB0byBlbmFibGUgTURYIGV4cHJlc3Npb25zXG4gKiBpbiBtYXJrZG93bi5cbiAqXG4gKiBXaGVuIHVzaW5nIHRoZSBtaWNyb21hcmsgc3ludGF4IGV4dGVuc2lvbiB3aXRoIGBhZGRSZXN1bHRgLCBub2RlcyB3aWxsIGhhdmVcbiAqIGEgYGRhdGEuZXN0cmVlYCBmaWVsZCBzZXQgdG8gYW4gRVNUcmVlIGBQcm9ncmFtYCBub2RlLlxuICpcbiAqIEByZXR1cm5zIHtGcm9tTWFya2Rvd25FeHRlbnNpb259XG4gKiAgIEV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtZnJvbS1tYXJrZG93bmAgdG8gZW5hYmxlIE1EWCBleHByZXNzaW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1keEV4cHJlc3Npb25Gcm9tTWFya2Rvd24oKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXI6IHtcbiAgICAgIG1keEZsb3dFeHByZXNzaW9uOiBlbnRlck1keEZsb3dFeHByZXNzaW9uLFxuICAgICAgbWR4VGV4dEV4cHJlc3Npb246IGVudGVyTWR4VGV4dEV4cHJlc3Npb25cbiAgICB9LFxuICAgIGV4aXQ6IHtcbiAgICAgIG1keEZsb3dFeHByZXNzaW9uOiBleGl0TWR4RXhwcmVzc2lvbixcbiAgICAgIG1keEZsb3dFeHByZXNzaW9uQ2h1bms6IGV4aXRNZHhFeHByZXNzaW9uRGF0YSxcbiAgICAgIG1keFRleHRFeHByZXNzaW9uOiBleGl0TWR4RXhwcmVzc2lvbixcbiAgICAgIG1keFRleHRFeHByZXNzaW9uQ2h1bms6IGV4aXRNZHhFeHByZXNzaW9uRGF0YVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBleHRlbnNpb24gZm9yIGBtZGFzdC11dGlsLXRvLW1hcmtkb3duYCB0byBlbmFibGUgTURYIGV4cHJlc3Npb25zXG4gKiBpbiBtYXJrZG93bi5cbiAqXG4gKiBAcmV0dXJucyB7VG9NYXJrZG93bkV4dGVuc2lvbn1cbiAqICAgRXh0ZW5zaW9uIGZvciBgbWRhc3QtdXRpbC10by1tYXJrZG93bmAgdG8gZW5hYmxlIE1EWCBleHByZXNzaW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1keEV4cHJlc3Npb25Ub01hcmtkb3duKCkge1xuICByZXR1cm4ge1xuICAgIGhhbmRsZXJzOiB7XG4gICAgICBtZHhGbG93RXhwcmVzc2lvbjogaGFuZGxlTWR4RXhwcmVzc2lvbixcbiAgICAgIG1keFRleHRFeHByZXNzaW9uOiBoYW5kbGVNZHhFeHByZXNzaW9uXG4gICAgfSxcbiAgICB1bnNhZmU6IFtcbiAgICAgIHtjaGFyYWN0ZXI6ICd7JywgaW5Db25zdHJ1Y3Q6IFsncGhyYXNpbmcnXX0sXG4gICAgICB7YXRCcmVhazogdHJ1ZSwgY2hhcmFjdGVyOiAneyd9XG4gICAgXVxuICB9XG59XG5cbi8qKlxuICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICogQHR5cGUge0Zyb21NYXJrZG93bkhhbmRsZX1cbiAqL1xuZnVuY3Rpb24gZW50ZXJNZHhGbG93RXhwcmVzc2lvbih0b2tlbikge1xuICB0aGlzLmVudGVyKHt0eXBlOiAnbWR4Rmxvd0V4cHJlc3Npb24nLCB2YWx1ZTogJyd9LCB0b2tlbilcbiAgdGhpcy5idWZmZXIoKVxufVxuXG4vKipcbiAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAqIEB0eXBlIHtGcm9tTWFya2Rvd25IYW5kbGV9XG4gKi9cbmZ1bmN0aW9uIGVudGVyTWR4VGV4dEV4cHJlc3Npb24odG9rZW4pIHtcbiAgdGhpcy5lbnRlcih7dHlwZTogJ21keFRleHRFeHByZXNzaW9uJywgdmFsdWU6ICcnfSwgdG9rZW4pXG4gIHRoaXMuYnVmZmVyKClcbn1cblxuLyoqXG4gKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gKiBAdHlwZSB7RnJvbU1hcmtkb3duSGFuZGxlfVxuICovXG5mdW5jdGlvbiBleGl0TWR4RXhwcmVzc2lvbih0b2tlbikge1xuICBjb25zdCB2YWx1ZSA9IHRoaXMucmVzdW1lKClcbiAgY29uc3QgZXN0cmVlID0gdG9rZW4uZXN0cmVlXG4gIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgYXNzZXJ0KG5vZGUudHlwZSA9PT0gJ21keEZsb3dFeHByZXNzaW9uJyB8fCBub2RlLnR5cGUgPT09ICdtZHhUZXh0RXhwcmVzc2lvbicpXG4gIHRoaXMuZXhpdCh0b2tlbilcbiAgbm9kZS52YWx1ZSA9IHZhbHVlXG5cbiAgaWYgKGVzdHJlZSkge1xuICAgIG5vZGUuZGF0YSA9IHtlc3RyZWV9XG4gIH1cbn1cblxuLyoqXG4gKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gKiBAdHlwZSB7RnJvbU1hcmtkb3duSGFuZGxlfVxuICovXG5mdW5jdGlvbiBleGl0TWR4RXhwcmVzc2lvbkRhdGEodG9rZW4pIHtcbiAgdGhpcy5jb25maWcuZW50ZXIuZGF0YS5jYWxsKHRoaXMsIHRva2VuKVxuICB0aGlzLmNvbmZpZy5leGl0LmRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbn1cblxuLyoqXG4gKiBAdHlwZSB7VG9NYXJrZG93bkhhbmRsZX1cbiAqIEBwYXJhbSB7TWR4Rmxvd0V4cHJlc3Npb24gfCBNZHhUZXh0RXhwcmVzc2lvbn0gbm9kZVxuICovXG5mdW5jdGlvbiBoYW5kbGVNZHhFeHByZXNzaW9uKG5vZGUpIHtcbiAgY29uc3QgdmFsdWUgPSBub2RlLnZhbHVlIHx8ICcnXG4gIHJldHVybiAneycgKyB2YWx1ZSArICd9J1xufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwibWR4RXhwcmVzc2lvbkZyb21NYXJrZG93biIsImVudGVyIiwibWR4Rmxvd0V4cHJlc3Npb24iLCJlbnRlck1keEZsb3dFeHByZXNzaW9uIiwibWR4VGV4dEV4cHJlc3Npb24iLCJlbnRlck1keFRleHRFeHByZXNzaW9uIiwiZXhpdCIsImV4aXRNZHhFeHByZXNzaW9uIiwibWR4Rmxvd0V4cHJlc3Npb25DaHVuayIsImV4aXRNZHhFeHByZXNzaW9uRGF0YSIsIm1keFRleHRFeHByZXNzaW9uQ2h1bmsiLCJtZHhFeHByZXNzaW9uVG9NYXJrZG93biIsImhhbmRsZXJzIiwiaGFuZGxlTWR4RXhwcmVzc2lvbiIsInVuc2FmZSIsImNoYXJhY3RlciIsImluQ29uc3RydWN0IiwiYXRCcmVhayIsInRva2VuIiwidHlwZSIsInZhbHVlIiwiYnVmZmVyIiwicmVzdW1lIiwiZXN0cmVlIiwibm9kZSIsInN0YWNrIiwibGVuZ3RoIiwiZGF0YSIsImNvbmZpZyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-mdx-expression/lib/index.js\n");

/***/ })

};
;