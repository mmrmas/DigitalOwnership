"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mdx-js";
exports.ids = ["vendor-chunks/@mdx-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/compile.js":
/*!*************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/compile.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compile: () => (/* binding */ compile),\n/* harmony export */   compileSync: () => (/* binding */ compileSync)\n/* harmony export */ });\n/* harmony import */ var _util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/resolve-file-and-options.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/core.js\");\n/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('./core.js').ProcessorOptions} ProcessorOptions\n */ /**\n * @typedef {Omit<ProcessorOptions, 'format'>} CoreProcessorOptions\n *   Core configuration.\n *\n * @typedef ExtraOptions\n *   Extra configuration.\n * @property {'detect' | 'md' | 'mdx' | null | undefined} [format='detect']\n *   Format of `file` (default: `'detect'`).\n *\n * @typedef {CoreProcessorOptions & ExtraOptions} CompileOptions\n *   Configuration for `compile`.\n *\n *   `CompileOptions` is the same as `ProcessorOptions` with the exception that\n *   the `format` option supports a `'detect'` value, which is the default.\n *   The `'detect'` format means to use `'md'` for files with an extension in\n *   `mdExtensions` and `'mdx'` otherwise.\n */ \n\n/**\n * Compile MDX to JS.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {Promise<VFile>}\n *   Promise to compiled file.\n */ function compile(vfileCompatible, compileOptions) {\n    const { file, options } = (0,_util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveFileAndOptions)(vfileCompatible, compileOptions);\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.createProcessor)(options).process(file);\n}\n/**\n * Synchronously compile MDX to JS.\n *\n * When possible please use the async `compile`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   MDX document to parse.\n * @param {Readonly<CompileOptions> | null | undefined} [compileOptions]\n *   Compile configuration (optional).\n * @return {VFile}\n *   Compiled file.\n */ function compileSync(vfileCompatible, compileOptions) {\n    const { file, options } = (0,_util_resolve_file_and_options_js__WEBPACK_IMPORTED_MODULE_0__.resolveFileAndOptions)(vfileCompatible, compileOptions);\n    return (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.createProcessor)(options).processSync(file);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL2NvbXBpbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0NBSUMsR0FFRDs7Ozs7Ozs7Ozs7Ozs7OztDQWdCQyxHQUV1RTtBQUMvQjtBQUV6Qzs7Ozs7Ozs7O0NBU0MsR0FDTSxTQUFTRSxRQUFRQyxlQUFlLEVBQUVDLGNBQWM7SUFDckQsTUFBTSxFQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBQyxHQUFHTix3RkFBcUJBLENBQUNHLGlCQUFpQkM7SUFDL0QsT0FBT0gseURBQWVBLENBQUNLLFNBQVNDLE9BQU8sQ0FBQ0Y7QUFDMUM7QUFFQTs7Ozs7Ozs7Ozs7Q0FXQyxHQUNNLFNBQVNHLFlBQVlMLGVBQWUsRUFBRUMsY0FBYztJQUN6RCxNQUFNLEVBQUNDLElBQUksRUFBRUMsT0FBTyxFQUFDLEdBQUdOLHdGQUFxQkEsQ0FBQ0csaUJBQWlCQztJQUMvRCxPQUFPSCx5REFBZUEsQ0FBQ0ssU0FBU0csV0FBVyxDQUFDSjtBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvY29tcGlsZS5qcz9jYTgzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5WRmlsZX0gVkZpbGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3ZmaWxlJykuQ29tcGF0aWJsZX0gQ29tcGF0aWJsZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9jb3JlLmpzJykuUHJvY2Vzc29yT3B0aW9uc30gUHJvY2Vzc29yT3B0aW9uc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09taXQ8UHJvY2Vzc29yT3B0aW9ucywgJ2Zvcm1hdCc+fSBDb3JlUHJvY2Vzc29yT3B0aW9uc1xuICogICBDb3JlIGNvbmZpZ3VyYXRpb24uXG4gKlxuICogQHR5cGVkZWYgRXh0cmFPcHRpb25zXG4gKiAgIEV4dHJhIGNvbmZpZ3VyYXRpb24uXG4gKiBAcHJvcGVydHkgeydkZXRlY3QnIHwgJ21kJyB8ICdtZHgnIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Zvcm1hdD0nZGV0ZWN0J11cbiAqICAgRm9ybWF0IG9mIGBmaWxlYCAoZGVmYXVsdDogYCdkZXRlY3QnYCkuXG4gKlxuICogQHR5cGVkZWYge0NvcmVQcm9jZXNzb3JPcHRpb25zICYgRXh0cmFPcHRpb25zfSBDb21waWxlT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgY29tcGlsZWAuXG4gKlxuICogICBgQ29tcGlsZU9wdGlvbnNgIGlzIHRoZSBzYW1lIGFzIGBQcm9jZXNzb3JPcHRpb25zYCB3aXRoIHRoZSBleGNlcHRpb24gdGhhdFxuICogICB0aGUgYGZvcm1hdGAgb3B0aW9uIHN1cHBvcnRzIGEgYCdkZXRlY3QnYCB2YWx1ZSwgd2hpY2ggaXMgdGhlIGRlZmF1bHQuXG4gKiAgIFRoZSBgJ2RldGVjdCdgIGZvcm1hdCBtZWFucyB0byB1c2UgYCdtZCdgIGZvciBmaWxlcyB3aXRoIGFuIGV4dGVuc2lvbiBpblxuICogICBgbWRFeHRlbnNpb25zYCBhbmQgYCdtZHgnYCBvdGhlcndpc2UuXG4gKi9cblxuaW1wb3J0IHtyZXNvbHZlRmlsZUFuZE9wdGlvbnN9IGZyb20gJy4vdXRpbC9yZXNvbHZlLWZpbGUtYW5kLW9wdGlvbnMuanMnXG5pbXBvcnQge2NyZWF0ZVByb2Nlc3Nvcn0gZnJvbSAnLi9jb3JlLmpzJ1xuXG4vKipcbiAqIENvbXBpbGUgTURYIHRvIEpTLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT59IHZmaWxlQ29tcGF0aWJsZVxuICogICBNRFggZG9jdW1lbnQgdG8gcGFyc2UuXG4gKiBAcGFyYW0ge1JlYWRvbmx5PENvbXBpbGVPcHRpb25zPiB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21waWxlT3B0aW9uc11cbiAqICAgQ29tcGlsZSBjb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJuIHtQcm9taXNlPFZGaWxlPn1cbiAqICAgUHJvbWlzZSB0byBjb21waWxlZCBmaWxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZSh2ZmlsZUNvbXBhdGlibGUsIGNvbXBpbGVPcHRpb25zKSB7XG4gIGNvbnN0IHtmaWxlLCBvcHRpb25zfSA9IHJlc29sdmVGaWxlQW5kT3B0aW9ucyh2ZmlsZUNvbXBhdGlibGUsIGNvbXBpbGVPcHRpb25zKVxuICByZXR1cm4gY3JlYXRlUHJvY2Vzc29yKG9wdGlvbnMpLnByb2Nlc3MoZmlsZSlcbn1cblxuLyoqXG4gKiBTeW5jaHJvbm91c2x5IGNvbXBpbGUgTURYIHRvIEpTLlxuICpcbiAqIFdoZW4gcG9zc2libGUgcGxlYXNlIHVzZSB0aGUgYXN5bmMgYGNvbXBpbGVgLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGF0aWJsZT59IHZmaWxlQ29tcGF0aWJsZVxuICogICBNRFggZG9jdW1lbnQgdG8gcGFyc2UuXG4gKiBAcGFyYW0ge1JlYWRvbmx5PENvbXBpbGVPcHRpb25zPiB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21waWxlT3B0aW9uc11cbiAqICAgQ29tcGlsZSBjb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJuIHtWRmlsZX1cbiAqICAgQ29tcGlsZWQgZmlsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGVTeW5jKHZmaWxlQ29tcGF0aWJsZSwgY29tcGlsZU9wdGlvbnMpIHtcbiAgY29uc3Qge2ZpbGUsIG9wdGlvbnN9ID0gcmVzb2x2ZUZpbGVBbmRPcHRpb25zKHZmaWxlQ29tcGF0aWJsZSwgY29tcGlsZU9wdGlvbnMpXG4gIHJldHVybiBjcmVhdGVQcm9jZXNzb3Iob3B0aW9ucykucHJvY2Vzc1N5bmMoZmlsZSlcbn1cbiJdLCJuYW1lcyI6WyJyZXNvbHZlRmlsZUFuZE9wdGlvbnMiLCJjcmVhdGVQcm9jZXNzb3IiLCJjb21waWxlIiwidmZpbGVDb21wYXRpYmxlIiwiY29tcGlsZU9wdGlvbnMiLCJmaWxlIiwib3B0aW9ucyIsInByb2Nlc3MiLCJjb21waWxlU3luYyIsInByb2Nlc3NTeW5jIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/core.js":
/*!**********************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/core.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProcessor: () => (/* binding */ createProcessor)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var remark_mdx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remark-mdx */ \"(ssr)/./node_modules/remark-mdx/lib/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remark-parse */ \"(ssr)/./node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unified */ \"(ssr)/./node_modules/unified/lib/index.js\");\n/* harmony import */ var _plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugin/recma-document.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\");\n/* harmony import */ var _plugin_recma_jsx_build_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./plugin/recma-jsx-build.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js\");\n/* harmony import */ var _plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugin/recma-jsx-rewrite.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\");\n/* harmony import */ var _plugin_recma_stringify_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./plugin/recma-stringify.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js\");\n/* harmony import */ var _plugin_rehype_recma_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./plugin/rehype-recma.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js\");\n/* harmony import */ var _plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugin/rehype-remove-raw.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\");\n/* harmony import */ var _plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugin/remark-mark-and-unravel.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\");\n/* harmony import */ var _node_types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node-types.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/node-types.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('hast-util-to-estree').ElementAttributeNameCase} ElementAttributeNameCase\n * @typedef {import('hast-util-to-estree').StylePropertyNameCase} StylePropertyNameCase\n * @typedef {import('mdast').Root} Root\n * @typedef {import('remark-rehype').Options} RemarkRehypeOptions\n * @typedef {typeof import('source-map').SourceMapGenerator} SourceMapGenerator\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('unified').Processor<Root, Program, Program, Program, string>} Processor\n */ /**\n * @typedef ProcessorOptions\n *   Configuration for `createProcessor`.\n * @property {SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Add a source map (object form) as the `map` field on the resulting file\n *   (optional).\n * @property {URL | string | null | undefined} [baseUrl]\n *   Use this URL as `import.meta.url` and resolve `import` and `export … from`\n *   relative to it (optional, example: `import.meta.url`).\n * @property {boolean | null | undefined} [development=false]\n *   Whether to add extra info to error messages in generated code and use the\n *   development automatic JSX runtime (`Fragment` and `jsxDEV` from\n *   `/jsx-dev-runtime`) (default: `false`);\n *   when using the webpack loader (`@mdx-js/loader`) or the Rollup integration\n *   (`@mdx-js/rollup`) through Vite, this is automatically inferred from how\n *   you configure those tools.\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Casing to use for attribute names (default: `'react'`);\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`;\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {'md' | 'mdx' | null | undefined} [format='mdx']\n *   format of the file (default: `'mdx'`);\n *   `'md'` means treat as markdown and `'mdx'` means treat as MDX.\n * @property {boolean | null | undefined} [jsx=false]\n *   Whether to keep JSX (default: `false`);\n *   the default is to compile JSX away so that the resulting file is\n *   immediately runnable.\n * @property {string | null | undefined} [jsxImportSource='react']\n *   Place to import automatic JSX runtimes from (default: `'react'`);\n *   when in the `automatic` runtime, this is used to define an import for\n *   `Fragment`, `jsx`, `jsxDEV`, and `jsxs`.\n * @property {'automatic' | 'classic' | null | undefined} [jsxRuntime='automatic']\n *   JSX runtime to use (default: `'automatic'`);\n *   the automatic runtime compiles to `import _jsx from\n *   '$importSource/jsx-runtime'\\n_jsx('p')`;\n *   the classic runtime compiles to calls such as `h('p')`.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {ReadonlyArray<string> | null | undefined} [mdExtensions]\n *   List of markdown extensions, with dot (default: `['.md', '.markdown', …]`);\n *   affects integrations.\n * @property {ReadonlyArray<string> | null | undefined} [mdxExtensions]\n *   List of MDX extensions, with dot (default: `['.mdx']`);\n *   affects integrations.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Output format to generate (default: `'program'`);\n *   in most cases `'program'` should be used, it results in a whole program;\n *   internally `evaluate` uses `'function-body'` to compile to\n *   code that can be passed to `run`;\n *   in some cases, you might want what `evaluate` does in separate steps, such\n *   as when compiling on the server and running on the client.\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Pragma for JSX, used in the classic runtime as an identifier for function\n *   calls: `<x />` to `React.createElement('x')` (default:\n *   `'React.createElement'`);\n *   when changing this, you should also define `pragmaFrag` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Pragma for fragment symbol, used in the classic runtime as an identifier\n *   for unnamed calls: `<>` to `React.createElement(React.Fragment)` (default:\n *   `'React.Fragment'`);\n *   when changing this, you should also define `pragma` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaImportSource='react']\n *   Where to import the identifier of `pragma` from, used in the classic\n *   runtime (default: `'react'`);\n *   to illustrate, when `pragma` is `'a.b'` and `pragmaImportSource` is `'c'`\n *   the following will be generated: `import a from 'c'` and things such as\n *   `a.b('h1', {})`.\n *   when changing this, you should also define `pragma` and `pragmaFrag` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [providerImportSource]\n *   Place to import a provider from (optional, example: `'@mdx-js/react'`);\n *   normally it’s used for runtimes that support context (React, Preact), but\n *   it can be used to inject components into the compiled code;\n *   the module must export and identifier `useMDXComponents` which is called\n *   without arguments to get an object of components (`MDXComponents` from\n *   `mdx/types.js`).\n * @property {PluggableList | null | undefined} [recmaPlugins]\n *   List of recma plugins (optional);\n *   this is a new ecosystem, currently in beta, to transform esast trees\n *   (JavaScript)\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins (optional).\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins (optional).\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype` (optional);\n *   the option `allowDangerousHtml` will always be set to `true` and the MDX\n *   nodes (see `nodeTypes`) are passed through;\n *   In particular, you might want to pass configuration for footnotes if your\n *   content is not in English.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Casing to use for property names in `style` objects (default: `'dom'`);\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`;\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` properties on `td` and `th` into CSS `style`\n *   properties (default: `true`).\n */ \n\n\n\n\n\n\n\n\n\n\n\n\nconst removedOptions = [\n    \"compilers\",\n    \"filepath\",\n    \"hastPlugins\",\n    \"mdPlugins\",\n    \"skipExport\",\n    \"wrapExport\"\n];\nlet warned = false;\n/**\n * Create a processor to compile markdown or MDX to JavaScript.\n *\n * > **Note**: `format: 'detect'` is not allowed in `ProcessorOptions`.\n *\n * @param {Readonly<ProcessorOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @return {Processor}\n *   Processor.\n */ function createProcessor(options) {\n    const settings = options || {};\n    let index = -1;\n    while(++index < removedOptions.length){\n        const key = removedOptions[index];\n        if (key in settings) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Unexpected removed option `\" + key + \"`; see <https://mdxjs.com/migrating/v2/> on how to migrate\");\n        }\n    }\n    // @ts-expect-error: throw an error for a runtime value which is not allowed\n    // by the types.\n    if (settings.format === \"detect\") {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\"Unexpected `format: 'detect'`, which is not supported by `createProcessor`, expected `'mdx'` or `'md'`\");\n    }\n    if ((settings.jsxRuntime === \"classic\" || settings.pragma || settings.pragmaFrag || settings.pragmaImportSource) && !warned) {\n        warned = true;\n        console.warn(\"Unexpected deprecated option `jsxRuntime: 'classic'`, `pragma`, `pragmaFrag`, or `pragmaImportSource`; see <https://mdxjs.com/migrating/v3/> on how to migrate\");\n    }\n    const pipeline = (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n    if (settings.format !== \"md\") {\n        pipeline.use(remark_mdx__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n    }\n    const remarkRehypeOptions = settings.remarkRehypeOptions || {};\n    pipeline.use(_plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__.remarkMarkAndUnravel).use(settings.remarkPlugins || []).use(remark_rehype__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        ...remarkRehypeOptions,\n        allowDangerousHtml: true,\n        passThrough: [\n            ...remarkRehypeOptions.passThrough || [],\n            ..._node_types_js__WEBPACK_IMPORTED_MODULE_6__.nodeTypes\n        ]\n    }).use(settings.rehypePlugins || []);\n    if (settings.format === \"md\") {\n        pipeline.use(_plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__.rehypeRemoveRaw);\n    }\n    pipeline.use(_plugin_rehype_recma_js__WEBPACK_IMPORTED_MODULE_8__.rehypeRecma, settings).use(_plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__.recmaDocument, settings).use(_plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__.recmaJsxRewrite, settings);\n    if (!settings.jsx) {\n        pipeline.use(_plugin_recma_jsx_build_js__WEBPACK_IMPORTED_MODULE_11__.recmaJsxBuild, settings);\n    }\n    pipeline.use(_plugin_recma_stringify_js__WEBPACK_IMPORTED_MODULE_12__.recmaStringify, settings).use(settings.recmaPlugins || []);\n    // @ts-expect-error: we added plugins with if-checks, which TS doesn’t get.\n    return pipeline;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/core.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/node-types.js":
/*!****************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/node-types.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nodeTypes: () => (/* binding */ nodeTypes)\n/* harmony export */ });\n/**\n * List of node types made by `mdast-util-mdx`, which have to be passed\n * through untouched from the mdast tree to the hast tree.\n */ const nodeTypes = /** @type {const} */ [\n    \"mdxFlowExpression\",\n    \"mdxJsxFlowElement\",\n    \"mdxJsxTextElement\",\n    \"mdxTextExpression\",\n    \"mdxjsEsm\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL25vZGUtdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQUNNLE1BQU1BLFlBQVksa0JBQWtCLEdBQUk7SUFDN0M7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL25vZGUtdHlwZXMuanM/ZWVhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpc3Qgb2Ygbm9kZSB0eXBlcyBtYWRlIGJ5IGBtZGFzdC11dGlsLW1keGAsIHdoaWNoIGhhdmUgdG8gYmUgcGFzc2VkXG4gKiB0aHJvdWdoIHVudG91Y2hlZCBmcm9tIHRoZSBtZGFzdCB0cmVlIHRvIHRoZSBoYXN0IHRyZWUuXG4gKi9cbmV4cG9ydCBjb25zdCBub2RlVHlwZXMgPSAvKiogQHR5cGUge2NvbnN0fSAqLyAoW1xuICAnbWR4Rmxvd0V4cHJlc3Npb24nLFxuICAnbWR4SnN4Rmxvd0VsZW1lbnQnLFxuICAnbWR4SnN4VGV4dEVsZW1lbnQnLFxuICAnbWR4VGV4dEV4cHJlc3Npb24nLFxuICAnbWR4anNFc20nXG5dKVxuIl0sIm5hbWVzIjpbIm5vZGVUeXBlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/node-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js":
/*!***************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaDocument: () => (/* binding */ recmaDocument)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var periscopic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! periscopic */ \"(ssr)/./node_modules/periscopic/src/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(ssr)/./node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-util-stringify-position */ \"(ssr)/./node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var _util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/estree-util-create.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/* harmony import */ var _util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/estree-util-declaration-to-expression.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\");\n/* harmony import */ var _util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/estree-util-is-declaration.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @typedef {import('estree-jsx').CallExpression} CallExpression\n * @typedef {import('estree-jsx').Directive} Directive\n * @typedef {import('estree-jsx').ExportAllDeclaration} ExportAllDeclaration\n * @typedef {import('estree-jsx').ExportDefaultDeclaration} ExportDefaultDeclaration\n * @typedef {import('estree-jsx').ExportNamedDeclaration} ExportNamedDeclaration\n * @typedef {import('estree-jsx').ExportSpecifier} ExportSpecifier\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').FunctionDeclaration} FunctionDeclaration\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportDeclaration} ImportDeclaration\n * @typedef {import('estree-jsx').ImportDefaultSpecifier} ImportDefaultSpecifier\n * @typedef {import('estree-jsx').ImportExpression} ImportExpression\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').JSXFragment} JSXFragment\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SimpleLiteral} SimpleLiteral\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n * @typedef {import('estree-jsx').Statement} Statement\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */ \n\n\n\n\n\n\n\n\n\n/**\n * Wrap the estree in `MDXContent`.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration.\n * @returns\n *   Transform.\n */ function recmaDocument(options) {\n    const baseUrl = options.baseUrl || undefined;\n    const baseHref = typeof baseUrl === \"object\" ? baseUrl.href : baseUrl;\n    const outputFormat = options.outputFormat || \"program\";\n    const pragma = options.pragma === undefined ? \"React.createElement\" : options.pragma;\n    const pragmaFrag = options.pragmaFrag === undefined ? \"React.Fragment\" : options.pragmaFrag;\n    const pragmaImportSource = options.pragmaImportSource || \"react\";\n    const jsxImportSource = options.jsxImportSource || \"react\";\n    const jsxRuntime = options.jsxRuntime || \"automatic\";\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree, file) {\n        /** @type {Array<[string, string] | string>} */ const exportedIdentifiers = [];\n        /** @type {Array<Directive | ModuleDeclaration | Statement>} */ const replacement = [];\n        let exportAllCount = 0;\n        /** @type {ExportDefaultDeclaration | ExportSpecifier | undefined} */ let layout;\n        /** @type {boolean | undefined} */ let content;\n        /** @type {Node} */ let child;\n        if (jsxRuntime === \"classic\" && pragmaFrag) {\n            injectPragma(tree, \"@jsxFrag\", pragmaFrag);\n        }\n        if (jsxRuntime === \"classic\" && pragma) {\n            injectPragma(tree, \"@jsx\", pragma);\n        }\n        if (jsxRuntime === \"automatic\" && jsxImportSource) {\n            injectPragma(tree, \"@jsxImportSource\", jsxImportSource);\n        }\n        if (jsxRuntime) {\n            injectPragma(tree, \"@jsxRuntime\", jsxRuntime);\n        }\n        if (jsxRuntime === \"classic\" && pragmaImportSource) {\n            if (!pragma) {\n                throw new Error(\"Missing `pragma` in classic runtime with `pragmaImportSource`\");\n            }\n            handleEsm({\n                type: \"ImportDeclaration\",\n                specifiers: [\n                    {\n                        type: \"ImportDefaultSpecifier\",\n                        local: {\n                            type: \"Identifier\",\n                            name: pragma.split(\".\")[0]\n                        }\n                    }\n                ],\n                source: {\n                    type: \"Literal\",\n                    value: pragmaImportSource\n                }\n            });\n        }\n        // Find the `export default`, the JSX expression, and leave the rest\n        // (import/exports) as they are.\n        for (child of tree.body){\n            // ```tsx\n            // export default properties => <>{properties.children}</>\n            // ```\n            //\n            // Treat it as an inline layout declaration.\n            if (child.type === \"ExportDefaultDeclaration\") {\n                if (layout) {\n                    file.fail(\"Unexpected duplicate layout, expected a single layout (previous: \" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_2__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(layout)) + \")\", {\n                        ancestors: [\n                            tree,\n                            child\n                        ],\n                        place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(child),\n                        ruleId: \"duplicate-layout\",\n                        source: \"recma-document\"\n                    });\n                }\n                layout = child;\n                replacement.push({\n                    type: \"VariableDeclaration\",\n                    kind: \"const\",\n                    declarations: [\n                        {\n                            type: \"VariableDeclarator\",\n                            id: {\n                                type: \"Identifier\",\n                                name: \"MDXLayout\"\n                            },\n                            init: (0,_util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_4__.isDeclaration)(child.declaration) ? (0,_util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_5__.declarationToExpression)(child.declaration) : child.declaration\n                        }\n                    ]\n                });\n            } else if (child.type === \"ExportNamedDeclaration\" && child.source) {\n                // Cast because always simple.\n                const source = /** @type {SimpleLiteral} */ child.source;\n                // Remove `default` or `as default`, but not `default as`, specifier.\n                child.specifiers = child.specifiers.filter(function(specifier) {\n                    if (specifier.exported.name === \"default\") {\n                        if (layout) {\n                            file.fail(\"Unexpected duplicate layout, expected a single layout (previous: \" + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_2__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(layout)) + \")\", {\n                                ancestors: [\n                                    tree,\n                                    child,\n                                    specifier\n                                ],\n                                place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_3__.positionFromEstree)(child),\n                                ruleId: \"duplicate-layout\",\n                                source: \"recma-document\"\n                            });\n                        }\n                        layout = specifier;\n                        // Make it just an import: `import MDXLayout from '…'`.\n                        /** @type {Array<ImportDefaultSpecifier | ImportSpecifier>} */ const specifiers = [];\n                        // Default as default / something else as default.\n                        if (specifier.local.name === \"default\") {\n                            specifiers.push({\n                                type: \"ImportDefaultSpecifier\",\n                                local: {\n                                    type: \"Identifier\",\n                                    name: \"MDXLayout\"\n                                }\n                            });\n                        } else {\n                            /** @type {ImportSpecifier} */ const importSpecifier = {\n                                type: \"ImportSpecifier\",\n                                imported: specifier.local,\n                                local: {\n                                    type: \"Identifier\",\n                                    name: \"MDXLayout\"\n                                }\n                            };\n                            (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(specifier.local, importSpecifier);\n                            specifiers.push(importSpecifier);\n                        }\n                        /** @type {Literal} */ const from = {\n                            type: \"Literal\",\n                            value: source.value\n                        };\n                        (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(source, from);\n                        /** @type {ImportDeclaration} */ const declaration = {\n                            type: \"ImportDeclaration\",\n                            specifiers,\n                            source: from\n                        };\n                        (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(specifier, declaration);\n                        handleEsm(declaration);\n                        return false;\n                    }\n                    return true;\n                });\n                // If there are other things imported, keep it.\n                if (child.specifiers.length > 0) {\n                    handleExport(child);\n                }\n            } else if (child.type === \"ExportNamedDeclaration\" || child.type === \"ExportAllDeclaration\") {\n                handleExport(child);\n            } else if (child.type === \"ImportDeclaration\") {\n                handleEsm(child);\n            } else if (child.type === \"ExpressionStatement\" && (child.expression.type === \"JSXElement\" || // @ts-expect-error: `estree-jsx` does not register `JSXFragment` as an expression.\n            child.expression.type === \"JSXFragment\")) {\n                content = true;\n                replacement.push(...createMdxContent(child.expression, outputFormat, Boolean(layout)));\n            } else {\n                // This catch-all branch is because plugins might add other things.\n                // Normally, we only have import/export/jsx, but just add whatever’s\n                // there.\n                replacement.push(child);\n            }\n        }\n        // If there was no JSX content at all, add an empty function.\n        if (!content) {\n            replacement.push(...createMdxContent(undefined, outputFormat, Boolean(layout)));\n        }\n        exportedIdentifiers.push([\n            \"MDXContent\",\n            \"default\"\n        ]);\n        if (outputFormat === \"function-body\") {\n            replacement.push({\n                type: \"ReturnStatement\",\n                argument: {\n                    type: \"ObjectExpression\",\n                    properties: [\n                        ...Array.from({\n                            length: exportAllCount\n                        }).map(/**\n               * @param {undefined} _\n               *   Nothing.\n               * @param {number} index\n               *   Index.\n               * @returns {SpreadElement}\n               *   Node.\n               */ function(_, index) {\n                            return {\n                                type: \"SpreadElement\",\n                                argument: {\n                                    type: \"Identifier\",\n                                    name: \"_exportAll\" + (index + 1)\n                                }\n                            };\n                        }),\n                        ...exportedIdentifiers.map(function(d) {\n                            /** @type {Property} */ const property = {\n                                type: \"Property\",\n                                kind: \"init\",\n                                method: false,\n                                computed: false,\n                                shorthand: typeof d === \"string\",\n                                key: {\n                                    type: \"Identifier\",\n                                    name: typeof d === \"string\" ? d : d[1]\n                                },\n                                value: {\n                                    type: \"Identifier\",\n                                    name: typeof d === \"string\" ? d : d[0]\n                                }\n                            };\n                            return property;\n                        })\n                    ]\n                }\n            });\n        }\n        tree.body = replacement;\n        let usesImportMetaUrlVariable = false;\n        let usesResolveDynamicHelper = false;\n        if (baseHref || outputFormat === \"function-body\") {\n            (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n                enter (node) {\n                    if ((node.type === \"ExportAllDeclaration\" || node.type === \"ExportNamedDeclaration\" || node.type === \"ImportDeclaration\") && node.source) {\n                        // We never hit this branch when generating function bodies, as\n                        // statements are already compiled away into import expressions.\n                        (0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(baseHref, \"unexpected missing `baseHref` in branch\");\n                        let value = node.source.value;\n                        // The literal source for statements can only be string.\n                        (0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(typeof value === \"string\", \"expected string source\");\n                        // Resolve a specifier.\n                        // This is the same as `_resolveDynamicMdxSpecifier`, which has to\n                        // be injected to work with expressions at runtime, but as we have\n                        // `baseHref` at compile time here and statements are static\n                        // strings, we can do it now.\n                        try {\n                            // To do: use `URL.canParse` next major.\n                            // eslint-disable-next-line no-new\n                            new URL(value);\n                        // Fine: a full URL.\n                        } catch  {\n                            if (value.startsWith(\"/\") || value.startsWith(\"./\") || value.startsWith(\"../\")) {\n                                value = new URL(value, baseHref).href;\n                            } else {\n                            // Fine: are bare specifier.\n                            }\n                        }\n                        /** @type {SimpleLiteral} */ const replacement = {\n                            type: \"Literal\",\n                            value\n                        };\n                        (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(node.source, replacement);\n                        node.source = replacement;\n                        return;\n                    }\n                    if (node.type === \"ImportExpression\") {\n                        usesResolveDynamicHelper = true;\n                        /** @type {CallExpression} */ const replacement = {\n                            type: \"CallExpression\",\n                            callee: {\n                                type: \"Identifier\",\n                                name: \"_resolveDynamicMdxSpecifier\"\n                            },\n                            arguments: [\n                                node.source\n                            ],\n                            optional: false\n                        };\n                        node.source = replacement;\n                        return;\n                    }\n                    // To do: add support for `import.meta.resolve`.\n                    if (node.type === \"MemberExpression\" && \"object\" in node && node.object.type === \"MetaProperty\" && node.property.type === \"Identifier\" && node.object.meta.name === \"import\" && node.object.property.name === \"meta\" && node.property.name === \"url\") {\n                        usesImportMetaUrlVariable = true;\n                        /** @type {Identifier} */ const replacement = {\n                            type: \"Identifier\",\n                            name: \"_importMetaUrl\"\n                        };\n                        (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(node, replacement);\n                        this.replace(replacement);\n                    }\n                }\n            });\n        }\n        if (usesResolveDynamicHelper) {\n            if (!baseHref) {\n                usesImportMetaUrlVariable = true;\n            }\n            tree.body.push(resolveDynamicMdxSpecifier(baseHref ? {\n                type: \"Literal\",\n                value: baseHref\n            } : {\n                type: \"Identifier\",\n                name: \"_importMetaUrl\"\n            }));\n        }\n        if (usesImportMetaUrlVariable) {\n            (0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(outputFormat === \"function-body\", \"expected `function-body` when using dynamic url injection\");\n            tree.body.unshift(...createImportMetaUrlVariable());\n        }\n        /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration} node\n     *   Export node.\n     * @returns {undefined}\n     *   Nothing.\n     */ function handleExport(node) {\n            if (node.type === \"ExportNamedDeclaration\") {\n                // ```tsx\n                // export function a() {}\n                // export class A {}\n                // export var a = 1\n                // ```\n                if (node.declaration) {\n                    exportedIdentifiers.push(...(0,periscopic__WEBPACK_IMPORTED_MODULE_1__.analyze)(node.declaration).scope.declarations.keys());\n                }\n                // ```tsx\n                // export {a, b as c}\n                // export {a, b as c} from 'd'\n                // ```\n                for (child of node.specifiers){\n                    exportedIdentifiers.push(child.exported.name);\n                }\n            }\n            handleEsm(node);\n        }\n        /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration} node\n     *   Export or import node.\n     * @returns {undefined}\n     *   Nothing.\n     */ function handleEsm(node) {\n            /** @type {ModuleDeclaration | Statement | undefined} */ let replace;\n            /** @type {Expression} */ let init;\n            if (outputFormat === \"function-body\") {\n                if (// Always have a source:\n                node.type === \"ImportDeclaration\" || node.type === \"ExportAllDeclaration\" || // Source optional:\n                node.type === \"ExportNamedDeclaration\" && node.source) {\n                    // We always have a source, but types say they can be missing.\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_7__.ok)(node.source, \"expected `node.source` to be defined\");\n                    // ```\n                    // import 'a'\n                    // //=> await import('a')\n                    // import a from 'b'\n                    // //=> const {default: a} = await import('b')\n                    // export {a, b as c} from 'd'\n                    // //=> const {a, c: b} = await import('d')\n                    // export * from 'a'\n                    // //=> const _exportAll0 = await import('a')\n                    // ```\n                    /** @type {ImportExpression} */ const argument = {\n                        type: \"ImportExpression\",\n                        source: node.source\n                    };\n                    (0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_6__.create)(node, argument);\n                    init = {\n                        type: \"AwaitExpression\",\n                        argument\n                    };\n                    if ((node.type === \"ImportDeclaration\" || node.type === \"ExportNamedDeclaration\") && node.specifiers.length === 0) {\n                        replace = {\n                            type: \"ExpressionStatement\",\n                            expression: init\n                        };\n                    } else {\n                        replace = {\n                            type: \"VariableDeclaration\",\n                            kind: \"const\",\n                            declarations: node.type === \"ExportAllDeclaration\" ? [\n                                {\n                                    type: \"VariableDeclarator\",\n                                    id: {\n                                        type: \"Identifier\",\n                                        name: \"_exportAll\" + ++exportAllCount\n                                    },\n                                    init\n                                }\n                            ] : (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__.specifiersToDeclarations)(node.specifiers, init)\n                        };\n                    }\n                } else if (node.declaration) {\n                    replace = node.declaration;\n                } else {\n                    /** @type {Array<VariableDeclarator>} */ const declarators = node.specifiers.filter(function(specifier) {\n                        return specifier.local.name !== specifier.exported.name;\n                    }).map(function(specifier) {\n                        return {\n                            type: \"VariableDeclarator\",\n                            id: specifier.exported,\n                            init: specifier.local\n                        };\n                    });\n                    if (declarators.length > 0) {\n                        replace = {\n                            type: \"VariableDeclaration\",\n                            kind: \"const\",\n                            declarations: declarators\n                        };\n                    }\n                }\n            } else {\n                replace = node;\n            }\n            if (replace) {\n                replacement.push(replace);\n            }\n        }\n    };\n    /**\n   * @param {Readonly<Expression> | undefined} content\n   *   Content.\n   * @param {'function-body' | 'program'} outputFormat\n   *   Output format.\n   * @param {boolean | undefined} [hasInternalLayout=false]\n   *   Whether there’s an internal layout (default: `false`).\n   * @returns {Array<ExportDefaultDeclaration | FunctionDeclaration>}\n   *   Functions.\n   */ function createMdxContent(content, outputFormat, hasInternalLayout) {\n        /** @type {JSXElement} */ const element = {\n            type: \"JSXElement\",\n            openingElement: {\n                type: \"JSXOpeningElement\",\n                name: {\n                    type: \"JSXIdentifier\",\n                    name: \"MDXLayout\"\n                },\n                attributes: [\n                    {\n                        type: \"JSXSpreadAttribute\",\n                        argument: {\n                            type: \"Identifier\",\n                            name: \"props\"\n                        }\n                    }\n                ],\n                selfClosing: false\n            },\n            closingElement: {\n                type: \"JSXClosingElement\",\n                name: {\n                    type: \"JSXIdentifier\",\n                    name: \"MDXLayout\"\n                }\n            },\n            children: [\n                {\n                    type: \"JSXElement\",\n                    openingElement: {\n                        type: \"JSXOpeningElement\",\n                        name: {\n                            type: \"JSXIdentifier\",\n                            name: \"_createMdxContent\"\n                        },\n                        attributes: [\n                            {\n                                type: \"JSXSpreadAttribute\",\n                                argument: {\n                                    type: \"Identifier\",\n                                    name: \"props\"\n                                }\n                            }\n                        ],\n                        selfClosing: true\n                    },\n                    closingElement: null,\n                    children: []\n                }\n            ]\n        };\n        let result = /** @type {Expression} */ element;\n        if (!hasInternalLayout) {\n            result = {\n                type: \"ConditionalExpression\",\n                test: {\n                    type: \"Identifier\",\n                    name: \"MDXLayout\"\n                },\n                consequent: result,\n                alternate: {\n                    type: \"CallExpression\",\n                    callee: {\n                        type: \"Identifier\",\n                        name: \"_createMdxContent\"\n                    },\n                    arguments: [\n                        {\n                            type: \"Identifier\",\n                            name: \"props\"\n                        }\n                    ],\n                    optional: false\n                }\n            };\n        }\n        let argument = // Cast because TS otherwise does not think `JSXFragment`s are expressions.\n        /** @type {Readonly<Expression> | Readonly<JSXFragment>} */ content || {\n            type: \"Identifier\",\n            name: \"undefined\"\n        };\n        // Unwrap a fragment of a single element.\n        if (argument.type === \"JSXFragment\" && argument.children.length === 1 && argument.children[0].type === \"JSXElement\") {\n            argument = argument.children[0];\n        }\n        let awaitExpression = false;\n        (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(argument, {\n            enter (node) {\n                if (node.type === \"ArrowFunctionExpression\" || node.type === \"FunctionDeclaration\" || node.type === \"FunctionExpression\") {\n                    return this.skip();\n                }\n                if (node.type === \"AwaitExpression\" || /* c8 ignore next 2 -- can only occur in a function (which then can\n           * only be async, so skipped it) */ node.type === \"ForOfStatement\" && node.await) {\n                    awaitExpression = true;\n                }\n            }\n        });\n        /** @type {FunctionDeclaration} */ const declaration = {\n            type: \"FunctionDeclaration\",\n            id: {\n                type: \"Identifier\",\n                name: \"MDXContent\"\n            },\n            params: [\n                {\n                    type: \"AssignmentPattern\",\n                    left: {\n                        type: \"Identifier\",\n                        name: \"props\"\n                    },\n                    right: {\n                        type: \"ObjectExpression\",\n                        properties: []\n                    }\n                }\n            ],\n            body: {\n                type: \"BlockStatement\",\n                body: [\n                    {\n                        type: \"ReturnStatement\",\n                        argument: result\n                    }\n                ]\n            }\n        };\n        return [\n            {\n                type: \"FunctionDeclaration\",\n                async: awaitExpression,\n                id: {\n                    type: \"Identifier\",\n                    name: \"_createMdxContent\"\n                },\n                params: [\n                    {\n                        type: \"Identifier\",\n                        name: \"props\"\n                    }\n                ],\n                body: {\n                    type: \"BlockStatement\",\n                    body: [\n                        {\n                            type: \"ReturnStatement\",\n                            // Cast because TS doesn’t think `JSXFragment` is an expression.\n                            // eslint-disable-next-line object-shorthand\n                            argument: /** @type {Expression} */ argument\n                        }\n                    ]\n                }\n            },\n            outputFormat === \"program\" ? {\n                type: \"ExportDefaultDeclaration\",\n                declaration\n            } : declaration\n        ];\n    }\n}\n/**\n * @param {Program} tree\n * @param {string} name\n * @param {string} value\n * @returns {undefined}\n */ function injectPragma(tree, name, value) {\n    tree.comments?.unshift({\n        type: \"Block\",\n        value: name + \" \" + value,\n        data: {\n            _mdxIsPragmaComment: true\n        }\n    });\n}\n/**\n * @param {Expression} importMetaUrl\n * @returns {FunctionDeclaration}\n */ function resolveDynamicMdxSpecifier(importMetaUrl) {\n    return {\n        type: \"FunctionDeclaration\",\n        id: {\n            type: \"Identifier\",\n            name: \"_resolveDynamicMdxSpecifier\"\n        },\n        generator: false,\n        async: false,\n        params: [\n            {\n                type: \"Identifier\",\n                name: \"d\"\n            }\n        ],\n        body: {\n            type: \"BlockStatement\",\n            body: [\n                {\n                    type: \"IfStatement\",\n                    test: {\n                        type: \"BinaryExpression\",\n                        left: {\n                            type: \"UnaryExpression\",\n                            operator: \"typeof\",\n                            prefix: true,\n                            argument: {\n                                type: \"Identifier\",\n                                name: \"d\"\n                            }\n                        },\n                        operator: \"!==\",\n                        right: {\n                            type: \"Literal\",\n                            value: \"string\"\n                        }\n                    },\n                    consequent: {\n                        type: \"ReturnStatement\",\n                        argument: {\n                            type: \"Identifier\",\n                            name: \"d\"\n                        }\n                    },\n                    alternate: null\n                },\n                // To do: use `URL.canParse` when widely supported (see commented\n                // out code below).\n                {\n                    type: \"TryStatement\",\n                    block: {\n                        type: \"BlockStatement\",\n                        body: [\n                            {\n                                type: \"ExpressionStatement\",\n                                expression: {\n                                    type: \"NewExpression\",\n                                    callee: {\n                                        type: \"Identifier\",\n                                        name: \"URL\"\n                                    },\n                                    arguments: [\n                                        {\n                                            type: \"Identifier\",\n                                            name: \"d\"\n                                        }\n                                    ]\n                                }\n                            },\n                            {\n                                type: \"ReturnStatement\",\n                                argument: {\n                                    type: \"Identifier\",\n                                    name: \"d\"\n                                }\n                            }\n                        ]\n                    },\n                    handler: {\n                        type: \"CatchClause\",\n                        param: null,\n                        body: {\n                            type: \"BlockStatement\",\n                            body: []\n                        }\n                    },\n                    finalizer: null\n                },\n                // To do: use `URL.canParse` when widely supported.\n                // {\n                //   type: 'IfStatement',\n                //   test: {\n                //     type: 'CallExpression',\n                //     callee: toIdOrMemberExpression(['URL', 'canParse']),\n                //     arguments: [{type: 'Identifier', name: 'd'}],\n                //     optional: false\n                //   },\n                //   consequent: {\n                //     type: 'ReturnStatement',\n                //     argument: {type: 'Identifier', name: 'd'}\n                //   },\n                //   alternate: null\n                // },\n                {\n                    type: \"IfStatement\",\n                    test: {\n                        type: \"LogicalExpression\",\n                        left: {\n                            type: \"LogicalExpression\",\n                            left: {\n                                type: \"CallExpression\",\n                                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)([\n                                    \"d\",\n                                    \"startsWith\"\n                                ]),\n                                arguments: [\n                                    {\n                                        type: \"Literal\",\n                                        value: \"/\"\n                                    }\n                                ],\n                                optional: false\n                            },\n                            operator: \"||\",\n                            right: {\n                                type: \"CallExpression\",\n                                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)([\n                                    \"d\",\n                                    \"startsWith\"\n                                ]),\n                                arguments: [\n                                    {\n                                        type: \"Literal\",\n                                        value: \"./\"\n                                    }\n                                ],\n                                optional: false\n                            }\n                        },\n                        operator: \"||\",\n                        right: {\n                            type: \"CallExpression\",\n                            callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)([\n                                \"d\",\n                                \"startsWith\"\n                            ]),\n                            arguments: [\n                                {\n                                    type: \"Literal\",\n                                    value: \"../\"\n                                }\n                            ],\n                            optional: false\n                        }\n                    },\n                    consequent: {\n                        type: \"ReturnStatement\",\n                        argument: {\n                            type: \"MemberExpression\",\n                            object: {\n                                type: \"NewExpression\",\n                                callee: {\n                                    type: \"Identifier\",\n                                    name: \"URL\"\n                                },\n                                arguments: [\n                                    {\n                                        type: \"Identifier\",\n                                        name: \"d\"\n                                    },\n                                    importMetaUrl\n                                ]\n                            },\n                            property: {\n                                type: \"Identifier\",\n                                name: \"href\"\n                            },\n                            computed: false,\n                            optional: false\n                        }\n                    },\n                    alternate: null\n                },\n                {\n                    type: \"ReturnStatement\",\n                    argument: {\n                        type: \"Identifier\",\n                        name: \"d\"\n                    }\n                }\n            ]\n        }\n    };\n}\n/**\n * @returns {Array<Statement>}\n */ function createImportMetaUrlVariable() {\n    return [\n        {\n            type: \"VariableDeclaration\",\n            declarations: [\n                {\n                    type: \"VariableDeclarator\",\n                    id: {\n                        type: \"Identifier\",\n                        name: \"_importMetaUrl\"\n                    },\n                    init: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)([\n                        \"arguments\",\n                        0,\n                        \"baseUrl\"\n                    ])\n                }\n            ],\n            kind: \"const\"\n        },\n        {\n            type: \"IfStatement\",\n            test: {\n                type: \"UnaryExpression\",\n                operator: \"!\",\n                prefix: true,\n                argument: {\n                    type: \"Identifier\",\n                    name: \"_importMetaUrl\"\n                }\n            },\n            consequent: {\n                type: \"ThrowStatement\",\n                argument: {\n                    type: \"NewExpression\",\n                    callee: {\n                        type: \"Identifier\",\n                        name: \"Error\"\n                    },\n                    arguments: [\n                        {\n                            type: \"Literal\",\n                            value: \"Unexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`\"\n                        }\n                    ]\n                }\n            },\n            alternate: null\n        }\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js":
/*!****************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaJsxBuild: () => (/* binding */ recmaJsxBuild)\n/* harmony export */ });\n/* harmony import */ var estree_util_build_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-build-jsx */ \"(ssr)/./node_modules/estree-util-build-jsx/lib/index.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-util-build-jsx').Options} BuildJsxOptions\n * @typedef {import('vfile').VFile} VFile\n */ /**\n * @typedef ExtraOptions\n *   Configuration for internal plugin `recma-jsx-build`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to keep the import of the automatic runtime or get it from\n *   `arguments[0]` instead (default: `'program'`).\n *\n * @typedef {BuildJsxOptions & ExtraOptions} Options\n *   Options.\n */ \n\n\n/**\n * A plugin to build JSX into function calls.\n * `estree-util-build-jsx` does all the work for us!\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function recmaJsxBuild(options) {\n    /* c8 ignore next -- always given in `@mdx-js/mdx` */ const { development, outputFormat } = options || {};\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree, file) {\n        (0,estree_util_build_jsx__WEBPACK_IMPORTED_MODULE_0__.buildJsx)(tree, {\n            development,\n            filePath: file.history[0]\n        });\n        // Remove the pragma comment that we injected ourselves as it is no longer\n        // needed.\n        if (tree.comments) {\n            tree.comments = tree.comments.filter(function(d) {\n                return !d.data?._mdxIsPragmaComment;\n            });\n        }\n        // When compiling to a function body, replace the import that was just\n        // generated, and get `jsx`, `jsxs`, and `Fragment` from `arguments[0]`\n        // instead.\n        if (outputFormat === \"function-body\") {\n            let index = 0;\n            // Skip directives: JS currently only has `use strict`, but Acorn allows\n            // arbitrary ones.\n            // Practically things like `use client` could be used?\n            while(index < tree.body.length){\n                const child = tree.body[index];\n                if (\"directive\" in child && child.directive) {\n                    index++;\n                } else {\n                    break;\n                }\n            }\n            const declaration = tree.body[index];\n            if (declaration && declaration.type === \"ImportDeclaration\" && typeof declaration.source.value === \"string\" && /\\/jsx-(dev-)?runtime$/.test(declaration.source.value)) {\n                tree.body[index] = {\n                    type: \"VariableDeclaration\",\n                    kind: \"const\",\n                    declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_1__.specifiersToDeclarations)(declaration.specifiers, (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_2__.toIdOrMemberExpression)([\n                        \"arguments\",\n                        0\n                    ]))\n                };\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWNtYS1qc3gtYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0NBSUMsR0FFRDs7Ozs7Ozs7O0NBU0MsR0FFNkM7QUFDNEM7QUFDRjtBQUV4Rjs7Ozs7Ozs7Q0FRQyxHQUNNLFNBQVNHLGNBQWNDLE9BQU87SUFDbkMsbURBQW1ELEdBQ25ELE1BQU0sRUFBQ0MsV0FBVyxFQUFFQyxZQUFZLEVBQUMsR0FBR0YsV0FBVyxDQUFDO0lBRWhEOzs7Ozs7O0dBT0MsR0FDRCxPQUFPLFNBQVVHLElBQUksRUFBRUMsSUFBSTtRQUN6QlIsK0RBQVFBLENBQUNPLE1BQU07WUFBQ0Y7WUFBYUksVUFBVUQsS0FBS0UsT0FBTyxDQUFDLEVBQUU7UUFBQTtRQUV0RCwwRUFBMEU7UUFDMUUsVUFBVTtRQUNWLElBQUlILEtBQUtJLFFBQVEsRUFBRTtZQUNqQkosS0FBS0ksUUFBUSxHQUFHSixLQUFLSSxRQUFRLENBQUNDLE1BQU0sQ0FBQyxTQUFVQyxDQUFDO2dCQUM5QyxPQUFPLENBQUNBLEVBQUVDLElBQUksRUFBRUM7WUFDbEI7UUFDRjtRQUVBLHNFQUFzRTtRQUN0RSx1RUFBdUU7UUFDdkUsV0FBVztRQUNYLElBQUlULGlCQUFpQixpQkFBaUI7WUFDcEMsSUFBSVUsUUFBUTtZQUVaLHdFQUF3RTtZQUN4RSxrQkFBa0I7WUFDbEIsc0RBQXNEO1lBQ3RELE1BQU9BLFFBQVFULEtBQUtVLElBQUksQ0FBQ0MsTUFBTSxDQUFFO2dCQUMvQixNQUFNQyxRQUFRWixLQUFLVSxJQUFJLENBQUNELE1BQU07Z0JBQzlCLElBQUksZUFBZUcsU0FBU0EsTUFBTUMsU0FBUyxFQUFFO29CQUMzQ0o7Z0JBQ0YsT0FBTztvQkFDTDtnQkFDRjtZQUNGO1lBRUEsTUFBTUssY0FBY2QsS0FBS1UsSUFBSSxDQUFDRCxNQUFNO1lBRXBDLElBQ0VLLGVBQ0FBLFlBQVlDLElBQUksS0FBSyx1QkFDckIsT0FBT0QsWUFBWUUsTUFBTSxDQUFDQyxLQUFLLEtBQUssWUFDcEMsd0JBQXdCQyxJQUFJLENBQUNKLFlBQVlFLE1BQU0sQ0FBQ0MsS0FBSyxHQUNyRDtnQkFDQWpCLEtBQUtVLElBQUksQ0FBQ0QsTUFBTSxHQUFHO29CQUNqQk0sTUFBTTtvQkFDTkksTUFBTTtvQkFDTkMsY0FBYzFCLHlHQUF3QkEsQ0FDcENvQixZQUFZTyxVQUFVLEVBQ3RCMUIsdUdBQXNCQSxDQUFDO3dCQUFDO3dCQUFhO3FCQUFFO2dCQUUzQztZQUNGO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVjbWEtanN4LWJ1aWxkLmpzPzY2MDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuUHJvZ3JhbX0gUHJvZ3JhbVxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLXV0aWwtYnVpbGQtanN4JykuT3B0aW9uc30gQnVpbGRKc3hPcHRpb25zXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd2ZmlsZScpLlZGaWxlfSBWRmlsZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgRXh0cmFPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIGludGVybmFsIHBsdWdpbiBgcmVjbWEtanN4LWJ1aWxkYC5cbiAqIEBwcm9wZXJ0eSB7J2Z1bmN0aW9uLWJvZHknIHwgJ3Byb2dyYW0nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW291dHB1dEZvcm1hdD0ncHJvZ3JhbSddXG4gKiAgIFdoZXRoZXIgdG8ga2VlcCB0aGUgaW1wb3J0IG9mIHRoZSBhdXRvbWF0aWMgcnVudGltZSBvciBnZXQgaXQgZnJvbVxuICogICBgYXJndW1lbnRzWzBdYCBpbnN0ZWFkIChkZWZhdWx0OiBgJ3Byb2dyYW0nYCkuXG4gKlxuICogQHR5cGVkZWYge0J1aWxkSnN4T3B0aW9ucyAmIEV4dHJhT3B0aW9uc30gT3B0aW9uc1xuICogICBPcHRpb25zLlxuICovXG5cbmltcG9ydCB7YnVpbGRKc3h9IGZyb20gJ2VzdHJlZS11dGlsLWJ1aWxkLWpzeCdcbmltcG9ydCB7c3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zfSBmcm9tICcuLi91dGlsL2VzdHJlZS11dGlsLXNwZWNpZmllcnMtdG8tZGVjbGFyYXRpb25zLmpzJ1xuaW1wb3J0IHt0b0lkT3JNZW1iZXJFeHByZXNzaW9ufSBmcm9tICcuLi91dGlsL2VzdHJlZS11dGlsLXRvLWlkLW9yLW1lbWJlci1leHByZXNzaW9uLmpzJ1xuXG4vKipcbiAqIEEgcGx1Z2luIHRvIGJ1aWxkIEpTWCBpbnRvIGZ1bmN0aW9uIGNhbGxzLlxuICogYGVzdHJlZS11dGlsLWJ1aWxkLWpzeGAgZG9lcyBhbGwgdGhlIHdvcmsgZm9yIHVzIVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8T3B0aW9ucz4gfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnNcbiAqICAgVHJhbnNmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjbWFKc3hCdWlsZChvcHRpb25zKSB7XG4gIC8qIGM4IGlnbm9yZSBuZXh0IC0tIGFsd2F5cyBnaXZlbiBpbiBgQG1keC1qcy9tZHhgICovXG4gIGNvbnN0IHtkZXZlbG9wbWVudCwgb3V0cHV0Rm9ybWF0fSA9IG9wdGlvbnMgfHwge31cblxuICAvKipcbiAgICogQHBhcmFtIHtQcm9ncmFtfSB0cmVlXG4gICAqICAgVHJlZS5cbiAgICogQHBhcmFtIHtWRmlsZX0gZmlsZVxuICAgKiAgIEZpbGUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSwgZmlsZSkge1xuICAgIGJ1aWxkSnN4KHRyZWUsIHtkZXZlbG9wbWVudCwgZmlsZVBhdGg6IGZpbGUuaGlzdG9yeVswXX0pXG5cbiAgICAvLyBSZW1vdmUgdGhlIHByYWdtYSBjb21tZW50IHRoYXQgd2UgaW5qZWN0ZWQgb3Vyc2VsdmVzIGFzIGl0IGlzIG5vIGxvbmdlclxuICAgIC8vIG5lZWRlZC5cbiAgICBpZiAodHJlZS5jb21tZW50cykge1xuICAgICAgdHJlZS5jb21tZW50cyA9IHRyZWUuY29tbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHJldHVybiAhZC5kYXRhPy5fbWR4SXNQcmFnbWFDb21tZW50XG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIFdoZW4gY29tcGlsaW5nIHRvIGEgZnVuY3Rpb24gYm9keSwgcmVwbGFjZSB0aGUgaW1wb3J0IHRoYXQgd2FzIGp1c3RcbiAgICAvLyBnZW5lcmF0ZWQsIGFuZCBnZXQgYGpzeGAsIGBqc3hzYCwgYW5kIGBGcmFnbWVudGAgZnJvbSBgYXJndW1lbnRzWzBdYFxuICAgIC8vIGluc3RlYWQuXG4gICAgaWYgKG91dHB1dEZvcm1hdCA9PT0gJ2Z1bmN0aW9uLWJvZHknKSB7XG4gICAgICBsZXQgaW5kZXggPSAwXG5cbiAgICAgIC8vIFNraXAgZGlyZWN0aXZlczogSlMgY3VycmVudGx5IG9ubHkgaGFzIGB1c2Ugc3RyaWN0YCwgYnV0IEFjb3JuIGFsbG93c1xuICAgICAgLy8gYXJiaXRyYXJ5IG9uZXMuXG4gICAgICAvLyBQcmFjdGljYWxseSB0aGluZ3MgbGlrZSBgdXNlIGNsaWVudGAgY291bGQgYmUgdXNlZD9cbiAgICAgIHdoaWxlIChpbmRleCA8IHRyZWUuYm9keS5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSB0cmVlLmJvZHlbaW5kZXhdXG4gICAgICAgIGlmICgnZGlyZWN0aXZlJyBpbiBjaGlsZCAmJiBjaGlsZC5kaXJlY3RpdmUpIHtcbiAgICAgICAgICBpbmRleCsrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkZWNsYXJhdGlvbiA9IHRyZWUuYm9keVtpbmRleF1cblxuICAgICAgaWYgKFxuICAgICAgICBkZWNsYXJhdGlvbiAmJlxuICAgICAgICBkZWNsYXJhdGlvbi50eXBlID09PSAnSW1wb3J0RGVjbGFyYXRpb24nICYmXG4gICAgICAgIHR5cGVvZiBkZWNsYXJhdGlvbi5zb3VyY2UudmFsdWUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIC9cXC9qc3gtKGRldi0pP3J1bnRpbWUkLy50ZXN0KGRlY2xhcmF0aW9uLnNvdXJjZS52YWx1ZSlcbiAgICAgICkge1xuICAgICAgICB0cmVlLmJvZHlbaW5kZXhdID0ge1xuICAgICAgICAgIHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0aW9uJyxcbiAgICAgICAgICBraW5kOiAnY29uc3QnLFxuICAgICAgICAgIGRlY2xhcmF0aW9uczogc3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zKFxuICAgICAgICAgICAgZGVjbGFyYXRpb24uc3BlY2lmaWVycyxcbiAgICAgICAgICAgIHRvSWRPck1lbWJlckV4cHJlc3Npb24oWydhcmd1bWVudHMnLCAwXSlcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJidWlsZEpzeCIsInNwZWNpZmllcnNUb0RlY2xhcmF0aW9ucyIsInRvSWRPck1lbWJlckV4cHJlc3Npb24iLCJyZWNtYUpzeEJ1aWxkIiwib3B0aW9ucyIsImRldmVsb3BtZW50Iiwib3V0cHV0Rm9ybWF0IiwidHJlZSIsImZpbGUiLCJmaWxlUGF0aCIsImhpc3RvcnkiLCJjb21tZW50cyIsImZpbHRlciIsImQiLCJkYXRhIiwiX21keElzUHJhZ21hQ29tbWVudCIsImluZGV4IiwiYm9keSIsImxlbmd0aCIsImNoaWxkIiwiZGlyZWN0aXZlIiwiZGVjbGFyYXRpb24iLCJ0eXBlIiwic291cmNlIiwidmFsdWUiLCJ0ZXN0Iiwia2luZCIsImRlY2xhcmF0aW9ucyIsInNwZWNpZmllcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-build.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaJsxRewrite: () => (/* binding */ recmaJsxRewrite)\n/* harmony export */ });\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(ssr)/./node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var periscopic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! periscopic */ \"(ssr)/./node_modules/periscopic/src/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-stringify-position */ \"(ssr)/./node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(ssr)/./node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/estree-util-to-binary-addition.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Function} EstreeFunction\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXElement} JSXElement\n * @typedef {import('estree-jsx').ModuleDeclaration} ModuleDeclaration\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').ObjectPattern} ObjectPattern\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n * @typedef {import('estree-jsx').Statement} Statement\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n *\n * @typedef {import('periscopic').Scope} PeriscopicScope\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */ /**\n * @typedef {PeriscopicScope & {node: Node}} Scope\n *   Scope (with a `node`).\n *\n * @typedef StackEntry\n *   Entry.\n * @property {Array<string>} components\n *   Used components.\n * @property {Map<string, string>} idToInvalidComponentName\n *   Map of JSX identifiers which cannot be used as JS identifiers, to valid JS identifiers.\n * @property {Readonly<EstreeFunction>} node\n *   Function.\n * @property {Array<string>} objects\n *   Identifiers of used objects (such as `x` in `x.y`).\n * @property {Record<string, {node: Readonly<JSXElement>, component: boolean}>} references\n *   Map of JSX identifiers for components and objects, to where they were first used.\n * @property {Array<string>} tags\n *   Tag names.\n */ \n\n\n\n\n\n\n\n/**\n * A plugin that rewrites JSX in functions to accept components as\n * `props.components` (when the function is called `_createMdxContent`), or from\n * a provider (if there is one).\n * It also makes sure that any undefined components are defined: either from\n * received components or as a function that throws an error.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function recmaJsxRewrite(options) {\n    const { development, outputFormat, providerImportSource } = options;\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree, file) {\n        // Find everything that’s defined in the top-level scope.\n        const scopeInfo = (0,periscopic__WEBPACK_IMPORTED_MODULE_1__.analyze)(tree);\n        /** @type {Array<StackEntry>} */ const functionStack = [];\n        let importProvider = false;\n        let createErrorHelper = false;\n        /** @type {Scope | undefined} */ let currentScope;\n        (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n            enter (node) {\n                // Cast because we match `node`.\n                const newScope = /** @type {Scope | undefined} */ scopeInfo.map.get(node);\n                if (node.type === \"FunctionDeclaration\" || node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\") {\n                    functionStack.push({\n                        components: [],\n                        idToInvalidComponentName: new Map(),\n                        node,\n                        objects: [],\n                        references: {},\n                        tags: []\n                    });\n                    // MDXContent only ever contains MDXLayout\n                    if (isNamedFunction(node, \"MDXContent\") && newScope && !inScope(newScope, \"MDXLayout\")) {\n                        functionStack[0].components.push(\"MDXLayout\");\n                    }\n                }\n                const functionScope = functionStack[0];\n                if (!functionScope || !isNamedFunction(functionScope.node, \"_createMdxContent\") && !providerImportSource) {\n                    return;\n                }\n                if (newScope) {\n                    newScope.node = node;\n                    currentScope = newScope;\n                }\n                if (currentScope && node.type === \"JSXElement\") {\n                    let name = node.openingElement.name;\n                    // `<x.y>`, `<Foo.Bar>`, `<x.y.z>`.\n                    if (name.type === \"JSXMemberExpression\") {\n                        /** @type {Array<string>} */ const ids = [];\n                        // Find the left-most identifier.\n                        while(name.type === \"JSXMemberExpression\"){\n                            ids.unshift(name.property.name);\n                            name = name.object;\n                        }\n                        ids.unshift(name.name);\n                        const fullId = ids.join(\".\");\n                        const id = name.name;\n                        const isInScope = inScope(currentScope, id);\n                        if (!Object.hasOwn(functionScope.references, fullId)) {\n                            // Cast because we match `node`.\n                            const parentScope = /** @type {Scope | undefined} */ currentScope.parent;\n                            if (!isInScope || // If the parent scope is `_createMdxContent`, then this\n                            // references a component we can add a check statement for.\n                            parentScope && parentScope.node.type === \"FunctionDeclaration\" && isNamedFunction(parentScope.node, \"_createMdxContent\")) {\n                                functionScope.references[fullId] = {\n                                    component: true,\n                                    node\n                                };\n                            }\n                        }\n                        if (!functionScope.objects.includes(id) && !isInScope) {\n                            functionScope.objects.push(id);\n                        }\n                    } else if (name.type === \"JSXNamespacedName\") {\n                    // Ignore namespaces.\n                    } else if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name.name) && !/^[a-z]/.test(name.name)) {\n                        const id = name.name;\n                        if (!inScope(currentScope, id)) {\n                            // No need to add an error for an undefined layout — we use an\n                            // `if` later.\n                            if (id !== \"MDXLayout\" && !Object.hasOwn(functionScope.references, id)) {\n                                functionScope.references[id] = {\n                                    component: true,\n                                    node\n                                };\n                            }\n                            if (!functionScope.components.includes(id)) {\n                                functionScope.components.push(id);\n                            }\n                        }\n                    } else if (node.data && node.data._mdxExplicitJsx) {\n                    // Do not turn explicit JSX into components from `_components`.\n                    // As in, a given `h1` component is used for `# heading` (next case),\n                    // but not for `<h1>heading</h1>`.\n                    } else {\n                        const id = name.name;\n                        if (!functionScope.tags.includes(id)) {\n                            functionScope.tags.push(id);\n                        }\n                        /** @type {Array<number | string>} */ let jsxIdExpression = [\n                            \"_components\",\n                            id\n                        ];\n                        if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(id) === false) {\n                            let invalidComponentName = functionScope.idToInvalidComponentName.get(id);\n                            if (invalidComponentName === undefined) {\n                                invalidComponentName = `_component${functionScope.idToInvalidComponentName.size}`;\n                                functionScope.idToInvalidComponentName.set(id, invalidComponentName);\n                            }\n                            jsxIdExpression = [\n                                invalidComponentName\n                            ];\n                        }\n                        node.openingElement.name = (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression);\n                        if (node.closingElement) {\n                            node.closingElement.name = (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression);\n                        }\n                    }\n                }\n            },\n            leave (node) {\n                /** @type {Array<Property | SpreadElement>} */ const defaults = [];\n                /** @type {Array<string>} */ const actual = [];\n                /** @type {Array<Expression>} */ const parameters = [];\n                /** @type {Array<VariableDeclarator>} */ const declarations = [];\n                if (currentScope && currentScope.node === node) {\n                    // Cast to patch our `node`.\n                    currentScope = /** @type {Scope} */ currentScope.parent;\n                }\n                if (node.type === \"FunctionDeclaration\" || node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\") {\n                    const scopeNode = node;\n                    const scope = functionStack[functionStack.length - 1];\n                    /** @type {string} */ let name;\n                    for (name of scope.tags.sort()){\n                        defaults.push({\n                            type: \"Property\",\n                            kind: \"init\",\n                            key: (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name) ? {\n                                type: \"Identifier\",\n                                name\n                            } : {\n                                type: \"Literal\",\n                                value: name\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: name\n                            },\n                            method: false,\n                            shorthand: false,\n                            computed: false\n                        });\n                    }\n                    actual.push(...scope.components);\n                    for (name of scope.objects){\n                        // In some cases, a component is used directly (`<X>`) but it’s also\n                        // used as an object (`<X.Y>`).\n                        if (!actual.includes(name)) {\n                            actual.push(name);\n                        }\n                    }\n                    actual.sort();\n                    /** @type {Array<Statement>} */ const statements = [];\n                    if (defaults.length > 0 || actual.length > 0 || scope.idToInvalidComponentName.size > 0) {\n                        if (providerImportSource) {\n                            importProvider = true;\n                            parameters.push({\n                                type: \"CallExpression\",\n                                callee: {\n                                    type: \"Identifier\",\n                                    name: \"_provideComponents\"\n                                },\n                                arguments: [],\n                                optional: false\n                            });\n                        }\n                        // Accept `components` as a prop if this is the `MDXContent` or\n                        // `_createMdxContent` function.\n                        if (isNamedFunction(scope.node, \"MDXContent\") || isNamedFunction(scope.node, \"_createMdxContent\")) {\n                            parameters.push((0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)([\n                                \"props\",\n                                \"components\"\n                            ]));\n                        }\n                        if (defaults.length > 0 || parameters.length > 1) {\n                            for (const parameter of parameters){\n                                defaults.push({\n                                    type: \"SpreadElement\",\n                                    argument: parameter\n                                });\n                            }\n                        }\n                        // If we’re getting components from several sources, merge them.\n                        /** @type {Expression} */ let componentsInit = defaults.length > 0 ? {\n                            type: \"ObjectExpression\",\n                            properties: defaults\n                        } : // make sure it’s defined.\n                        {\n                            type: \"LogicalExpression\",\n                            operator: \"||\",\n                            left: parameters[0],\n                            right: {\n                                type: \"ObjectExpression\",\n                                properties: []\n                            }\n                        };\n                        /** @type {ObjectPattern | undefined} */ let componentsPattern;\n                        // Add components to scope.\n                        // For `['MyComponent', 'MDXLayout']` this generates:\n                        // ```tsx\n                        // const {MyComponent, wrapper: MDXLayout} = _components\n                        // ```\n                        // Note that MDXLayout is special as it’s taken from\n                        // `_components.wrapper`.\n                        if (actual.length > 0) {\n                            componentsPattern = {\n                                type: \"ObjectPattern\",\n                                properties: actual.map(function(name) {\n                                    return {\n                                        type: \"Property\",\n                                        kind: \"init\",\n                                        key: {\n                                            type: \"Identifier\",\n                                            name: name === \"MDXLayout\" ? \"wrapper\" : name\n                                        },\n                                        value: {\n                                            type: \"Identifier\",\n                                            name\n                                        },\n                                        method: false,\n                                        shorthand: name !== \"MDXLayout\",\n                                        computed: false\n                                    };\n                                })\n                            };\n                        }\n                        if (scope.tags.length > 0) {\n                            declarations.push({\n                                type: \"VariableDeclarator\",\n                                id: {\n                                    type: \"Identifier\",\n                                    name: \"_components\"\n                                },\n                                init: componentsInit\n                            });\n                            componentsInit = {\n                                type: \"Identifier\",\n                                name: \"_components\"\n                            };\n                        }\n                        if (isNamedFunction(scope.node, \"_createMdxContent\")) {\n                            for (const [id, componentName] of [\n                                ...scope.idToInvalidComponentName\n                            ].sort(function([a], [b]) {\n                                return a.localeCompare(b);\n                            })){\n                                // For JSX IDs that can’t be represented as JavaScript IDs (as in,\n                                // those with dashes, such as `custom-element`), generate a\n                                // separate variable that is a valid JS ID (such as `_component0`),\n                                // and takes it from components:\n                                // `const _component0 = _components['custom-element']`\n                                declarations.push({\n                                    type: \"VariableDeclarator\",\n                                    id: {\n                                        type: \"Identifier\",\n                                        name: componentName\n                                    },\n                                    init: {\n                                        type: \"MemberExpression\",\n                                        object: {\n                                            type: \"Identifier\",\n                                            name: \"_components\"\n                                        },\n                                        property: {\n                                            type: \"Literal\",\n                                            value: id\n                                        },\n                                        computed: true,\n                                        optional: false\n                                    }\n                                });\n                            }\n                        }\n                        if (componentsPattern) {\n                            declarations.push({\n                                type: \"VariableDeclarator\",\n                                id: componentsPattern,\n                                init: componentsInit\n                            });\n                        }\n                        if (declarations.length > 0) {\n                            statements.push({\n                                type: \"VariableDeclaration\",\n                                kind: \"const\",\n                                declarations\n                            });\n                        }\n                    }\n                    /** @type {string} */ let key;\n                    // Add partials (so for `x.y.z` it’d generate `x` and `x.y` too).\n                    for(key in scope.references){\n                        if (Object.hasOwn(scope.references, key)) {\n                            const parts = key.split(\".\");\n                            let index = 0;\n                            while(++index < parts.length){\n                                const partial = parts.slice(0, index).join(\".\");\n                                if (!Object.hasOwn(scope.references, partial)) {\n                                    scope.references[partial] = {\n                                        component: false,\n                                        node: scope.references[key].node\n                                    };\n                                }\n                            }\n                        }\n                    }\n                    const references = Object.keys(scope.references).sort();\n                    let index = -1;\n                    while(++index < references.length){\n                        const id = references[index];\n                        const info = scope.references[id];\n                        const place = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__.positionFromEstree)(info.node));\n                        /** @type {Array<Expression>} */ const parameters = [\n                            {\n                                type: \"Literal\",\n                                value: id\n                            },\n                            {\n                                type: \"Literal\",\n                                value: info.component\n                            }\n                        ];\n                        createErrorHelper = true;\n                        if (development && place) {\n                            parameters.push({\n                                type: \"Literal\",\n                                value: place\n                            });\n                        }\n                        statements.push({\n                            type: \"IfStatement\",\n                            test: {\n                                type: \"UnaryExpression\",\n                                operator: \"!\",\n                                prefix: true,\n                                argument: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(id.split(\".\"))\n                            },\n                            consequent: {\n                                type: \"ExpressionStatement\",\n                                expression: {\n                                    type: \"CallExpression\",\n                                    callee: {\n                                        type: \"Identifier\",\n                                        name: \"_missingMdxReference\"\n                                    },\n                                    arguments: parameters,\n                                    optional: false\n                                }\n                            },\n                            alternate: undefined\n                        });\n                    }\n                    if (statements.length > 0) {\n                        // Arrow functions with an implied return:\n                        if (scopeNode.body.type !== \"BlockStatement\") {\n                            scopeNode.body = {\n                                type: \"BlockStatement\",\n                                body: [\n                                    {\n                                        type: \"ReturnStatement\",\n                                        argument: scopeNode.body\n                                    }\n                                ]\n                            };\n                        }\n                        scopeNode.body.body.unshift(...statements);\n                    }\n                    functionStack.pop();\n                }\n            }\n        });\n        // If a provider is used (and can be used), import it.\n        if (importProvider && providerImportSource) {\n            tree.body.unshift(createImportProvider(providerImportSource, outputFormat));\n        }\n        // If potentially missing components are used.\n        if (createErrorHelper) {\n            /** @type {Array<Expression>} */ const message = [\n                {\n                    type: \"Literal\",\n                    value: \"Expected \"\n                },\n                {\n                    type: \"ConditionalExpression\",\n                    test: {\n                        type: \"Identifier\",\n                        name: \"component\"\n                    },\n                    consequent: {\n                        type: \"Literal\",\n                        value: \"component\"\n                    },\n                    alternate: {\n                        type: \"Literal\",\n                        value: \"object\"\n                    }\n                },\n                {\n                    type: \"Literal\",\n                    value: \" `\"\n                },\n                {\n                    type: \"Identifier\",\n                    name: \"id\"\n                },\n                {\n                    type: \"Literal\",\n                    value: \"` to be defined: you likely forgot to import, pass, or provide it.\"\n                }\n            ];\n            /** @type {Array<Identifier>} */ const parameters = [\n                {\n                    type: \"Identifier\",\n                    name: \"id\"\n                },\n                {\n                    type: \"Identifier\",\n                    name: \"component\"\n                }\n            ];\n            if (development) {\n                message.push({\n                    type: \"ConditionalExpression\",\n                    test: {\n                        type: \"Identifier\",\n                        name: \"place\"\n                    },\n                    consequent: (0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)([\n                        {\n                            type: \"Literal\",\n                            value: \"\\nIt’s referenced in your code at `\"\n                        },\n                        {\n                            type: \"Identifier\",\n                            name: \"place\"\n                        },\n                        {\n                            type: \"Literal\",\n                            value: (file.path ? \"` in `\" + file.path : \"\") + \"`\"\n                        }\n                    ]),\n                    alternate: {\n                        type: \"Literal\",\n                        value: \"\"\n                    }\n                });\n                parameters.push({\n                    type: \"Identifier\",\n                    name: \"place\"\n                });\n            }\n            tree.body.push({\n                type: \"FunctionDeclaration\",\n                id: {\n                    type: \"Identifier\",\n                    name: \"_missingMdxReference\"\n                },\n                generator: false,\n                async: false,\n                params: parameters,\n                body: {\n                    type: \"BlockStatement\",\n                    body: [\n                        {\n                            type: \"ThrowStatement\",\n                            argument: {\n                                type: \"NewExpression\",\n                                callee: {\n                                    type: \"Identifier\",\n                                    name: \"Error\"\n                                },\n                                arguments: [\n                                    (0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)(message)\n                                ]\n                            }\n                        }\n                    ]\n                }\n            });\n        }\n        if (outputFormat === \"function-body\") {\n            tree.body.unshift({\n                type: \"ExpressionStatement\",\n                expression: {\n                    type: \"Literal\",\n                    value: \"use strict\"\n                },\n                directive: \"use strict\"\n            });\n        }\n    };\n}\n/**\n * @param {string} providerImportSource\n *   Provider source.\n * @param {'function-body' | 'program' | null | undefined} outputFormat\n *   Format.\n * @returns {ModuleDeclaration | Statement}\n *   Node.\n */ function createImportProvider(providerImportSource, outputFormat) {\n    /** @type {Array<ImportSpecifier>} */ const specifiers = [\n        {\n            type: \"ImportSpecifier\",\n            imported: {\n                type: \"Identifier\",\n                name: \"useMDXComponents\"\n            },\n            local: {\n                type: \"Identifier\",\n                name: \"_provideComponents\"\n            }\n        }\n    ];\n    return outputFormat === \"function-body\" ? {\n        type: \"VariableDeclaration\",\n        kind: \"const\",\n        declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__.specifiersToDeclarations)(specifiers, (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)([\n            \"arguments\",\n            0\n        ]))\n    } : {\n        type: \"ImportDeclaration\",\n        specifiers,\n        source: {\n            type: \"Literal\",\n            value: providerImportSource\n        }\n    };\n}\n/**\n * @param {Readonly<EstreeFunction>} node\n *   Node.\n * @param {string} name\n *   Name.\n * @returns {boolean}\n *   Whether `node` is a named function with `name`.\n */ function isNamedFunction(node, name) {\n    return Boolean(node && \"id\" in node && node.id && node.id.name === name);\n}\n/**\n * @param {Readonly<Scope>} scope\n *   Scope.\n * @param {string} id\n *   Identifier.\n * @returns {boolean}\n *   Whether `id` is in `scope`.\n */ function inScope(scope, id) {\n    /** @type {Scope | undefined} */ let currentScope = scope;\n    while(currentScope){\n        if (currentScope.declarations.has(id)) {\n            return true;\n        }\n        // Cast to patch our `node`.\n        currentScope = /** @type {Scope | undefined} */ currentScope.parent || undefined;\n    }\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js":
/*!****************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaStringify: () => (/* binding */ recmaStringify)\n/* harmony export */ });\n/* harmony import */ var estree_util_to_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-to-js */ \"(ssr)/./node_modules/estree-util-to-js/lib/index.js\");\n/* harmony import */ var estree_util_to_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! estree-util-to-js */ \"(ssr)/./node_modules/estree-util-to-js/lib/jsx.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Program, string>} Processor\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */ \n/**\n * Serialize an esast (estree) program to JavaScript.\n *\n * @type {import('unified').Plugin<[Readonly<ProcessorOptions>], Program, string>}\n */ function recmaStringify(options) {\n    // @ts-expect-error: TS is wrong about `this`.\n    // eslint-disable-next-line unicorn/no-this-assignment\n    const self = /** @type {Processor} */ this;\n    const { SourceMapGenerator } = options;\n    self.compiler = compiler;\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {string}\n   *   JavaScript.\n   */ function compiler(tree, file) {\n        const result = SourceMapGenerator ? (0,estree_util_to_js__WEBPACK_IMPORTED_MODULE_0__.toJs)(tree, {\n            SourceMapGenerator,\n            filePath: file.path || \"unknown.mdx\",\n            handlers: estree_util_to_js__WEBPACK_IMPORTED_MODULE_1__.jsx\n        }) : (0,estree_util_to_js__WEBPACK_IMPORTED_MODULE_0__.toJs)(tree, {\n            handlers: estree_util_to_js__WEBPACK_IMPORTED_MODULE_1__.jsx\n        });\n        file.map = result.map;\n        return result.value;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWNtYS1zdHJpbmdpZnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7OztDQU1DLEdBRTBDO0FBRTNDOzs7O0NBSUMsR0FDTSxTQUFTRSxlQUFlQyxPQUFPO0lBQ3BDLDhDQUE4QztJQUM5QyxzREFBc0Q7SUFDdEQsTUFBTUMsT0FBTyxzQkFBc0IsR0FBSSxJQUFJO0lBQzNDLE1BQU0sRUFBQ0Msa0JBQWtCLEVBQUMsR0FBR0Y7SUFFN0JDLEtBQUtFLFFBQVEsR0FBR0E7SUFFaEI7Ozs7Ozs7R0FPQyxHQUNELFNBQVNBLFNBQVNDLElBQUksRUFBRUMsSUFBSTtRQUMxQixNQUFNQyxTQUFTSixxQkFDWEosdURBQUlBLENBQUNNLE1BQU07WUFDVEY7WUFDQUssVUFBVUYsS0FBS0csSUFBSSxJQUFJO1lBQ3ZCQyxVQUFVWixrREFBR0E7UUFDZixLQUNBQyx1REFBSUEsQ0FBQ00sTUFBTTtZQUFDSyxVQUFVWixrREFBR0E7UUFBQTtRQUU3QlEsS0FBS0ssR0FBRyxHQUFHSixPQUFPSSxHQUFHO1FBRXJCLE9BQU9KLE9BQU9LLEtBQUs7SUFDckI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlY21hLXN0cmluZ2lmeS5qcz9lMjYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLlByb2dyYW19IFByb2dyYW1cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaWZpZWQnKS5Qcm9jZXNzb3I8dW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgUHJvZ3JhbSwgc3RyaW5nPn0gUHJvY2Vzc29yXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd2ZmlsZScpLlZGaWxlfSBWRmlsZVxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2NvcmUuanMnKS5Qcm9jZXNzb3JPcHRpb25zfSBQcm9jZXNzb3JPcHRpb25zXG4gKi9cblxuaW1wb3J0IHtqc3gsIHRvSnN9IGZyb20gJ2VzdHJlZS11dGlsLXRvLWpzJ1xuXG4vKipcbiAqIFNlcmlhbGl6ZSBhbiBlc2FzdCAoZXN0cmVlKSBwcm9ncmFtIHRvIEphdmFTY3JpcHQuXG4gKlxuICogQHR5cGUge2ltcG9ydCgndW5pZmllZCcpLlBsdWdpbjxbUmVhZG9ubHk8UHJvY2Vzc29yT3B0aW9ucz5dLCBQcm9ncmFtLCBzdHJpbmc+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjbWFTdHJpbmdpZnkob3B0aW9ucykge1xuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBUUyBpcyB3cm9uZyBhYm91dCBgdGhpc2AuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXRoaXMtYXNzaWdubWVudFxuICBjb25zdCBzZWxmID0gLyoqIEB0eXBlIHtQcm9jZXNzb3J9ICovICh0aGlzKVxuICBjb25zdCB7U291cmNlTWFwR2VuZXJhdG9yfSA9IG9wdGlvbnNcblxuICBzZWxmLmNvbXBpbGVyID0gY29tcGlsZXJcblxuICAvKipcbiAgICogQHBhcmFtIHtQcm9ncmFtfSB0cmVlXG4gICAqICAgVHJlZS5cbiAgICogQHBhcmFtIHtWRmlsZX0gZmlsZVxuICAgKiAgIEZpbGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqICAgSmF2YVNjcmlwdC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBpbGVyKHRyZWUsIGZpbGUpIHtcbiAgICBjb25zdCByZXN1bHQgPSBTb3VyY2VNYXBHZW5lcmF0b3JcbiAgICAgID8gdG9Kcyh0cmVlLCB7XG4gICAgICAgICAgU291cmNlTWFwR2VuZXJhdG9yLFxuICAgICAgICAgIGZpbGVQYXRoOiBmaWxlLnBhdGggfHwgJ3Vua25vd24ubWR4JyxcbiAgICAgICAgICBoYW5kbGVyczoganN4XG4gICAgICAgIH0pXG4gICAgICA6IHRvSnModHJlZSwge2hhbmRsZXJzOiBqc3h9KVxuXG4gICAgZmlsZS5tYXAgPSByZXN1bHQubWFwXG5cbiAgICByZXR1cm4gcmVzdWx0LnZhbHVlXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJqc3giLCJ0b0pzIiwicmVjbWFTdHJpbmdpZnkiLCJvcHRpb25zIiwic2VsZiIsIlNvdXJjZU1hcEdlbmVyYXRvciIsImNvbXBpbGVyIiwidHJlZSIsImZpbGUiLCJyZXN1bHQiLCJmaWxlUGF0aCIsInBhdGgiLCJoYW5kbGVycyIsIm1hcCIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/recma-stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js":
/*!*************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rehypeRecma: () => (/* binding */ rehypeRecma)\n/* harmony export */ });\n/* harmony import */ var hast_util_to_estree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hast-util-to-estree */ \"(ssr)/./node_modules/hast-util-to-estree/lib/index.js\");\n/**\n * @typedef {import('estree-jsx').Program} Program\n *\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */ \n/**\n * A plugin to transform an HTML (hast) tree to a JS (estree).\n * `hast-util-to-estree` does all the work for us!\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function rehypeRecma(options) {\n    /**\n   * @param {Root} tree\n   *   Tree (hast).\n   * @returns {Program}\n   *   Program (esast).\n   */ return function(tree) {\n        return (0,hast_util_to_estree__WEBPACK_IMPORTED_MODULE_0__.toEstree)(tree, options);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWh5cGUtcmVjbWEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7O0NBTUMsR0FFMkM7QUFFNUM7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTQyxZQUFZQyxPQUFPO0lBQ2pDOzs7OztHQUtDLEdBQ0QsT0FBTyxTQUFVQyxJQUFJO1FBQ25CLE9BQU9ILDZEQUFRQSxDQUFDRyxNQUFNRDtJQUN4QjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVoeXBlLXJlY21hLmpzP2M0NjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuUHJvZ3JhbX0gUHJvZ3JhbVxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBSb290XG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vY29yZS5qcycpLlByb2Nlc3Nvck9wdGlvbnN9IFByb2Nlc3Nvck9wdGlvbnNcbiAqL1xuXG5pbXBvcnQge3RvRXN0cmVlfSBmcm9tICdoYXN0LXV0aWwtdG8tZXN0cmVlJ1xuXG4vKipcbiAqIEEgcGx1Z2luIHRvIHRyYW5zZm9ybSBhbiBIVE1MIChoYXN0KSB0cmVlIHRvIGEgSlMgKGVzdHJlZSkuXG4gKiBgaGFzdC11dGlsLXRvLWVzdHJlZWAgZG9lcyBhbGwgdGhlIHdvcmsgZm9yIHVzIVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvY2Vzc29yT3B0aW9ucz59IG9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnNcbiAqICAgVHJhbnNmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVoeXBlUmVjbWEob3B0aW9ucykge1xuICAvKipcbiAgICogQHBhcmFtIHtSb290fSB0cmVlXG4gICAqICAgVHJlZSAoaGFzdCkuXG4gICAqIEByZXR1cm5zIHtQcm9ncmFtfVxuICAgKiAgIFByb2dyYW0gKGVzYXN0KS5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSkge1xuICAgIHJldHVybiB0b0VzdHJlZSh0cmVlLCBvcHRpb25zKVxuICB9XG59XG4iXSwibmFtZXMiOlsidG9Fc3RyZWUiLCJyZWh5cGVSZWNtYSIsIm9wdGlvbnMiLCJ0cmVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-recma.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js":
/*!******************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rehypeRemoveRaw: () => (/* binding */ rehypeRemoveRaw)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit/lib/index.js\");\n/**\n * @typedef {import('hast').Root} Root\n */ \n/**\n * A tiny plugin that removes raw HTML.\n *\n * This is needed if the format is `md` and `rehype-raw` was not used to parse\n * dangerous HTML into nodes.\n *\n * @returns\n *   Transform.\n */ function rehypeRemoveRaw() {\n    /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree) {\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, \"raw\", function(_, index, parent) {\n            if (parent && typeof index === \"number\") {\n                parent.children.splice(index, 1);\n                return index;\n            }\n        });\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWh5cGUtcmVtb3ZlLXJhdy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztDQUVDLEdBRXFDO0FBRXRDOzs7Ozs7OztDQVFDLEdBQ00sU0FBU0M7SUFDZDs7Ozs7R0FLQyxHQUNELE9BQU8sU0FBVUMsSUFBSTtRQUNuQkYsdURBQUtBLENBQUNFLE1BQU0sT0FBTyxTQUFVQyxDQUFDLEVBQUVDLEtBQUssRUFBRUMsTUFBTTtZQUMzQyxJQUFJQSxVQUFVLE9BQU9ELFVBQVUsVUFBVTtnQkFDdkNDLE9BQU9DLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDSCxPQUFPO2dCQUM5QixPQUFPQTtZQUNUO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVoeXBlLXJlbW92ZS1yYXcuanM/NTBjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBSb290XG4gKi9cblxuaW1wb3J0IHt2aXNpdH0gZnJvbSAndW5pc3QtdXRpbC12aXNpdCdcblxuLyoqXG4gKiBBIHRpbnkgcGx1Z2luIHRoYXQgcmVtb3ZlcyByYXcgSFRNTC5cbiAqXG4gKiBUaGlzIGlzIG5lZWRlZCBpZiB0aGUgZm9ybWF0IGlzIGBtZGAgYW5kIGByZWh5cGUtcmF3YCB3YXMgbm90IHVzZWQgdG8gcGFyc2VcbiAqIGRhbmdlcm91cyBIVE1MIGludG8gbm9kZXMuXG4gKlxuICogQHJldHVybnNcbiAqICAgVHJhbnNmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVoeXBlUmVtb3ZlUmF3KCkge1xuICAvKipcbiAgICogQHBhcmFtIHtSb290fSB0cmVlXG4gICAqICAgVHJlZS5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmVlKSB7XG4gICAgdmlzaXQodHJlZSwgJ3JhdycsIGZ1bmN0aW9uIChfLCBpbmRleCwgcGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50ICYmIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgcmV0dXJuIGluZGV4XG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbInZpc2l0IiwicmVoeXBlUmVtb3ZlUmF3IiwidHJlZSIsIl8iLCJpbmRleCIsInBhcmVudCIsImNoaWxkcmVuIiwic3BsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js":
/*!************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   remarkMarkAndUnravel: () => (/* binding */ remarkMarkAndUnravel)\n/* harmony export */ });\n/* harmony import */ var collapse_white_space__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! collapse-white-space */ \"(ssr)/./node_modules/collapse-white-space/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit/lib/index.js\");\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').RootContent} RootContent\n */ \n\n/**\n * A tiny plugin that unravels `<p><h1>x</h1></p>` but also\n * `<p><Component /></p>` (so it has no knowledge of “HTML”).\n *\n * It also marks JSX as being explicitly JSX, so when a user passes a `h1`\n * component, it is used for `# heading` but not for `<h1>heading</h1>`.\n *\n * @returns\n *   Transform.\n */ function remarkMarkAndUnravel() {\n    /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree) {\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, function(node, index, parent) {\n            let offset = -1;\n            let all = true;\n            let oneOrMore = false;\n            if (parent && typeof index === \"number\" && node.type === \"paragraph\") {\n                const children = node.children;\n                while(++offset < children.length){\n                    const child = children[offset];\n                    if (child.type === \"mdxJsxTextElement\" || child.type === \"mdxTextExpression\") {\n                        oneOrMore = true;\n                    } else if (child.type === \"text\" && (0,collapse_white_space__WEBPACK_IMPORTED_MODULE_1__.collapseWhiteSpace)(child.value, {\n                        style: \"html\",\n                        trim: true\n                    }) === \"\") {\n                    // Empty.\n                    } else {\n                        all = false;\n                        break;\n                    }\n                }\n                if (all && oneOrMore) {\n                    offset = -1;\n                    /** @type {Array<RootContent>} */ const newChildren = [];\n                    while(++offset < children.length){\n                        const child = children[offset];\n                        if (child.type === \"mdxJsxTextElement\") {\n                            // @ts-expect-error: mutate because it is faster; content model is fine.\n                            child.type = \"mdxJsxFlowElement\";\n                        }\n                        if (child.type === \"mdxTextExpression\") {\n                            // @ts-expect-error: mutate because it is faster; content model is fine.\n                            child.type = \"mdxFlowExpression\";\n                        }\n                        if (child.type === \"text\" && /^[\\t\\r\\n ]+$/.test(String(child.value))) {\n                        // Empty.\n                        } else {\n                            newChildren.push(child);\n                        }\n                    }\n                    parent.children.splice(index, 1, ...newChildren);\n                    return index;\n                }\n            }\n            if (node.type === \"mdxJsxFlowElement\" || node.type === \"mdxJsxTextElement\") {\n                const data = node.data || (node.data = {});\n                data._mdxExplicitJsx = true;\n            }\n        });\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZW1hcmstbWFyay1hbmQtdW5yYXZlbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7O0NBR0MsR0FFc0Q7QUFDakI7QUFFdEM7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0U7SUFDZDs7Ozs7R0FLQyxHQUNELE9BQU8sU0FBVUMsSUFBSTtRQUNuQkYsdURBQUtBLENBQUNFLE1BQU0sU0FBVUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLE1BQU07WUFDdkMsSUFBSUMsU0FBUyxDQUFDO1lBQ2QsSUFBSUMsTUFBTTtZQUNWLElBQUlDLFlBQVk7WUFFaEIsSUFBSUgsVUFBVSxPQUFPRCxVQUFVLFlBQVlELEtBQUtNLElBQUksS0FBSyxhQUFhO2dCQUNwRSxNQUFNQyxXQUFXUCxLQUFLTyxRQUFRO2dCQUU5QixNQUFPLEVBQUVKLFNBQVNJLFNBQVNDLE1BQU0sQ0FBRTtvQkFDakMsTUFBTUMsUUFBUUYsUUFBUSxDQUFDSixPQUFPO29CQUU5QixJQUNFTSxNQUFNSCxJQUFJLEtBQUssdUJBQ2ZHLE1BQU1ILElBQUksS0FBSyxxQkFDZjt3QkFDQUQsWUFBWTtvQkFDZCxPQUFPLElBQ0xJLE1BQU1ILElBQUksS0FBSyxVQUNmVix3RUFBa0JBLENBQUNhLE1BQU1DLEtBQUssRUFBRTt3QkFBQ0MsT0FBTzt3QkFBUUMsTUFBTTtvQkFBSSxPQUFPLElBQ2pFO29CQUNBLFNBQVM7b0JBQ1gsT0FBTzt3QkFDTFIsTUFBTTt3QkFDTjtvQkFDRjtnQkFDRjtnQkFFQSxJQUFJQSxPQUFPQyxXQUFXO29CQUNwQkYsU0FBUyxDQUFDO29CQUVWLCtCQUErQixHQUMvQixNQUFNVSxjQUFjLEVBQUU7b0JBRXRCLE1BQU8sRUFBRVYsU0FBU0ksU0FBU0MsTUFBTSxDQUFFO3dCQUNqQyxNQUFNQyxRQUFRRixRQUFRLENBQUNKLE9BQU87d0JBRTlCLElBQUlNLE1BQU1ILElBQUksS0FBSyxxQkFBcUI7NEJBQ3RDLHdFQUF3RTs0QkFDeEVHLE1BQU1ILElBQUksR0FBRzt3QkFDZjt3QkFFQSxJQUFJRyxNQUFNSCxJQUFJLEtBQUsscUJBQXFCOzRCQUN0Qyx3RUFBd0U7NEJBQ3hFRyxNQUFNSCxJQUFJLEdBQUc7d0JBQ2Y7d0JBRUEsSUFDRUcsTUFBTUgsSUFBSSxLQUFLLFVBQ2YsZUFBZVEsSUFBSSxDQUFDQyxPQUFPTixNQUFNQyxLQUFLLElBQ3RDO3dCQUNBLFNBQVM7d0JBQ1gsT0FBTzs0QkFDTEcsWUFBWUcsSUFBSSxDQUFDUDt3QkFDbkI7b0JBQ0Y7b0JBRUFQLE9BQU9LLFFBQVEsQ0FBQ1UsTUFBTSxDQUFDaEIsT0FBTyxNQUFNWTtvQkFDcEMsT0FBT1o7Z0JBQ1Q7WUFDRjtZQUVBLElBQ0VELEtBQUtNLElBQUksS0FBSyx1QkFDZE4sS0FBS00sSUFBSSxLQUFLLHFCQUNkO2dCQUNBLE1BQU1ZLE9BQU9sQixLQUFLa0IsSUFBSSxJQUFLbEIsQ0FBQUEsS0FBS2tCLElBQUksR0FBRyxDQUFDO2dCQUN4Q0EsS0FBS0MsZUFBZSxHQUFHO1lBQ3pCO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9wbHVnaW4vcmVtYXJrLW1hcmstYW5kLXVucmF2ZWwuanM/YzIzOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290Q29udGVudH0gUm9vdENvbnRlbnRcbiAqL1xuXG5pbXBvcnQge2NvbGxhcHNlV2hpdGVTcGFjZX0gZnJvbSAnY29sbGFwc2Utd2hpdGUtc3BhY2UnXG5pbXBvcnQge3Zpc2l0fSBmcm9tICd1bmlzdC11dGlsLXZpc2l0J1xuXG4vKipcbiAqIEEgdGlueSBwbHVnaW4gdGhhdCB1bnJhdmVscyBgPHA+PGgxPng8L2gxPjwvcD5gIGJ1dCBhbHNvXG4gKiBgPHA+PENvbXBvbmVudCAvPjwvcD5gIChzbyBpdCBoYXMgbm8ga25vd2xlZGdlIG9mIOKAnEhUTUzigJ0pLlxuICpcbiAqIEl0IGFsc28gbWFya3MgSlNYIGFzIGJlaW5nIGV4cGxpY2l0bHkgSlNYLCBzbyB3aGVuIGEgdXNlciBwYXNzZXMgYSBgaDFgXG4gKiBjb21wb25lbnQsIGl0IGlzIHVzZWQgZm9yIGAjIGhlYWRpbmdgIGJ1dCBub3QgZm9yIGA8aDE+aGVhZGluZzwvaDE+YC5cbiAqXG4gKiBAcmV0dXJuc1xuICogICBUcmFuc2Zvcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1hcmtNYXJrQW5kVW5yYXZlbCgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Um9vdH0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSkge1xuICAgIHZpc2l0KHRyZWUsIGZ1bmN0aW9uIChub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gICAgICBsZXQgb2Zmc2V0ID0gLTFcbiAgICAgIGxldCBhbGwgPSB0cnVlXG4gICAgICBsZXQgb25lT3JNb3JlID0gZmFsc2VcblxuICAgICAgaWYgKHBhcmVudCAmJiB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInICYmIG5vZGUudHlwZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuXG5cbiAgICAgICAgd2hpbGUgKCsrb2Zmc2V0IDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltvZmZzZXRdXG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSAnbWR4SnN4VGV4dEVsZW1lbnQnIHx8XG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSAnbWR4VGV4dEV4cHJlc3Npb24nXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBvbmVPck1vcmUgPSB0cnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNoaWxkLnR5cGUgPT09ICd0ZXh0JyAmJlxuICAgICAgICAgICAgY29sbGFwc2VXaGl0ZVNwYWNlKGNoaWxkLnZhbHVlLCB7c3R5bGU6ICdodG1sJywgdHJpbTogdHJ1ZX0pID09PSAnJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gRW1wdHkuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsbCA9IGZhbHNlXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbGwgJiYgb25lT3JNb3JlKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gLTFcblxuICAgICAgICAgIC8qKiBAdHlwZSB7QXJyYXk8Um9vdENvbnRlbnQ+fSAqL1xuICAgICAgICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gW11cblxuICAgICAgICAgIHdoaWxlICgrK29mZnNldCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltvZmZzZXRdXG5cbiAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSAnbWR4SnN4VGV4dEVsZW1lbnQnKSB7XG4gICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZSBiZWNhdXNlIGl0IGlzIGZhc3RlcjsgY29udGVudCBtb2RlbCBpcyBmaW5lLlxuICAgICAgICAgICAgICBjaGlsZC50eXBlID0gJ21keEpzeEZsb3dFbGVtZW50J1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ21keFRleHRFeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUgYmVjYXVzZSBpdCBpcyBmYXN0ZXI7IGNvbnRlbnQgbW9kZWwgaXMgZmluZS5cbiAgICAgICAgICAgICAgY2hpbGQudHlwZSA9ICdtZHhGbG93RXhwcmVzc2lvbidcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBjaGlsZC50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgICAgICAgL15bXFx0XFxyXFxuIF0rJC8udGVzdChTdHJpbmcoY2hpbGQudmFsdWUpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIEVtcHR5LlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaChjaGlsZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxLCAuLi5uZXdDaGlsZHJlbilcbiAgICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIG5vZGUudHlwZSA9PT0gJ21keEpzeEZsb3dFbGVtZW50JyB8fFxuICAgICAgICBub2RlLnR5cGUgPT09ICdtZHhKc3hUZXh0RWxlbWVudCdcbiAgICAgICkge1xuICAgICAgICBjb25zdCBkYXRhID0gbm9kZS5kYXRhIHx8IChub2RlLmRhdGEgPSB7fSlcbiAgICAgICAgZGF0YS5fbWR4RXhwbGljaXRKc3ggPSB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNvbGxhcHNlV2hpdGVTcGFjZSIsInZpc2l0IiwicmVtYXJrTWFya0FuZFVucmF2ZWwiLCJ0cmVlIiwibm9kZSIsImluZGV4IiwicGFyZW50Iiwib2Zmc2V0IiwiYWxsIiwib25lT3JNb3JlIiwidHlwZSIsImNoaWxkcmVuIiwibGVuZ3RoIiwiY2hpbGQiLCJ2YWx1ZSIsInN0eWxlIiwidHJpbSIsIm5ld0NoaWxkcmVuIiwidGVzdCIsIlN0cmluZyIsInB1c2giLCJzcGxpY2UiLCJkYXRhIiwiX21keEV4cGxpY2l0SnN4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/**\n * @typedef {import('estree-jsx').Node} Node\n */ // Fix to show references to above types in VS Code.\n\"\";\n/**\n * @param {Readonly<Node>} from\n *   Node to take from.\n * @param {Node} to\n *   Node to add to.\n * @returns {undefined}\n *   Nothing.\n */ function create(from, to) {\n    /** @type {Array<keyof Node>} */ // @ts-expect-error: `start`, `end`, `comments` are custom Acorn fields.\n    const fields = [\n        \"start\",\n        \"end\",\n        \"loc\",\n        \"range\",\n        \"comments\"\n    ];\n    let index = -1;\n    while(++index < fields.length){\n        const field = fields[index];\n        if (field in from) {\n            // @ts-expect-error: assume they’re settable.\n            to[field] = from[field];\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtY3JlYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUVELG9EQUFvRDtBQUNwRDtBQUVBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTQSxPQUFPQyxJQUFJLEVBQUVDLEVBQUU7SUFDN0IsOEJBQThCLEdBQzlCLHdFQUF3RTtJQUN4RSxNQUFNQyxTQUFTO1FBQUM7UUFBUztRQUFPO1FBQU87UUFBUztLQUFXO0lBQzNELElBQUlDLFFBQVEsQ0FBQztJQUViLE1BQU8sRUFBRUEsUUFBUUQsT0FBT0UsTUFBTSxDQUFFO1FBQzlCLE1BQU1DLFFBQVFILE1BQU0sQ0FBQ0MsTUFBTTtRQUUzQixJQUFJRSxTQUFTTCxNQUFNO1lBQ2pCLDZDQUE2QztZQUM3Q0MsRUFBRSxDQUFDSSxNQUFNLEdBQUdMLElBQUksQ0FBQ0ssTUFBTTtRQUN6QjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtY3JlYXRlLmpzPzZmNmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTm9kZX0gTm9kZVxuICovXG5cbi8vIEZpeCB0byBzaG93IHJlZmVyZW5jZXMgdG8gYWJvdmUgdHlwZXMgaW4gVlMgQ29kZS5cbicnXG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seTxOb2RlPn0gZnJvbVxuICogICBOb2RlIHRvIHRha2UgZnJvbS5cbiAqIEBwYXJhbSB7Tm9kZX0gdG9cbiAqICAgTm9kZSB0byBhZGQgdG8uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKGZyb20sIHRvKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8a2V5b2YgTm9kZT59ICovXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IGBzdGFydGAsIGBlbmRgLCBgY29tbWVudHNgIGFyZSBjdXN0b20gQWNvcm4gZmllbGRzLlxuICBjb25zdCBmaWVsZHMgPSBbJ3N0YXJ0JywgJ2VuZCcsICdsb2MnLCAncmFuZ2UnLCAnY29tbWVudHMnXVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgZmllbGRzLmxlbmd0aCkge1xuICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2luZGV4XVxuXG4gICAgaWYgKGZpZWxkIGluIGZyb20pIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGFzc3VtZSB0aGV54oCZcmUgc2V0dGFibGUuXG4gICAgICB0b1tmaWVsZF0gPSBmcm9tW2ZpZWxkXVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZSIsImZyb20iLCJ0byIsImZpZWxkcyIsImluZGV4IiwibGVuZ3RoIiwiZmllbGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   declarationToExpression: () => (/* binding */ declarationToExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/**\n * @typedef {import('estree-jsx').Declaration} Declaration\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').MaybeNamedClassDeclaration} MaybeNamedClassDeclaration\n * @typedef {import('estree-jsx').MaybeNamedFunctionDeclaration} MaybeNamedFunctionDeclaration\n */ \n/**\n * Turn a declaration into an expression.\n *\n * Doesn’t work for variable declarations, but that’s fine for our use case\n * because currently we’re using this utility for export default declarations,\n * which can’t contain variable declarations.\n *\n * @param {Readonly<Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration>} declaration\n *   Declaration.\n * @returns {Expression}\n *   Expression.\n */ function declarationToExpression(declaration) {\n    if (declaration.type === \"FunctionDeclaration\") {\n        return {\n            ...declaration,\n            type: \"FunctionExpression\"\n        };\n    }\n    // This is currently an internal utility so the next shouldn’t happen or a\n    // maintainer is making a mistake.\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(declaration.type === \"ClassDeclaration\", \"unexpected node type\");\n    return {\n        ...declaration,\n        type: \"ClassExpression\"\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtZGVjbGFyYXRpb24tdG8tZXhwcmVzc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztDQUtDLEdBRWtDO0FBRW5DOzs7Ozs7Ozs7OztDQVdDLEdBQ00sU0FBU0Usd0JBQXdCQyxXQUFXO0lBQ2pELElBQUlBLFlBQVlDLElBQUksS0FBSyx1QkFBdUI7UUFDOUMsT0FBTztZQUFDLEdBQUdELFdBQVc7WUFBRUMsTUFBTTtRQUFvQjtJQUNwRDtJQUVBLDBFQUEwRTtJQUMxRSxrQ0FBa0M7SUFDbENILDBDQUFNQSxDQUFDRSxZQUFZQyxJQUFJLEtBQUssb0JBQW9CO0lBQ2hELE9BQU87UUFBQyxHQUFHRCxXQUFXO1FBQUVDLE1BQU07SUFBaUI7QUFDakQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtZGVjbGFyYXRpb24tdG8tZXhwcmVzc2lvbi5qcz9lYmU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkRlY2xhcmF0aW9ufSBEZWNsYXJhdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkV4cHJlc3Npb259IEV4cHJlc3Npb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5NYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvbn0gTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5NYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbn0gTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb25cbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuXG4vKipcbiAqIFR1cm4gYSBkZWNsYXJhdGlvbiBpbnRvIGFuIGV4cHJlc3Npb24uXG4gKlxuICogRG9lc27igJl0IHdvcmsgZm9yIHZhcmlhYmxlIGRlY2xhcmF0aW9ucywgYnV0IHRoYXTigJlzIGZpbmUgZm9yIG91ciB1c2UgY2FzZVxuICogYmVjYXVzZSBjdXJyZW50bHkgd2XigJlyZSB1c2luZyB0aGlzIHV0aWxpdHkgZm9yIGV4cG9ydCBkZWZhdWx0IGRlY2xhcmF0aW9ucyxcbiAqIHdoaWNoIGNhbuKAmXQgY29udGFpbiB2YXJpYWJsZSBkZWNsYXJhdGlvbnMuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb24+fSBkZWNsYXJhdGlvblxuICogICBEZWNsYXJhdGlvbi5cbiAqIEByZXR1cm5zIHtFeHByZXNzaW9ufVxuICogICBFeHByZXNzaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyYXRpb25Ub0V4cHJlc3Npb24oZGVjbGFyYXRpb24pIHtcbiAgaWYgKGRlY2xhcmF0aW9uLnR5cGUgPT09ICdGdW5jdGlvbkRlY2xhcmF0aW9uJykge1xuICAgIHJldHVybiB7Li4uZGVjbGFyYXRpb24sIHR5cGU6ICdGdW5jdGlvbkV4cHJlc3Npb24nfVxuICB9XG5cbiAgLy8gVGhpcyBpcyBjdXJyZW50bHkgYW4gaW50ZXJuYWwgdXRpbGl0eSBzbyB0aGUgbmV4dCBzaG91bGRu4oCZdCBoYXBwZW4gb3IgYVxuICAvLyBtYWludGFpbmVyIGlzIG1ha2luZyBhIG1pc3Rha2UuXG4gIGFzc2VydChkZWNsYXJhdGlvbi50eXBlID09PSAnQ2xhc3NEZWNsYXJhdGlvbicsICd1bmV4cGVjdGVkIG5vZGUgdHlwZScpXG4gIHJldHVybiB7Li4uZGVjbGFyYXRpb24sIHR5cGU6ICdDbGFzc0V4cHJlc3Npb24nfVxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwiZGVjbGFyYXRpb25Ub0V4cHJlc3Npb24iLCJkZWNsYXJhdGlvbiIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDeclaration: () => (/* binding */ isDeclaration)\n/* harmony export */ });\n/**\n * @typedef {import('estree-jsx').Declaration} Declaration\n * @typedef {import('estree-jsx').MaybeNamedClassDeclaration} MaybeNamedClassDeclaration\n * @typedef {import('estree-jsx').MaybeNamedFunctionDeclaration} MaybeNamedFunctionDeclaration\n * @typedef {import('estree-jsx').Node} Node\n */ // Fix to show references to above types in VS Code.\n\"\";\n/**\n * Check if `node` is a declaration.\n *\n * @param {Readonly<MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration | Node>} node\n *   Node to check.\n * @returns {node is Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration}\n *   Whether `node` is a declaration.\n */ function isDeclaration(node) {\n    return Boolean(node.type === \"FunctionDeclaration\" || node.type === \"ClassDeclaration\" || node.type === \"VariableDeclaration\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtaXMtZGVjbGFyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztDQUtDLEdBRUQsb0RBQW9EO0FBQ3BEO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNBLGNBQWNDLElBQUk7SUFDaEMsT0FBT0MsUUFDTEQsS0FBS0UsSUFBSSxLQUFLLHlCQUNaRixLQUFLRSxJQUFJLEtBQUssc0JBQ2RGLEtBQUtFLElBQUksS0FBSztBQUVwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1pcy1kZWNsYXJhdGlvbi5qcz9hNmE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkRlY2xhcmF0aW9ufSBEZWNsYXJhdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLk1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9ufSBNYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLk1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9ufSBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLk5vZGV9IE5vZGVcbiAqL1xuXG4vLyBGaXggdG8gc2hvdyByZWZlcmVuY2VzIHRvIGFib3ZlIHR5cGVzIGluIFZTIENvZGUuXG4nJ1xuXG4vKipcbiAqIENoZWNrIGlmIGBub2RlYCBpcyBhIGRlY2xhcmF0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24gfCBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbiB8IE5vZGU+fSBub2RlXG4gKiAgIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7bm9kZSBpcyBEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRDbGFzc0RlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZEZ1bmN0aW9uRGVjbGFyYXRpb259XG4gKiAgIFdoZXRoZXIgYG5vZGVgIGlzIGEgZGVjbGFyYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RlY2xhcmF0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgbm9kZS50eXBlID09PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicgfHxcbiAgICAgIG5vZGUudHlwZSA9PT0gJ0NsYXNzRGVjbGFyYXRpb24nIHx8XG4gICAgICBub2RlLnR5cGUgPT09ICdWYXJpYWJsZURlY2xhcmF0aW9uJ1xuICApXG59XG4iXSwibmFtZXMiOlsiaXNEZWNsYXJhdGlvbiIsIm5vZGUiLCJCb29sZWFuIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   specifiersToDeclarations: () => (/* binding */ specifiersToDeclarations)\n/* harmony export */ });\n/* harmony import */ var _estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./estree-util-create.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/**\n * @typedef {import('estree-jsx').AssignmentProperty} AssignmentProperty\n * @typedef {import('estree-jsx').ExportSpecifier} ExportSpecifier\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportDefaultSpecifier} ImportDefaultSpecifier\n * @typedef {import('estree-jsx').ImportNamespaceSpecifier} ImportNamespaceSpecifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').VariableDeclarator} VariableDeclarator\n */ \n/**\n * @param {ReadonlyArray<Readonly<ExportSpecifier> | Readonly<ImportDefaultSpecifier> | Readonly<ImportNamespaceSpecifier> | Readonly<ImportSpecifier>>} specifiers\n *   Specifiers.\n * @param {Readonly<Expression>} init\n *   Initializer.\n * @returns {Array<VariableDeclarator>}\n *   Declarations.\n */ function specifiersToDeclarations(specifiers, init) {\n    let index = -1;\n    /** @type {Array<VariableDeclarator>} */ const declarations = [];\n    /** @type {Array<ExportSpecifier | ImportDefaultSpecifier | ImportSpecifier>} */ const otherSpecifiers = [];\n    // Can only be one according to JS syntax.\n    /** @type {ImportNamespaceSpecifier | undefined} */ let importNamespaceSpecifier;\n    while(++index < specifiers.length){\n        const specifier = specifiers[index];\n        if (specifier.type === \"ImportNamespaceSpecifier\") {\n            importNamespaceSpecifier = specifier;\n        } else {\n            otherSpecifiers.push(specifier);\n        }\n    }\n    if (importNamespaceSpecifier) {\n        /** @type {VariableDeclarator} */ const declarator = {\n            type: \"VariableDeclarator\",\n            id: importNamespaceSpecifier.local,\n            init\n        };\n        (0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(importNamespaceSpecifier, declarator);\n        declarations.push(declarator);\n    }\n    declarations.push({\n        type: \"VariableDeclarator\",\n        id: {\n            type: \"ObjectPattern\",\n            properties: otherSpecifiers.map(function(specifier) {\n                /** @type {Identifier} */ let key = specifier.type === \"ImportSpecifier\" ? specifier.imported : specifier.type === \"ExportSpecifier\" ? specifier.exported : {\n                    type: \"Identifier\",\n                    name: \"default\"\n                };\n                let value = specifier.local;\n                // Switch them around if we’re exporting.\n                if (specifier.type === \"ExportSpecifier\") {\n                    value = key;\n                    key = specifier.local;\n                }\n                /** @type {AssignmentProperty} */ const property = {\n                    type: \"Property\",\n                    kind: \"init\",\n                    shorthand: key.name === value.name,\n                    method: false,\n                    computed: false,\n                    key,\n                    value\n                };\n                (0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(specifier, property);\n                return property;\n            })\n        },\n        init: importNamespaceSpecifier ? {\n            type: \"Identifier\",\n            name: importNamespaceSpecifier.local.name\n        } : init\n    });\n    return declarations;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtc3BlY2lmaWVycy10by1kZWNsYXJhdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7O0NBU0MsR0FFNkM7QUFFOUM7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNDLHlCQUF5QkMsVUFBVSxFQUFFQyxJQUFJO0lBQ3ZELElBQUlDLFFBQVEsQ0FBQztJQUNiLHNDQUFzQyxHQUN0QyxNQUFNQyxlQUFlLEVBQUU7SUFDdkIsOEVBQThFLEdBQzlFLE1BQU1DLGtCQUFrQixFQUFFO0lBQzFCLDBDQUEwQztJQUMxQyxpREFBaUQsR0FDakQsSUFBSUM7SUFFSixNQUFPLEVBQUVILFFBQVFGLFdBQVdNLE1BQU0sQ0FBRTtRQUNsQyxNQUFNQyxZQUFZUCxVQUFVLENBQUNFLE1BQU07UUFFbkMsSUFBSUssVUFBVUMsSUFBSSxLQUFLLDRCQUE0QjtZQUNqREgsMkJBQTJCRTtRQUM3QixPQUFPO1lBQ0xILGdCQUFnQkssSUFBSSxDQUFDRjtRQUN2QjtJQUNGO0lBRUEsSUFBSUYsMEJBQTBCO1FBQzVCLCtCQUErQixHQUMvQixNQUFNSyxhQUFhO1lBQ2pCRixNQUFNO1lBQ05HLElBQUlOLHlCQUF5Qk8sS0FBSztZQUNsQ1g7UUFDRjtRQUNBSCw4REFBTUEsQ0FBQ08sMEJBQTBCSztRQUNqQ1AsYUFBYU0sSUFBSSxDQUFDQztJQUNwQjtJQUVBUCxhQUFhTSxJQUFJLENBQUM7UUFDaEJELE1BQU07UUFDTkcsSUFBSTtZQUNGSCxNQUFNO1lBQ05LLFlBQVlULGdCQUFnQlUsR0FBRyxDQUFDLFNBQVVQLFNBQVM7Z0JBQ2pELHVCQUF1QixHQUN2QixJQUFJUSxNQUNGUixVQUFVQyxJQUFJLEtBQUssb0JBQ2ZELFVBQVVTLFFBQVEsR0FDbEJULFVBQVVDLElBQUksS0FBSyxvQkFDakJELFVBQVVVLFFBQVEsR0FDbEI7b0JBQUNULE1BQU07b0JBQWNVLE1BQU07Z0JBQVM7Z0JBQzVDLElBQUlDLFFBQVFaLFVBQVVLLEtBQUs7Z0JBRTNCLHlDQUF5QztnQkFDekMsSUFBSUwsVUFBVUMsSUFBSSxLQUFLLG1CQUFtQjtvQkFDeENXLFFBQVFKO29CQUNSQSxNQUFNUixVQUFVSyxLQUFLO2dCQUN2QjtnQkFFQSwrQkFBK0IsR0FDL0IsTUFBTVEsV0FBVztvQkFDZlosTUFBTTtvQkFDTmEsTUFBTTtvQkFDTkMsV0FBV1AsSUFBSUcsSUFBSSxLQUFLQyxNQUFNRCxJQUFJO29CQUNsQ0ssUUFBUTtvQkFDUkMsVUFBVTtvQkFDVlQ7b0JBQ0FJO2dCQUNGO2dCQUNBckIsOERBQU1BLENBQUNTLFdBQVdhO2dCQUNsQixPQUFPQTtZQUNUO1FBQ0Y7UUFDQW5CLE1BQU1JLDJCQUNGO1lBQUNHLE1BQU07WUFBY1UsTUFBTWIseUJBQXlCTyxLQUFLLENBQUNNLElBQUk7UUFBQSxJQUM5RGpCO0lBQ047SUFFQSxPQUFPRTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL2VzdHJlZS11dGlsLXNwZWNpZmllcnMtdG8tZGVjbGFyYXRpb25zLmpzPzc0ZmYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuQXNzaWdubWVudFByb3BlcnR5fSBBc3NpZ25tZW50UHJvcGVydHlcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5FeHBvcnRTcGVjaWZpZXJ9IEV4cG9ydFNwZWNpZmllclxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkV4cHJlc3Npb259IEV4cHJlc3Npb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5JZGVudGlmaWVyfSBJZGVudGlmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuSW1wb3J0RGVmYXVsdFNwZWNpZmllcn0gSW1wb3J0RGVmYXVsdFNwZWNpZmllclxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkltcG9ydE5hbWVzcGFjZVNwZWNpZmllcn0gSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuSW1wb3J0U3BlY2lmaWVyfSBJbXBvcnRTcGVjaWZpZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5WYXJpYWJsZURlY2xhcmF0b3J9IFZhcmlhYmxlRGVjbGFyYXRvclxuICovXG5cbmltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL2VzdHJlZS11dGlsLWNyZWF0ZS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8UmVhZG9ubHk8RXhwb3J0U3BlY2lmaWVyPiB8IFJlYWRvbmx5PEltcG9ydERlZmF1bHRTcGVjaWZpZXI+IHwgUmVhZG9ubHk8SW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyPiB8IFJlYWRvbmx5PEltcG9ydFNwZWNpZmllcj4+fSBzcGVjaWZpZXJzXG4gKiAgIFNwZWNpZmllcnMuXG4gKiBAcGFyYW0ge1JlYWRvbmx5PEV4cHJlc3Npb24+fSBpbml0XG4gKiAgIEluaXRpYWxpemVyLlxuICogQHJldHVybnMge0FycmF5PFZhcmlhYmxlRGVjbGFyYXRvcj59XG4gKiAgIERlY2xhcmF0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwZWNpZmllcnNUb0RlY2xhcmF0aW9ucyhzcGVjaWZpZXJzLCBpbml0KSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7QXJyYXk8VmFyaWFibGVEZWNsYXJhdG9yPn0gKi9cbiAgY29uc3QgZGVjbGFyYXRpb25zID0gW11cbiAgLyoqIEB0eXBlIHtBcnJheTxFeHBvcnRTcGVjaWZpZXIgfCBJbXBvcnREZWZhdWx0U3BlY2lmaWVyIHwgSW1wb3J0U3BlY2lmaWVyPn0gKi9cbiAgY29uc3Qgb3RoZXJTcGVjaWZpZXJzID0gW11cbiAgLy8gQ2FuIG9ubHkgYmUgb25lIGFjY29yZGluZyB0byBKUyBzeW50YXguXG4gIC8qKiBAdHlwZSB7SW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXG5cbiAgd2hpbGUgKCsraW5kZXggPCBzcGVjaWZpZXJzLmxlbmd0aCkge1xuICAgIGNvbnN0IHNwZWNpZmllciA9IHNwZWNpZmllcnNbaW5kZXhdXG5cbiAgICBpZiAoc3BlY2lmaWVyLnR5cGUgPT09ICdJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXInKSB7XG4gICAgICBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIgPSBzcGVjaWZpZXJcbiAgICB9IGVsc2Uge1xuICAgICAgb3RoZXJTcGVjaWZpZXJzLnB1c2goc3BlY2lmaWVyKVxuICAgIH1cbiAgfVxuXG4gIGlmIChpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIpIHtcbiAgICAvKiogQHR5cGUge1ZhcmlhYmxlRGVjbGFyYXRvcn0gKi9cbiAgICBjb25zdCBkZWNsYXJhdG9yID0ge1xuICAgICAgdHlwZTogJ1ZhcmlhYmxlRGVjbGFyYXRvcicsXG4gICAgICBpZDogaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyLmxvY2FsLFxuICAgICAgaW5pdFxuICAgIH1cbiAgICBjcmVhdGUoaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyLCBkZWNsYXJhdG9yKVxuICAgIGRlY2xhcmF0aW9ucy5wdXNoKGRlY2xhcmF0b3IpXG4gIH1cblxuICBkZWNsYXJhdGlvbnMucHVzaCh7XG4gICAgdHlwZTogJ1ZhcmlhYmxlRGVjbGFyYXRvcicsXG4gICAgaWQ6IHtcbiAgICAgIHR5cGU6ICdPYmplY3RQYXR0ZXJuJyxcbiAgICAgIHByb3BlcnRpZXM6IG90aGVyU3BlY2lmaWVycy5tYXAoZnVuY3Rpb24gKHNwZWNpZmllcikge1xuICAgICAgICAvKiogQHR5cGUge0lkZW50aWZpZXJ9ICovXG4gICAgICAgIGxldCBrZXkgPVxuICAgICAgICAgIHNwZWNpZmllci50eXBlID09PSAnSW1wb3J0U3BlY2lmaWVyJ1xuICAgICAgICAgICAgPyBzcGVjaWZpZXIuaW1wb3J0ZWRcbiAgICAgICAgICAgIDogc3BlY2lmaWVyLnR5cGUgPT09ICdFeHBvcnRTcGVjaWZpZXInXG4gICAgICAgICAgICAgID8gc3BlY2lmaWVyLmV4cG9ydGVkXG4gICAgICAgICAgICAgIDoge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZTogJ2RlZmF1bHQnfVxuICAgICAgICBsZXQgdmFsdWUgPSBzcGVjaWZpZXIubG9jYWxcblxuICAgICAgICAvLyBTd2l0Y2ggdGhlbSBhcm91bmQgaWYgd2XigJlyZSBleHBvcnRpbmcuXG4gICAgICAgIGlmIChzcGVjaWZpZXIudHlwZSA9PT0gJ0V4cG9ydFNwZWNpZmllcicpIHtcbiAgICAgICAgICB2YWx1ZSA9IGtleVxuICAgICAgICAgIGtleSA9IHNwZWNpZmllci5sb2NhbFxuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEB0eXBlIHtBc3NpZ25tZW50UHJvcGVydHl9ICovXG4gICAgICAgIGNvbnN0IHByb3BlcnR5ID0ge1xuICAgICAgICAgIHR5cGU6ICdQcm9wZXJ0eScsXG4gICAgICAgICAga2luZDogJ2luaXQnLFxuICAgICAgICAgIHNob3J0aGFuZDoga2V5Lm5hbWUgPT09IHZhbHVlLm5hbWUsXG4gICAgICAgICAgbWV0aG9kOiBmYWxzZSxcbiAgICAgICAgICBjb21wdXRlZDogZmFsc2UsXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgY3JlYXRlKHNwZWNpZmllciwgcHJvcGVydHkpXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eVxuICAgICAgfSlcbiAgICB9LFxuICAgIGluaXQ6IGltcG9ydE5hbWVzcGFjZVNwZWNpZmllclxuICAgICAgPyB7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIubG9jYWwubmFtZX1cbiAgICAgIDogaW5pdFxuICB9KVxuXG4gIHJldHVybiBkZWNsYXJhdGlvbnNcbn1cbiJdLCJuYW1lcyI6WyJjcmVhdGUiLCJzcGVjaWZpZXJzVG9EZWNsYXJhdGlvbnMiLCJzcGVjaWZpZXJzIiwiaW5pdCIsImluZGV4IiwiZGVjbGFyYXRpb25zIiwib3RoZXJTcGVjaWZpZXJzIiwiaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyIiwibGVuZ3RoIiwic3BlY2lmaWVyIiwidHlwZSIsInB1c2giLCJkZWNsYXJhdG9yIiwiaWQiLCJsb2NhbCIsInByb3BlcnRpZXMiLCJtYXAiLCJrZXkiLCJpbXBvcnRlZCIsImV4cG9ydGVkIiwibmFtZSIsInZhbHVlIiwicHJvcGVydHkiLCJraW5kIiwic2hvcnRoYW5kIiwibWV0aG9kIiwiY29tcHV0ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toBinaryAddition: () => (/* binding */ toBinaryAddition)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/**\n * @typedef {import('estree-jsx').Expression} Expression\n */ \n/**\n * @param {ReadonlyArray<Expression>} expressions\n *   Expressions.\n * @returns {Expression}\n *   Addition.\n */ function toBinaryAddition(expressions) {\n    let index = -1;\n    /** @type {Expression | undefined} */ let left;\n    while(++index < expressions.length){\n        const right = expressions[index];\n        left = left ? {\n            type: \"BinaryExpression\",\n            left,\n            operator: \"+\",\n            right\n        } : right;\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(left, \"expected non-empty `expressions` to be passed\");\n    return left;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8tYmluYXJ5LWFkZGl0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FFa0M7QUFFbkM7Ozs7O0NBS0MsR0FDTSxTQUFTRSxpQkFBaUJDLFdBQVc7SUFDMUMsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsbUNBQW1DLEdBQ25DLElBQUlDO0lBRUosTUFBTyxFQUFFRCxRQUFRRCxZQUFZRyxNQUFNLENBQUU7UUFDbkMsTUFBTUMsUUFBUUosV0FBVyxDQUFDQyxNQUFNO1FBQ2hDQyxPQUFPQSxPQUFPO1lBQUNHLE1BQU07WUFBb0JIO1lBQU1JLFVBQVU7WUFBS0Y7UUFBSyxJQUFJQTtJQUN6RTtJQUVBTiwwQ0FBTUEsQ0FBQ0ksTUFBTTtJQUNiLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8tYmluYXJ5LWFkZGl0aW9uLmpzP2U1N2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuRXhwcmVzc2lvbn0gRXhwcmVzc2lvblxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PEV4cHJlc3Npb24+fSBleHByZXNzaW9uc1xuICogICBFeHByZXNzaW9ucy5cbiAqIEByZXR1cm5zIHtFeHByZXNzaW9ufVxuICogICBBZGRpdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQmluYXJ5QWRkaXRpb24oZXhwcmVzc2lvbnMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtFeHByZXNzaW9uIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgbGVmdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgY29uc3QgcmlnaHQgPSBleHByZXNzaW9uc1tpbmRleF1cbiAgICBsZWZ0ID0gbGVmdCA/IHt0eXBlOiAnQmluYXJ5RXhwcmVzc2lvbicsIGxlZnQsIG9wZXJhdG9yOiAnKycsIHJpZ2h0fSA6IHJpZ2h0XG4gIH1cblxuICBhc3NlcnQobGVmdCwgJ2V4cGVjdGVkIG5vbi1lbXB0eSBgZXhwcmVzc2lvbnNgIHRvIGJlIHBhc3NlZCcpXG4gIHJldHVybiBsZWZ0XG59XG4iXSwibmFtZXMiOlsib2siLCJhc3NlcnQiLCJ0b0JpbmFyeUFkZGl0aW9uIiwiZXhwcmVzc2lvbnMiLCJpbmRleCIsImxlZnQiLCJsZW5ndGgiLCJyaWdodCIsInR5cGUiLCJvcGVyYXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toIdOrMemberExpression: () => (/* binding */ toIdOrMemberExpression),\n/* harmony export */   toJsxIdOrMemberExpression: () => (/* binding */ toJsxIdOrMemberExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(ssr)/./node_modules/estree-util-is-identifier-name/lib/index.js\");\n/**\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').MemberExpression} MemberExpression\n */ \n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {Identifier | MemberExpression}\n *   Identifier or member expression.\n */ function toIdOrMemberExpression(ids) {\n    let index = -1;\n    /** @type {Identifier | Literal | MemberExpression | undefined} */ let object;\n    while(++index < ids.length){\n        const name = ids[index];\n        /** @type {Identifier | Literal} */ const id = typeof name === \"string\" && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name) ? {\n            type: \"Identifier\",\n            name\n        } : {\n            type: \"Literal\",\n            value: name\n        };\n        object = object ? {\n            type: \"MemberExpression\",\n            object,\n            property: id,\n            computed: id.type === \"Literal\",\n            optional: false\n        } : id;\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, \"expected non-empty `ids` to be passed\");\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object.type !== \"Literal\", \"expected identifier as left-most value\");\n    return object;\n}\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {JSXIdentifier | JSXMemberExpression}\n *   Identifier or member expression.\n */ function toJsxIdOrMemberExpression(ids) {\n    let index = -1;\n    /** @type {JSXIdentifier | JSXMemberExpression | undefined} */ let object;\n    while(++index < ids.length){\n        const name = ids[index];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(typeof name === \"string\" && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name, {\n            jsx: true\n        }), \"expected valid jsx identifier, not `\" + name + \"`\");\n        /** @type {JSXIdentifier} */ const id = {\n            type: \"JSXIdentifier\",\n            name\n        };\n        object = object ? {\n            type: \"JSXMemberExpression\",\n            object,\n            property: id\n        } : id;\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, \"expected non-empty `ids` to be passed\");\n    return object;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8taWQtb3ItbWVtYmVyLWV4cHJlc3Npb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Ozs7Q0FNQyxHQUVrQztBQUNvQztBQUV2RTs7Ozs7Q0FLQyxHQUNNLFNBQVNJLHVCQUF1QkMsR0FBRztJQUN4QyxJQUFJQyxRQUFRLENBQUM7SUFDYixnRUFBZ0UsR0FDaEUsSUFBSUM7SUFFSixNQUFPLEVBQUVELFFBQVFELElBQUlHLE1BQU0sQ0FBRTtRQUMzQixNQUFNTixPQUFPRyxHQUFHLENBQUNDLE1BQU07UUFDdkIsaUNBQWlDLEdBQ2pDLE1BQU1HLEtBQ0osT0FBT1AsU0FBUyxZQUFZQyxvRUFBZ0JBLENBQUNELFFBQ3pDO1lBQUNRLE1BQU07WUFBY1I7UUFBSSxJQUN6QjtZQUFDUSxNQUFNO1lBQVdDLE9BQU9UO1FBQUk7UUFDbkNLLFNBQVNBLFNBQ0w7WUFDRUcsTUFBTTtZQUNOSDtZQUNBSyxVQUFVSDtZQUNWSSxVQUFVSixHQUFHQyxJQUFJLEtBQUs7WUFDdEJJLFVBQVU7UUFDWixJQUNBTDtJQUNOO0lBRUFSLDBDQUFNQSxDQUFDTSxRQUFRO0lBQ2ZOLDBDQUFNQSxDQUFDTSxPQUFPRyxJQUFJLEtBQUssV0FBVztJQUNsQyxPQUFPSDtBQUNUO0FBRUE7Ozs7O0NBS0MsR0FDTSxTQUFTUSwwQkFBMEJWLEdBQUc7SUFDM0MsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsNERBQTRELEdBQzVELElBQUlDO0lBRUosTUFBTyxFQUFFRCxRQUFRRCxJQUFJRyxNQUFNLENBQUU7UUFDM0IsTUFBTU4sT0FBT0csR0FBRyxDQUFDQyxNQUFNO1FBQ3ZCTCwwQ0FBTUEsQ0FDSixPQUFPQyxTQUFTLFlBQVlDLG9FQUFnQkEsQ0FBQ0QsTUFBTTtZQUFDYyxLQUFLO1FBQUksSUFDN0QseUNBQXlDZCxPQUFPO1FBR2xELDBCQUEwQixHQUMxQixNQUFNTyxLQUFLO1lBQUNDLE1BQU07WUFBaUJSO1FBQUk7UUFDdkNLLFNBQVNBLFNBQVM7WUFBQ0csTUFBTTtZQUF1Qkg7WUFBUUssVUFBVUg7UUFBRSxJQUFJQTtJQUMxRTtJQUVBUiwwQ0FBTUEsQ0FBQ00sUUFBUTtJQUNmLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8taWQtb3ItbWVtYmVyLWV4cHJlc3Npb24uanM/YzM4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5JZGVudGlmaWVyfSBJZGVudGlmaWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuSlNYSWRlbnRpZmllcn0gSlNYSWRlbnRpZmllclxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlLWpzeCcpLkpTWE1lbWJlckV4cHJlc3Npb259IEpTWE1lbWJlckV4cHJlc3Npb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZS1qc3gnKS5MaXRlcmFsfSBMaXRlcmFsXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUtanN4JykuTWVtYmVyRXhwcmVzc2lvbn0gTWVtYmVyRXhwcmVzc2lvblxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge25hbWUgYXMgaXNJZGVudGlmaWVyTmFtZX0gZnJvbSAnZXN0cmVlLXV0aWwtaXMtaWRlbnRpZmllci1uYW1lJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxudW1iZXIgfCBzdHJpbmc+fSBpZHNcbiAqICAgSWRlbnRpZmllcnMgKGV4YW1wbGU6IGBbJ2xpc3QnLCAwXSkuXG4gKiBAcmV0dXJucyB7SWRlbnRpZmllciB8IE1lbWJlckV4cHJlc3Npb259XG4gKiAgIElkZW50aWZpZXIgb3IgbWVtYmVyIGV4cHJlc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0lkT3JNZW1iZXJFeHByZXNzaW9uKGlkcykge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0lkZW50aWZpZXIgfCBMaXRlcmFsIHwgTWVtYmVyRXhwcmVzc2lvbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IG9iamVjdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgaWRzLmxlbmd0aCkge1xuICAgIGNvbnN0IG5hbWUgPSBpZHNbaW5kZXhdXG4gICAgLyoqIEB0eXBlIHtJZGVudGlmaWVyIHwgTGl0ZXJhbH0gKi9cbiAgICBjb25zdCBpZCA9XG4gICAgICB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgaXNJZGVudGlmaWVyTmFtZShuYW1lKVxuICAgICAgICA/IHt0eXBlOiAnSWRlbnRpZmllcicsIG5hbWV9XG4gICAgICAgIDoge3R5cGU6ICdMaXRlcmFsJywgdmFsdWU6IG5hbWV9XG4gICAgb2JqZWN0ID0gb2JqZWN0XG4gICAgICA/IHtcbiAgICAgICAgICB0eXBlOiAnTWVtYmVyRXhwcmVzc2lvbicsXG4gICAgICAgICAgb2JqZWN0LFxuICAgICAgICAgIHByb3BlcnR5OiBpZCxcbiAgICAgICAgICBjb21wdXRlZDogaWQudHlwZSA9PT0gJ0xpdGVyYWwnLFxuICAgICAgICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgICAgICB9XG4gICAgICA6IGlkXG4gIH1cblxuICBhc3NlcnQob2JqZWN0LCAnZXhwZWN0ZWQgbm9uLWVtcHR5IGBpZHNgIHRvIGJlIHBhc3NlZCcpXG4gIGFzc2VydChvYmplY3QudHlwZSAhPT0gJ0xpdGVyYWwnLCAnZXhwZWN0ZWQgaWRlbnRpZmllciBhcyBsZWZ0LW1vc3QgdmFsdWUnKVxuICByZXR1cm4gb2JqZWN0XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PG51bWJlciB8IHN0cmluZz59IGlkc1xuICogICBJZGVudGlmaWVycyAoZXhhbXBsZTogYFsnbGlzdCcsIDBdKS5cbiAqIEByZXR1cm5zIHtKU1hJZGVudGlmaWVyIHwgSlNYTWVtYmVyRXhwcmVzc2lvbn1cbiAqICAgSWRlbnRpZmllciBvciBtZW1iZXIgZXhwcmVzc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSnN4SWRPck1lbWJlckV4cHJlc3Npb24oaWRzKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7SlNYSWRlbnRpZmllciB8IEpTWE1lbWJlckV4cHJlc3Npb24gfCB1bmRlZmluZWR9ICovXG4gIGxldCBvYmplY3RcblxuICB3aGlsZSAoKytpbmRleCA8IGlkcy5sZW5ndGgpIHtcbiAgICBjb25zdCBuYW1lID0gaWRzW2luZGV4XVxuICAgIGFzc2VydChcbiAgICAgIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiBpc0lkZW50aWZpZXJOYW1lKG5hbWUsIHtqc3g6IHRydWV9KSxcbiAgICAgICdleHBlY3RlZCB2YWxpZCBqc3ggaWRlbnRpZmllciwgbm90IGAnICsgbmFtZSArICdgJ1xuICAgIClcblxuICAgIC8qKiBAdHlwZSB7SlNYSWRlbnRpZmllcn0gKi9cbiAgICBjb25zdCBpZCA9IHt0eXBlOiAnSlNYSWRlbnRpZmllcicsIG5hbWV9XG4gICAgb2JqZWN0ID0gb2JqZWN0ID8ge3R5cGU6ICdKU1hNZW1iZXJFeHByZXNzaW9uJywgb2JqZWN0LCBwcm9wZXJ0eTogaWR9IDogaWRcbiAgfVxuXG4gIGFzc2VydChvYmplY3QsICdleHBlY3RlZCBub24tZW1wdHkgYGlkc2AgdG8gYmUgcGFzc2VkJylcbiAgcmV0dXJuIG9iamVjdFxufVxuIl0sIm5hbWVzIjpbIm9rIiwiYXNzZXJ0IiwibmFtZSIsImlzSWRlbnRpZmllck5hbWUiLCJ0b0lkT3JNZW1iZXJFeHByZXNzaW9uIiwiaWRzIiwiaW5kZXgiLCJvYmplY3QiLCJsZW5ndGgiLCJpZCIsInR5cGUiLCJ2YWx1ZSIsInByb3BlcnR5IiwiY29tcHV0ZWQiLCJvcHRpb25hbCIsInRvSnN4SWRPck1lbWJlckV4cHJlc3Npb24iLCJqc3giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/extnames.js":
/*!*******************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/extnames.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   md: () => (/* binding */ md),\n/* harmony export */   mdx: () => (/* binding */ mdx)\n/* harmony export */ });\n/* harmony import */ var markdown_extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! markdown-extensions */ \"(ssr)/./node_modules/markdown-extensions/index.js\");\n\nconst md = markdown_extensions__WEBPACK_IMPORTED_MODULE_0__[\"default\"].map(function(d) {\n    return \".\" + d;\n});\nconst mdx = [\n    \".mdx\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXh0bmFtZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBRTdDLE1BQU1DLEtBQUtELDJEQUFrQkEsQ0FBQ0UsR0FBRyxDQUFDLFNBQVVDLENBQUM7SUFDbEQsT0FBTyxNQUFNQTtBQUNmLEdBQUU7QUFDSyxNQUFNQyxNQUFNO0lBQUM7Q0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9leHRuYW1lcy5qcz9jYWEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtYXJrZG93bkV4dGVuc2lvbnMgZnJvbSAnbWFya2Rvd24tZXh0ZW5zaW9ucydcblxuZXhwb3J0IGNvbnN0IG1kID0gbWFya2Rvd25FeHRlbnNpb25zLm1hcChmdW5jdGlvbiAoZCkge1xuICByZXR1cm4gJy4nICsgZFxufSlcbmV4cG9ydCBjb25zdCBtZHggPSBbJy5tZHgnXVxuIl0sIm5hbWVzIjpbIm1hcmtkb3duRXh0ZW5zaW9ucyIsIm1kIiwibWFwIiwiZCIsIm1keCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/extnames.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveFileAndOptions: () => (/* binding */ resolveFileAndOptions)\n/* harmony export */ });\n/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vfile */ \"(ssr)/./node_modules/vfile/lib/index.js\");\n/* harmony import */ var _extnames_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extnames.js */ \"(ssr)/./node_modules/@mdx-js/mdx/lib/util/extnames.js\");\n/**\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('../compile.js').CompileOptions} CompileOptions\n * @typedef {import('../core.js').ProcessorOptions} ProcessorOptions\n */ \n\n/**\n * Create a file and options from a given `vfileCompatible` and options that\n * might contain `format: 'detect'`.\n *\n * @param {Readonly<Compatible>} vfileCompatible\n *   File.\n * @param {Readonly<CompileOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {{file: VFile, options: ProcessorOptions}}\n *   File and options.\n */ function resolveFileAndOptions(vfileCompatible, options) {\n    const file = looksLikeAVFile(vfileCompatible) ? vfileCompatible : new vfile__WEBPACK_IMPORTED_MODULE_0__.VFile(vfileCompatible);\n    const { format, ...rest } = options || {};\n    return {\n        file,\n        options: {\n            format: format === \"md\" || format === \"mdx\" ? format : file.extname && (rest.mdExtensions || _extnames_js__WEBPACK_IMPORTED_MODULE_1__.md).includes(file.extname) ? \"md\" : \"mdx\",\n            ...rest\n        }\n    };\n}\n/**\n * @param {Readonly<Compatible> | null | undefined} [value]\n *   Thing.\n * @returns {value is VFile}\n *   Check.\n */ function looksLikeAVFile(value) {\n    return Boolean(value && typeof value === \"object\" && \"message\" in value && \"messages\" in value);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvcmVzb2x2ZS1maWxlLWFuZC1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0NBSUMsR0FFMEI7QUFDSztBQUVoQzs7Ozs7Ozs7OztDQVVDLEdBQ00sU0FBU0Usc0JBQXNCQyxlQUFlLEVBQUVDLE9BQU87SUFDNUQsTUFBTUMsT0FBT0MsZ0JBQWdCSCxtQkFDekJBLGtCQUNBLElBQUlILHdDQUFLQSxDQUFDRztJQUNkLE1BQU0sRUFBQ0ksTUFBTSxFQUFFLEdBQUdDLE1BQUssR0FBR0osV0FBVyxDQUFDO0lBQ3RDLE9BQU87UUFDTEM7UUFDQUQsU0FBUztZQUNQRyxRQUNFQSxXQUFXLFFBQVFBLFdBQVcsUUFDMUJBLFNBQ0FGLEtBQUtJLE9BQU8sSUFBSSxDQUFDRCxLQUFLRSxZQUFZLElBQUlULDRDQUFDLEVBQUdVLFFBQVEsQ0FBQ04sS0FBS0ksT0FBTyxJQUM3RCxPQUNBO1lBQ1IsR0FBR0QsSUFBSTtRQUNUO0lBQ0Y7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ0QsU0FBU0YsZ0JBQWdCTSxLQUFLO0lBQzVCLE9BQU9DLFFBQ0xELFNBQ0UsT0FBT0EsVUFBVSxZQUNqQixhQUFhQSxTQUNiLGNBQWNBO0FBRXBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi91dGlsL3Jlc29sdmUtZmlsZS1hbmQtb3B0aW9ucy5qcz8wZDlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5Db21wYXRpYmxlfSBDb21wYXRpYmxlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9jb21waWxlLmpzJykuQ29tcGlsZU9wdGlvbnN9IENvbXBpbGVPcHRpb25zXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9jb3JlLmpzJykuUHJvY2Vzc29yT3B0aW9uc30gUHJvY2Vzc29yT3B0aW9uc1xuICovXG5cbmltcG9ydCB7VkZpbGV9IGZyb20gJ3ZmaWxlJ1xuaW1wb3J0IHttZH0gZnJvbSAnLi9leHRuYW1lcy5qcydcblxuLyoqXG4gKiBDcmVhdGUgYSBmaWxlIGFuZCBvcHRpb25zIGZyb20gYSBnaXZlbiBgdmZpbGVDb21wYXRpYmxlYCBhbmQgb3B0aW9ucyB0aGF0XG4gKiBtaWdodCBjb250YWluIGBmb3JtYXQ6ICdkZXRlY3QnYC5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PENvbXBhdGlibGU+fSB2ZmlsZUNvbXBhdGlibGVcbiAqICAgRmlsZS5cbiAqIEBwYXJhbSB7UmVhZG9ubHk8Q29tcGlsZU9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zIHt7ZmlsZTogVkZpbGUsIG9wdGlvbnM6IFByb2Nlc3Nvck9wdGlvbnN9fVxuICogICBGaWxlIGFuZCBvcHRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUZpbGVBbmRPcHRpb25zKHZmaWxlQ29tcGF0aWJsZSwgb3B0aW9ucykge1xuICBjb25zdCBmaWxlID0gbG9va3NMaWtlQVZGaWxlKHZmaWxlQ29tcGF0aWJsZSlcbiAgICA/IHZmaWxlQ29tcGF0aWJsZVxuICAgIDogbmV3IFZGaWxlKHZmaWxlQ29tcGF0aWJsZSlcbiAgY29uc3Qge2Zvcm1hdCwgLi4ucmVzdH0gPSBvcHRpb25zIHx8IHt9XG4gIHJldHVybiB7XG4gICAgZmlsZSxcbiAgICBvcHRpb25zOiB7XG4gICAgICBmb3JtYXQ6XG4gICAgICAgIGZvcm1hdCA9PT0gJ21kJyB8fCBmb3JtYXQgPT09ICdtZHgnXG4gICAgICAgICAgPyBmb3JtYXRcbiAgICAgICAgICA6IGZpbGUuZXh0bmFtZSAmJiAocmVzdC5tZEV4dGVuc2lvbnMgfHwgbWQpLmluY2x1ZGVzKGZpbGUuZXh0bmFtZSlcbiAgICAgICAgICAgID8gJ21kJ1xuICAgICAgICAgICAgOiAnbWR4JyxcbiAgICAgIC4uLnJlc3RcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PENvbXBhdGlibGU+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW3ZhbHVlXVxuICogICBUaGluZy5cbiAqIEByZXR1cm5zIHt2YWx1ZSBpcyBWRmlsZX1cbiAqICAgQ2hlY2suXG4gKi9cbmZ1bmN0aW9uIGxvb2tzTGlrZUFWRmlsZSh2YWx1ZSkge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICB2YWx1ZSAmJlxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ21lc3NhZ2UnIGluIHZhbHVlICYmXG4gICAgICAnbWVzc2FnZXMnIGluIHZhbHVlXG4gIClcbn1cbiJdLCJuYW1lcyI6WyJWRmlsZSIsIm1kIiwicmVzb2x2ZUZpbGVBbmRPcHRpb25zIiwidmZpbGVDb21wYXRpYmxlIiwib3B0aW9ucyIsImZpbGUiLCJsb29rc0xpa2VBVkZpbGUiLCJmb3JtYXQiLCJyZXN0IiwiZXh0bmFtZSIsIm1kRXh0ZW5zaW9ucyIsImluY2x1ZGVzIiwidmFsdWUiLCJCb29sZWFuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/lib/util/resolve-file-and-options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/async.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/async.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncWalker: () => (/* binding */ AsyncWalker)\n/* harmony export */ });\n/* harmony import */ var _walker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./walker.js */ \"(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/walker.js\");\n\n/**\n * @typedef { import('estree').Node} Node\n * @typedef { import('./walker.js').WalkerContext} WalkerContext\n * @typedef {(\n *    this: WalkerContext,\n *    node: Node,\n *    parent: Node | null,\n *    key: string | number | symbol | null | undefined,\n *    index: number | null | undefined\n * ) => Promise<void>} AsyncHandler\n */ class AsyncWalker extends _walker_js__WEBPACK_IMPORTED_MODULE_0__.WalkerBase {\n    /**\n\t *\n\t * @param {AsyncHandler} [enter]\n\t * @param {AsyncHandler} [leave]\n\t */ constructor(enter, leave){\n        super();\n        /** @type {boolean} */ this.should_skip = false;\n        /** @type {boolean} */ this.should_remove = false;\n        /** @type {Node | null} */ this.replacement = null;\n        /** @type {WalkerContext} */ this.context = {\n            skip: ()=>this.should_skip = true,\n            remove: ()=>this.should_remove = true,\n            replace: (node)=>this.replacement = node\n        };\n        /** @type {AsyncHandler | undefined} */ this.enter = enter;\n        /** @type {AsyncHandler | undefined} */ this.leave = leave;\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Node} node\n\t * @param {Parent | null} parent\n\t * @param {keyof Parent} [prop]\n\t * @param {number | null} [index]\n\t * @returns {Promise<Node | null>}\n\t */ async visit(node, parent, prop, index) {\n        if (node) {\n            if (this.enter) {\n                const _should_skip = this.should_skip;\n                const _should_remove = this.should_remove;\n                const _replacement = this.replacement;\n                this.should_skip = false;\n                this.should_remove = false;\n                this.replacement = null;\n                await this.enter.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const skipped = this.should_skip;\n                const removed = this.should_remove;\n                this.should_skip = _should_skip;\n                this.should_remove = _should_remove;\n                this.replacement = _replacement;\n                if (skipped) return node;\n                if (removed) return null;\n            }\n            /** @type {keyof Node} */ let key;\n            for(key in node){\n                /** @type {unknown} */ const value = node[key];\n                if (value && typeof value === \"object\") {\n                    if (Array.isArray(value)) {\n                        const nodes = /** @type {Array<unknown>} */ value;\n                        for(let i = 0; i < nodes.length; i += 1){\n                            const item = nodes[i];\n                            if (isNode(item)) {\n                                if (!await this.visit(item, node, key, i)) {\n                                    // removed\n                                    i--;\n                                }\n                            }\n                        }\n                    } else if (isNode(value)) {\n                        await this.visit(value, node, key, null);\n                    }\n                }\n            }\n            if (this.leave) {\n                const _replacement = this.replacement;\n                const _should_remove = this.should_remove;\n                this.replacement = null;\n                this.should_remove = false;\n                await this.leave.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const removed = this.should_remove;\n                this.replacement = _replacement;\n                this.should_remove = _should_remove;\n                if (removed) return null;\n            }\n        }\n        return node;\n    }\n}\n/**\n * Ducktype a node.\n *\n * @param {unknown} value\n * @returns {value is Node}\n */ function isNode(value) {\n    return value !== null && typeof value === \"object\" && \"type\" in value && typeof value.type === \"string\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asyncWalk: () => (/* binding */ asyncWalk),\n/* harmony export */   walk: () => (/* binding */ walk)\n/* harmony export */ });\n/* harmony import */ var _sync_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sync.js */ \"(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/sync.js\");\n/* harmony import */ var _async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async.js */ \"(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/async.js\");\n\n\n/**\n * @typedef {import('estree').Node} Node\n * @typedef {import('./sync.js').SyncHandler} SyncHandler\n * @typedef {import('./async.js').AsyncHandler} AsyncHandler\n */ /**\n * @param {Node} ast\n * @param {{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }} walker\n * @returns {Node | null}\n */ function walk(ast, { enter, leave }) {\n    const instance = new _sync_js__WEBPACK_IMPORTED_MODULE_0__.SyncWalker(enter, leave);\n    return instance.visit(ast, null);\n}\n/**\n * @param {Node} ast\n * @param {{\n *   enter?: AsyncHandler\n *   leave?: AsyncHandler\n * }} walker\n * @returns {Promise<Node | null>}\n */ async function asyncWalk(ast, { enter, leave }) {\n    const instance = new _async_js__WEBPACK_IMPORTED_MODULE_1__.AsyncWalker(enter, leave);\n    return await instance.visit(ast, null);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbm9kZV9tb2R1bGVzL2VzdHJlZS13YWxrZXIvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUM7QUFDRTtBQUV6Qzs7OztDQUlDLEdBRUQ7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNFLEtBQUtDLEdBQUcsRUFBRSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRTtJQUN6QyxNQUFNQyxXQUFXLElBQUlOLGdEQUFVQSxDQUFDSSxPQUFPQztJQUN2QyxPQUFPQyxTQUFTQyxLQUFLLENBQUNKLEtBQUs7QUFDNUI7QUFFQTs7Ozs7OztDQU9DLEdBQ00sZUFBZUssVUFBVUwsR0FBRyxFQUFFLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFO0lBQ3BELE1BQU1DLFdBQVcsSUFBSUwsa0RBQVdBLENBQUNHLE9BQU9DO0lBQ3hDLE9BQU8sTUFBTUMsU0FBU0MsS0FBSyxDQUFDSixLQUFLO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L25vZGVfbW9kdWxlcy9lc3RyZWUtd2Fsa2VyL3NyYy9pbmRleC5qcz8xZmQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN5bmNXYWxrZXIgfSBmcm9tICcuL3N5bmMuanMnO1xuaW1wb3J0IHsgQXN5bmNXYWxrZXIgfSBmcm9tICcuL2FzeW5jLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdlc3RyZWUnKS5Ob2RlfSBOb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3N5bmMuanMnKS5TeW5jSGFuZGxlcn0gU3luY0hhbmRsZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vYXN5bmMuanMnKS5Bc3luY0hhbmRsZXJ9IEFzeW5jSGFuZGxlclxuICovXG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBhc3RcbiAqIEBwYXJhbSB7e1xuICogICBlbnRlcj86IFN5bmNIYW5kbGVyXG4gKiAgIGxlYXZlPzogU3luY0hhbmRsZXJcbiAqIH19IHdhbGtlclxuICogQHJldHVybnMge05vZGUgfCBudWxsfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2Fsayhhc3QsIHsgZW50ZXIsIGxlYXZlIH0pIHtcblx0Y29uc3QgaW5zdGFuY2UgPSBuZXcgU3luY1dhbGtlcihlbnRlciwgbGVhdmUpO1xuXHRyZXR1cm4gaW5zdGFuY2UudmlzaXQoYXN0LCBudWxsKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IGFzdFxuICogQHBhcmFtIHt7XG4gKiAgIGVudGVyPzogQXN5bmNIYW5kbGVyXG4gKiAgIGxlYXZlPzogQXN5bmNIYW5kbGVyXG4gKiB9fSB3YWxrZXJcbiAqIEByZXR1cm5zIHtQcm9taXNlPE5vZGUgfCBudWxsPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFzeW5jV2Fsayhhc3QsIHsgZW50ZXIsIGxlYXZlIH0pIHtcblx0Y29uc3QgaW5zdGFuY2UgPSBuZXcgQXN5bmNXYWxrZXIoZW50ZXIsIGxlYXZlKTtcblx0cmV0dXJuIGF3YWl0IGluc3RhbmNlLnZpc2l0KGFzdCwgbnVsbCk7XG59XG4iXSwibmFtZXMiOlsiU3luY1dhbGtlciIsIkFzeW5jV2Fsa2VyIiwid2FsayIsImFzdCIsImVudGVyIiwibGVhdmUiLCJpbnN0YW5jZSIsInZpc2l0IiwiYXN5bmNXYWxrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/sync.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/sync.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SyncWalker: () => (/* binding */ SyncWalker)\n/* harmony export */ });\n/* harmony import */ var _walker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./walker.js */ \"(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/walker.js\");\n\n/**\n * @typedef { import('estree').Node} Node\n * @typedef { import('./walker.js').WalkerContext} WalkerContext\n * @typedef {(\n *    this: WalkerContext,\n *    node: Node,\n *    parent: Node | null,\n *    key: string | number | symbol | null | undefined,\n *    index: number | null | undefined\n * ) => void} SyncHandler\n */ class SyncWalker extends _walker_js__WEBPACK_IMPORTED_MODULE_0__.WalkerBase {\n    /**\n\t *\n\t * @param {SyncHandler} [enter]\n\t * @param {SyncHandler} [leave]\n\t */ constructor(enter, leave){\n        super();\n        /** @type {boolean} */ this.should_skip = false;\n        /** @type {boolean} */ this.should_remove = false;\n        /** @type {Node | null} */ this.replacement = null;\n        /** @type {WalkerContext} */ this.context = {\n            skip: ()=>this.should_skip = true,\n            remove: ()=>this.should_remove = true,\n            replace: (node)=>this.replacement = node\n        };\n        /** @type {SyncHandler | undefined} */ this.enter = enter;\n        /** @type {SyncHandler | undefined} */ this.leave = leave;\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Node} node\n\t * @param {Parent | null} parent\n\t * @param {keyof Parent} [prop]\n\t * @param {number | null} [index]\n\t * @returns {Node | null}\n\t */ visit(node, parent, prop, index) {\n        if (node) {\n            if (this.enter) {\n                const _should_skip = this.should_skip;\n                const _should_remove = this.should_remove;\n                const _replacement = this.replacement;\n                this.should_skip = false;\n                this.should_remove = false;\n                this.replacement = null;\n                this.enter.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const skipped = this.should_skip;\n                const removed = this.should_remove;\n                this.should_skip = _should_skip;\n                this.should_remove = _should_remove;\n                this.replacement = _replacement;\n                if (skipped) return node;\n                if (removed) return null;\n            }\n            /** @type {keyof Node} */ let key;\n            for(key in node){\n                /** @type {unknown} */ const value = node[key];\n                if (value && typeof value === \"object\") {\n                    if (Array.isArray(value)) {\n                        const nodes = /** @type {Array<unknown>} */ value;\n                        for(let i = 0; i < nodes.length; i += 1){\n                            const item = nodes[i];\n                            if (isNode(item)) {\n                                if (!this.visit(item, node, key, i)) {\n                                    // removed\n                                    i--;\n                                }\n                            }\n                        }\n                    } else if (isNode(value)) {\n                        this.visit(value, node, key, null);\n                    }\n                }\n            }\n            if (this.leave) {\n                const _replacement = this.replacement;\n                const _should_remove = this.should_remove;\n                this.replacement = null;\n                this.should_remove = false;\n                this.leave.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const removed = this.should_remove;\n                this.replacement = _replacement;\n                this.should_remove = _should_remove;\n                if (removed) return null;\n            }\n        }\n        return node;\n    }\n}\n/**\n * Ducktype a node.\n *\n * @param {unknown} value\n * @returns {value is Node}\n */ function isNode(value) {\n    return value !== null && typeof value === \"object\" && \"type\" in value && typeof value.type === \"string\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/walker.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/walker.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalkerBase: () => (/* binding */ WalkerBase)\n/* harmony export */ });\n/**\n * @typedef { import('estree').Node} Node\n * @typedef {{\n *   skip: () => void;\n *   remove: () => void;\n *   replace: (node: Node) => void;\n * }} WalkerContext\n */ class WalkerBase {\n    constructor(){\n        /** @type {boolean} */ this.should_skip = false;\n        /** @type {boolean} */ this.should_remove = false;\n        /** @type {Node | null} */ this.replacement = null;\n        /** @type {WalkerContext} */ this.context = {\n            skip: ()=>this.should_skip = true,\n            remove: ()=>this.should_remove = true,\n            replace: (node)=>this.replacement = node\n        };\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Parent | null | undefined} parent\n\t * @param {keyof Parent | null | undefined} prop\n\t * @param {number | null | undefined} index\n\t * @param {Node} node\n\t */ replace(parent, prop, index, node) {\n        if (parent && prop) {\n            if (index != null) {\n                /** @type {Array<Node>} */ parent[prop][index] = node;\n            } else {\n                /** @type {Node} */ parent[prop] = node;\n            }\n        }\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Parent | null | undefined} parent\n\t * @param {keyof Parent | null | undefined} prop\n\t * @param {number | null | undefined} index\n\t */ remove(parent, prop, index) {\n        if (parent && prop) {\n            if (index !== null && index !== undefined) {\n                /** @type {Array<Node>} */ parent[prop].splice(index, 1);\n            } else {\n                delete parent[prop];\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbm9kZV9tb2R1bGVzL2VzdHJlZS13YWxrZXIvc3JjL3dhbGtlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Q0FPQyxHQUVNLE1BQU1BO0lBQ1pDLGFBQWM7UUFDYixvQkFBb0IsR0FDcEIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFFbkIsb0JBQW9CLEdBQ3BCLElBQUksQ0FBQ0MsYUFBYSxHQUFHO1FBRXJCLHdCQUF3QixHQUN4QixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUVuQiwwQkFBMEIsR0FDMUIsSUFBSSxDQUFDQyxPQUFPLEdBQUc7WUFDZEMsTUFBTSxJQUFPLElBQUksQ0FBQ0osV0FBVyxHQUFHO1lBQ2hDSyxRQUFRLElBQU8sSUFBSSxDQUFDSixhQUFhLEdBQUc7WUFDcENLLFNBQVMsQ0FBQ0MsT0FBVSxJQUFJLENBQUNMLFdBQVcsR0FBR0s7UUFDeEM7SUFDRDtJQUVBOzs7Ozs7RUFNQyxHQUNERCxRQUFRRSxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFSCxJQUFJLEVBQUU7UUFDbEMsSUFBSUMsVUFBVUMsTUFBTTtZQUNuQixJQUFJQyxTQUFTLE1BQU07Z0JBQ2xCLHdCQUF3QixHQUFJRixNQUFNLENBQUNDLEtBQUssQ0FBRUMsTUFBTSxHQUFHSDtZQUNwRCxPQUFPO2dCQUNOLGlCQUFpQixHQUFJQyxNQUFNLENBQUNDLEtBQUssR0FBSUY7WUFDdEM7UUFDRDtJQUNEO0lBRUE7Ozs7O0VBS0MsR0FDREYsT0FBT0csTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRTtRQUMzQixJQUFJRixVQUFVQyxNQUFNO1lBQ25CLElBQUlDLFVBQVUsUUFBUUEsVUFBVUMsV0FBVztnQkFDMUMsd0JBQXdCLEdBQUlILE1BQU0sQ0FBQ0MsS0FBSyxDQUFFRyxNQUFNLENBQUNGLE9BQU87WUFDekQsT0FBTztnQkFDTixPQUFPRixNQUFNLENBQUNDLEtBQUs7WUFDcEI7UUFDRDtJQUNEO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbm9kZV9tb2R1bGVzL2VzdHJlZS13YWxrZXIvc3JjL3dhbGtlci5qcz8yNjNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYgeyBpbXBvcnQoJ2VzdHJlZScpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHNraXA6ICgpID0+IHZvaWQ7XG4gKiAgIHJlbW92ZTogKCkgPT4gdm9pZDtcbiAqICAgcmVwbGFjZTogKG5vZGU6IE5vZGUpID0+IHZvaWQ7XG4gKiB9fSBXYWxrZXJDb250ZXh0XG4gKi9cblxuZXhwb3J0IGNsYXNzIFdhbGtlckJhc2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvKiogQHR5cGUge2Jvb2xlYW59ICovXG5cdFx0dGhpcy5zaG91bGRfc2tpcCA9IGZhbHNlO1xuXG5cdFx0LyoqIEB0eXBlIHtib29sZWFufSAqL1xuXHRcdHRoaXMuc2hvdWxkX3JlbW92ZSA9IGZhbHNlO1xuXG5cdFx0LyoqIEB0eXBlIHtOb2RlIHwgbnVsbH0gKi9cblx0XHR0aGlzLnJlcGxhY2VtZW50ID0gbnVsbDtcblxuXHRcdC8qKiBAdHlwZSB7V2Fsa2VyQ29udGV4dH0gKi9cblx0XHR0aGlzLmNvbnRleHQgPSB7XG5cdFx0XHRza2lwOiAoKSA9PiAodGhpcy5zaG91bGRfc2tpcCA9IHRydWUpLFxuXHRcdFx0cmVtb3ZlOiAoKSA9PiAodGhpcy5zaG91bGRfcmVtb3ZlID0gdHJ1ZSksXG5cdFx0XHRyZXBsYWNlOiAobm9kZSkgPT4gKHRoaXMucmVwbGFjZW1lbnQgPSBub2RlKVxuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogQHRlbXBsYXRlIHtOb2RlfSBQYXJlbnRcblx0ICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXJlbnRcblx0ICogQHBhcmFtIHtrZXlvZiBQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBwcm9wXG5cdCAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gaW5kZXhcblx0ICogQHBhcmFtIHtOb2RlfSBub2RlXG5cdCAqL1xuXHRyZXBsYWNlKHBhcmVudCwgcHJvcCwgaW5kZXgsIG5vZGUpIHtcblx0XHRpZiAocGFyZW50ICYmIHByb3ApIHtcblx0XHRcdGlmIChpbmRleCAhPSBudWxsKSB7XG5cdFx0XHRcdC8qKiBAdHlwZSB7QXJyYXk8Tm9kZT59ICovIChwYXJlbnRbcHJvcF0pW2luZGV4XSA9IG5vZGU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvKiogQHR5cGUge05vZGV9ICovIChwYXJlbnRbcHJvcF0pID0gbm9kZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQHRlbXBsYXRlIHtOb2RlfSBQYXJlbnRcblx0ICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXJlbnRcblx0ICogQHBhcmFtIHtrZXlvZiBQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBwcm9wXG5cdCAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gaW5kZXhcblx0ICovXG5cdHJlbW92ZShwYXJlbnQsIHByb3AsIGluZGV4KSB7XG5cdFx0aWYgKHBhcmVudCAmJiBwcm9wKSB7XG5cdFx0XHRpZiAoaW5kZXggIT09IG51bGwgJiYgaW5kZXggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHQvKiogQHR5cGUge0FycmF5PE5vZGU+fSAqLyAocGFyZW50W3Byb3BdKS5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIHBhcmVudFtwcm9wXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiJdLCJuYW1lcyI6WyJXYWxrZXJCYXNlIiwiY29uc3RydWN0b3IiLCJzaG91bGRfc2tpcCIsInNob3VsZF9yZW1vdmUiLCJyZXBsYWNlbWVudCIsImNvbnRleHQiLCJza2lwIiwicmVtb3ZlIiwicmVwbGFjZSIsIm5vZGUiLCJwYXJlbnQiLCJwcm9wIiwiaW5kZXgiLCJ1bmRlZmluZWQiLCJzcGxpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/mdx/node_modules/estree-walker/src/walker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/react/index.js":
/*!*********************************************!*\
  !*** ./node_modules/@mdx-js/react/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* reexport safe */ _lib_index_js__WEBPACK_IMPORTED_MODULE_0__.MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* reexport safe */ _lib_index_js__WEBPACK_IMPORTED_MODULE_0__.useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/index.js */ \"(ssr)/./node_modules/@mdx-js/react/lib/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9pbmRleC5qcz9jM2YxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7TURYUHJvdmlkZXIsIHVzZU1EWENvbXBvbmVudHN9IGZyb20gJy4vbGliL2luZGV4LmpzJ1xuIl0sIm5hbWVzIjpbIk1EWFByb3ZpZGVyIiwidXNlTURYQ29tcG9uZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/react/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@mdx-js/react/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@mdx-js/react/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDXProvider: () => (/* binding */ MDXProvider),\n/* harmony export */   useMDXComponents: () => (/* binding */ useMDXComponents)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */ /**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */ \n/** @type {Readonly<MDXComponents>} */ const emptyComponents = {};\nconst MDXContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */ function useMDXComponents(components) {\n    const contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);\n    // Memoize to avoid unnecessary top-level context changes\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function() {\n        // Custom merge via a function prop\n        if (typeof components === \"function\") {\n            return components(contextComponents);\n        }\n        return {\n            ...contextComponents,\n            ...components\n        };\n    }, [\n        contextComponents,\n        components\n    ]);\n}\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */ function MDXProvider(properties) {\n    /** @type {Readonly<MDXComponents>} */ let allComponents;\n    if (properties.disableParentContext) {\n        allComponents = typeof properties.components === \"function\" ? properties.components(emptyComponents) : properties.components || emptyComponents;\n    } else {\n        allComponents = useMDXComponents(properties.components);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider, {\n        value: allComponents\n    }, properties.children);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Q0FJQyxHQUVEOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDLEdBRXdCO0FBRXpCLG9DQUFvQyxHQUNwQyxNQUFNQyxrQkFBa0IsQ0FBQztBQUV6QixNQUFNQywyQkFBYUYsZ0RBQW1CLENBQUNDO0FBRXZDOzs7Ozs7O0NBT0MsR0FDTSxTQUFTRyxpQkFBaUJDLFVBQVU7SUFDekMsTUFBTUMsb0JBQW9CTiw2Q0FBZ0IsQ0FBQ0U7SUFFM0MseURBQXlEO0lBQ3pELE9BQU9GLDBDQUFhLENBQ2xCO1FBQ0UsbUNBQW1DO1FBQ25DLElBQUksT0FBT0ssZUFBZSxZQUFZO1lBQ3BDLE9BQU9BLFdBQVdDO1FBQ3BCO1FBRUEsT0FBTztZQUFDLEdBQUdBLGlCQUFpQjtZQUFFLEdBQUdELFVBQVU7UUFBQTtJQUM3QyxHQUNBO1FBQUNDO1FBQW1CRDtLQUFXO0FBRW5DO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTSSxZQUFZQyxVQUFVO0lBQ3BDLG9DQUFvQyxHQUNwQyxJQUFJQztJQUVKLElBQUlELFdBQVdFLG9CQUFvQixFQUFFO1FBQ25DRCxnQkFDRSxPQUFPRCxXQUFXTCxVQUFVLEtBQUssYUFDN0JLLFdBQVdMLFVBQVUsQ0FBQ0osbUJBQ3RCUyxXQUFXTCxVQUFVLElBQUlKO0lBQ2pDLE9BQU87UUFDTFUsZ0JBQWdCUCxpQkFBaUJNLFdBQVdMLFVBQVU7SUFDeEQ7SUFFQSxxQkFBT0wsZ0RBQW1CLENBQ3hCRSxXQUFXWSxRQUFRLEVBQ25CO1FBQUNDLE9BQU9KO0lBQWEsR0FDckJELFdBQVdNLFFBQVE7QUFFdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvQG1keC1qcy9yZWFjdC9saWIvaW5kZXguanM/MzJlYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21keC90eXBlcy5qcycpLk1EWENvbXBvbmVudHN9IE1EWENvbXBvbmVudHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3JlYWN0JykuQ29tcG9uZW50PHt9LCB7fSwgdW5rbm93bj59IENvbXBvbmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgncmVhY3QnKS5SZWFjdE5vZGV9IFJlYWN0Tm9kZVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1lcmdlQ29tcG9uZW50c1xuICogICBDdXN0b20gbWVyZ2UgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE1EWENvbXBvbmVudHM+fSBjdXJyZW50Q29tcG9uZW50c1xuICogICBDdXJyZW50IGNvbXBvbmVudHMgZnJvbSB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIHtNRFhDb21wb25lbnRzfVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMuXG4gKlxuICogQHR5cGVkZWYgUHJvcHNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgYE1EWFByb3ZpZGVyYC5cbiAqIEBwcm9wZXJ0eSB7UmVhY3ROb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NoaWxkcmVuXVxuICogICBDaGlsZHJlbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxNRFhDb21wb25lbnRzPiB8IE1lcmdlQ29tcG9uZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtjb21wb25lbnRzXVxuICogICBBZGRpdGlvbmFsIGNvbXBvbmVudHMgdG8gdXNlIG9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZW0gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtkaXNhYmxlUGFyZW50Q29udGV4dD1mYWxzZV1cbiAqICAgVHVybiBvZmYgb3V0ZXIgY29tcG9uZW50IGNvbnRleHQgKGRlZmF1bHQ6IGBmYWxzZWApLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxNRFhDb21wb25lbnRzPn0gKi9cbmNvbnN0IGVtcHR5Q29tcG9uZW50cyA9IHt9XG5cbmNvbnN0IE1EWENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGVtcHR5Q29tcG9uZW50cylcblxuLyoqXG4gKiBHZXQgY3VycmVudCBjb21wb25lbnRzIGZyb20gdGhlIE1EWCBDb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz4gfCBNZXJnZUNvbXBvbmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29tcG9uZW50c11cbiAqICAgQWRkaXRpb25hbCBjb21wb25lbnRzIHRvIHVzZSBvciBhIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGVtIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7TURYQ29tcG9uZW50c31cbiAqICAgQ3VycmVudCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTURYQ29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gIGNvbnN0IGNvbnRleHRDb21wb25lbnRzID0gUmVhY3QudXNlQ29udGV4dChNRFhDb250ZXh0KVxuXG4gIC8vIE1lbW9pemUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgdG9wLWxldmVsIGNvbnRleHQgY2hhbmdlc1xuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBDdXN0b20gbWVyZ2UgdmlhIGEgZnVuY3Rpb24gcHJvcFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzKGNvbnRleHRDb21wb25lbnRzKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gey4uLmNvbnRleHRDb21wb25lbnRzLCAuLi5jb21wb25lbnRzfVxuICAgIH0sXG4gICAgW2NvbnRleHRDb21wb25lbnRzLCBjb21wb25lbnRzXVxuICApXG59XG5cbi8qKlxuICogUHJvdmlkZXIgZm9yIE1EWCBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8UHJvcHM+fSBwcm9wZXJ0aWVzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7SlNYLkVsZW1lbnR9XG4gKiAgIEVsZW1lbnQuXG4gKiBAc2F0aXNmaWVzIHtDb21wb25lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBNRFhQcm92aWRlcihwcm9wZXJ0aWVzKSB7XG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8TURYQ29tcG9uZW50cz59ICovXG4gIGxldCBhbGxDb21wb25lbnRzXG5cbiAgaWYgKHByb3BlcnRpZXMuZGlzYWJsZVBhcmVudENvbnRleHQpIHtcbiAgICBhbGxDb21wb25lbnRzID1cbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLmNvbXBvbmVudHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwcm9wZXJ0aWVzLmNvbXBvbmVudHMoZW1wdHlDb21wb25lbnRzKVxuICAgICAgICA6IHByb3BlcnRpZXMuY29tcG9uZW50cyB8fCBlbXB0eUNvbXBvbmVudHNcbiAgfSBlbHNlIHtcbiAgICBhbGxDb21wb25lbnRzID0gdXNlTURYQ29tcG9uZW50cyhwcm9wZXJ0aWVzLmNvbXBvbmVudHMpXG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBNRFhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHt2YWx1ZTogYWxsQ29tcG9uZW50c30sXG4gICAgcHJvcGVydGllcy5jaGlsZHJlblxuICApXG59XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJlbXB0eUNvbXBvbmVudHMiLCJNRFhDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInVzZU1EWENvbXBvbmVudHMiLCJjb21wb25lbnRzIiwiY29udGV4dENvbXBvbmVudHMiLCJ1c2VDb250ZXh0IiwidXNlTWVtbyIsIk1EWFByb3ZpZGVyIiwicHJvcGVydGllcyIsImFsbENvbXBvbmVudHMiLCJkaXNhYmxlUGFyZW50Q29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsInZhbHVlIiwiY2hpbGRyZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@mdx-js/react/lib/index.js\n");

/***/ })

};
;