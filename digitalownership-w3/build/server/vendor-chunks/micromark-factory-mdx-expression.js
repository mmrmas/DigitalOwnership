"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-factory-mdx-expression";
exports.ids = ["vendor-chunks/micromark-factory-mdx-expression"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-factory-mdx-expression/dev/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/micromark-factory-mdx-expression/dev/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   factoryMdxExpression: () => (/* binding */ factoryMdxExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-factory-space */ \"(ssr)/./node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_events_to_acorn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-util-events-to-acorn */ \"(ssr)/./node_modules/micromark-util-events-to-acorn/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(ssr)/./node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vfile-message */ \"(ssr)/./node_modules/vfile-message/lib/index.js\");\n/**\n * @import {Program} from 'estree'\n * @import {Acorn, AcornOptions} from 'micromark-util-events-to-acorn'\n * @import {Effects, Point, State, TokenType, TokenizeContext} from 'micromark-util-types'\n */ /**\n * @typedef MdxSignalOk\n *   Good result.\n * @property {'ok'} type\n *   Type.\n * @property {Program | undefined} estree\n *   Value.\n *\n * @typedef MdxSignalNok\n *   Bad result.\n * @property {'nok'} type\n *   Type.\n * @property {VFileMessage} message\n *   Value.\n *\n * @typedef {MdxSignalNok | MdxSignalOk} MdxSignal\n */ \n\n\n\n\n\n\n// Tab-size to eat has to be the same as what we serialize as.\n// While in some places in markdown that’s 4, in JS it’s more common as 2.\n// Which is what’s also in `mdast-util-mdx-jsx`:\n// <https://github.com/syntax-tree/mdast-util-mdx-jsx/blob/40b951b/lib/index.js#L52>\nconst indentSize = 2;\nconst trouble = \"https://github.com/micromark/micromark-extension-mdx-expression/tree/main/packages/micromark-extension-mdx-expression\";\nconst unexpectedEndOfFileHash = \"#unexpected-end-of-file-in-expression-expected-a-corresponding-closing-brace-for-\";\nconst unexpectedLazyHash = \"#unexpected-lazy-line-in-expression-in-container-expected-line-to-be-prefixed\";\nconst nonSpreadHash = \"#unexpected-type-in-code-expected-an-object-spread-spread\";\nconst spreadExtraHash = \"#unexpected-extra-content-in-spread-only-a-single-spread-is-supported\";\nconst acornHash = \"#could-not-parse-expression-with-acorn\";\n/**\n * @this {TokenizeContext}\n *   Context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful\n * @param {TokenType} type\n *   Token type for whole (`{}`).\n * @param {TokenType} markerType\n *   Token type for the markers (`{`, `}`).\n * @param {TokenType} chunkType\n *   Token type for the value (`1`).\n * @param {Acorn | null | undefined} [acorn]\n *   Object with `acorn.parse` and `acorn.parseExpressionAt`.\n * @param {AcornOptions | null | undefined} [acornOptions]\n *   Configuration for acorn.\n * @param {boolean | null | undefined} [addResult=false]\n *   Add `estree` to token (default: `false`).\n * @param {boolean | null | undefined} [spread=false]\n *   Support a spread (`{...a}`) only (default: `false`).\n * @param {boolean | null | undefined} [allowEmpty=false]\n *   Support an empty expression (default: `false`).\n * @param {boolean | null | undefined} [allowLazy=false]\n *   Support lazy continuation of an expression (default: `false`).\n * @returns {State}\n */ // eslint-disable-next-line max-params\nfunction factoryMdxExpression(effects, ok, type, markerType, chunkType, acorn, acornOptions, addResult, spread, allowEmpty, allowLazy) {\n    const self = this;\n    const eventStart = this.events.length + 3 // Add main and marker token\n    ;\n    let size = 0;\n    /** @type {Point} */ let pointStart;\n    /** @type {Error} */ let lastCrash;\n    return start;\n    /**\n   * Start of an MDX expression.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace, \"expected `{`\");\n        effects.enter(type);\n        effects.enter(markerType);\n        effects.consume(code);\n        effects.exit(markerType);\n        pointStart = self.now();\n        return before;\n    }\n    /**\n   * Before data.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function before(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            if (lastCrash) throw lastCrash;\n            const error = new vfile_message__WEBPACK_IMPORTED_MODULE_2__.VFileMessage(\"Unexpected end of file in expression, expected a corresponding closing brace for `{`\", {\n                place: self.now(),\n                ruleId: \"unexpected-eof\",\n                source: \"micromark-extension-mdx-expression\"\n            });\n            error.url = trouble + unexpectedEndOfFileHash;\n            throw error;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);\n            return eolAfter;\n        }\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightCurlyBrace && size === 0) {\n            /** @type {MdxSignal} */ const next = acorn ? mdxExpressionParse.call(self, acorn, acornOptions, chunkType, eventStart, pointStart, allowEmpty || false, spread || false) : {\n                type: \"ok\",\n                estree: undefined\n            };\n            if (next.type === \"ok\") {\n                effects.enter(markerType);\n                effects.consume(code);\n                effects.exit(markerType);\n                const token = effects.exit(type);\n                if (addResult && next.estree) {\n                    Object.assign(token, {\n                        estree: next.estree\n                    });\n                }\n                return ok;\n            }\n            lastCrash = next.message;\n            effects.enter(chunkType);\n            effects.consume(code);\n            return inside;\n        }\n        effects.enter(chunkType);\n        return inside(code);\n    }\n    /**\n   * In data.\n   *\n   * ```markdown\n   * > | a {Math.PI} c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function inside(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightCurlyBrace && size === 0 || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {\n            effects.exit(chunkType);\n            return before(code);\n        }\n        // Don’t count if gnostic.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace && !acorn) {\n            size += 1;\n        } else if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.rightCurlyBrace) {\n            size -= 1;\n        }\n        effects.consume(code);\n        return inside;\n    }\n    /**\n   * After eol.\n   *\n   * ```markdown\n   *   | a {b +\n   * > | c} d\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */ function eolAfter(code) {\n        const now = self.now();\n        // Lazy continuation in a flow expression (or flow tag) is a syntax error.\n        if (now.line !== pointStart.line && !allowLazy && self.parser.lazy[now.line]) {\n            const error = new vfile_message__WEBPACK_IMPORTED_MODULE_2__.VFileMessage(\"Unexpected lazy line in expression in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc\", {\n                place: self.now(),\n                ruleId: \"unexpected-lazy\",\n                source: \"micromark-extension-mdx-expression\"\n            });\n            error.url = trouble + unexpectedLazyHash;\n            throw error;\n        }\n        // Note: `markdown-rs` uses `4`, but we use `2`.\n        //\n        // Idea: investigate if we’d need to use more complex stripping.\n        // Take this example:\n        //\n        // ```markdown\n        // >  aaa <b c={`\n        // >      d\n        // >  `} /> eee\n        // ```\n        //\n        // Currently, the “paragraph” starts at `> | aaa`, so for the next line\n        // here we split it into `>␠|␠␠|␠␠␠d` (prefix, this indent here,\n        // expression data).\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {\n            return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, before, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_4__.types.linePrefix, indentSize + 1)(code);\n        }\n        return before(code);\n    }\n}\n/**\n * Mix of `markdown-rs`’s `parse_expression` and `MdxExpressionParse`\n * functionality, to wrap our `eventsToAcorn`.\n *\n * In the future, the plan is to realise the rust way, which allows arbitrary\n * parsers.\n *\n * @this {TokenizeContext}\n * @param {Acorn} acorn\n * @param {AcornOptions | null | undefined} acornOptions\n * @param {TokenType} chunkType\n * @param {number} eventStart\n * @param {Point} pointStart\n * @param {boolean} allowEmpty\n * @param {boolean} spread\n * @returns {MdxSignal}\n */ // eslint-disable-next-line max-params\nfunction mdxExpressionParse(acorn, acornOptions, chunkType, eventStart, pointStart, allowEmpty, spread) {\n    // Gnostic mode: parse w/ acorn.\n    const result = (0,micromark_util_events_to_acorn__WEBPACK_IMPORTED_MODULE_6__.eventsToAcorn)(this.events.slice(eventStart), {\n        acorn,\n        tokenTypes: [\n            chunkType\n        ],\n        acornOptions,\n        start: pointStart,\n        expression: true,\n        allowEmpty,\n        prefix: spread ? \"({\" : \"\",\n        suffix: spread ? \"})\" : \"\"\n    });\n    const estree = result.estree;\n    // Get the spread value.\n    if (spread && estree) {\n        // Should always be the case as we wrap in `d={}`\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(estree.type === \"Program\", \"expected program\");\n        const head = estree.body[0];\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(head, \"expected body\");\n        if (head.type !== \"ExpressionStatement\" || head.expression.type !== \"ObjectExpression\") {\n            const place = (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_7__.positionFromEstree)(head);\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(place, \"expected position\");\n            const error = new vfile_message__WEBPACK_IMPORTED_MODULE_2__.VFileMessage(\"Unexpected `\" + head.type + \"` in code: expected an object spread (`{...spread}`)\", {\n                place: place.start,\n                ruleId: \"non-spread\",\n                source: \"micromark-extension-mdx-expression\"\n            });\n            error.url = trouble + nonSpreadHash;\n            throw error;\n        }\n        if (head.expression.properties[1]) {\n            const place = (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_7__.positionFromEstree)(head.expression.properties[1]);\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(place, \"expected position\");\n            const error = new vfile_message__WEBPACK_IMPORTED_MODULE_2__.VFileMessage(\"Unexpected extra content in spread: only a single spread is supported\", {\n                place: place.start,\n                ruleId: \"spread-extra\",\n                source: \"micromark-extension-mdx-expression\"\n            });\n            error.url = trouble + spreadExtraHash;\n            throw error;\n        }\n        if (head.expression.properties[0] && head.expression.properties[0].type !== \"SpreadElement\") {\n            const place = (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_7__.positionFromEstree)(head.expression.properties[0]);\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(place, \"expected position\");\n            const error = new vfile_message__WEBPACK_IMPORTED_MODULE_2__.VFileMessage(\"Unexpected `\" + head.expression.properties[0].type + \"` in code: only spread elements are supported\", {\n                place: place.start,\n                ruleId: \"non-spread\",\n                source: \"micromark-extension-mdx-expression\"\n            });\n            error.url = trouble + nonSpreadHash;\n            throw error;\n        }\n    }\n    if (result.error) {\n        const error = new vfile_message__WEBPACK_IMPORTED_MODULE_2__.VFileMessage(\"Could not parse expression with acorn\", {\n            cause: result.error,\n            place: {\n                line: result.error.loc.line,\n                column: result.error.loc.column + 1,\n                offset: result.error.pos\n            },\n            ruleId: \"acorn\",\n            source: \"micromark-extension-mdx-expression\"\n        });\n        error.url = trouble + acornHash;\n        return {\n            type: \"nok\",\n            message: error\n        };\n    }\n    return {\n        type: \"ok\",\n        estree\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-factory-mdx-expression/dev/index.js\n");

/***/ })

};
;