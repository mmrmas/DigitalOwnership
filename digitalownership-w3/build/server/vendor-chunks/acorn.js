/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/acorn";
exports.ids = ["vendor-chunks/acorn"];
exports.modules = {

/***/ "(ssr)/./node_modules/acorn/dist/acorn.js":
/*!******************************************!*\
  !*** ./node_modules/acorn/dist/acorn.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("(function(global, factory) {\n     true ? factory(exports) : 0;\n})(this, function(exports1) {\n    \"use strict\";\n    // This file was generated. Do not modify manually!\n    var astralIdentifierCodes = [\n        509,\n        0,\n        227,\n        0,\n        150,\n        4,\n        294,\n        9,\n        1368,\n        2,\n        2,\n        1,\n        6,\n        3,\n        41,\n        2,\n        5,\n        0,\n        166,\n        1,\n        574,\n        3,\n        9,\n        9,\n        370,\n        1,\n        81,\n        2,\n        71,\n        10,\n        50,\n        3,\n        123,\n        2,\n        54,\n        14,\n        32,\n        10,\n        3,\n        1,\n        11,\n        3,\n        46,\n        10,\n        8,\n        0,\n        46,\n        9,\n        7,\n        2,\n        37,\n        13,\n        2,\n        9,\n        6,\n        1,\n        45,\n        0,\n        13,\n        2,\n        49,\n        13,\n        9,\n        3,\n        2,\n        11,\n        83,\n        11,\n        7,\n        0,\n        3,\n        0,\n        158,\n        11,\n        6,\n        9,\n        7,\n        3,\n        56,\n        1,\n        2,\n        6,\n        3,\n        1,\n        3,\n        2,\n        10,\n        0,\n        11,\n        1,\n        3,\n        6,\n        4,\n        4,\n        193,\n        17,\n        10,\n        9,\n        5,\n        0,\n        82,\n        19,\n        13,\n        9,\n        214,\n        6,\n        3,\n        8,\n        28,\n        1,\n        83,\n        16,\n        16,\n        9,\n        82,\n        12,\n        9,\n        9,\n        84,\n        14,\n        5,\n        9,\n        243,\n        14,\n        166,\n        9,\n        71,\n        5,\n        2,\n        1,\n        3,\n        3,\n        2,\n        0,\n        2,\n        1,\n        13,\n        9,\n        120,\n        6,\n        3,\n        6,\n        4,\n        0,\n        29,\n        9,\n        41,\n        6,\n        2,\n        3,\n        9,\n        0,\n        10,\n        10,\n        47,\n        15,\n        406,\n        7,\n        2,\n        7,\n        17,\n        9,\n        57,\n        21,\n        2,\n        13,\n        123,\n        5,\n        4,\n        0,\n        2,\n        1,\n        2,\n        6,\n        2,\n        0,\n        9,\n        9,\n        49,\n        4,\n        2,\n        1,\n        2,\n        4,\n        9,\n        9,\n        330,\n        3,\n        10,\n        1,\n        2,\n        0,\n        49,\n        6,\n        4,\n        4,\n        14,\n        9,\n        5351,\n        0,\n        7,\n        14,\n        13835,\n        9,\n        87,\n        9,\n        39,\n        4,\n        60,\n        6,\n        26,\n        9,\n        1014,\n        0,\n        2,\n        54,\n        8,\n        3,\n        82,\n        0,\n        12,\n        1,\n        19628,\n        1,\n        4706,\n        45,\n        3,\n        22,\n        543,\n        4,\n        4,\n        5,\n        9,\n        7,\n        3,\n        6,\n        31,\n        3,\n        149,\n        2,\n        1418,\n        49,\n        513,\n        54,\n        5,\n        49,\n        9,\n        0,\n        15,\n        0,\n        23,\n        4,\n        2,\n        14,\n        1361,\n        6,\n        2,\n        16,\n        3,\n        6,\n        2,\n        1,\n        2,\n        4,\n        101,\n        0,\n        161,\n        6,\n        10,\n        9,\n        357,\n        0,\n        62,\n        13,\n        499,\n        13,\n        983,\n        6,\n        110,\n        6,\n        6,\n        9,\n        4759,\n        9,\n        787719,\n        239\n    ];\n    // This file was generated. Do not modify manually!\n    var astralIdentifierStartCodes = [\n        0,\n        11,\n        2,\n        25,\n        2,\n        18,\n        2,\n        1,\n        2,\n        14,\n        3,\n        13,\n        35,\n        122,\n        70,\n        52,\n        268,\n        28,\n        4,\n        48,\n        48,\n        31,\n        14,\n        29,\n        6,\n        37,\n        11,\n        29,\n        3,\n        35,\n        5,\n        7,\n        2,\n        4,\n        43,\n        157,\n        19,\n        35,\n        5,\n        35,\n        5,\n        39,\n        9,\n        51,\n        13,\n        10,\n        2,\n        14,\n        2,\n        6,\n        2,\n        1,\n        2,\n        10,\n        2,\n        14,\n        2,\n        6,\n        2,\n        1,\n        68,\n        310,\n        10,\n        21,\n        11,\n        7,\n        25,\n        5,\n        2,\n        41,\n        2,\n        8,\n        70,\n        5,\n        3,\n        0,\n        2,\n        43,\n        2,\n        1,\n        4,\n        0,\n        3,\n        22,\n        11,\n        22,\n        10,\n        30,\n        66,\n        18,\n        2,\n        1,\n        11,\n        21,\n        11,\n        25,\n        71,\n        55,\n        7,\n        1,\n        65,\n        0,\n        16,\n        3,\n        2,\n        2,\n        2,\n        28,\n        43,\n        28,\n        4,\n        28,\n        36,\n        7,\n        2,\n        27,\n        28,\n        53,\n        11,\n        21,\n        11,\n        18,\n        14,\n        17,\n        111,\n        72,\n        56,\n        50,\n        14,\n        50,\n        14,\n        35,\n        349,\n        41,\n        7,\n        1,\n        79,\n        28,\n        11,\n        0,\n        9,\n        21,\n        43,\n        17,\n        47,\n        20,\n        28,\n        22,\n        13,\n        52,\n        58,\n        1,\n        3,\n        0,\n        14,\n        44,\n        33,\n        24,\n        27,\n        35,\n        30,\n        0,\n        3,\n        0,\n        9,\n        34,\n        4,\n        0,\n        13,\n        47,\n        15,\n        3,\n        22,\n        0,\n        2,\n        0,\n        36,\n        17,\n        2,\n        24,\n        20,\n        1,\n        64,\n        6,\n        2,\n        0,\n        2,\n        3,\n        2,\n        14,\n        2,\n        9,\n        8,\n        46,\n        39,\n        7,\n        3,\n        1,\n        3,\n        21,\n        2,\n        6,\n        2,\n        1,\n        2,\n        4,\n        4,\n        0,\n        19,\n        0,\n        13,\n        4,\n        159,\n        52,\n        19,\n        3,\n        21,\n        2,\n        31,\n        47,\n        21,\n        1,\n        2,\n        0,\n        185,\n        46,\n        42,\n        3,\n        37,\n        47,\n        21,\n        0,\n        60,\n        42,\n        14,\n        0,\n        72,\n        26,\n        38,\n        6,\n        186,\n        43,\n        117,\n        63,\n        32,\n        7,\n        3,\n        0,\n        3,\n        7,\n        2,\n        1,\n        2,\n        23,\n        16,\n        0,\n        2,\n        0,\n        95,\n        7,\n        3,\n        38,\n        17,\n        0,\n        2,\n        0,\n        29,\n        0,\n        11,\n        39,\n        8,\n        0,\n        22,\n        0,\n        12,\n        45,\n        20,\n        0,\n        19,\n        72,\n        264,\n        8,\n        2,\n        36,\n        18,\n        0,\n        50,\n        29,\n        113,\n        6,\n        2,\n        1,\n        2,\n        37,\n        22,\n        0,\n        26,\n        5,\n        2,\n        1,\n        2,\n        31,\n        15,\n        0,\n        328,\n        18,\n        16,\n        0,\n        2,\n        12,\n        2,\n        33,\n        125,\n        0,\n        80,\n        921,\n        103,\n        110,\n        18,\n        195,\n        2637,\n        96,\n        16,\n        1071,\n        18,\n        5,\n        4026,\n        582,\n        8634,\n        568,\n        8,\n        30,\n        18,\n        78,\n        18,\n        29,\n        19,\n        47,\n        17,\n        3,\n        32,\n        20,\n        6,\n        18,\n        689,\n        63,\n        129,\n        74,\n        6,\n        0,\n        67,\n        12,\n        65,\n        1,\n        2,\n        0,\n        29,\n        6135,\n        9,\n        1237,\n        43,\n        8,\n        8936,\n        3,\n        2,\n        6,\n        2,\n        1,\n        2,\n        290,\n        16,\n        0,\n        30,\n        2,\n        3,\n        0,\n        15,\n        3,\n        9,\n        395,\n        2309,\n        106,\n        6,\n        12,\n        4,\n        8,\n        8,\n        9,\n        5991,\n        84,\n        2,\n        70,\n        2,\n        1,\n        3,\n        0,\n        3,\n        1,\n        3,\n        3,\n        2,\n        11,\n        2,\n        0,\n        2,\n        6,\n        2,\n        64,\n        2,\n        3,\n        3,\n        7,\n        2,\n        6,\n        2,\n        27,\n        2,\n        3,\n        2,\n        4,\n        2,\n        0,\n        4,\n        6,\n        2,\n        339,\n        3,\n        24,\n        2,\n        24,\n        2,\n        30,\n        2,\n        24,\n        2,\n        30,\n        2,\n        24,\n        2,\n        30,\n        2,\n        24,\n        2,\n        30,\n        2,\n        24,\n        2,\n        7,\n        1845,\n        30,\n        7,\n        5,\n        262,\n        61,\n        147,\n        44,\n        11,\n        6,\n        17,\n        0,\n        322,\n        29,\n        19,\n        43,\n        485,\n        27,\n        757,\n        6,\n        2,\n        3,\n        2,\n        1,\n        2,\n        14,\n        2,\n        196,\n        60,\n        67,\n        8,\n        0,\n        1205,\n        3,\n        2,\n        26,\n        2,\n        1,\n        2,\n        0,\n        3,\n        0,\n        2,\n        9,\n        2,\n        3,\n        2,\n        0,\n        2,\n        0,\n        7,\n        0,\n        5,\n        0,\n        2,\n        0,\n        2,\n        0,\n        2,\n        2,\n        2,\n        1,\n        2,\n        0,\n        3,\n        0,\n        2,\n        0,\n        2,\n        0,\n        2,\n        0,\n        2,\n        0,\n        2,\n        1,\n        2,\n        0,\n        3,\n        3,\n        2,\n        6,\n        2,\n        3,\n        2,\n        3,\n        2,\n        0,\n        2,\n        9,\n        2,\n        16,\n        6,\n        2,\n        2,\n        4,\n        2,\n        16,\n        4421,\n        42719,\n        33,\n        4153,\n        7,\n        221,\n        3,\n        5761,\n        15,\n        7472,\n        16,\n        621,\n        2467,\n        541,\n        1507,\n        4938,\n        6,\n        4191\n    ];\n    // This file was generated. Do not modify manually!\n    var nonASCIIidentifierChars = \"‌‍\\xb7̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･\";\n    // This file was generated. Do not modify manually!\n    var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\";\n    // These are a run-length and offset encoded representation of the\n    // >0xffff code points that are a valid part of identifiers. The\n    // offset starts at 0x10000, and each pair of numbers represents an\n    // offset to the next range, and then a size of the range.\n    // Reserved word lists for various dialects of the language\n    var reservedWords = {\n        3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n        5: \"class enum extends super const export import\",\n        6: \"enum\",\n        strict: \"implements interface let package private protected public static yield\",\n        strictBind: \"eval arguments\"\n    };\n    // And the keywords\n    var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n    var keywords$1 = {\n        5: ecma5AndLessKeywords,\n        \"5module\": ecma5AndLessKeywords + \" export import\",\n        6: ecma5AndLessKeywords + \" const class extends export import super\"\n    };\n    var keywordRelationalOperator = /^in(stanceof)?$/;\n    // ## Character categories\n    var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n    var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n    // This has a complexity linear to the value of the code. The\n    // assumption is that looking up astral identifier characters is\n    // rare.\n    function isInAstralSet(code, set) {\n        var pos = 0x10000;\n        for(var i = 0; i < set.length; i += 2){\n            pos += set[i];\n            if (pos > code) {\n                return false;\n            }\n            pos += set[i + 1];\n            if (pos >= code) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Test whether a given character code starts an identifier.\n    function isIdentifierStart(code, astral) {\n        if (code < 65) {\n            return code === 36;\n        }\n        if (code < 91) {\n            return true;\n        }\n        if (code < 97) {\n            return code === 95;\n        }\n        if (code < 123) {\n            return true;\n        }\n        if (code <= 0xffff) {\n            return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n        }\n        if (astral === false) {\n            return false;\n        }\n        return isInAstralSet(code, astralIdentifierStartCodes);\n    }\n    // Test whether a given character is part of an identifier.\n    function isIdentifierChar(code, astral) {\n        if (code < 48) {\n            return code === 36;\n        }\n        if (code < 58) {\n            return true;\n        }\n        if (code < 65) {\n            return false;\n        }\n        if (code < 91) {\n            return true;\n        }\n        if (code < 97) {\n            return code === 95;\n        }\n        if (code < 123) {\n            return true;\n        }\n        if (code <= 0xffff) {\n            return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n        }\n        if (astral === false) {\n            return false;\n        }\n        return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n    }\n    // ## Token types\n    // The assignment of fine-grained, information-carrying type objects\n    // allows the tokenizer to store the information it has about a\n    // token in a way that is very cheap for the parser to look up.\n    // All token type variables start with an underscore, to make them\n    // easy to recognize.\n    // The `beforeExpr` property is used to disambiguate between regular\n    // expressions and divisions. It is set on all token types that can\n    // be followed by an expression (thus, a slash after them would be a\n    // regular expression).\n    //\n    // The `startsExpr` property is used to check if the token ends a\n    // `yield` expression. It is set on all token types that either can\n    // directly start an expression (like a quotation mark) or can\n    // continue an expression (like the body of a string).\n    //\n    // `isLoop` marks a keyword as starting a loop, which is important\n    // to know when parsing a label, in order to allow or disallow\n    // continue jumps to that label.\n    var TokenType = function TokenType(label, conf) {\n        if (conf === void 0) conf = {};\n        this.label = label;\n        this.keyword = conf.keyword;\n        this.beforeExpr = !!conf.beforeExpr;\n        this.startsExpr = !!conf.startsExpr;\n        this.isLoop = !!conf.isLoop;\n        this.isAssign = !!conf.isAssign;\n        this.prefix = !!conf.prefix;\n        this.postfix = !!conf.postfix;\n        this.binop = conf.binop || null;\n        this.updateContext = null;\n    };\n    function binop(name, prec) {\n        return new TokenType(name, {\n            beforeExpr: true,\n            binop: prec\n        });\n    }\n    var beforeExpr = {\n        beforeExpr: true\n    }, startsExpr = {\n        startsExpr: true\n    };\n    // Map keyword names to token types.\n    var keywords = {};\n    // Succinct definitions of keyword token types\n    function kw(name, options) {\n        if (options === void 0) options = {};\n        options.keyword = name;\n        return keywords[name] = new TokenType(name, options);\n    }\n    var types$1 = {\n        num: new TokenType(\"num\", startsExpr),\n        regexp: new TokenType(\"regexp\", startsExpr),\n        string: new TokenType(\"string\", startsExpr),\n        name: new TokenType(\"name\", startsExpr),\n        privateId: new TokenType(\"privateId\", startsExpr),\n        eof: new TokenType(\"eof\"),\n        // Punctuation token types.\n        bracketL: new TokenType(\"[\", {\n            beforeExpr: true,\n            startsExpr: true\n        }),\n        bracketR: new TokenType(\"]\"),\n        braceL: new TokenType(\"{\", {\n            beforeExpr: true,\n            startsExpr: true\n        }),\n        braceR: new TokenType(\"}\"),\n        parenL: new TokenType(\"(\", {\n            beforeExpr: true,\n            startsExpr: true\n        }),\n        parenR: new TokenType(\")\"),\n        comma: new TokenType(\",\", beforeExpr),\n        semi: new TokenType(\";\", beforeExpr),\n        colon: new TokenType(\":\", beforeExpr),\n        dot: new TokenType(\".\"),\n        question: new TokenType(\"?\", beforeExpr),\n        questionDot: new TokenType(\"?.\"),\n        arrow: new TokenType(\"=>\", beforeExpr),\n        template: new TokenType(\"template\"),\n        invalidTemplate: new TokenType(\"invalidTemplate\"),\n        ellipsis: new TokenType(\"...\", beforeExpr),\n        backQuote: new TokenType(\"`\", startsExpr),\n        dollarBraceL: new TokenType(\"${\", {\n            beforeExpr: true,\n            startsExpr: true\n        }),\n        // Operators. These carry several kinds of properties to help the\n        // parser use them properly (the presence of these properties is\n        // what categorizes them as operators).\n        //\n        // `binop`, when present, specifies that this operator is a binary\n        // operator, and will refer to its precedence.\n        //\n        // `prefix` and `postfix` mark the operator as a prefix or postfix\n        // unary operator.\n        //\n        // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n        // binary operators with a very low precedence, that should result\n        // in AssignmentExpression nodes.\n        eq: new TokenType(\"=\", {\n            beforeExpr: true,\n            isAssign: true\n        }),\n        assign: new TokenType(\"_=\", {\n            beforeExpr: true,\n            isAssign: true\n        }),\n        incDec: new TokenType(\"++/--\", {\n            prefix: true,\n            postfix: true,\n            startsExpr: true\n        }),\n        prefix: new TokenType(\"!/~\", {\n            beforeExpr: true,\n            prefix: true,\n            startsExpr: true\n        }),\n        logicalOR: binop(\"||\", 1),\n        logicalAND: binop(\"&&\", 2),\n        bitwiseOR: binop(\"|\", 3),\n        bitwiseXOR: binop(\"^\", 4),\n        bitwiseAND: binop(\"&\", 5),\n        equality: binop(\"==/!=/===/!==\", 6),\n        relational: binop(\"</>/<=/>=\", 7),\n        bitShift: binop(\"<</>>/>>>\", 8),\n        plusMin: new TokenType(\"+/-\", {\n            beforeExpr: true,\n            binop: 9,\n            prefix: true,\n            startsExpr: true\n        }),\n        modulo: binop(\"%\", 10),\n        star: binop(\"*\", 10),\n        slash: binop(\"/\", 10),\n        starstar: new TokenType(\"**\", {\n            beforeExpr: true\n        }),\n        coalesce: binop(\"??\", 1),\n        // Keyword token types.\n        _break: kw(\"break\"),\n        _case: kw(\"case\", beforeExpr),\n        _catch: kw(\"catch\"),\n        _continue: kw(\"continue\"),\n        _debugger: kw(\"debugger\"),\n        _default: kw(\"default\", beforeExpr),\n        _do: kw(\"do\", {\n            isLoop: true,\n            beforeExpr: true\n        }),\n        _else: kw(\"else\", beforeExpr),\n        _finally: kw(\"finally\"),\n        _for: kw(\"for\", {\n            isLoop: true\n        }),\n        _function: kw(\"function\", startsExpr),\n        _if: kw(\"if\"),\n        _return: kw(\"return\", beforeExpr),\n        _switch: kw(\"switch\"),\n        _throw: kw(\"throw\", beforeExpr),\n        _try: kw(\"try\"),\n        _var: kw(\"var\"),\n        _const: kw(\"const\"),\n        _while: kw(\"while\", {\n            isLoop: true\n        }),\n        _with: kw(\"with\"),\n        _new: kw(\"new\", {\n            beforeExpr: true,\n            startsExpr: true\n        }),\n        _this: kw(\"this\", startsExpr),\n        _super: kw(\"super\", startsExpr),\n        _class: kw(\"class\", startsExpr),\n        _extends: kw(\"extends\", beforeExpr),\n        _export: kw(\"export\"),\n        _import: kw(\"import\", startsExpr),\n        _null: kw(\"null\", startsExpr),\n        _true: kw(\"true\", startsExpr),\n        _false: kw(\"false\", startsExpr),\n        _in: kw(\"in\", {\n            beforeExpr: true,\n            binop: 7\n        }),\n        _instanceof: kw(\"instanceof\", {\n            beforeExpr: true,\n            binop: 7\n        }),\n        _typeof: kw(\"typeof\", {\n            beforeExpr: true,\n            prefix: true,\n            startsExpr: true\n        }),\n        _void: kw(\"void\", {\n            beforeExpr: true,\n            prefix: true,\n            startsExpr: true\n        }),\n        _delete: kw(\"delete\", {\n            beforeExpr: true,\n            prefix: true,\n            startsExpr: true\n        })\n    };\n    // Matches a whole line break (where CRLF is considered a single\n    // line break). Used to count lines.\n    var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\n    var lineBreakG = new RegExp(lineBreak.source, \"g\");\n    function isNewLine(code) {\n        return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;\n    }\n    function nextLineBreak(code, from, end) {\n        if (end === void 0) end = code.length;\n        for(var i = from; i < end; i++){\n            var next = code.charCodeAt(i);\n            if (isNewLine(next)) {\n                return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1;\n            }\n        }\n        return -1;\n    }\n    var nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n    var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n    var ref = Object.prototype;\n    var hasOwnProperty = ref.hasOwnProperty;\n    var toString = ref.toString;\n    var hasOwn = Object.hasOwn || function(obj, propName) {\n        return hasOwnProperty.call(obj, propName);\n    };\n    var isArray = Array.isArray || function(obj) {\n        return toString.call(obj) === \"[object Array]\";\n    };\n    var regexpCache = Object.create(null);\n    function wordsRegexp(words) {\n        return regexpCache[words] || (regexpCache[words] = new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\"));\n    }\n    function codePointToString(code) {\n        // UTF-16 Decoding\n        if (code <= 0xFFFF) {\n            return String.fromCharCode(code);\n        }\n        code -= 0x10000;\n        return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n    }\n    var loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n    // These are used when `options.locations` is on, for the\n    // `startLoc` and `endLoc` properties.\n    var Position = function Position(line, col) {\n        this.line = line;\n        this.column = col;\n    };\n    Position.prototype.offset = function offset(n) {\n        return new Position(this.line, this.column + n);\n    };\n    var SourceLocation = function SourceLocation(p, start, end) {\n        this.start = start;\n        this.end = end;\n        if (p.sourceFile !== null) {\n            this.source = p.sourceFile;\n        }\n    };\n    // The `getLineInfo` function is mostly useful when the\n    // `locations` option is off (for performance reasons) and you\n    // want to find the line/column position for a given character\n    // offset. `input` should be the code string that the offset refers\n    // into.\n    function getLineInfo(input, offset) {\n        for(var line = 1, cur = 0;;){\n            var nextBreak = nextLineBreak(input, cur, offset);\n            if (nextBreak < 0) {\n                return new Position(line, offset - cur);\n            }\n            ++line;\n            cur = nextBreak;\n        }\n    }\n    // A second argument must be given to configure the parser process.\n    // These options are recognized (only `ecmaVersion` is required):\n    var defaultOptions = {\n        // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n        // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n        // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `\"latest\"`\n        // (the latest version the library supports). This influences\n        // support for strict mode, the set of reserved words, and support\n        // for new syntax features.\n        ecmaVersion: null,\n        // `sourceType` indicates the mode the code should be parsed in.\n        // Can be either `\"script\"` or `\"module\"`. This influences global\n        // strict mode and parsing of `import` and `export` declarations.\n        sourceType: \"script\",\n        // `onInsertedSemicolon` can be a callback that will be called when\n        // a semicolon is automatically inserted. It will be passed the\n        // position of the inserted semicolon as an offset, and if\n        // `locations` is enabled, it is given the location as a `{line,\n        // column}` object as second argument.\n        onInsertedSemicolon: null,\n        // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n        // trailing commas.\n        onTrailingComma: null,\n        // By default, reserved words are only enforced if ecmaVersion >= 5.\n        // Set `allowReserved` to a boolean value to explicitly turn this on\n        // an off. When this option has the value \"never\", reserved words\n        // and keywords can also not be used as property names.\n        allowReserved: null,\n        // When enabled, a return at the top level is not considered an\n        // error.\n        allowReturnOutsideFunction: false,\n        // When enabled, import/export statements are not constrained to\n        // appearing at the top of the program, and an import.meta expression\n        // in a script isn't considered an error.\n        allowImportExportEverywhere: false,\n        // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n        // When enabled, await identifiers are allowed to appear at the top-level scope,\n        // but they are still not allowed in non-async functions.\n        allowAwaitOutsideFunction: null,\n        // When enabled, super identifiers are not constrained to\n        // appearing in methods and do not raise an error when they appear elsewhere.\n        allowSuperOutsideMethod: null,\n        // When enabled, hashbang directive in the beginning of file is\n        // allowed and treated as a line comment. Enabled by default when\n        // `ecmaVersion` >= 2023.\n        allowHashBang: false,\n        // By default, the parser will verify that private properties are\n        // only used in places where they are valid and have been declared.\n        // Set this to false to turn such checks off.\n        checkPrivateFields: true,\n        // When `locations` is on, `loc` properties holding objects with\n        // `start` and `end` properties in `{line, column}` form (with\n        // line being 1-based and column 0-based) will be attached to the\n        // nodes.\n        locations: false,\n        // A function can be passed as `onToken` option, which will\n        // cause Acorn to call that function with object in the same\n        // format as tokens returned from `tokenizer().getToken()`. Note\n        // that you are not allowed to call the parser from the\n        // callback—that will corrupt its internal state.\n        onToken: null,\n        // A function can be passed as `onComment` option, which will\n        // cause Acorn to call that function with `(block, text, start,\n        // end)` parameters whenever a comment is skipped. `block` is a\n        // boolean indicating whether this is a block (`/* */`) comment,\n        // `text` is the content of the comment, and `start` and `end` are\n        // character offsets that denote the start and end of the comment.\n        // When the `locations` option is on, two more parameters are\n        // passed, the full `{line, column}` locations of the start and\n        // end of the comments. Note that you are not allowed to call the\n        // parser from the callback—that will corrupt its internal state.\n        // When this option has an array as value, objects representing the\n        // comments are pushed to it.\n        onComment: null,\n        // Nodes have their start and end characters offsets recorded in\n        // `start` and `end` properties (directly on the node, rather than\n        // the `loc` object, which holds line/column data. To also add a\n        // [semi-standardized][range] `range` property holding a `[start,\n        // end]` array with the same numbers, set the `ranges` option to\n        // `true`.\n        //\n        // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n        ranges: false,\n        // It is possible to parse multiple files into a single AST by\n        // passing the tree produced by parsing the first file as\n        // `program` option in subsequent parses. This will add the\n        // toplevel forms of the parsed file to the `Program` (top) node\n        // of an existing parse tree.\n        program: null,\n        // When `locations` is on, you can pass this to record the source\n        // file in every node's `loc` object.\n        sourceFile: null,\n        // This value, if given, is stored in every node, whether\n        // `locations` is on or off.\n        directSourceFile: null,\n        // When enabled, parenthesized expressions are represented by\n        // (non-standard) ParenthesizedExpression nodes\n        preserveParens: false\n    };\n    // Interpret and default an options object\n    var warnedAboutEcmaVersion = false;\n    function getOptions(opts) {\n        var options = {};\n        for(var opt in defaultOptions){\n            options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];\n        }\n        if (options.ecmaVersion === \"latest\") {\n            options.ecmaVersion = 1e8;\n        } else if (options.ecmaVersion == null) {\n            if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n                warnedAboutEcmaVersion = true;\n                console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n            }\n            options.ecmaVersion = 11;\n        } else if (options.ecmaVersion >= 2015) {\n            options.ecmaVersion -= 2009;\n        }\n        if (options.allowReserved == null) {\n            options.allowReserved = options.ecmaVersion < 5;\n        }\n        if (!opts || opts.allowHashBang == null) {\n            options.allowHashBang = options.ecmaVersion >= 14;\n        }\n        if (isArray(options.onToken)) {\n            var tokens = options.onToken;\n            options.onToken = function(token) {\n                return tokens.push(token);\n            };\n        }\n        if (isArray(options.onComment)) {\n            options.onComment = pushComment(options, options.onComment);\n        }\n        return options;\n    }\n    function pushComment(options, array) {\n        return function(block, text, start, end, startLoc, endLoc) {\n            var comment = {\n                type: block ? \"Block\" : \"Line\",\n                value: text,\n                start: start,\n                end: end\n            };\n            if (options.locations) {\n                comment.loc = new SourceLocation(this, startLoc, endLoc);\n            }\n            if (options.ranges) {\n                comment.range = [\n                    start,\n                    end\n                ];\n            }\n            array.push(comment);\n        };\n    }\n    // Each scope gets a bitset that may contain these flags\n    var SCOPE_TOP = 1, SCOPE_FUNCTION = 2, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW = 16, SCOPE_SIMPLE_CATCH = 32, SCOPE_SUPER = 64, SCOPE_DIRECT_SUPER = 128, SCOPE_CLASS_STATIC_BLOCK = 256, SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\n    function functionFlags(async, generator) {\n        return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);\n    }\n    // Used in checkLVal* and declareName to determine the type of a binding\n    var BIND_NONE = 0, BIND_VAR = 1, BIND_LEXICAL = 2, BIND_FUNCTION = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n    var Parser = function Parser(options, input, startPos) {\n        this.options = options = getOptions(options);\n        this.sourceFile = options.sourceFile;\n        this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n        var reserved = \"\";\n        if (options.allowReserved !== true) {\n            reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n            if (options.sourceType === \"module\") {\n                reserved += \" await\";\n            }\n        }\n        this.reservedWords = wordsRegexp(reserved);\n        var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n        this.reservedWordsStrict = wordsRegexp(reservedStrict);\n        this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n        this.input = String(input);\n        // Used to signal to callers of `readWord1` whether the word\n        // contained any escape sequences. This is needed because words with\n        // escape sequences must not be interpreted as keywords.\n        this.containsEsc = false;\n        // Set up token state\n        // The current position of the tokenizer in the input.\n        if (startPos) {\n            this.pos = startPos;\n            this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n            this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n        } else {\n            this.pos = this.lineStart = 0;\n            this.curLine = 1;\n        }\n        // Properties of the current token:\n        // Its type\n        this.type = types$1.eof;\n        // For tokens that include more information than their type, the value\n        this.value = null;\n        // Its start and end offset\n        this.start = this.end = this.pos;\n        // And, if locations are used, the {line, column} object\n        // corresponding to those offsets\n        this.startLoc = this.endLoc = this.curPosition();\n        // Position information for the previous token\n        this.lastTokEndLoc = this.lastTokStartLoc = null;\n        this.lastTokStart = this.lastTokEnd = this.pos;\n        // The context stack is used to superficially track syntactic\n        // context to predict whether a regular expression is allowed in a\n        // given position.\n        this.context = this.initialContext();\n        this.exprAllowed = true;\n        // Figure out if it's a module code.\n        this.inModule = options.sourceType === \"module\";\n        this.strict = this.inModule || this.strictDirective(this.pos);\n        // Used to signify the start of a potential arrow function\n        this.potentialArrowAt = -1;\n        this.potentialArrowInForAwait = false;\n        // Positions to delayed-check that yield/await does not exist in default parameters.\n        this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n        // Labels in scope.\n        this.labels = [];\n        // Thus-far undefined exports.\n        this.undefinedExports = Object.create(null);\n        // If enabled, skip leading hashbang line.\n        if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\") {\n            this.skipLineComment(2);\n        }\n        // Scope tracking for duplicate variable names (see scope.js)\n        this.scopeStack = [];\n        this.enterScope(SCOPE_TOP);\n        // For RegExp validation\n        this.regexpState = null;\n        // The stack of private names.\n        // Each element has two properties: 'declared' and 'used'.\n        // When it exited from the outermost class definition, all used private names must be declared.\n        this.privateNameStack = [];\n    };\n    var prototypeAccessors = {\n        inFunction: {\n            configurable: true\n        },\n        inGenerator: {\n            configurable: true\n        },\n        inAsync: {\n            configurable: true\n        },\n        canAwait: {\n            configurable: true\n        },\n        allowSuper: {\n            configurable: true\n        },\n        allowDirectSuper: {\n            configurable: true\n        },\n        treatFunctionsAsVar: {\n            configurable: true\n        },\n        allowNewDotTarget: {\n            configurable: true\n        },\n        inClassStaticBlock: {\n            configurable: true\n        }\n    };\n    Parser.prototype.parse = function parse() {\n        var node = this.options.program || this.startNode();\n        this.nextToken();\n        return this.parseTopLevel(node);\n    };\n    prototypeAccessors.inFunction.get = function() {\n        return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n    };\n    prototypeAccessors.inGenerator.get = function() {\n        return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit;\n    };\n    prototypeAccessors.inAsync.get = function() {\n        return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit;\n    };\n    prototypeAccessors.canAwait.get = function() {\n        for(var i = this.scopeStack.length - 1; i >= 0; i--){\n            var scope = this.scopeStack[i];\n            if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) {\n                return false;\n            }\n            if (scope.flags & SCOPE_FUNCTION) {\n                return (scope.flags & SCOPE_ASYNC) > 0;\n            }\n        }\n        return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;\n    };\n    prototypeAccessors.allowSuper.get = function() {\n        var ref = this.currentThisScope();\n        var flags = ref.flags;\n        var inClassFieldInit = ref.inClassFieldInit;\n        return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;\n    };\n    prototypeAccessors.allowDirectSuper.get = function() {\n        return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n    };\n    prototypeAccessors.treatFunctionsAsVar.get = function() {\n        return this.treatFunctionsAsVarInScope(this.currentScope());\n    };\n    prototypeAccessors.allowNewDotTarget.get = function() {\n        var ref = this.currentThisScope();\n        var flags = ref.flags;\n        var inClassFieldInit = ref.inClassFieldInit;\n        return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit;\n    };\n    prototypeAccessors.inClassStaticBlock.get = function() {\n        return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0;\n    };\n    Parser.extend = function extend() {\n        var plugins = [], len = arguments.length;\n        while(len--)plugins[len] = arguments[len];\n        var cls = this;\n        for(var i = 0; i < plugins.length; i++){\n            cls = plugins[i](cls);\n        }\n        return cls;\n    };\n    Parser.parse = function parse(input, options) {\n        return new this(options, input).parse();\n    };\n    Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {\n        var parser = new this(options, input, pos);\n        parser.nextToken();\n        return parser.parseExpression();\n    };\n    Parser.tokenizer = function tokenizer(input, options) {\n        return new this(options, input);\n    };\n    Object.defineProperties(Parser.prototype, prototypeAccessors);\n    var pp$9 = Parser.prototype;\n    // ## Parser utilities\n    var literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\n    pp$9.strictDirective = function(start) {\n        if (this.options.ecmaVersion < 5) {\n            return false;\n        }\n        for(;;){\n            // Try to find string literal.\n            skipWhiteSpace.lastIndex = start;\n            start += skipWhiteSpace.exec(this.input)[0].length;\n            var match = literal.exec(this.input.slice(start));\n            if (!match) {\n                return false;\n            }\n            if ((match[1] || match[2]) === \"use strict\") {\n                skipWhiteSpace.lastIndex = start + match[0].length;\n                var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n                var next = this.input.charAt(end);\n                return next === \";\" || next === \"}\" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\");\n            }\n            start += match[0].length;\n            // Skip semicolon, if any.\n            skipWhiteSpace.lastIndex = start;\n            start += skipWhiteSpace.exec(this.input)[0].length;\n            if (this.input[start] === \";\") {\n                start++;\n            }\n        }\n    };\n    // Predicate that tests whether the next token is of the given\n    // type, and if yes, consumes it as a side effect.\n    pp$9.eat = function(type) {\n        if (this.type === type) {\n            this.next();\n            return true;\n        } else {\n            return false;\n        }\n    };\n    // Tests whether parsed token is a contextual keyword.\n    pp$9.isContextual = function(name) {\n        return this.type === types$1.name && this.value === name && !this.containsEsc;\n    };\n    // Consumes contextual keyword if possible.\n    pp$9.eatContextual = function(name) {\n        if (!this.isContextual(name)) {\n            return false;\n        }\n        this.next();\n        return true;\n    };\n    // Asserts that following token is given contextual keyword.\n    pp$9.expectContextual = function(name) {\n        if (!this.eatContextual(name)) {\n            this.unexpected();\n        }\n    };\n    // Test whether a semicolon can be inserted at the current position.\n    pp$9.canInsertSemicolon = function() {\n        return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n    };\n    pp$9.insertSemicolon = function() {\n        if (this.canInsertSemicolon()) {\n            if (this.options.onInsertedSemicolon) {\n                this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n            }\n            return true;\n        }\n    };\n    // Consume a semicolon, or, failing that, see if we are allowed to\n    // pretend that there is a semicolon at this position.\n    pp$9.semicolon = function() {\n        if (!this.eat(types$1.semi) && !this.insertSemicolon()) {\n            this.unexpected();\n        }\n    };\n    pp$9.afterTrailingComma = function(tokType, notNext) {\n        if (this.type === tokType) {\n            if (this.options.onTrailingComma) {\n                this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n            }\n            if (!notNext) {\n                this.next();\n            }\n            return true;\n        }\n    };\n    // Expect a token of a given type. If found, consume it, otherwise,\n    // raise an unexpected token error.\n    pp$9.expect = function(type) {\n        this.eat(type) || this.unexpected();\n    };\n    // Raise an unexpected token error.\n    pp$9.unexpected = function(pos) {\n        this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n    };\n    var DestructuringErrors = function DestructuringErrors() {\n        this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;\n    };\n    pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n        if (!refDestructuringErrors) {\n            return;\n        }\n        if (refDestructuringErrors.trailingComma > -1) {\n            this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\");\n        }\n        var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n        if (parens > -1) {\n            this.raiseRecoverable(parens, isAssign ? \"Assigning to rvalue\" : \"Parenthesized pattern\");\n        }\n    };\n    pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n        if (!refDestructuringErrors) {\n            return false;\n        }\n        var shorthandAssign = refDestructuringErrors.shorthandAssign;\n        var doubleProto = refDestructuringErrors.doubleProto;\n        if (!andThrow) {\n            return shorthandAssign >= 0 || doubleProto >= 0;\n        }\n        if (shorthandAssign >= 0) {\n            this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\");\n        }\n        if (doubleProto >= 0) {\n            this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\");\n        }\n    };\n    pp$9.checkYieldAwaitInDefaultParams = function() {\n        if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {\n            this.raise(this.yieldPos, \"Yield expression cannot be a default value\");\n        }\n        if (this.awaitPos) {\n            this.raise(this.awaitPos, \"Await expression cannot be a default value\");\n        }\n    };\n    pp$9.isSimpleAssignTarget = function(expr) {\n        if (expr.type === \"ParenthesizedExpression\") {\n            return this.isSimpleAssignTarget(expr.expression);\n        }\n        return expr.type === \"Identifier\" || expr.type === \"MemberExpression\";\n    };\n    var pp$8 = Parser.prototype;\n    // ### Statement parsing\n    // Parse a program. Initializes the parser, reads any number of\n    // statements, and wraps them in a Program node.  Optionally takes a\n    // `program` argument.  If present, the statements will be appended\n    // to its body instead of creating a new node.\n    pp$8.parseTopLevel = function(node) {\n        var exports1 = Object.create(null);\n        if (!node.body) {\n            node.body = [];\n        }\n        while(this.type !== types$1.eof){\n            var stmt = this.parseStatement(null, true, exports1);\n            node.body.push(stmt);\n        }\n        if (this.inModule) {\n            for(var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1){\n                var name = list[i];\n                this.raiseRecoverable(this.undefinedExports[name].start, \"Export '\" + name + \"' is not defined\");\n            }\n        }\n        this.adaptDirectivePrologue(node.body);\n        this.next();\n        node.sourceType = this.options.sourceType;\n        return this.finishNode(node, \"Program\");\n    };\n    var loopLabel = {\n        kind: \"loop\"\n    }, switchLabel = {\n        kind: \"switch\"\n    };\n    pp$8.isLet = function(context) {\n        if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) {\n            return false;\n        }\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n        // For ambiguous cases, determine if a LexicalDeclaration (or only a\n        // Statement) is allowed here. If context is not empty then only a Statement\n        // is allowed. However, `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        if (nextCh === 91 || nextCh === 92) {\n            return true;\n        } // '[', '/'\n        if (context) {\n            return false;\n        }\n        if (nextCh === 123 || nextCh > 0xd7ff && nextCh < 0xdc00) {\n            return true;\n        } // '{', astral\n        if (isIdentifierStart(nextCh, true)) {\n            var pos = next + 1;\n            while(isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)){\n                ++pos;\n            }\n            if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) {\n                return true;\n            }\n            var ident = this.input.slice(next, pos);\n            if (!keywordRelationalOperator.test(ident)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    // check 'async [no LineTerminator here] function'\n    // - 'async /*foo*/ function' is OK.\n    // - 'async /*\\n*/ function' is invalid.\n    pp$8.isAsyncFunction = function() {\n        if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\")) {\n            return false;\n        }\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.pos + skip[0].length, after;\n        return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === \"function\" && (next + 8 === this.input.length || !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00));\n    };\n    // Parse a single statement.\n    //\n    // If expecting a statement and finding a slash operator, parse a\n    // regular expression literal. This is to handle cases like\n    // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n    // does not help.\n    pp$8.parseStatement = function(context, topLevel, exports1) {\n        var starttype = this.type, node = this.startNode(), kind;\n        if (this.isLet(context)) {\n            starttype = types$1._var;\n            kind = \"let\";\n        }\n        // Most types of statements are recognized by the keyword they\n        // start with. Many are trivial to parse, some require a bit of\n        // complexity.\n        switch(starttype){\n            case types$1._break:\n            case types$1._continue:\n                return this.parseBreakContinueStatement(node, starttype.keyword);\n            case types$1._debugger:\n                return this.parseDebuggerStatement(node);\n            case types$1._do:\n                return this.parseDoStatement(node);\n            case types$1._for:\n                return this.parseForStatement(node);\n            case types$1._function:\n                // Function as sole body of either an if statement or a labeled statement\n                // works, but not when it is part of a labeled statement that is the sole\n                // body of an if statement.\n                if (context && (this.strict || context !== \"if\" && context !== \"label\") && this.options.ecmaVersion >= 6) {\n                    this.unexpected();\n                }\n                return this.parseFunctionStatement(node, false, !context);\n            case types$1._class:\n                if (context) {\n                    this.unexpected();\n                }\n                return this.parseClass(node, true);\n            case types$1._if:\n                return this.parseIfStatement(node);\n            case types$1._return:\n                return this.parseReturnStatement(node);\n            case types$1._switch:\n                return this.parseSwitchStatement(node);\n            case types$1._throw:\n                return this.parseThrowStatement(node);\n            case types$1._try:\n                return this.parseTryStatement(node);\n            case types$1._const:\n            case types$1._var:\n                kind = kind || this.value;\n                if (context && kind !== \"var\") {\n                    this.unexpected();\n                }\n                return this.parseVarStatement(node, kind);\n            case types$1._while:\n                return this.parseWhileStatement(node);\n            case types$1._with:\n                return this.parseWithStatement(node);\n            case types$1.braceL:\n                return this.parseBlock(true, node);\n            case types$1.semi:\n                return this.parseEmptyStatement(node);\n            case types$1._export:\n            case types$1._import:\n                if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\n                    skipWhiteSpace.lastIndex = this.pos;\n                    var skip = skipWhiteSpace.exec(this.input);\n                    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n                    if (nextCh === 40 || nextCh === 46) {\n                        return this.parseExpressionStatement(node, this.parseExpression());\n                    }\n                }\n                if (!this.options.allowImportExportEverywhere) {\n                    if (!topLevel) {\n                        this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n                    }\n                    if (!this.inModule) {\n                        this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n                    }\n                }\n                return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports1);\n            // If the statement does not start with a statement keyword or a\n            // brace, it's an ExpressionStatement or LabeledStatement. We\n            // simply start parsing an expression, and afterwards, if the\n            // next token is a colon and the expression was a simple\n            // Identifier node, we switch to interpreting it as a label.\n            default:\n                if (this.isAsyncFunction()) {\n                    if (context) {\n                        this.unexpected();\n                    }\n                    this.next();\n                    return this.parseFunctionStatement(node, true, !context);\n                }\n                var maybeName = this.value, expr = this.parseExpression();\n                if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n                    return this.parseLabeledStatement(node, maybeName, expr, context);\n                } else {\n                    return this.parseExpressionStatement(node, expr);\n                }\n        }\n    };\n    pp$8.parseBreakContinueStatement = function(node, keyword) {\n        var isBreak = keyword === \"break\";\n        this.next();\n        if (this.eat(types$1.semi) || this.insertSemicolon()) {\n            node.label = null;\n        } else if (this.type !== types$1.name) {\n            this.unexpected();\n        } else {\n            node.label = this.parseIdent();\n            this.semicolon();\n        }\n        // Verify that there is an actual destination to break or\n        // continue to.\n        var i = 0;\n        for(; i < this.labels.length; ++i){\n            var lab = this.labels[i];\n            if (node.label == null || lab.name === node.label.name) {\n                if (lab.kind != null && (isBreak || lab.kind === \"loop\")) {\n                    break;\n                }\n                if (node.label && isBreak) {\n                    break;\n                }\n            }\n        }\n        if (i === this.labels.length) {\n            this.raise(node.start, \"Unsyntactic \" + keyword);\n        }\n        return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n    };\n    pp$8.parseDebuggerStatement = function(node) {\n        this.next();\n        this.semicolon();\n        return this.finishNode(node, \"DebuggerStatement\");\n    };\n    pp$8.parseDoStatement = function(node) {\n        this.next();\n        this.labels.push(loopLabel);\n        node.body = this.parseStatement(\"do\");\n        this.labels.pop();\n        this.expect(types$1._while);\n        node.test = this.parseParenExpression();\n        if (this.options.ecmaVersion >= 6) {\n            this.eat(types$1.semi);\n        } else {\n            this.semicolon();\n        }\n        return this.finishNode(node, \"DoWhileStatement\");\n    };\n    // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n    // loop is non-trivial. Basically, we have to parse the init `var`\n    // statement or expression, disallowing the `in` operator (see\n    // the second parameter to `parseExpression`), and then check\n    // whether the next token is `in` or `of`. When there is no init\n    // part (semicolon immediately after the opening parenthesis), it\n    // is a regular `for` loop.\n    pp$8.parseForStatement = function(node) {\n        this.next();\n        var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\") ? this.lastTokStart : -1;\n        this.labels.push(loopLabel);\n        this.enterScope(0);\n        this.expect(types$1.parenL);\n        if (this.type === types$1.semi) {\n            if (awaitAt > -1) {\n                this.unexpected(awaitAt);\n            }\n            return this.parseFor(node, null);\n        }\n        var isLet = this.isLet();\n        if (this.type === types$1._var || this.type === types$1._const || isLet) {\n            var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n            this.next();\n            this.parseVar(init$1, true, kind);\n            this.finishNode(init$1, \"VariableDeclaration\");\n            if ((this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && init$1.declarations.length === 1) {\n                if (this.options.ecmaVersion >= 9) {\n                    if (this.type === types$1._in) {\n                        if (awaitAt > -1) {\n                            this.unexpected(awaitAt);\n                        }\n                    } else {\n                        node.await = awaitAt > -1;\n                    }\n                }\n                return this.parseForIn(node, init$1);\n            }\n            if (awaitAt > -1) {\n                this.unexpected(awaitAt);\n            }\n            return this.parseFor(node, init$1);\n        }\n        var startsWithLet = this.isContextual(\"let\"), isForOf = false;\n        var refDestructuringErrors = new DestructuringErrors;\n        var init = this.parseExpression(awaitAt > -1 ? \"await\" : true, refDestructuringErrors);\n        if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n            if (this.options.ecmaVersion >= 9) {\n                if (this.type === types$1._in) {\n                    if (awaitAt > -1) {\n                        this.unexpected(awaitAt);\n                    }\n                } else {\n                    node.await = awaitAt > -1;\n                }\n            }\n            if (startsWithLet && isForOf) {\n                this.raise(init.start, \"The left-hand side of a for-of loop may not start with 'let'.\");\n            }\n            this.toAssignable(init, false, refDestructuringErrors);\n            this.checkLValPattern(init);\n            return this.parseForIn(node, init);\n        } else {\n            this.checkExpressionErrors(refDestructuringErrors, true);\n        }\n        if (awaitAt > -1) {\n            this.unexpected(awaitAt);\n        }\n        return this.parseFor(node, init);\n    };\n    pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n        this.next();\n        return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);\n    };\n    pp$8.parseIfStatement = function(node) {\n        this.next();\n        node.test = this.parseParenExpression();\n        // allow function declarations in branches, but only in non-strict mode\n        node.consequent = this.parseStatement(\"if\");\n        node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n        return this.finishNode(node, \"IfStatement\");\n    };\n    pp$8.parseReturnStatement = function(node) {\n        if (!this.inFunction && !this.options.allowReturnOutsideFunction) {\n            this.raise(this.start, \"'return' outside of function\");\n        }\n        this.next();\n        // In `return` (and `break`/`continue`), the keywords with\n        // optional arguments, we eagerly look for a semicolon or the\n        // possibility to insert one.\n        if (this.eat(types$1.semi) || this.insertSemicolon()) {\n            node.argument = null;\n        } else {\n            node.argument = this.parseExpression();\n            this.semicolon();\n        }\n        return this.finishNode(node, \"ReturnStatement\");\n    };\n    pp$8.parseSwitchStatement = function(node) {\n        this.next();\n        node.discriminant = this.parseParenExpression();\n        node.cases = [];\n        this.expect(types$1.braceL);\n        this.labels.push(switchLabel);\n        this.enterScope(0);\n        // Statements under must be grouped (by label) in SwitchCase\n        // nodes. `cur` is used to keep the node that we are currently\n        // adding statements to.\n        var cur;\n        for(var sawDefault = false; this.type !== types$1.braceR;){\n            if (this.type === types$1._case || this.type === types$1._default) {\n                var isCase = this.type === types$1._case;\n                if (cur) {\n                    this.finishNode(cur, \"SwitchCase\");\n                }\n                node.cases.push(cur = this.startNode());\n                cur.consequent = [];\n                this.next();\n                if (isCase) {\n                    cur.test = this.parseExpression();\n                } else {\n                    if (sawDefault) {\n                        this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\");\n                    }\n                    sawDefault = true;\n                    cur.test = null;\n                }\n                this.expect(types$1.colon);\n            } else {\n                if (!cur) {\n                    this.unexpected();\n                }\n                cur.consequent.push(this.parseStatement(null));\n            }\n        }\n        this.exitScope();\n        if (cur) {\n            this.finishNode(cur, \"SwitchCase\");\n        }\n        this.next(); // Closing brace\n        this.labels.pop();\n        return this.finishNode(node, \"SwitchStatement\");\n    };\n    pp$8.parseThrowStatement = function(node) {\n        this.next();\n        if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {\n            this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n        }\n        node.argument = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(node, \"ThrowStatement\");\n    };\n    // Reused empty array added for node fields that are always empty.\n    var empty$1 = [];\n    pp$8.parseCatchClauseParam = function() {\n        var param = this.parseBindingAtom();\n        var simple = param.type === \"Identifier\";\n        this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n        this.expect(types$1.parenR);\n        return param;\n    };\n    pp$8.parseTryStatement = function(node) {\n        this.next();\n        node.block = this.parseBlock();\n        node.handler = null;\n        if (this.type === types$1._catch) {\n            var clause = this.startNode();\n            this.next();\n            if (this.eat(types$1.parenL)) {\n                clause.param = this.parseCatchClauseParam();\n            } else {\n                if (this.options.ecmaVersion < 10) {\n                    this.unexpected();\n                }\n                clause.param = null;\n                this.enterScope(0);\n            }\n            clause.body = this.parseBlock(false);\n            this.exitScope();\n            node.handler = this.finishNode(clause, \"CatchClause\");\n        }\n        node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n        if (!node.handler && !node.finalizer) {\n            this.raise(node.start, \"Missing catch or finally clause\");\n        }\n        return this.finishNode(node, \"TryStatement\");\n    };\n    pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {\n        this.next();\n        this.parseVar(node, false, kind, allowMissingInitializer);\n        this.semicolon();\n        return this.finishNode(node, \"VariableDeclaration\");\n    };\n    pp$8.parseWhileStatement = function(node) {\n        this.next();\n        node.test = this.parseParenExpression();\n        this.labels.push(loopLabel);\n        node.body = this.parseStatement(\"while\");\n        this.labels.pop();\n        return this.finishNode(node, \"WhileStatement\");\n    };\n    pp$8.parseWithStatement = function(node) {\n        if (this.strict) {\n            this.raise(this.start, \"'with' in strict mode\");\n        }\n        this.next();\n        node.object = this.parseParenExpression();\n        node.body = this.parseStatement(\"with\");\n        return this.finishNode(node, \"WithStatement\");\n    };\n    pp$8.parseEmptyStatement = function(node) {\n        this.next();\n        return this.finishNode(node, \"EmptyStatement\");\n    };\n    pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {\n        for(var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1){\n            var label = list[i$1];\n            if (label.name === maybeName) {\n                this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n            }\n        }\n        var kind = this.type.isLoop ? \"loop\" : this.type === types$1._switch ? \"switch\" : null;\n        for(var i = this.labels.length - 1; i >= 0; i--){\n            var label$1 = this.labels[i];\n            if (label$1.statementStart === node.start) {\n                // Update information about previous labels on this node\n                label$1.statementStart = this.start;\n                label$1.kind = kind;\n            } else {\n                break;\n            }\n        }\n        this.labels.push({\n            name: maybeName,\n            kind: kind,\n            statementStart: this.start\n        });\n        node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n        this.labels.pop();\n        node.label = expr;\n        return this.finishNode(node, \"LabeledStatement\");\n    };\n    pp$8.parseExpressionStatement = function(node, expr) {\n        node.expression = expr;\n        this.semicolon();\n        return this.finishNode(node, \"ExpressionStatement\");\n    };\n    // Parse a semicolon-enclosed block of statements, handling `\"use\n    // strict\"` declarations when `allowStrict` is true (used for\n    // function bodies).\n    pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n        if (createNewLexicalScope === void 0) createNewLexicalScope = true;\n        if (node === void 0) node = this.startNode();\n        node.body = [];\n        this.expect(types$1.braceL);\n        if (createNewLexicalScope) {\n            this.enterScope(0);\n        }\n        while(this.type !== types$1.braceR){\n            var stmt = this.parseStatement(null);\n            node.body.push(stmt);\n        }\n        if (exitStrict) {\n            this.strict = false;\n        }\n        this.next();\n        if (createNewLexicalScope) {\n            this.exitScope();\n        }\n        return this.finishNode(node, \"BlockStatement\");\n    };\n    // Parse a regular `for` loop. The disambiguation code in\n    // `parseStatement` will already have parsed the init statement or\n    // expression.\n    pp$8.parseFor = function(node, init) {\n        node.init = init;\n        this.expect(types$1.semi);\n        node.test = this.type === types$1.semi ? null : this.parseExpression();\n        this.expect(types$1.semi);\n        node.update = this.type === types$1.parenR ? null : this.parseExpression();\n        this.expect(types$1.parenR);\n        node.body = this.parseStatement(\"for\");\n        this.exitScope();\n        this.labels.pop();\n        return this.finishNode(node, \"ForStatement\");\n    };\n    // Parse a `for`/`in` and `for`/`of` loop, which are almost\n    // same from parser's perspective.\n    pp$8.parseForIn = function(node, init) {\n        var isForIn = this.type === types$1._in;\n        this.next();\n        if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n            this.raise(init.start, (isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\");\n        }\n        node.left = init;\n        node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n        this.expect(types$1.parenR);\n        node.body = this.parseStatement(\"for\");\n        this.exitScope();\n        this.labels.pop();\n        return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n    };\n    // Parse a list of variable declarations.\n    pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {\n        node.declarations = [];\n        node.kind = kind;\n        for(;;){\n            var decl = this.startNode();\n            this.parseVarId(decl, kind);\n            if (this.eat(types$1.eq)) {\n                decl.init = this.parseMaybeAssign(isFor);\n            } else if (!allowMissingInitializer && kind === \"const\" && !(this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n                this.unexpected();\n            } else if (!allowMissingInitializer && decl.id.type !== \"Identifier\" && !(isFor && (this.type === types$1._in || this.isContextual(\"of\")))) {\n                this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n            } else {\n                decl.init = null;\n            }\n            node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n            if (!this.eat(types$1.comma)) {\n                break;\n            }\n        }\n        return node;\n    };\n    pp$8.parseVarId = function(decl, kind) {\n        decl.id = this.parseBindingAtom();\n        this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n    };\n    var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n    // Parse a function declaration or literal (depending on the\n    // `statement & FUNC_STATEMENT`).\n    // Remove `allowExpressionBody` for 7.0.0, as it is only called with false\n    pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {\n        this.initFunction(node);\n        if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n            if (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT) {\n                this.unexpected();\n            }\n            node.generator = this.eat(types$1.star);\n        }\n        if (this.options.ecmaVersion >= 8) {\n            node.async = !!isAsync;\n        }\n        if (statement & FUNC_STATEMENT) {\n            node.id = statement & FUNC_NULLABLE_ID && this.type !== types$1.name ? null : this.parseIdent();\n            if (node.id && !(statement & FUNC_HANGING_STATEMENT)) // If it is a regular function declaration in sloppy mode, then it is\n            // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n            // mode depends on properties of the current scope (see\n            // treatFunctionsAsVar).\n            {\n                this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);\n            }\n        }\n        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n        this.yieldPos = 0;\n        this.awaitPos = 0;\n        this.awaitIdentPos = 0;\n        this.enterScope(functionFlags(node.async, node.generator));\n        if (!(statement & FUNC_STATEMENT)) {\n            node.id = this.type === types$1.name ? this.parseIdent() : null;\n        }\n        this.parseFunctionParams(node);\n        this.parseFunctionBody(node, allowExpressionBody, false, forInit);\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos;\n        return this.finishNode(node, statement & FUNC_STATEMENT ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    };\n    pp$8.parseFunctionParams = function(node) {\n        this.expect(types$1.parenL);\n        node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n        this.checkYieldAwaitInDefaultParams();\n    };\n    // Parse a class declaration or literal (depending on the\n    // `isStatement` parameter).\n    pp$8.parseClass = function(node, isStatement) {\n        this.next();\n        // ecma-262 14.6 Class Definitions\n        // A class definition is always strict mode code.\n        var oldStrict = this.strict;\n        this.strict = true;\n        this.parseClassId(node, isStatement);\n        this.parseClassSuper(node);\n        var privateNameMap = this.enterClassBody();\n        var classBody = this.startNode();\n        var hadConstructor = false;\n        classBody.body = [];\n        this.expect(types$1.braceL);\n        while(this.type !== types$1.braceR){\n            var element = this.parseClassElement(node.superClass !== null);\n            if (element) {\n                classBody.body.push(element);\n                if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n                    if (hadConstructor) {\n                        this.raiseRecoverable(element.start, \"Duplicate constructor in the same class\");\n                    }\n                    hadConstructor = true;\n                } else if (element.key && element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\n                    this.raiseRecoverable(element.key.start, \"Identifier '#\" + element.key.name + \"' has already been declared\");\n                }\n            }\n        }\n        this.strict = oldStrict;\n        this.next();\n        node.body = this.finishNode(classBody, \"ClassBody\");\n        this.exitClassBody();\n        return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n    };\n    pp$8.parseClassElement = function(constructorAllowsSuper) {\n        if (this.eat(types$1.semi)) {\n            return null;\n        }\n        var ecmaVersion = this.options.ecmaVersion;\n        var node = this.startNode();\n        var keyName = \"\";\n        var isGenerator = false;\n        var isAsync = false;\n        var kind = \"method\";\n        var isStatic = false;\n        if (this.eatContextual(\"static\")) {\n            // Parse static init block\n            if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\n                this.parseClassStaticBlock(node);\n                return node;\n            }\n            if (this.isClassElementNameStart() || this.type === types$1.star) {\n                isStatic = true;\n            } else {\n                keyName = \"static\";\n            }\n        }\n        node.static = isStatic;\n        if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n            if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\n                isAsync = true;\n            } else {\n                keyName = \"async\";\n            }\n        }\n        if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\n            isGenerator = true;\n        }\n        if (!keyName && !isAsync && !isGenerator) {\n            var lastValue = this.value;\n            if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n                if (this.isClassElementNameStart()) {\n                    kind = lastValue;\n                } else {\n                    keyName = lastValue;\n                }\n            }\n        }\n        // Parse element name\n        if (keyName) {\n            // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n            // The last token is any of those. Make it the element name.\n            node.computed = false;\n            node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\n            node.key.name = keyName;\n            this.finishNode(node.key, \"Identifier\");\n        } else {\n            this.parseClassElementName(node);\n        }\n        // Parse element value\n        if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== \"method\" || isGenerator || isAsync) {\n            var isConstructor = !node.static && checkKeyName(node, \"constructor\");\n            var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n            // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n            if (isConstructor && kind !== \"method\") {\n                this.raise(node.key.start, \"Constructor can't have get/set modifier\");\n            }\n            node.kind = isConstructor ? \"constructor\" : kind;\n            this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\n        } else {\n            this.parseClassField(node);\n        }\n        return node;\n    };\n    pp$8.isClassElementNameStart = function() {\n        return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;\n    };\n    pp$8.parseClassElementName = function(element) {\n        if (this.type === types$1.privateId) {\n            if (this.value === \"constructor\") {\n                this.raise(this.start, \"Classes can't have an element named '#constructor'\");\n            }\n            element.computed = false;\n            element.key = this.parsePrivateIdent();\n        } else {\n            this.parsePropertyName(element);\n        }\n    };\n    pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n        // Check key and flags\n        var key = method.key;\n        if (method.kind === \"constructor\") {\n            if (isGenerator) {\n                this.raise(key.start, \"Constructor can't be a generator\");\n            }\n            if (isAsync) {\n                this.raise(key.start, \"Constructor can't be an async method\");\n            }\n        } else if (method.static && checkKeyName(method, \"prototype\")) {\n            this.raise(key.start, \"Classes may not have a static property named prototype\");\n        }\n        // Parse value\n        var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n        // Check value\n        if (method.kind === \"get\" && value.params.length !== 0) {\n            this.raiseRecoverable(value.start, \"getter should have no params\");\n        }\n        if (method.kind === \"set\" && value.params.length !== 1) {\n            this.raiseRecoverable(value.start, \"setter should have exactly one param\");\n        }\n        if (method.kind === \"set\" && value.params[0].type === \"RestElement\") {\n            this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\");\n        }\n        return this.finishNode(method, \"MethodDefinition\");\n    };\n    pp$8.parseClassField = function(field) {\n        if (checkKeyName(field, \"constructor\")) {\n            this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\n        } else if (field.static && checkKeyName(field, \"prototype\")) {\n            this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\n        }\n        if (this.eat(types$1.eq)) {\n            // To raise SyntaxError if 'arguments' exists in the initializer.\n            var scope = this.currentThisScope();\n            var inClassFieldInit = scope.inClassFieldInit;\n            scope.inClassFieldInit = true;\n            field.value = this.parseMaybeAssign();\n            scope.inClassFieldInit = inClassFieldInit;\n        } else {\n            field.value = null;\n        }\n        this.semicolon();\n        return this.finishNode(field, \"PropertyDefinition\");\n    };\n    pp$8.parseClassStaticBlock = function(node) {\n        node.body = [];\n        var oldLabels = this.labels;\n        this.labels = [];\n        this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\n        while(this.type !== types$1.braceR){\n            var stmt = this.parseStatement(null);\n            node.body.push(stmt);\n        }\n        this.next();\n        this.exitScope();\n        this.labels = oldLabels;\n        return this.finishNode(node, \"StaticBlock\");\n    };\n    pp$8.parseClassId = function(node, isStatement) {\n        if (this.type === types$1.name) {\n            node.id = this.parseIdent();\n            if (isStatement) {\n                this.checkLValSimple(node.id, BIND_LEXICAL, false);\n            }\n        } else {\n            if (isStatement === true) {\n                this.unexpected();\n            }\n            node.id = null;\n        }\n    };\n    pp$8.parseClassSuper = function(node) {\n        node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;\n    };\n    pp$8.enterClassBody = function() {\n        var element = {\n            declared: Object.create(null),\n            used: []\n        };\n        this.privateNameStack.push(element);\n        return element.declared;\n    };\n    pp$8.exitClassBody = function() {\n        var ref = this.privateNameStack.pop();\n        var declared = ref.declared;\n        var used = ref.used;\n        if (!this.options.checkPrivateFields) {\n            return;\n        }\n        var len = this.privateNameStack.length;\n        var parent = len === 0 ? null : this.privateNameStack[len - 1];\n        for(var i = 0; i < used.length; ++i){\n            var id = used[i];\n            if (!hasOwn(declared, id.name)) {\n                if (parent) {\n                    parent.used.push(id);\n                } else {\n                    this.raiseRecoverable(id.start, \"Private field '#\" + id.name + \"' must be declared in an enclosing class\");\n                }\n            }\n        }\n    };\n    function isPrivateNameConflicted(privateNameMap, element) {\n        var name = element.key.name;\n        var curr = privateNameMap[name];\n        var next = \"true\";\n        if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\n            next = (element.static ? \"s\" : \"i\") + element.kind;\n        }\n        // `class { get #a(){}; static set #a(_){} }` is also conflict.\n        if (curr === \"iget\" && next === \"iset\" || curr === \"iset\" && next === \"iget\" || curr === \"sget\" && next === \"sset\" || curr === \"sset\" && next === \"sget\") {\n            privateNameMap[name] = \"true\";\n            return false;\n        } else if (!curr) {\n            privateNameMap[name] = next;\n            return false;\n        } else {\n            return true;\n        }\n    }\n    function checkKeyName(node, name) {\n        var computed = node.computed;\n        var key = node.key;\n        return !computed && (key.type === \"Identifier\" && key.name === name || key.type === \"Literal\" && key.value === name);\n    }\n    // Parses module export declaration.\n    pp$8.parseExportAllDeclaration = function(node, exports1) {\n        if (this.options.ecmaVersion >= 11) {\n            if (this.eatContextual(\"as\")) {\n                node.exported = this.parseModuleExportName();\n                this.checkExport(exports1, node.exported, this.lastTokStart);\n            } else {\n                node.exported = null;\n            }\n        }\n        this.expectContextual(\"from\");\n        if (this.type !== types$1.string) {\n            this.unexpected();\n        }\n        node.source = this.parseExprAtom();\n        this.semicolon();\n        return this.finishNode(node, \"ExportAllDeclaration\");\n    };\n    pp$8.parseExport = function(node, exports1) {\n        this.next();\n        // export * from '...'\n        if (this.eat(types$1.star)) {\n            return this.parseExportAllDeclaration(node, exports1);\n        }\n        if (this.eat(types$1._default)) {\n            this.checkExport(exports1, \"default\", this.lastTokStart);\n            node.declaration = this.parseExportDefaultDeclaration();\n            return this.finishNode(node, \"ExportDefaultDeclaration\");\n        }\n        // export var|const|let|function|class ...\n        if (this.shouldParseExportStatement()) {\n            node.declaration = this.parseExportDeclaration(node);\n            if (node.declaration.type === \"VariableDeclaration\") {\n                this.checkVariableExport(exports1, node.declaration.declarations);\n            } else {\n                this.checkExport(exports1, node.declaration.id, node.declaration.id.start);\n            }\n            node.specifiers = [];\n            node.source = null;\n        } else {\n            node.declaration = null;\n            node.specifiers = this.parseExportSpecifiers(exports1);\n            if (this.eatContextual(\"from\")) {\n                if (this.type !== types$1.string) {\n                    this.unexpected();\n                }\n                node.source = this.parseExprAtom();\n            } else {\n                for(var i = 0, list = node.specifiers; i < list.length; i += 1){\n                    // check for keywords used as local names\n                    var spec = list[i];\n                    this.checkUnreserved(spec.local);\n                    // check if export is defined\n                    this.checkLocalExport(spec.local);\n                    if (spec.local.type === \"Literal\") {\n                        this.raise(spec.local.start, \"A string literal cannot be used as an exported binding without `from`.\");\n                    }\n                }\n                node.source = null;\n            }\n            this.semicolon();\n        }\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n    };\n    pp$8.parseExportDeclaration = function(node) {\n        return this.parseStatement(null);\n    };\n    pp$8.parseExportDefaultDeclaration = function() {\n        var isAsync;\n        if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\n            var fNode = this.startNode();\n            this.next();\n            if (isAsync) {\n                this.next();\n            }\n            return this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n        } else if (this.type === types$1._class) {\n            var cNode = this.startNode();\n            return this.parseClass(cNode, \"nullableID\");\n        } else {\n            var declaration = this.parseMaybeAssign();\n            this.semicolon();\n            return declaration;\n        }\n    };\n    pp$8.checkExport = function(exports1, name, pos) {\n        if (!exports1) {\n            return;\n        }\n        if (typeof name !== \"string\") {\n            name = name.type === \"Identifier\" ? name.name : name.value;\n        }\n        if (hasOwn(exports1, name)) {\n            this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\");\n        }\n        exports1[name] = true;\n    };\n    pp$8.checkPatternExport = function(exports1, pat) {\n        var type = pat.type;\n        if (type === \"Identifier\") {\n            this.checkExport(exports1, pat, pat.start);\n        } else if (type === \"ObjectPattern\") {\n            for(var i = 0, list = pat.properties; i < list.length; i += 1){\n                var prop = list[i];\n                this.checkPatternExport(exports1, prop);\n            }\n        } else if (type === \"ArrayPattern\") {\n            for(var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1){\n                var elt = list$1[i$1];\n                if (elt) {\n                    this.checkPatternExport(exports1, elt);\n                }\n            }\n        } else if (type === \"Property\") {\n            this.checkPatternExport(exports1, pat.value);\n        } else if (type === \"AssignmentPattern\") {\n            this.checkPatternExport(exports1, pat.left);\n        } else if (type === \"RestElement\") {\n            this.checkPatternExport(exports1, pat.argument);\n        }\n    };\n    pp$8.checkVariableExport = function(exports1, decls) {\n        if (!exports1) {\n            return;\n        }\n        for(var i = 0, list = decls; i < list.length; i += 1){\n            var decl = list[i];\n            this.checkPatternExport(exports1, decl.id);\n        }\n    };\n    pp$8.shouldParseExportStatement = function() {\n        return this.type.keyword === \"var\" || this.type.keyword === \"const\" || this.type.keyword === \"class\" || this.type.keyword === \"function\" || this.isLet() || this.isAsyncFunction();\n    };\n    // Parses a comma-separated list of module exports.\n    pp$8.parseExportSpecifier = function(exports1) {\n        var node = this.startNode();\n        node.local = this.parseModuleExportName();\n        node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local;\n        this.checkExport(exports1, node.exported, node.exported.start);\n        return this.finishNode(node, \"ExportSpecifier\");\n    };\n    pp$8.parseExportSpecifiers = function(exports1) {\n        var nodes = [], first = true;\n        // export { x, y as z } [from '...']\n        this.expect(types$1.braceL);\n        while(!this.eat(types$1.braceR)){\n            if (!first) {\n                this.expect(types$1.comma);\n                if (this.afterTrailingComma(types$1.braceR)) {\n                    break;\n                }\n            } else {\n                first = false;\n            }\n            nodes.push(this.parseExportSpecifier(exports1));\n        }\n        return nodes;\n    };\n    // Parses import declaration.\n    pp$8.parseImport = function(node) {\n        this.next();\n        // import '...'\n        if (this.type === types$1.string) {\n            node.specifiers = empty$1;\n            node.source = this.parseExprAtom();\n        } else {\n            node.specifiers = this.parseImportSpecifiers();\n            this.expectContextual(\"from\");\n            node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\n        }\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n    };\n    // Parses a comma-separated list of module imports.\n    pp$8.parseImportSpecifier = function() {\n        var node = this.startNode();\n        node.imported = this.parseModuleExportName();\n        if (this.eatContextual(\"as\")) {\n            node.local = this.parseIdent();\n        } else {\n            this.checkUnreserved(node.imported);\n            node.local = node.imported;\n        }\n        this.checkLValSimple(node.local, BIND_LEXICAL);\n        return this.finishNode(node, \"ImportSpecifier\");\n    };\n    pp$8.parseImportDefaultSpecifier = function() {\n        // import defaultObj, { x, y as z } from '...'\n        var node = this.startNode();\n        node.local = this.parseIdent();\n        this.checkLValSimple(node.local, BIND_LEXICAL);\n        return this.finishNode(node, \"ImportDefaultSpecifier\");\n    };\n    pp$8.parseImportNamespaceSpecifier = function() {\n        var node = this.startNode();\n        this.next();\n        this.expectContextual(\"as\");\n        node.local = this.parseIdent();\n        this.checkLValSimple(node.local, BIND_LEXICAL);\n        return this.finishNode(node, \"ImportNamespaceSpecifier\");\n    };\n    pp$8.parseImportSpecifiers = function() {\n        var nodes = [], first = true;\n        if (this.type === types$1.name) {\n            nodes.push(this.parseImportDefaultSpecifier());\n            if (!this.eat(types$1.comma)) {\n                return nodes;\n            }\n        }\n        if (this.type === types$1.star) {\n            nodes.push(this.parseImportNamespaceSpecifier());\n            return nodes;\n        }\n        this.expect(types$1.braceL);\n        while(!this.eat(types$1.braceR)){\n            if (!first) {\n                this.expect(types$1.comma);\n                if (this.afterTrailingComma(types$1.braceR)) {\n                    break;\n                }\n            } else {\n                first = false;\n            }\n            nodes.push(this.parseImportSpecifier());\n        }\n        return nodes;\n    };\n    pp$8.parseModuleExportName = function() {\n        if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\n            var stringLiteral = this.parseLiteral(this.value);\n            if (loneSurrogate.test(stringLiteral.value)) {\n                this.raise(stringLiteral.start, \"An export name cannot include a lone surrogate.\");\n            }\n            return stringLiteral;\n        }\n        return this.parseIdent(true);\n    };\n    // Set `ExpressionStatement#directive` property for directive prologues.\n    pp$8.adaptDirectivePrologue = function(statements) {\n        for(var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i){\n            statements[i].directive = statements[i].expression.raw.slice(1, -1);\n        }\n    };\n    pp$8.isDirectiveCandidate = function(statement) {\n        return this.options.ecmaVersion >= 5 && statement.type === \"ExpressionStatement\" && statement.expression.type === \"Literal\" && typeof statement.expression.value === \"string\" && // Reject parenthesized strings.\n        (this.input[statement.start] === '\"' || this.input[statement.start] === \"'\");\n    };\n    var pp$7 = Parser.prototype;\n    // Convert existing expression atom to assignable pattern\n    // if possible.\n    pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {\n        if (this.options.ecmaVersion >= 6 && node) {\n            switch(node.type){\n                case \"Identifier\":\n                    if (this.inAsync && node.name === \"await\") {\n                        this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\");\n                    }\n                    break;\n                case \"ObjectPattern\":\n                case \"ArrayPattern\":\n                case \"AssignmentPattern\":\n                case \"RestElement\":\n                    break;\n                case \"ObjectExpression\":\n                    node.type = \"ObjectPattern\";\n                    if (refDestructuringErrors) {\n                        this.checkPatternErrors(refDestructuringErrors, true);\n                    }\n                    for(var i = 0, list = node.properties; i < list.length; i += 1){\n                        var prop = list[i];\n                        this.toAssignable(prop, isBinding);\n                        // Early error:\n                        //   AssignmentRestProperty[Yield, Await] :\n                        //     `...` DestructuringAssignmentTarget[Yield, Await]\n                        //\n                        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n                        if (prop.type === \"RestElement\" && (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")) {\n                            this.raise(prop.argument.start, \"Unexpected token\");\n                        }\n                    }\n                    break;\n                case \"Property\":\n                    // AssignmentProperty has type === \"Property\"\n                    if (node.kind !== \"init\") {\n                        this.raise(node.key.start, \"Object pattern can't contain getter or setter\");\n                    }\n                    this.toAssignable(node.value, isBinding);\n                    break;\n                case \"ArrayExpression\":\n                    node.type = \"ArrayPattern\";\n                    if (refDestructuringErrors) {\n                        this.checkPatternErrors(refDestructuringErrors, true);\n                    }\n                    this.toAssignableList(node.elements, isBinding);\n                    break;\n                case \"SpreadElement\":\n                    node.type = \"RestElement\";\n                    this.toAssignable(node.argument, isBinding);\n                    if (node.argument.type === \"AssignmentPattern\") {\n                        this.raise(node.argument.start, \"Rest elements cannot have a default value\");\n                    }\n                    break;\n                case \"AssignmentExpression\":\n                    if (node.operator !== \"=\") {\n                        this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n                    }\n                    node.type = \"AssignmentPattern\";\n                    delete node.operator;\n                    this.toAssignable(node.left, isBinding);\n                    break;\n                case \"ParenthesizedExpression\":\n                    this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n                    break;\n                case \"ChainExpression\":\n                    this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n                    break;\n                case \"MemberExpression\":\n                    if (!isBinding) {\n                        break;\n                    }\n                default:\n                    this.raise(node.start, \"Assigning to rvalue\");\n            }\n        } else if (refDestructuringErrors) {\n            this.checkPatternErrors(refDestructuringErrors, true);\n        }\n        return node;\n    };\n    // Convert list of expression atoms to binding list.\n    pp$7.toAssignableList = function(exprList, isBinding) {\n        var end = exprList.length;\n        for(var i = 0; i < end; i++){\n            var elt = exprList[i];\n            if (elt) {\n                this.toAssignable(elt, isBinding);\n            }\n        }\n        if (end) {\n            var last = exprList[end - 1];\n            if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") {\n                this.unexpected(last.argument.start);\n            }\n        }\n        return exprList;\n    };\n    // Parses spread element.\n    pp$7.parseSpread = function(refDestructuringErrors) {\n        var node = this.startNode();\n        this.next();\n        node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n        return this.finishNode(node, \"SpreadElement\");\n    };\n    pp$7.parseRestBinding = function() {\n        var node = this.startNode();\n        this.next();\n        // RestElement inside of a function parameter must be an identifier\n        if (this.options.ecmaVersion === 6 && this.type !== types$1.name) {\n            this.unexpected();\n        }\n        node.argument = this.parseBindingAtom();\n        return this.finishNode(node, \"RestElement\");\n    };\n    // Parses lvalue (assignable) atom.\n    pp$7.parseBindingAtom = function() {\n        if (this.options.ecmaVersion >= 6) {\n            switch(this.type){\n                case types$1.bracketL:\n                    var node = this.startNode();\n                    this.next();\n                    node.elements = this.parseBindingList(types$1.bracketR, true, true);\n                    return this.finishNode(node, \"ArrayPattern\");\n                case types$1.braceL:\n                    return this.parseObj(true);\n            }\n        }\n        return this.parseIdent();\n    };\n    pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {\n        var elts = [], first = true;\n        while(!this.eat(close)){\n            if (first) {\n                first = false;\n            } else {\n                this.expect(types$1.comma);\n            }\n            if (allowEmpty && this.type === types$1.comma) {\n                elts.push(null);\n            } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n                break;\n            } else if (this.type === types$1.ellipsis) {\n                var rest = this.parseRestBinding();\n                this.parseBindingListItem(rest);\n                elts.push(rest);\n                if (this.type === types$1.comma) {\n                    this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\");\n                }\n                this.expect(close);\n                break;\n            } else {\n                elts.push(this.parseAssignableListItem(allowModifiers));\n            }\n        }\n        return elts;\n    };\n    pp$7.parseAssignableListItem = function(allowModifiers) {\n        var elem = this.parseMaybeDefault(this.start, this.startLoc);\n        this.parseBindingListItem(elem);\n        return elem;\n    };\n    pp$7.parseBindingListItem = function(param) {\n        return param;\n    };\n    // Parses assignment pattern around given atom if possible.\n    pp$7.parseMaybeDefault = function(startPos, startLoc, left) {\n        left = left || this.parseBindingAtom();\n        if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) {\n            return left;\n        }\n        var node = this.startNodeAt(startPos, startLoc);\n        node.left = left;\n        node.right = this.parseMaybeAssign();\n        return this.finishNode(node, \"AssignmentPattern\");\n    };\n    // The following three functions all verify that a node is an lvalue —\n    // something that can be bound, or assigned to. In order to do so, they perform\n    // a variety of checks:\n    //\n    // - Check that none of the bound/assigned-to identifiers are reserved words.\n    // - Record name declarations for bindings in the appropriate scope.\n    // - Check duplicate argument names, if checkClashes is set.\n    //\n    // If a complex binding pattern is encountered (e.g., object and array\n    // destructuring), the entire pattern is recursively checked.\n    //\n    // There are three versions of checkLVal*() appropriate for different\n    // circumstances:\n    //\n    // - checkLValSimple() shall be used if the syntactic construct supports\n    //   nothing other than identifiers and member expressions. Parenthesized\n    //   expressions are also correctly handled. This is generally appropriate for\n    //   constructs for which the spec says\n    //\n    //   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n    //   > simple.\n    //\n    //   It is also appropriate for checking if an identifier is valid and not\n    //   defined elsewhere, like import declarations or function/class identifiers.\n    //\n    //   Examples where this is used include:\n    //     a += …;\n    //     import a from '…';\n    //   where a is the node to be checked.\n    //\n    // - checkLValPattern() shall be used if the syntactic construct supports\n    //   anything checkLValSimple() supports, as well as object and array\n    //   destructuring patterns. This is generally appropriate for constructs for\n    //   which the spec says\n    //\n    //   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n    //   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n    //   > simple.\n    //\n    //   Examples where this is used include:\n    //     (a = …);\n    //     const a = …;\n    //     try { … } catch (a) { … }\n    //   where a is the node to be checked.\n    //\n    // - checkLValInnerPattern() shall be used if the syntactic construct supports\n    //   anything checkLValPattern() supports, as well as default assignment\n    //   patterns, rest elements, and other constructs that may appear within an\n    //   object or array destructuring pattern.\n    //\n    //   As a special case, function parameters also use checkLValInnerPattern(),\n    //   as they also support defaults and rest constructs.\n    //\n    // These functions deliberately support both assignment and binding constructs,\n    // as the logic for both is exceedingly similar. If the node is the target of\n    // an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n    // should be set to the appropriate BIND_* constant, like BIND_VAR or\n    // BIND_LEXICAL.\n    //\n    // If the function is called with a non-BIND_NONE bindingType, then\n    // additionally a checkClashes object may be specified to allow checking for\n    // duplicate argument names. checkClashes is ignored if the provided construct\n    // is an assignment (i.e., bindingType is BIND_NONE).\n    pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {\n        if (bindingType === void 0) bindingType = BIND_NONE;\n        var isBind = bindingType !== BIND_NONE;\n        switch(expr.type){\n            case \"Identifier\":\n                if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {\n                    this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n                }\n                if (isBind) {\n                    if (bindingType === BIND_LEXICAL && expr.name === \"let\") {\n                        this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\");\n                    }\n                    if (checkClashes) {\n                        if (hasOwn(checkClashes, expr.name)) {\n                            this.raiseRecoverable(expr.start, \"Argument name clash\");\n                        }\n                        checkClashes[expr.name] = true;\n                    }\n                    if (bindingType !== BIND_OUTSIDE) {\n                        this.declareName(expr.name, bindingType, expr.start);\n                    }\n                }\n                break;\n            case \"ChainExpression\":\n                this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n                break;\n            case \"MemberExpression\":\n                if (isBind) {\n                    this.raiseRecoverable(expr.start, \"Binding member expression\");\n                }\n                break;\n            case \"ParenthesizedExpression\":\n                if (isBind) {\n                    this.raiseRecoverable(expr.start, \"Binding parenthesized expression\");\n                }\n                return this.checkLValSimple(expr.expression, bindingType, checkClashes);\n            default:\n                this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n        }\n    };\n    pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {\n        if (bindingType === void 0) bindingType = BIND_NONE;\n        switch(expr.type){\n            case \"ObjectPattern\":\n                for(var i = 0, list = expr.properties; i < list.length; i += 1){\n                    var prop = list[i];\n                    this.checkLValInnerPattern(prop, bindingType, checkClashes);\n                }\n                break;\n            case \"ArrayPattern\":\n                for(var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1){\n                    var elem = list$1[i$1];\n                    if (elem) {\n                        this.checkLValInnerPattern(elem, bindingType, checkClashes);\n                    }\n                }\n                break;\n            default:\n                this.checkLValSimple(expr, bindingType, checkClashes);\n        }\n    };\n    pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n        if (bindingType === void 0) bindingType = BIND_NONE;\n        switch(expr.type){\n            case \"Property\":\n                // AssignmentProperty has type === \"Property\"\n                this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n                break;\n            case \"AssignmentPattern\":\n                this.checkLValPattern(expr.left, bindingType, checkClashes);\n                break;\n            case \"RestElement\":\n                this.checkLValPattern(expr.argument, bindingType, checkClashes);\n                break;\n            default:\n                this.checkLValPattern(expr, bindingType, checkClashes);\n        }\n    };\n    // The algorithm used to determine whether a regexp can appear at a\n    // given point in the program is loosely based on sweet.js' approach.\n    // See https://github.com/mozilla/sweet.js/wiki/design\n    var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n        this.token = token;\n        this.isExpr = !!isExpr;\n        this.preserveSpace = !!preserveSpace;\n        this.override = override;\n        this.generator = !!generator;\n    };\n    var types = {\n        b_stat: new TokContext(\"{\", false),\n        b_expr: new TokContext(\"{\", true),\n        b_tmpl: new TokContext(\"${\", false),\n        p_stat: new TokContext(\"(\", false),\n        p_expr: new TokContext(\"(\", true),\n        q_tmpl: new TokContext(\"`\", true, true, function(p) {\n            return p.tryReadTemplateToken();\n        }),\n        f_stat: new TokContext(\"function\", false),\n        f_expr: new TokContext(\"function\", true),\n        f_expr_gen: new TokContext(\"function\", true, false, null, true),\n        f_gen: new TokContext(\"function\", false, false, null, true)\n    };\n    var pp$6 = Parser.prototype;\n    pp$6.initialContext = function() {\n        return [\n            types.b_stat\n        ];\n    };\n    pp$6.curContext = function() {\n        return this.context[this.context.length - 1];\n    };\n    pp$6.braceIsBlock = function(prevType) {\n        var parent = this.curContext();\n        if (parent === types.f_expr || parent === types.f_stat) {\n            return true;\n        }\n        if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr)) {\n            return !parent.isExpr;\n        }\n        // The check for `tt.name && exprAllowed` detects whether we are\n        // after a `yield` or `of` construct. See the `updateContext` for\n        // `tt.name`.\n        if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed) {\n            return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n        }\n        if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {\n            return true;\n        }\n        if (prevType === types$1.braceL) {\n            return parent === types.b_stat;\n        }\n        if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {\n            return false;\n        }\n        return !this.exprAllowed;\n    };\n    pp$6.inGeneratorContext = function() {\n        for(var i = this.context.length - 1; i >= 1; i--){\n            var context = this.context[i];\n            if (context.token === \"function\") {\n                return context.generator;\n            }\n        }\n        return false;\n    };\n    pp$6.updateContext = function(prevType) {\n        var update, type = this.type;\n        if (type.keyword && prevType === types$1.dot) {\n            this.exprAllowed = false;\n        } else if (update = type.updateContext) {\n            update.call(this, prevType);\n        } else {\n            this.exprAllowed = type.beforeExpr;\n        }\n    };\n    // Used to handle edge cases when token context could not be inferred correctly during tokenization phase\n    pp$6.overrideContext = function(tokenCtx) {\n        if (this.curContext() !== tokenCtx) {\n            this.context[this.context.length - 1] = tokenCtx;\n        }\n    };\n    // Token-specific context update code\n    types$1.parenR.updateContext = types$1.braceR.updateContext = function() {\n        if (this.context.length === 1) {\n            this.exprAllowed = true;\n            return;\n        }\n        var out = this.context.pop();\n        if (out === types.b_stat && this.curContext().token === \"function\") {\n            out = this.context.pop();\n        }\n        this.exprAllowed = !out.isExpr;\n    };\n    types$1.braceL.updateContext = function(prevType) {\n        this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n        this.exprAllowed = true;\n    };\n    types$1.dollarBraceL.updateContext = function() {\n        this.context.push(types.b_tmpl);\n        this.exprAllowed = true;\n    };\n    types$1.parenL.updateContext = function(prevType) {\n        var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n        this.context.push(statementParens ? types.p_stat : types.p_expr);\n        this.exprAllowed = true;\n    };\n    types$1.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n    };\n    types$1._function.updateContext = types$1._class.updateContext = function(prevType) {\n        if (prevType.beforeExpr && prevType !== types$1._else && !(prevType === types$1.semi && this.curContext() !== types.p_stat) && !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {\n            this.context.push(types.f_expr);\n        } else {\n            this.context.push(types.f_stat);\n        }\n        this.exprAllowed = false;\n    };\n    types$1.colon.updateContext = function() {\n        if (this.curContext().token === \"function\") {\n            this.context.pop();\n        }\n        this.exprAllowed = true;\n    };\n    types$1.backQuote.updateContext = function() {\n        if (this.curContext() === types.q_tmpl) {\n            this.context.pop();\n        } else {\n            this.context.push(types.q_tmpl);\n        }\n        this.exprAllowed = false;\n    };\n    types$1.star.updateContext = function(prevType) {\n        if (prevType === types$1._function) {\n            var index = this.context.length - 1;\n            if (this.context[index] === types.f_expr) {\n                this.context[index] = types.f_expr_gen;\n            } else {\n                this.context[index] = types.f_gen;\n            }\n        }\n        this.exprAllowed = true;\n    };\n    types$1.name.updateContext = function(prevType) {\n        var allowed = false;\n        if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\n            if (this.value === \"of\" && !this.exprAllowed || this.value === \"yield\" && this.inGeneratorContext()) {\n                allowed = true;\n            }\n        }\n        this.exprAllowed = allowed;\n    };\n    // A recursive descent parser operates by defining functions for all\n    // syntactic elements, and recursively calling those, each function\n    // advancing the input stream and returning an AST node. Precedence\n    // of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n    // instead of `(!x)[1]` is handled by the fact that the parser\n    // function that parses unary prefix operators is called first, and\n    // in turn calls the function that parses `[]` subscripts — that\n    // way, it'll receive the node for `x[1]` already parsed, and wraps\n    // *that* in the unary operator node.\n    //\n    // Acorn uses an [operator precedence parser][opp] to handle binary\n    // operator precedence, because it is much more compact than using\n    // the technique outlined above, which uses different, nesting\n    // functions to specify precedence, for all of the ten binary\n    // precedence levels that JavaScript defines.\n    //\n    // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n    var pp$5 = Parser.prototype;\n    // Check if property name clashes with already added.\n    // Object/class getters and setters are not allowed to clash —\n    // either with each other or with an init property — and in\n    // strict mode, init properties are also not allowed to be repeated.\n    pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n        if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\") {\n            return;\n        }\n        if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {\n            return;\n        }\n        var key = prop.key;\n        var name;\n        switch(key.type){\n            case \"Identifier\":\n                name = key.name;\n                break;\n            case \"Literal\":\n                name = String(key.value);\n                break;\n            default:\n                return;\n        }\n        var kind = prop.kind;\n        if (this.options.ecmaVersion >= 6) {\n            if (name === \"__proto__\" && kind === \"init\") {\n                if (propHash.proto) {\n                    if (refDestructuringErrors) {\n                        if (refDestructuringErrors.doubleProto < 0) {\n                            refDestructuringErrors.doubleProto = key.start;\n                        }\n                    } else {\n                        this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n                    }\n                }\n                propHash.proto = true;\n            }\n            return;\n        }\n        name = \"$\" + name;\n        var other = propHash[name];\n        if (other) {\n            var redefinition;\n            if (kind === \"init\") {\n                redefinition = this.strict && other.init || other.get || other.set;\n            } else {\n                redefinition = other.init || other[kind];\n            }\n            if (redefinition) {\n                this.raiseRecoverable(key.start, \"Redefinition of property\");\n            }\n        } else {\n            other = propHash[name] = {\n                init: false,\n                get: false,\n                set: false\n            };\n        }\n        other[kind] = true;\n    };\n    // ### Expression parsing\n    // These nest, from the most general expression type at the top to\n    // 'atomic', nondivisible expression types at the bottom. Most of\n    // the functions will simply let the function(s) below them parse,\n    // and, *if* the syntactic construct they handle is present, wrap\n    // the AST node that the inner parser gave them in another node.\n    // Parse a full expression. The optional arguments are used to\n    // forbid the `in` operator (in for loops initalization expressions)\n    // and provide reference for storing '=' operator inside shorthand\n    // property assignment in contexts where both object expression\n    // and object pattern might appear (so it's possible to raise\n    // delayed syntax error at correct position).\n    pp$5.parseExpression = function(forInit, refDestructuringErrors) {\n        var startPos = this.start, startLoc = this.startLoc;\n        var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\n        if (this.type === types$1.comma) {\n            var node = this.startNodeAt(startPos, startLoc);\n            node.expressions = [\n                expr\n            ];\n            while(this.eat(types$1.comma)){\n                node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));\n            }\n            return this.finishNode(node, \"SequenceExpression\");\n        }\n        return expr;\n    };\n    // Parse an assignment expression. This includes applications of\n    // operators like `+=`.\n    pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\n        if (this.isContextual(\"yield\")) {\n            if (this.inGenerator) {\n                return this.parseYield(forInit);\n            } else {\n                this.exprAllowed = false;\n            }\n        }\n        var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;\n        if (refDestructuringErrors) {\n            oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n            oldTrailingComma = refDestructuringErrors.trailingComma;\n            oldDoubleProto = refDestructuringErrors.doubleProto;\n            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n        } else {\n            refDestructuringErrors = new DestructuringErrors;\n            ownDestructuringErrors = true;\n        }\n        var startPos = this.start, startLoc = this.startLoc;\n        if (this.type === types$1.parenL || this.type === types$1.name) {\n            this.potentialArrowAt = this.start;\n            this.potentialArrowInForAwait = forInit === \"await\";\n        }\n        var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\n        if (afterLeftParse) {\n            left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        if (this.type.isAssign) {\n            var node = this.startNodeAt(startPos, startLoc);\n            node.operator = this.value;\n            if (this.type === types$1.eq) {\n                left = this.toAssignable(left, false, refDestructuringErrors);\n            }\n            if (!ownDestructuringErrors) {\n                refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n            }\n            if (refDestructuringErrors.shorthandAssign >= left.start) {\n                refDestructuringErrors.shorthandAssign = -1;\n            } // reset because shorthand default was used correctly\n            if (this.type === types$1.eq) {\n                this.checkLValPattern(left);\n            } else {\n                this.checkLValSimple(left);\n            }\n            node.left = left;\n            this.next();\n            node.right = this.parseMaybeAssign(forInit);\n            if (oldDoubleProto > -1) {\n                refDestructuringErrors.doubleProto = oldDoubleProto;\n            }\n            return this.finishNode(node, \"AssignmentExpression\");\n        } else {\n            if (ownDestructuringErrors) {\n                this.checkExpressionErrors(refDestructuringErrors, true);\n            }\n        }\n        if (oldParenAssign > -1) {\n            refDestructuringErrors.parenthesizedAssign = oldParenAssign;\n        }\n        if (oldTrailingComma > -1) {\n            refDestructuringErrors.trailingComma = oldTrailingComma;\n        }\n        return left;\n    };\n    // Parse a ternary conditional (`?:`) operator.\n    pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {\n        var startPos = this.start, startLoc = this.startLoc;\n        var expr = this.parseExprOps(forInit, refDestructuringErrors);\n        if (this.checkExpressionErrors(refDestructuringErrors)) {\n            return expr;\n        }\n        if (this.eat(types$1.question)) {\n            var node = this.startNodeAt(startPos, startLoc);\n            node.test = expr;\n            node.consequent = this.parseMaybeAssign();\n            this.expect(types$1.colon);\n            node.alternate = this.parseMaybeAssign(forInit);\n            return this.finishNode(node, \"ConditionalExpression\");\n        }\n        return expr;\n    };\n    // Start the precedence parser.\n    pp$5.parseExprOps = function(forInit, refDestructuringErrors) {\n        var startPos = this.start, startLoc = this.startLoc;\n        var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);\n        if (this.checkExpressionErrors(refDestructuringErrors)) {\n            return expr;\n        }\n        return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);\n    };\n    // Parse binary operators with the operator precedence parsing\n    // algorithm. `left` is the left-hand side of the operator.\n    // `minPrec` provides context that allows the function to stop and\n    // defer further parser to one of its callers when it encounters an\n    // operator that has a lower precedence than the set it is parsing.\n    pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\n        var prec = this.type.binop;\n        if (prec != null && (!forInit || this.type !== types$1._in)) {\n            if (prec > minPrec) {\n                var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\n                var coalesce = this.type === types$1.coalesce;\n                if (coalesce) {\n                    // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n                    // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n                    prec = types$1.logicalAND.binop;\n                }\n                var op = this.value;\n                this.next();\n                var startPos = this.start, startLoc = this.startLoc;\n                var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);\n                var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n                if (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) {\n                    this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n                }\n                return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);\n            }\n        }\n        return left;\n    };\n    pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n        if (right.type === \"PrivateIdentifier\") {\n            this.raise(right.start, \"Private identifier can only be left side of binary expression\");\n        }\n        var node = this.startNodeAt(startPos, startLoc);\n        node.left = left;\n        node.operator = op;\n        node.right = right;\n        return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\");\n    };\n    // Parse unary operators, both prefix and postfix.\n    pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {\n        var startPos = this.start, startLoc = this.startLoc, expr;\n        if (this.isContextual(\"await\") && this.canAwait) {\n            expr = this.parseAwait(forInit);\n            sawUnary = true;\n        } else if (this.type.prefix) {\n            var node = this.startNode(), update = this.type === types$1.incDec;\n            node.operator = this.value;\n            node.prefix = true;\n            this.next();\n            node.argument = this.parseMaybeUnary(null, true, update, forInit);\n            this.checkExpressionErrors(refDestructuringErrors, true);\n            if (update) {\n                this.checkLValSimple(node.argument);\n            } else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") {\n                this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\");\n            } else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument)) {\n                this.raiseRecoverable(node.start, \"Private fields can not be deleted\");\n            } else {\n                sawUnary = true;\n            }\n            expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n        } else if (!sawUnary && this.type === types$1.privateId) {\n            if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) {\n                this.unexpected();\n            }\n            expr = this.parsePrivateIdent();\n            // only could be private fields in 'in', such as #x in obj\n            if (this.type !== types$1._in) {\n                this.unexpected();\n            }\n        } else {\n            expr = this.parseExprSubscripts(refDestructuringErrors, forInit);\n            if (this.checkExpressionErrors(refDestructuringErrors)) {\n                return expr;\n            }\n            while(this.type.postfix && !this.canInsertSemicolon()){\n                var node$1 = this.startNodeAt(startPos, startLoc);\n                node$1.operator = this.value;\n                node$1.prefix = false;\n                node$1.argument = expr;\n                this.checkLValSimple(expr);\n                this.next();\n                expr = this.finishNode(node$1, \"UpdateExpression\");\n            }\n        }\n        if (!incDec && this.eat(types$1.starstar)) {\n            if (sawUnary) {\n                this.unexpected(this.lastTokStart);\n            } else {\n                return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), \"**\", false);\n            }\n        } else {\n            return expr;\n        }\n    };\n    function isPrivateFieldAccess(node) {\n        return node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" || node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression);\n    }\n    // Parse call, dot, and `[]`-subscript expressions.\n    pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {\n        var startPos = this.start, startLoc = this.startLoc;\n        var expr = this.parseExprAtom(refDestructuringErrors, forInit);\n        if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\") {\n            return expr;\n        }\n        var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);\n        if (refDestructuringErrors && result.type === \"MemberExpression\") {\n            if (refDestructuringErrors.parenthesizedAssign >= result.start) {\n                refDestructuringErrors.parenthesizedAssign = -1;\n            }\n            if (refDestructuringErrors.parenthesizedBind >= result.start) {\n                refDestructuringErrors.parenthesizedBind = -1;\n            }\n            if (refDestructuringErrors.trailingComma >= result.start) {\n                refDestructuringErrors.trailingComma = -1;\n            }\n        }\n        return result;\n    };\n    pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {\n        var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;\n        var optionalChained = false;\n        while(true){\n            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);\n            if (element.optional) {\n                optionalChained = true;\n            }\n            if (element === base || element.type === \"ArrowFunctionExpression\") {\n                if (optionalChained) {\n                    var chainNode = this.startNodeAt(startPos, startLoc);\n                    chainNode.expression = element;\n                    element = this.finishNode(chainNode, \"ChainExpression\");\n                }\n                return element;\n            }\n            base = element;\n        }\n    };\n    pp$5.shouldParseAsyncArrow = function() {\n        return !this.canInsertSemicolon() && this.eat(types$1.arrow);\n    };\n    pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);\n    };\n    pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {\n        var optionalSupported = this.options.ecmaVersion >= 11;\n        var optional = optionalSupported && this.eat(types$1.questionDot);\n        if (noCalls && optional) {\n            this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\");\n        }\n        var computed = this.eat(types$1.bracketL);\n        if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {\n            var node = this.startNodeAt(startPos, startLoc);\n            node.object = base;\n            if (computed) {\n                node.property = this.parseExpression();\n                this.expect(types$1.bracketR);\n            } else if (this.type === types$1.privateId && base.type !== \"Super\") {\n                node.property = this.parsePrivateIdent();\n            } else {\n                node.property = this.parseIdent(this.options.allowReserved !== \"never\");\n            }\n            node.computed = !!computed;\n            if (optionalSupported) {\n                node.optional = optional;\n            }\n            base = this.finishNode(node, \"MemberExpression\");\n        } else if (!noCalls && this.eat(types$1.parenL)) {\n            var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n            this.yieldPos = 0;\n            this.awaitPos = 0;\n            this.awaitIdentPos = 0;\n            var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n            if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {\n                this.checkPatternErrors(refDestructuringErrors, false);\n                this.checkYieldAwaitInDefaultParams();\n                if (this.awaitIdentPos > 0) {\n                    this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\");\n                }\n                this.yieldPos = oldYieldPos;\n                this.awaitPos = oldAwaitPos;\n                this.awaitIdentPos = oldAwaitIdentPos;\n                return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);\n            }\n            this.checkExpressionErrors(refDestructuringErrors, true);\n            this.yieldPos = oldYieldPos || this.yieldPos;\n            this.awaitPos = oldAwaitPos || this.awaitPos;\n            this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n            var node$1 = this.startNodeAt(startPos, startLoc);\n            node$1.callee = base;\n            node$1.arguments = exprList;\n            if (optionalSupported) {\n                node$1.optional = optional;\n            }\n            base = this.finishNode(node$1, \"CallExpression\");\n        } else if (this.type === types$1.backQuote) {\n            if (optional || optionalChained) {\n                this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n            }\n            var node$2 = this.startNodeAt(startPos, startLoc);\n            node$2.tag = base;\n            node$2.quasi = this.parseTemplate({\n                isTagged: true\n            });\n            base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n        }\n        return base;\n    };\n    // Parse an atomic expression — either a single token that is an\n    // expression, an expression started by a keyword like `function` or\n    // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n    // or `{}`.\n    pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {\n        // If a division operator appears in an expression position, the\n        // tokenizer got confused, and we force it to read a regexp instead.\n        if (this.type === types$1.slash) {\n            this.readRegexp();\n        }\n        var node, canBeArrow = this.potentialArrowAt === this.start;\n        switch(this.type){\n            case types$1._super:\n                if (!this.allowSuper) {\n                    this.raise(this.start, \"'super' keyword outside a method\");\n                }\n                node = this.startNode();\n                this.next();\n                if (this.type === types$1.parenL && !this.allowDirectSuper) {\n                    this.raise(node.start, \"super() call outside constructor of a subclass\");\n                }\n                // The `super` keyword can appear at below:\n                // SuperProperty:\n                //     super [ Expression ]\n                //     super . IdentifierName\n                // SuperCall:\n                //     super ( Arguments )\n                if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL) {\n                    this.unexpected();\n                }\n                return this.finishNode(node, \"Super\");\n            case types$1._this:\n                node = this.startNode();\n                this.next();\n                return this.finishNode(node, \"ThisExpression\");\n            case types$1.name:\n                var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n                var id = this.parseIdent(false);\n                if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\n                    this.overrideContext(types.f_expr);\n                    return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);\n                }\n                if (canBeArrow && !this.canInsertSemicolon()) {\n                    if (this.eat(types$1.arrow)) {\n                        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [\n                            id\n                        ], false, forInit);\n                    }\n                    if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\n                        id = this.parseIdent(false);\n                        if (this.canInsertSemicolon() || !this.eat(types$1.arrow)) {\n                            this.unexpected();\n                        }\n                        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [\n                            id\n                        ], true, forInit);\n                    }\n                }\n                return id;\n            case types$1.regexp:\n                var value = this.value;\n                node = this.parseLiteral(value.value);\n                node.regex = {\n                    pattern: value.pattern,\n                    flags: value.flags\n                };\n                return node;\n            case types$1.num:\n            case types$1.string:\n                return this.parseLiteral(this.value);\n            case types$1._null:\n            case types$1._true:\n            case types$1._false:\n                node = this.startNode();\n                node.value = this.type === types$1._null ? null : this.type === types$1._true;\n                node.raw = this.type.keyword;\n                this.next();\n                return this.finishNode(node, \"Literal\");\n            case types$1.parenL:\n                var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);\n                if (refDestructuringErrors) {\n                    if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {\n                        refDestructuringErrors.parenthesizedAssign = start;\n                    }\n                    if (refDestructuringErrors.parenthesizedBind < 0) {\n                        refDestructuringErrors.parenthesizedBind = start;\n                    }\n                }\n                return expr;\n            case types$1.bracketL:\n                node = this.startNode();\n                this.next();\n                node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);\n                return this.finishNode(node, \"ArrayExpression\");\n            case types$1.braceL:\n                this.overrideContext(types.b_expr);\n                return this.parseObj(false, refDestructuringErrors);\n            case types$1._function:\n                node = this.startNode();\n                this.next();\n                return this.parseFunction(node, 0);\n            case types$1._class:\n                return this.parseClass(this.startNode(), false);\n            case types$1._new:\n                return this.parseNew();\n            case types$1.backQuote:\n                return this.parseTemplate();\n            case types$1._import:\n                if (this.options.ecmaVersion >= 11) {\n                    return this.parseExprImport(forNew);\n                } else {\n                    return this.unexpected();\n                }\n            default:\n                return this.parseExprAtomDefault();\n        }\n    };\n    pp$5.parseExprAtomDefault = function() {\n        this.unexpected();\n    };\n    pp$5.parseExprImport = function(forNew) {\n        var node = this.startNode();\n        // Consume `import` as an identifier for `import.meta`.\n        // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n        if (this.containsEsc) {\n            this.raiseRecoverable(this.start, \"Escape sequence in keyword import\");\n        }\n        var meta = this.parseIdent(true);\n        if (this.type === types$1.parenL && !forNew) {\n            return this.parseDynamicImport(node);\n        } else if (this.type === types$1.dot) {\n            node.meta = meta;\n            return this.parseImportMeta(node);\n        } else {\n            this.unexpected();\n        }\n    };\n    pp$5.parseDynamicImport = function(node) {\n        this.next(); // skip `(`\n        // Parse node.source.\n        node.source = this.parseMaybeAssign();\n        // Verify ending.\n        if (!this.eat(types$1.parenR)) {\n            var errorPos = this.start;\n            if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\n                this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n            } else {\n                this.unexpected(errorPos);\n            }\n        }\n        return this.finishNode(node, \"ImportExpression\");\n    };\n    pp$5.parseImportMeta = function(node) {\n        this.next(); // skip `.`\n        var containsEsc = this.containsEsc;\n        node.property = this.parseIdent(true);\n        if (node.property.name !== \"meta\") {\n            this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\");\n        }\n        if (containsEsc) {\n            this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\");\n        }\n        if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere) {\n            this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\");\n        }\n        return this.finishNode(node, \"MetaProperty\");\n    };\n    pp$5.parseLiteral = function(value) {\n        var node = this.startNode();\n        node.value = value;\n        node.raw = this.input.slice(this.start, this.end);\n        if (node.raw.charCodeAt(node.raw.length - 1) === 110) {\n            node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\");\n        }\n        this.next();\n        return this.finishNode(node, \"Literal\");\n    };\n    pp$5.parseParenExpression = function() {\n        this.expect(types$1.parenL);\n        var val = this.parseExpression();\n        this.expect(types$1.parenR);\n        return val;\n    };\n    pp$5.shouldParseArrow = function(exprList) {\n        return !this.canInsertSemicolon();\n    };\n    pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {\n        var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n        if (this.options.ecmaVersion >= 6) {\n            this.next();\n            var innerStartPos = this.start, innerStartLoc = this.startLoc;\n            var exprList = [], first = true, lastIsComma = false;\n            var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n            this.yieldPos = 0;\n            this.awaitPos = 0;\n            // Do not save awaitIdentPos to allow checking awaits nested in parameters\n            while(this.type !== types$1.parenR){\n                first ? first = false : this.expect(types$1.comma);\n                if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {\n                    lastIsComma = true;\n                    break;\n                } else if (this.type === types$1.ellipsis) {\n                    spreadStart = this.start;\n                    exprList.push(this.parseParenItem(this.parseRestBinding()));\n                    if (this.type === types$1.comma) {\n                        this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\");\n                    }\n                    break;\n                } else {\n                    exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n                }\n            }\n            var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;\n            this.expect(types$1.parenR);\n            if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {\n                this.checkPatternErrors(refDestructuringErrors, false);\n                this.checkYieldAwaitInDefaultParams();\n                this.yieldPos = oldYieldPos;\n                this.awaitPos = oldAwaitPos;\n                return this.parseParenArrowList(startPos, startLoc, exprList, forInit);\n            }\n            if (!exprList.length || lastIsComma) {\n                this.unexpected(this.lastTokStart);\n            }\n            if (spreadStart) {\n                this.unexpected(spreadStart);\n            }\n            this.checkExpressionErrors(refDestructuringErrors, true);\n            this.yieldPos = oldYieldPos || this.yieldPos;\n            this.awaitPos = oldAwaitPos || this.awaitPos;\n            if (exprList.length > 1) {\n                val = this.startNodeAt(innerStartPos, innerStartLoc);\n                val.expressions = exprList;\n                this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n            } else {\n                val = exprList[0];\n            }\n        } else {\n            val = this.parseParenExpression();\n        }\n        if (this.options.preserveParens) {\n            var par = this.startNodeAt(startPos, startLoc);\n            par.expression = val;\n            return this.finishNode(par, \"ParenthesizedExpression\");\n        } else {\n            return val;\n        }\n    };\n    pp$5.parseParenItem = function(item) {\n        return item;\n    };\n    pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);\n    };\n    // New's precedence is slightly tricky. It must allow its argument to\n    // be a `[]` or dot subscript expression, but not a call — at least,\n    // not without wrapping it in parentheses. Thus, it uses the noCalls\n    // argument to parseSubscripts to prevent it from consuming the\n    // argument list.\n    var empty = [];\n    pp$5.parseNew = function() {\n        if (this.containsEsc) {\n            this.raiseRecoverable(this.start, \"Escape sequence in keyword new\");\n        }\n        var node = this.startNode();\n        this.next();\n        if (this.options.ecmaVersion >= 6 && this.type === types$1.dot) {\n            var meta = this.startNodeAt(node.start, node.startLoc);\n            meta.name = \"new\";\n            node.meta = this.finishNode(meta, \"Identifier\");\n            this.next();\n            var containsEsc = this.containsEsc;\n            node.property = this.parseIdent(true);\n            if (node.property.name !== \"target\") {\n                this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\");\n            }\n            if (containsEsc) {\n                this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\");\n            }\n            if (!this.allowNewDotTarget) {\n                this.raiseRecoverable(node.start, \"'new.target' can only be used in functions and class static block\");\n            }\n            return this.finishNode(node, \"MetaProperty\");\n        }\n        var startPos = this.start, startLoc = this.startLoc;\n        node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);\n        if (this.eat(types$1.parenL)) {\n            node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false);\n        } else {\n            node.arguments = empty;\n        }\n        return this.finishNode(node, \"NewExpression\");\n    };\n    // Parse template expression.\n    pp$5.parseTemplateElement = function(ref) {\n        var isTagged = ref.isTagged;\n        var elem = this.startNode();\n        if (this.type === types$1.invalidTemplate) {\n            if (!isTagged) {\n                this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n            }\n            elem.value = {\n                raw: this.value,\n                cooked: null\n            };\n        } else {\n            elem.value = {\n                raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n                cooked: this.value\n            };\n        }\n        this.next();\n        elem.tail = this.type === types$1.backQuote;\n        return this.finishNode(elem, \"TemplateElement\");\n    };\n    pp$5.parseTemplate = function(ref) {\n        if (ref === void 0) ref = {};\n        var isTagged = ref.isTagged;\n        if (isTagged === void 0) isTagged = false;\n        var node = this.startNode();\n        this.next();\n        node.expressions = [];\n        var curElt = this.parseTemplateElement({\n            isTagged: isTagged\n        });\n        node.quasis = [\n            curElt\n        ];\n        while(!curElt.tail){\n            if (this.type === types$1.eof) {\n                this.raise(this.pos, \"Unterminated template literal\");\n            }\n            this.expect(types$1.dollarBraceL);\n            node.expressions.push(this.parseExpression());\n            this.expect(types$1.braceR);\n            node.quasis.push(curElt = this.parseTemplateElement({\n                isTagged: isTagged\n            }));\n        }\n        this.next();\n        return this.finishNode(node, \"TemplateLiteral\");\n    };\n    pp$5.isAsyncProp = function(prop) {\n        return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n    };\n    // Parse an object literal or binding pattern.\n    pp$5.parseObj = function(isPattern, refDestructuringErrors) {\n        var node = this.startNode(), first = true, propHash = {};\n        node.properties = [];\n        this.next();\n        while(!this.eat(types$1.braceR)){\n            if (!first) {\n                this.expect(types$1.comma);\n                if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) {\n                    break;\n                }\n            } else {\n                first = false;\n            }\n            var prop = this.parseProperty(isPattern, refDestructuringErrors);\n            if (!isPattern) {\n                this.checkPropClash(prop, propHash, refDestructuringErrors);\n            }\n            node.properties.push(prop);\n        }\n        return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n    };\n    pp$5.parseProperty = function(isPattern, refDestructuringErrors) {\n        var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n        if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\n            if (isPattern) {\n                prop.argument = this.parseIdent(false);\n                if (this.type === types$1.comma) {\n                    this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\");\n                }\n                return this.finishNode(prop, \"RestElement\");\n            }\n            // Parse argument.\n            prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n            // To disallow trailing comma via `this.toAssignable()`.\n            if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n                refDestructuringErrors.trailingComma = this.start;\n            }\n            // Finish\n            return this.finishNode(prop, \"SpreadElement\");\n        }\n        if (this.options.ecmaVersion >= 6) {\n            prop.method = false;\n            prop.shorthand = false;\n            if (isPattern || refDestructuringErrors) {\n                startPos = this.start;\n                startLoc = this.startLoc;\n            }\n            if (!isPattern) {\n                isGenerator = this.eat(types$1.star);\n            }\n        }\n        var containsEsc = this.containsEsc;\n        this.parsePropertyName(prop);\n        if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n            isAsync = true;\n            isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\n            this.parsePropertyName(prop);\n        } else {\n            isAsync = false;\n        }\n        this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n        return this.finishNode(prop, \"Property\");\n    };\n    pp$5.parseGetterSetter = function(prop) {\n        prop.kind = prop.key.name;\n        this.parsePropertyName(prop);\n        prop.value = this.parseMethod(false);\n        var paramCount = prop.kind === \"get\" ? 0 : 1;\n        if (prop.value.params.length !== paramCount) {\n            var start = prop.value.start;\n            if (prop.kind === \"get\") {\n                this.raiseRecoverable(start, \"getter should have no params\");\n            } else {\n                this.raiseRecoverable(start, \"setter should have exactly one param\");\n            }\n        } else {\n            if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n                this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\");\n            }\n        }\n    };\n    pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n        if ((isGenerator || isAsync) && this.type === types$1.colon) {\n            this.unexpected();\n        }\n        if (this.eat(types$1.colon)) {\n            prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n            prop.kind = \"init\";\n        } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\n            if (isPattern) {\n                this.unexpected();\n            }\n            prop.kind = \"init\";\n            prop.method = true;\n            prop.value = this.parseMethod(isGenerator, isAsync);\n        } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq) {\n            if (isGenerator || isAsync) {\n                this.unexpected();\n            }\n            this.parseGetterSetter(prop);\n        } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n            if (isGenerator || isAsync) {\n                this.unexpected();\n            }\n            this.checkUnreserved(prop.key);\n            if (prop.key.name === \"await\" && !this.awaitIdentPos) {\n                this.awaitIdentPos = startPos;\n            }\n            prop.kind = \"init\";\n            if (isPattern) {\n                prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n            } else if (this.type === types$1.eq && refDestructuringErrors) {\n                if (refDestructuringErrors.shorthandAssign < 0) {\n                    refDestructuringErrors.shorthandAssign = this.start;\n                }\n                prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n            } else {\n                prop.value = this.copyNode(prop.key);\n            }\n            prop.shorthand = true;\n        } else {\n            this.unexpected();\n        }\n    };\n    pp$5.parsePropertyName = function(prop) {\n        if (this.options.ecmaVersion >= 6) {\n            if (this.eat(types$1.bracketL)) {\n                prop.computed = true;\n                prop.key = this.parseMaybeAssign();\n                this.expect(types$1.bracketR);\n                return prop.key;\n            } else {\n                prop.computed = false;\n            }\n        }\n        return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\");\n    };\n    // Initialize empty function node.\n    pp$5.initFunction = function(node) {\n        node.id = null;\n        if (this.options.ecmaVersion >= 6) {\n            node.generator = node.expression = false;\n        }\n        if (this.options.ecmaVersion >= 8) {\n            node.async = false;\n        }\n    };\n    // Parse object or class method.\n    pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n        var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n        this.initFunction(node);\n        if (this.options.ecmaVersion >= 6) {\n            node.generator = isGenerator;\n        }\n        if (this.options.ecmaVersion >= 8) {\n            node.async = !!isAsync;\n        }\n        this.yieldPos = 0;\n        this.awaitPos = 0;\n        this.awaitIdentPos = 0;\n        this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n        this.expect(types$1.parenL);\n        node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n        this.checkYieldAwaitInDefaultParams();\n        this.parseFunctionBody(node, false, true, false);\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos;\n        return this.finishNode(node, \"FunctionExpression\");\n    };\n    // Parse arrow function expression with given parameters.\n    pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {\n        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n        this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n        this.initFunction(node);\n        if (this.options.ecmaVersion >= 8) {\n            node.async = !!isAsync;\n        }\n        this.yieldPos = 0;\n        this.awaitPos = 0;\n        this.awaitIdentPos = 0;\n        node.params = this.toAssignableList(params, true);\n        this.parseFunctionBody(node, true, false, forInit);\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos;\n        return this.finishNode(node, \"ArrowFunctionExpression\");\n    };\n    // Parse function body and check parameters.\n    pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {\n        var isExpression = isArrowFunction && this.type !== types$1.braceL;\n        var oldStrict = this.strict, useStrict = false;\n        if (isExpression) {\n            node.body = this.parseMaybeAssign(forInit);\n            node.expression = true;\n            this.checkParams(node, false);\n        } else {\n            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n            if (!oldStrict || nonSimple) {\n                useStrict = this.strictDirective(this.end);\n                // If this is a strict mode function, verify that argument names\n                // are not repeated, and it does not try to bind the words `eval`\n                // or `arguments`.\n                if (useStrict && nonSimple) {\n                    this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n                }\n            }\n            // Start a new scope with regard to labels and the `inFunction`\n            // flag (restore them to their old value afterwards).\n            var oldLabels = this.labels;\n            this.labels = [];\n            if (useStrict) {\n                this.strict = true;\n            }\n            // Add the params to varDeclaredNames to ensure that an error is thrown\n            // if a let/const declaration in the function clashes with one of the params.\n            this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n            // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n            if (this.strict && node.id) {\n                this.checkLValSimple(node.id, BIND_OUTSIDE);\n            }\n            node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n            node.expression = false;\n            this.adaptDirectivePrologue(node.body.body);\n            this.labels = oldLabels;\n        }\n        this.exitScope();\n    };\n    pp$5.isSimpleParamList = function(params) {\n        for(var i = 0, list = params; i < list.length; i += 1){\n            var param = list[i];\n            if (param.type !== \"Identifier\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    // Checks function params for various disallowed patterns such as using \"eval\"\n    // or \"arguments\" and duplicate parameters.\n    pp$5.checkParams = function(node, allowDuplicates) {\n        var nameHash = Object.create(null);\n        for(var i = 0, list = node.params; i < list.length; i += 1){\n            var param = list[i];\n            this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n        }\n    };\n    // Parses a comma-separated list of expressions, and returns them as\n    // an array. `close` is the token type that ends the list, and\n    // `allowEmpty` can be turned on to allow subsequent commas with\n    // nothing in between them to be parsed as `null` (which is needed\n    // for array literals).\n    pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n        var elts = [], first = true;\n        while(!this.eat(close)){\n            if (!first) {\n                this.expect(types$1.comma);\n                if (allowTrailingComma && this.afterTrailingComma(close)) {\n                    break;\n                }\n            } else {\n                first = false;\n            }\n            var elt = void 0;\n            if (allowEmpty && this.type === types$1.comma) {\n                elt = null;\n            } else if (this.type === types$1.ellipsis) {\n                elt = this.parseSpread(refDestructuringErrors);\n                if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0) {\n                    refDestructuringErrors.trailingComma = this.start;\n                }\n            } else {\n                elt = this.parseMaybeAssign(false, refDestructuringErrors);\n            }\n            elts.push(elt);\n        }\n        return elts;\n    };\n    pp$5.checkUnreserved = function(ref) {\n        var start = ref.start;\n        var end = ref.end;\n        var name = ref.name;\n        if (this.inGenerator && name === \"yield\") {\n            this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\");\n        }\n        if (this.inAsync && name === \"await\") {\n            this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\");\n        }\n        if (this.currentThisScope().inClassFieldInit && name === \"arguments\") {\n            this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\");\n        }\n        if (this.inClassStaticBlock && (name === \"arguments\" || name === \"await\")) {\n            this.raise(start, \"Cannot use \" + name + \" in class static initialization block\");\n        }\n        if (this.keywords.test(name)) {\n            this.raise(start, \"Unexpected keyword '\" + name + \"'\");\n        }\n        if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf(\"\\\\\") !== -1) {\n            return;\n        }\n        var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n        if (re.test(name)) {\n            if (!this.inAsync && name === \"await\") {\n                this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\");\n            }\n            this.raiseRecoverable(start, \"The keyword '\" + name + \"' is reserved\");\n        }\n    };\n    // Parse the next token as an identifier. If `liberal` is true (used\n    // when parsing properties), it will also convert keywords into\n    // identifiers.\n    pp$5.parseIdent = function(liberal) {\n        var node = this.parseIdentNode();\n        this.next(!!liberal);\n        this.finishNode(node, \"Identifier\");\n        if (!liberal) {\n            this.checkUnreserved(node);\n            if (node.name === \"await\" && !this.awaitIdentPos) {\n                this.awaitIdentPos = node.start;\n            }\n        }\n        return node;\n    };\n    pp$5.parseIdentNode = function() {\n        var node = this.startNode();\n        if (this.type === types$1.name) {\n            node.name = this.value;\n        } else if (this.type.keyword) {\n            node.name = this.type.keyword;\n            // To fix https://github.com/acornjs/acorn/issues/575\n            // `class` and `function` keywords push new context into this.context.\n            // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n            // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n            if ((node.name === \"class\" || node.name === \"function\") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n                this.context.pop();\n            }\n            this.type = types$1.name;\n        } else {\n            this.unexpected();\n        }\n        return node;\n    };\n    pp$5.parsePrivateIdent = function() {\n        var node = this.startNode();\n        if (this.type === types$1.privateId) {\n            node.name = this.value;\n        } else {\n            this.unexpected();\n        }\n        this.next();\n        this.finishNode(node, \"PrivateIdentifier\");\n        // For validating existence\n        if (this.options.checkPrivateFields) {\n            if (this.privateNameStack.length === 0) {\n                this.raise(node.start, \"Private field '#\" + node.name + \"' must be declared in an enclosing class\");\n            } else {\n                this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n            }\n        }\n        return node;\n    };\n    // Parses yield expression inside generator.\n    pp$5.parseYield = function(forInit) {\n        if (!this.yieldPos) {\n            this.yieldPos = this.start;\n        }\n        var node = this.startNode();\n        this.next();\n        if (this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr) {\n            node.delegate = false;\n            node.argument = null;\n        } else {\n            node.delegate = this.eat(types$1.star);\n            node.argument = this.parseMaybeAssign(forInit);\n        }\n        return this.finishNode(node, \"YieldExpression\");\n    };\n    pp$5.parseAwait = function(forInit) {\n        if (!this.awaitPos) {\n            this.awaitPos = this.start;\n        }\n        var node = this.startNode();\n        this.next();\n        node.argument = this.parseMaybeUnary(null, true, false, forInit);\n        return this.finishNode(node, \"AwaitExpression\");\n    };\n    var pp$4 = Parser.prototype;\n    // This function is used to raise exceptions on parse errors. It\n    // takes an offset integer (into the current `input`) to indicate\n    // the location of the error, attaches the position to the end\n    // of the error message, and then raises a `SyntaxError` with that\n    // message.\n    pp$4.raise = function(pos, message) {\n        var loc = getLineInfo(this.input, pos);\n        message += \" (\" + loc.line + \":\" + loc.column + \")\";\n        var err = new SyntaxError(message);\n        err.pos = pos;\n        err.loc = loc;\n        err.raisedAt = this.pos;\n        throw err;\n    };\n    pp$4.raiseRecoverable = pp$4.raise;\n    pp$4.curPosition = function() {\n        if (this.options.locations) {\n            return new Position(this.curLine, this.pos - this.lineStart);\n        }\n    };\n    var pp$3 = Parser.prototype;\n    var Scope = function Scope(flags) {\n        this.flags = flags;\n        // A list of var-declared names in the current lexical scope\n        this.var = [];\n        // A list of lexically-declared names in the current lexical scope\n        this.lexical = [];\n        // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n        this.functions = [];\n        // A switch to disallow the identifier reference 'arguments'\n        this.inClassFieldInit = false;\n    };\n    // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n    pp$3.enterScope = function(flags) {\n        this.scopeStack.push(new Scope(flags));\n    };\n    pp$3.exitScope = function() {\n        this.scopeStack.pop();\n    };\n    // The spec says:\n    // > At the top level of a function, or script, function declarations are\n    // > treated like var declarations rather than like lexical declarations.\n    pp$3.treatFunctionsAsVarInScope = function(scope) {\n        return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;\n    };\n    pp$3.declareName = function(name, bindingType, pos) {\n        var redeclared = false;\n        if (bindingType === BIND_LEXICAL) {\n            var scope = this.currentScope();\n            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n            scope.lexical.push(name);\n            if (this.inModule && scope.flags & SCOPE_TOP) {\n                delete this.undefinedExports[name];\n            }\n        } else if (bindingType === BIND_SIMPLE_CATCH) {\n            var scope$1 = this.currentScope();\n            scope$1.lexical.push(name);\n        } else if (bindingType === BIND_FUNCTION) {\n            var scope$2 = this.currentScope();\n            if (this.treatFunctionsAsVar) {\n                redeclared = scope$2.lexical.indexOf(name) > -1;\n            } else {\n                redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;\n            }\n            scope$2.functions.push(name);\n        } else {\n            for(var i = this.scopeStack.length - 1; i >= 0; --i){\n                var scope$3 = this.scopeStack[i];\n                if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n                    redeclared = true;\n                    break;\n                }\n                scope$3.var.push(name);\n                if (this.inModule && scope$3.flags & SCOPE_TOP) {\n                    delete this.undefinedExports[name];\n                }\n                if (scope$3.flags & SCOPE_VAR) {\n                    break;\n                }\n            }\n        }\n        if (redeclared) {\n            this.raiseRecoverable(pos, \"Identifier '\" + name + \"' has already been declared\");\n        }\n    };\n    pp$3.checkLocalExport = function(id) {\n        // scope.functions must be empty as Module code is always strict.\n        if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {\n            this.undefinedExports[id.name] = id;\n        }\n    };\n    pp$3.currentScope = function() {\n        return this.scopeStack[this.scopeStack.length - 1];\n    };\n    pp$3.currentVarScope = function() {\n        for(var i = this.scopeStack.length - 1;; i--){\n            var scope = this.scopeStack[i];\n            if (scope.flags & SCOPE_VAR) {\n                return scope;\n            }\n        }\n    };\n    // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n    pp$3.currentThisScope = function() {\n        for(var i = this.scopeStack.length - 1;; i--){\n            var scope = this.scopeStack[i];\n            if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {\n                return scope;\n            }\n        }\n    };\n    var Node = function Node(parser, pos, loc) {\n        this.type = \"\";\n        this.start = pos;\n        this.end = 0;\n        if (parser.options.locations) {\n            this.loc = new SourceLocation(parser, loc);\n        }\n        if (parser.options.directSourceFile) {\n            this.sourceFile = parser.options.directSourceFile;\n        }\n        if (parser.options.ranges) {\n            this.range = [\n                pos,\n                0\n            ];\n        }\n    };\n    // Start an AST node, attaching a start offset.\n    var pp$2 = Parser.prototype;\n    pp$2.startNode = function() {\n        return new Node(this, this.start, this.startLoc);\n    };\n    pp$2.startNodeAt = function(pos, loc) {\n        return new Node(this, pos, loc);\n    };\n    // Finish an AST node, adding `type` and `end` properties.\n    function finishNodeAt(node, type, pos, loc) {\n        node.type = type;\n        node.end = pos;\n        if (this.options.locations) {\n            node.loc.end = loc;\n        }\n        if (this.options.ranges) {\n            node.range[1] = pos;\n        }\n        return node;\n    }\n    pp$2.finishNode = function(node, type) {\n        return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n    };\n    // Finish node at given position\n    pp$2.finishNodeAt = function(node, type, pos, loc) {\n        return finishNodeAt.call(this, node, type, pos, loc);\n    };\n    pp$2.copyNode = function(node) {\n        var newNode = new Node(this, node.start, this.startLoc);\n        for(var prop in node){\n            newNode[prop] = node[prop];\n        }\n        return newNode;\n    };\n    // This file contains Unicode properties extracted from the ECMAScript specification.\n    // The lists are extracted like so:\n    // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n    // #table-binary-unicode-properties\n    var ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\n    var ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\n    var ecma11BinaryProperties = ecma10BinaryProperties;\n    var ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\n    var ecma13BinaryProperties = ecma12BinaryProperties;\n    var ecma14BinaryProperties = ecma13BinaryProperties;\n    var unicodeBinaryProperties = {\n        9: ecma9BinaryProperties,\n        10: ecma10BinaryProperties,\n        11: ecma11BinaryProperties,\n        12: ecma12BinaryProperties,\n        13: ecma13BinaryProperties,\n        14: ecma14BinaryProperties\n    };\n    // #table-binary-unicode-properties-of-strings\n    var ecma14BinaryPropertiesOfStrings = \"Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji\";\n    var unicodeBinaryPropertiesOfStrings = {\n        9: \"\",\n        10: \"\",\n        11: \"\",\n        12: \"\",\n        13: \"\",\n        14: ecma14BinaryPropertiesOfStrings\n    };\n    // #table-unicode-general-category-values\n    var unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n    // #table-unicode-script-values\n    var ecma9ScriptValues = \"Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\n    var ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\n    var ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\n    var ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\n    var ecma13ScriptValues = ecma12ScriptValues + \" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith\";\n    var ecma14ScriptValues = ecma13ScriptValues + \" Hrkt Katakana_Or_Hiragana Kawi Nag_Mundari Nagm Unknown Zzzz\";\n    var unicodeScriptValues = {\n        9: ecma9ScriptValues,\n        10: ecma10ScriptValues,\n        11: ecma11ScriptValues,\n        12: ecma12ScriptValues,\n        13: ecma13ScriptValues,\n        14: ecma14ScriptValues\n    };\n    var data = {};\n    function buildUnicodeData(ecmaVersion) {\n        var d = data[ecmaVersion] = {\n            binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n            binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]),\n            nonBinary: {\n                General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n                Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n            }\n        };\n        d.nonBinary.Script_Extensions = d.nonBinary.Script;\n        d.nonBinary.gc = d.nonBinary.General_Category;\n        d.nonBinary.sc = d.nonBinary.Script;\n        d.nonBinary.scx = d.nonBinary.Script_Extensions;\n    }\n    for(var i = 0, list = [\n        9,\n        10,\n        11,\n        12,\n        13,\n        14\n    ]; i < list.length; i += 1){\n        var ecmaVersion = list[i];\n        buildUnicodeData(ecmaVersion);\n    }\n    var pp$1 = Parser.prototype;\n    var RegExpValidationState = function RegExpValidationState(parser) {\n        this.parser = parser;\n        this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\") + (parser.options.ecmaVersion >= 15 ? \"v\" : \"\");\n        this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];\n        this.source = \"\";\n        this.flags = \"\";\n        this.start = 0;\n        this.switchU = false;\n        this.switchV = false;\n        this.switchN = false;\n        this.pos = 0;\n        this.lastIntValue = 0;\n        this.lastStringValue = \"\";\n        this.lastAssertionIsQuantifiable = false;\n        this.numCapturingParens = 0;\n        this.maxBackReference = 0;\n        this.groupNames = [];\n        this.backReferenceNames = [];\n    };\n    RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {\n        var unicodeSets = flags.indexOf(\"v\") !== -1;\n        var unicode = flags.indexOf(\"u\") !== -1;\n        this.start = start | 0;\n        this.source = pattern + \"\";\n        this.flags = flags;\n        if (unicodeSets && this.parser.options.ecmaVersion >= 15) {\n            this.switchU = true;\n            this.switchV = true;\n            this.switchN = true;\n        } else {\n            this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n            this.switchV = false;\n            this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n        }\n    };\n    RegExpValidationState.prototype.raise = function raise(message) {\n        this.parser.raiseRecoverable(this.start, \"Invalid regular expression: /\" + this.source + \"/: \" + message);\n    };\n    // If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n    // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\n    RegExpValidationState.prototype.at = function at(i, forceU) {\n        if (forceU === void 0) forceU = false;\n        var s = this.source;\n        var l = s.length;\n        if (i >= l) {\n            return -1;\n        }\n        var c = s.charCodeAt(i);\n        if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n            return c;\n        }\n        var next = s.charCodeAt(i + 1);\n        return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c;\n    };\n    RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {\n        if (forceU === void 0) forceU = false;\n        var s = this.source;\n        var l = s.length;\n        if (i >= l) {\n            return l;\n        }\n        var c = s.charCodeAt(i), next;\n        if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n            return i + 1;\n        }\n        return i + 2;\n    };\n    RegExpValidationState.prototype.current = function current(forceU) {\n        if (forceU === void 0) forceU = false;\n        return this.at(this.pos, forceU);\n    };\n    RegExpValidationState.prototype.lookahead = function lookahead(forceU) {\n        if (forceU === void 0) forceU = false;\n        return this.at(this.nextIndex(this.pos, forceU), forceU);\n    };\n    RegExpValidationState.prototype.advance = function advance(forceU) {\n        if (forceU === void 0) forceU = false;\n        this.pos = this.nextIndex(this.pos, forceU);\n    };\n    RegExpValidationState.prototype.eat = function eat(ch, forceU) {\n        if (forceU === void 0) forceU = false;\n        if (this.current(forceU) === ch) {\n            this.advance(forceU);\n            return true;\n        }\n        return false;\n    };\n    RegExpValidationState.prototype.eatChars = function eatChars(chs, forceU) {\n        if (forceU === void 0) forceU = false;\n        var pos = this.pos;\n        for(var i = 0, list = chs; i < list.length; i += 1){\n            var ch = list[i];\n            var current = this.at(pos, forceU);\n            if (current === -1 || current !== ch) {\n                return false;\n            }\n            pos = this.nextIndex(pos, forceU);\n        }\n        this.pos = pos;\n        return true;\n    };\n    /**\n   * Validate the flags part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */ pp$1.validateRegExpFlags = function(state) {\n        var validFlags = state.validFlags;\n        var flags = state.flags;\n        var u = false;\n        var v = false;\n        for(var i = 0; i < flags.length; i++){\n            var flag = flags.charAt(i);\n            if (validFlags.indexOf(flag) === -1) {\n                this.raise(state.start, \"Invalid regular expression flag\");\n            }\n            if (flags.indexOf(flag, i + 1) > -1) {\n                this.raise(state.start, \"Duplicate regular expression flag\");\n            }\n            if (flag === \"u\") {\n                u = true;\n            }\n            if (flag === \"v\") {\n                v = true;\n            }\n        }\n        if (this.options.ecmaVersion >= 15 && u && v) {\n            this.raise(state.start, \"Invalid regular expression flag\");\n        }\n    };\n    /**\n   * Validate the pattern part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */ pp$1.validateRegExpPattern = function(state) {\n        this.regexp_pattern(state);\n        // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n        // parsing contains a |GroupName|, reparse with the goal symbol\n        // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n        // exception if _P_ did not conform to the grammar, if any elements of _P_\n        // were not matched by the parse, or if any Early Error conditions exist.\n        if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n            state.switchN = true;\n            this.regexp_pattern(state);\n        }\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n    pp$1.regexp_pattern = function(state) {\n        state.pos = 0;\n        state.lastIntValue = 0;\n        state.lastStringValue = \"\";\n        state.lastAssertionIsQuantifiable = false;\n        state.numCapturingParens = 0;\n        state.maxBackReference = 0;\n        state.groupNames.length = 0;\n        state.backReferenceNames.length = 0;\n        this.regexp_disjunction(state);\n        if (state.pos !== state.source.length) {\n            // Make the same messages as V8.\n            if (state.eat(0x29 /* ) */ )) {\n                state.raise(\"Unmatched ')'\");\n            }\n            if (state.eat(0x5D /* ] */ ) || state.eat(0x7D /* } */ )) {\n                state.raise(\"Lone quantifier brackets\");\n            }\n        }\n        if (state.maxBackReference > state.numCapturingParens) {\n            state.raise(\"Invalid escape\");\n        }\n        for(var i = 0, list = state.backReferenceNames; i < list.length; i += 1){\n            var name = list[i];\n            if (state.groupNames.indexOf(name) === -1) {\n                state.raise(\"Invalid named capture referenced\");\n            }\n        }\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n    pp$1.regexp_disjunction = function(state) {\n        this.regexp_alternative(state);\n        while(state.eat(0x7C /* | */ )){\n            this.regexp_alternative(state);\n        }\n        // Make the same message as V8.\n        if (this.regexp_eatQuantifier(state, true)) {\n            state.raise(\"Nothing to repeat\");\n        }\n        if (state.eat(0x7B /* { */ )) {\n            state.raise(\"Lone quantifier brackets\");\n        }\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n    pp$1.regexp_alternative = function(state) {\n        while(state.pos < state.source.length && this.regexp_eatTerm(state)){}\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\n    pp$1.regexp_eatTerm = function(state) {\n        if (this.regexp_eatAssertion(state)) {\n            // Handle `QuantifiableAssertion Quantifier` alternative.\n            // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n            // is a QuantifiableAssertion.\n            if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n                // Make the same message as V8.\n                if (state.switchU) {\n                    state.raise(\"Invalid quantifier\");\n                }\n            }\n            return true;\n        }\n        if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n            this.regexp_eatQuantifier(state);\n            return true;\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\n    pp$1.regexp_eatAssertion = function(state) {\n        var start = state.pos;\n        state.lastAssertionIsQuantifiable = false;\n        // ^, $\n        if (state.eat(0x5E /* ^ */ ) || state.eat(0x24 /* $ */ )) {\n            return true;\n        }\n        // \\b \\B\n        if (state.eat(0x5C /* \\ */ )) {\n            if (state.eat(0x42 /* B */ ) || state.eat(0x62 /* b */ )) {\n                return true;\n            }\n            state.pos = start;\n        }\n        // Lookahead / Lookbehind\n        if (state.eat(0x28 /* ( */ ) && state.eat(0x3F /* ? */ )) {\n            var lookbehind = false;\n            if (this.options.ecmaVersion >= 9) {\n                lookbehind = state.eat(0x3C /* < */ );\n            }\n            if (state.eat(0x3D /* = */ ) || state.eat(0x21 /* ! */ )) {\n                this.regexp_disjunction(state);\n                if (!state.eat(0x29 /* ) */ )) {\n                    state.raise(\"Unterminated group\");\n                }\n                state.lastAssertionIsQuantifiable = !lookbehind;\n                return true;\n            }\n        }\n        state.pos = start;\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n    pp$1.regexp_eatQuantifier = function(state, noError) {\n        if (noError === void 0) noError = false;\n        if (this.regexp_eatQuantifierPrefix(state, noError)) {\n            state.eat(0x3F /* ? */ );\n            return true;\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n    pp$1.regexp_eatQuantifierPrefix = function(state, noError) {\n        return state.eat(0x2A /* * */ ) || state.eat(0x2B /* + */ ) || state.eat(0x3F /* ? */ ) || this.regexp_eatBracedQuantifier(state, noError);\n    };\n    pp$1.regexp_eatBracedQuantifier = function(state, noError) {\n        var start = state.pos;\n        if (state.eat(0x7B /* { */ )) {\n            var min = 0, max = -1;\n            if (this.regexp_eatDecimalDigits(state)) {\n                min = state.lastIntValue;\n                if (state.eat(0x2C /* , */ ) && this.regexp_eatDecimalDigits(state)) {\n                    max = state.lastIntValue;\n                }\n                if (state.eat(0x7D /* } */ )) {\n                    // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n                    if (max !== -1 && max < min && !noError) {\n                        state.raise(\"numbers out of order in {} quantifier\");\n                    }\n                    return true;\n                }\n            }\n            if (state.switchU && !noError) {\n                state.raise(\"Incomplete quantifier\");\n            }\n            state.pos = start;\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n    pp$1.regexp_eatAtom = function(state) {\n        return this.regexp_eatPatternCharacters(state) || state.eat(0x2E /* . */ ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);\n    };\n    pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\n        var start = state.pos;\n        if (state.eat(0x5C /* \\ */ )) {\n            if (this.regexp_eatAtomEscape(state)) {\n                return true;\n            }\n            state.pos = start;\n        }\n        return false;\n    };\n    pp$1.regexp_eatUncapturingGroup = function(state) {\n        var start = state.pos;\n        if (state.eat(0x28 /* ( */ )) {\n            if (state.eat(0x3F /* ? */ ) && state.eat(0x3A /* : */ )) {\n                this.regexp_disjunction(state);\n                if (state.eat(0x29 /* ) */ )) {\n                    return true;\n                }\n                state.raise(\"Unterminated group\");\n            }\n            state.pos = start;\n        }\n        return false;\n    };\n    pp$1.regexp_eatCapturingGroup = function(state) {\n        if (state.eat(0x28 /* ( */ )) {\n            if (this.options.ecmaVersion >= 9) {\n                this.regexp_groupSpecifier(state);\n            } else if (state.current() === 0x3F /* ? */ ) {\n                state.raise(\"Invalid group\");\n            }\n            this.regexp_disjunction(state);\n            if (state.eat(0x29 /* ) */ )) {\n                state.numCapturingParens += 1;\n                return true;\n            }\n            state.raise(\"Unterminated group\");\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\n    pp$1.regexp_eatExtendedAtom = function(state) {\n        return state.eat(0x2E /* . */ ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\n    pp$1.regexp_eatInvalidBracedQuantifier = function(state) {\n        if (this.regexp_eatBracedQuantifier(state, true)) {\n            state.raise(\"Nothing to repeat\");\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n    pp$1.regexp_eatSyntaxCharacter = function(state) {\n        var ch = state.current();\n        if (isSyntaxCharacter(ch)) {\n            state.lastIntValue = ch;\n            state.advance();\n            return true;\n        }\n        return false;\n    };\n    function isSyntaxCharacter(ch) {\n        return ch === 0x24 /* $ */  || ch >= 0x28 /* ( */  && ch <= 0x2B /* + */  || ch === 0x2E /* . */  || ch === 0x3F /* ? */  || ch >= 0x5B /* [ */  && ch <= 0x5E /* ^ */  || ch >= 0x7B /* { */  && ch <= 0x7D /* } */ ;\n    }\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n    // But eat eager.\n    pp$1.regexp_eatPatternCharacters = function(state) {\n        var start = state.pos;\n        var ch = 0;\n        while((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)){\n            state.advance();\n        }\n        return state.pos !== start;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\n    pp$1.regexp_eatExtendedPatternCharacter = function(state) {\n        var ch = state.current();\n        if (ch !== -1 && ch !== 0x24 /* $ */  && !(ch >= 0x28 /* ( */  && ch <= 0x2B /* + */ ) && ch !== 0x2E /* . */  && ch !== 0x3F /* ? */  && ch !== 0x5B /* [ */  && ch !== 0x5E /* ^ */  && ch !== 0x7C /* | */ ) {\n            state.advance();\n            return true;\n        }\n        return false;\n    };\n    // GroupSpecifier ::\n    //   [empty]\n    //   `?` GroupName\n    pp$1.regexp_groupSpecifier = function(state) {\n        if (state.eat(0x3F /* ? */ )) {\n            if (this.regexp_eatGroupName(state)) {\n                if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n                    state.raise(\"Duplicate capture group name\");\n                }\n                state.groupNames.push(state.lastStringValue);\n                return;\n            }\n            state.raise(\"Invalid group\");\n        }\n    };\n    // GroupName ::\n    //   `<` RegExpIdentifierName `>`\n    // Note: this updates `state.lastStringValue` property with the eaten name.\n    pp$1.regexp_eatGroupName = function(state) {\n        state.lastStringValue = \"\";\n        if (state.eat(0x3C /* < */ )) {\n            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */ )) {\n                return true;\n            }\n            state.raise(\"Invalid capture group name\");\n        }\n        return false;\n    };\n    // RegExpIdentifierName ::\n    //   RegExpIdentifierStart\n    //   RegExpIdentifierName RegExpIdentifierPart\n    // Note: this updates `state.lastStringValue` property with the eaten name.\n    pp$1.regexp_eatRegExpIdentifierName = function(state) {\n        state.lastStringValue = \"\";\n        if (this.regexp_eatRegExpIdentifierStart(state)) {\n            state.lastStringValue += codePointToString(state.lastIntValue);\n            while(this.regexp_eatRegExpIdentifierPart(state)){\n                state.lastStringValue += codePointToString(state.lastIntValue);\n            }\n            return true;\n        }\n        return false;\n    };\n    // RegExpIdentifierStart ::\n    //   UnicodeIDStart\n    //   `$`\n    //   `_`\n    //   `\\` RegExpUnicodeEscapeSequence[+U]\n    pp$1.regexp_eatRegExpIdentifierStart = function(state) {\n        var start = state.pos;\n        var forceU = this.options.ecmaVersion >= 11;\n        var ch = state.current(forceU);\n        state.advance(forceU);\n        if (ch === 0x5C /* \\ */  && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n            ch = state.lastIntValue;\n        }\n        if (isRegExpIdentifierStart(ch)) {\n            state.lastIntValue = ch;\n            return true;\n        }\n        state.pos = start;\n        return false;\n    };\n    function isRegExpIdentifierStart(ch) {\n        return isIdentifierStart(ch, true) || ch === 0x24 /* $ */  || ch === 0x5F /* _ */ ;\n    }\n    // RegExpIdentifierPart ::\n    //   UnicodeIDContinue\n    //   `$`\n    //   `_`\n    //   `\\` RegExpUnicodeEscapeSequence[+U]\n    //   <ZWNJ>\n    //   <ZWJ>\n    pp$1.regexp_eatRegExpIdentifierPart = function(state) {\n        var start = state.pos;\n        var forceU = this.options.ecmaVersion >= 11;\n        var ch = state.current(forceU);\n        state.advance(forceU);\n        if (ch === 0x5C /* \\ */  && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n            ch = state.lastIntValue;\n        }\n        if (isRegExpIdentifierPart(ch)) {\n            state.lastIntValue = ch;\n            return true;\n        }\n        state.pos = start;\n        return false;\n    };\n    function isRegExpIdentifierPart(ch) {\n        return isIdentifierChar(ch, true) || ch === 0x24 /* $ */  || ch === 0x5F /* _ */  || ch === 0x200C /* <ZWNJ> */  || ch === 0x200D /* <ZWJ> */ ;\n    }\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\n    pp$1.regexp_eatAtomEscape = function(state) {\n        if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {\n            return true;\n        }\n        if (state.switchU) {\n            // Make the same message as V8.\n            if (state.current() === 0x63 /* c */ ) {\n                state.raise(\"Invalid unicode escape\");\n            }\n            state.raise(\"Invalid escape\");\n        }\n        return false;\n    };\n    pp$1.regexp_eatBackReference = function(state) {\n        var start = state.pos;\n        if (this.regexp_eatDecimalEscape(state)) {\n            var n = state.lastIntValue;\n            if (state.switchU) {\n                // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n                if (n > state.maxBackReference) {\n                    state.maxBackReference = n;\n                }\n                return true;\n            }\n            if (n <= state.numCapturingParens) {\n                return true;\n            }\n            state.pos = start;\n        }\n        return false;\n    };\n    pp$1.regexp_eatKGroupName = function(state) {\n        if (state.eat(0x6B /* k */ )) {\n            if (this.regexp_eatGroupName(state)) {\n                state.backReferenceNames.push(state.lastStringValue);\n                return true;\n            }\n            state.raise(\"Invalid named reference\");\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\n    pp$1.regexp_eatCharacterEscape = function(state) {\n        return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);\n    };\n    pp$1.regexp_eatCControlLetter = function(state) {\n        var start = state.pos;\n        if (state.eat(0x63 /* c */ )) {\n            if (this.regexp_eatControlLetter(state)) {\n                return true;\n            }\n            state.pos = start;\n        }\n        return false;\n    };\n    pp$1.regexp_eatZero = function(state) {\n        if (state.current() === 0x30 /* 0 */  && !isDecimalDigit(state.lookahead())) {\n            state.lastIntValue = 0;\n            state.advance();\n            return true;\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n    pp$1.regexp_eatControlEscape = function(state) {\n        var ch = state.current();\n        if (ch === 0x74 /* t */ ) {\n            state.lastIntValue = 0x09; /* \\t */ \n            state.advance();\n            return true;\n        }\n        if (ch === 0x6E /* n */ ) {\n            state.lastIntValue = 0x0A; /* \\n */ \n            state.advance();\n            return true;\n        }\n        if (ch === 0x76 /* v */ ) {\n            state.lastIntValue = 0x0B; /* \\v */ \n            state.advance();\n            return true;\n        }\n        if (ch === 0x66 /* f */ ) {\n            state.lastIntValue = 0x0C; /* \\f */ \n            state.advance();\n            return true;\n        }\n        if (ch === 0x72 /* r */ ) {\n            state.lastIntValue = 0x0D; /* \\r */ \n            state.advance();\n            return true;\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n    pp$1.regexp_eatControlLetter = function(state) {\n        var ch = state.current();\n        if (isControlLetter(ch)) {\n            state.lastIntValue = ch % 0x20;\n            state.advance();\n            return true;\n        }\n        return false;\n    };\n    function isControlLetter(ch) {\n        return ch >= 0x41 /* A */  && ch <= 0x5A /* Z */  || ch >= 0x61 /* a */  && ch <= 0x7A /* z */ ;\n    }\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n    pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n        if (forceU === void 0) forceU = false;\n        var start = state.pos;\n        var switchU = forceU || state.switchU;\n        if (state.eat(0x75 /* u */ )) {\n            if (this.regexp_eatFixedHexDigits(state, 4)) {\n                var lead = state.lastIntValue;\n                if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n                    var leadSurrogateEnd = state.pos;\n                    if (state.eat(0x5C /* \\ */ ) && state.eat(0x75 /* u */ ) && this.regexp_eatFixedHexDigits(state, 4)) {\n                        var trail = state.lastIntValue;\n                        if (trail >= 0xDC00 && trail <= 0xDFFF) {\n                            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n                            return true;\n                        }\n                    }\n                    state.pos = leadSurrogateEnd;\n                    state.lastIntValue = lead;\n                }\n                return true;\n            }\n            if (switchU && state.eat(0x7B /* { */ ) && this.regexp_eatHexDigits(state) && state.eat(0x7D /* } */ ) && isValidUnicode(state.lastIntValue)) {\n                return true;\n            }\n            if (switchU) {\n                state.raise(\"Invalid unicode escape\");\n            }\n            state.pos = start;\n        }\n        return false;\n    };\n    function isValidUnicode(ch) {\n        return ch >= 0 && ch <= 0x10FFFF;\n    }\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\n    pp$1.regexp_eatIdentityEscape = function(state) {\n        if (state.switchU) {\n            if (this.regexp_eatSyntaxCharacter(state)) {\n                return true;\n            }\n            if (state.eat(0x2F /* / */ )) {\n                state.lastIntValue = 0x2F; /* / */ \n                return true;\n            }\n            return false;\n        }\n        var ch = state.current();\n        if (ch !== 0x63 /* c */  && (!state.switchN || ch !== 0x6B /* k */ )) {\n            state.lastIntValue = ch;\n            state.advance();\n            return true;\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n    pp$1.regexp_eatDecimalEscape = function(state) {\n        state.lastIntValue = 0;\n        var ch = state.current();\n        if (ch >= 0x31 /* 1 */  && ch <= 0x39 /* 9 */ ) {\n            do {\n                state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */ );\n                state.advance();\n            }while ((ch = state.current()) >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ );\n            return true;\n        }\n        return false;\n    };\n    // Return values used by character set parsing methods, needed to\n    // forbid negation of sets that can match strings.\n    var CharSetNone = 0; // Nothing parsed\n    var CharSetOk = 1; // Construct parsed, cannot contain strings\n    var CharSetString = 2; // Construct parsed, can contain strings\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n    pp$1.regexp_eatCharacterClassEscape = function(state) {\n        var ch = state.current();\n        if (isCharacterClassEscape(ch)) {\n            state.lastIntValue = -1;\n            state.advance();\n            return CharSetOk;\n        }\n        var negate = false;\n        if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = ch === 0x50 /* P */ ) || ch === 0x70 /* p */ )) {\n            state.lastIntValue = -1;\n            state.advance();\n            var result;\n            if (state.eat(0x7B /* { */ ) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(0x7D /* } */ )) {\n                if (negate && result === CharSetString) {\n                    state.raise(\"Invalid property name\");\n                }\n                return result;\n            }\n            state.raise(\"Invalid property name\");\n        }\n        return CharSetNone;\n    };\n    function isCharacterClassEscape(ch) {\n        return ch === 0x64 /* d */  || ch === 0x44 /* D */  || ch === 0x73 /* s */  || ch === 0x53 /* S */  || ch === 0x77 /* w */  || ch === 0x57 /* W */ ;\n    }\n    // UnicodePropertyValueExpression ::\n    //   UnicodePropertyName `=` UnicodePropertyValue\n    //   LoneUnicodePropertyNameOrValue\n    pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\n        var start = state.pos;\n        // UnicodePropertyName `=` UnicodePropertyValue\n        if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */ )) {\n            var name = state.lastStringValue;\n            if (this.regexp_eatUnicodePropertyValue(state)) {\n                var value = state.lastStringValue;\n                this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n                return CharSetOk;\n            }\n        }\n        state.pos = start;\n        // LoneUnicodePropertyNameOrValue\n        if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n            var nameOrValue = state.lastStringValue;\n            return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n        }\n        return CharSetNone;\n    };\n    pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n        if (!hasOwn(state.unicodeProperties.nonBinary, name)) {\n            state.raise(\"Invalid property name\");\n        }\n        if (!state.unicodeProperties.nonBinary[name].test(value)) {\n            state.raise(\"Invalid property value\");\n        }\n    };\n    pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n        if (state.unicodeProperties.binary.test(nameOrValue)) {\n            return CharSetOk;\n        }\n        if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) {\n            return CharSetString;\n        }\n        state.raise(\"Invalid property name\");\n    };\n    // UnicodePropertyName ::\n    //   UnicodePropertyNameCharacters\n    pp$1.regexp_eatUnicodePropertyName = function(state) {\n        var ch = 0;\n        state.lastStringValue = \"\";\n        while(isUnicodePropertyNameCharacter(ch = state.current())){\n            state.lastStringValue += codePointToString(ch);\n            state.advance();\n        }\n        return state.lastStringValue !== \"\";\n    };\n    function isUnicodePropertyNameCharacter(ch) {\n        return isControlLetter(ch) || ch === 0x5F /* _ */ ;\n    }\n    // UnicodePropertyValue ::\n    //   UnicodePropertyValueCharacters\n    pp$1.regexp_eatUnicodePropertyValue = function(state) {\n        var ch = 0;\n        state.lastStringValue = \"\";\n        while(isUnicodePropertyValueCharacter(ch = state.current())){\n            state.lastStringValue += codePointToString(ch);\n            state.advance();\n        }\n        return state.lastStringValue !== \"\";\n    };\n    function isUnicodePropertyValueCharacter(ch) {\n        return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);\n    }\n    // LoneUnicodePropertyNameOrValue ::\n    //   UnicodePropertyValueCharacters\n    pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n        return this.regexp_eatUnicodePropertyValue(state);\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n    pp$1.regexp_eatCharacterClass = function(state) {\n        if (state.eat(0x5B /* [ */ )) {\n            var negate = state.eat(0x5E /* ^ */ );\n            var result = this.regexp_classContents(state);\n            if (!state.eat(0x5D /* ] */ )) {\n                state.raise(\"Unterminated character class\");\n            }\n            if (negate && result === CharSetString) {\n                state.raise(\"Negated character class may contain strings\");\n            }\n            return true;\n        }\n        return false;\n    };\n    // https://tc39.es/ecma262/#prod-ClassContents\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n    pp$1.regexp_classContents = function(state) {\n        if (state.current() === 0x5D /* ] */ ) {\n            return CharSetOk;\n        }\n        if (state.switchV) {\n            return this.regexp_classSetExpression(state);\n        }\n        this.regexp_nonEmptyClassRanges(state);\n        return CharSetOk;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n    pp$1.regexp_nonEmptyClassRanges = function(state) {\n        while(this.regexp_eatClassAtom(state)){\n            var left = state.lastIntValue;\n            if (state.eat(0x2D /* - */ ) && this.regexp_eatClassAtom(state)) {\n                var right = state.lastIntValue;\n                if (state.switchU && (left === -1 || right === -1)) {\n                    state.raise(\"Invalid character class\");\n                }\n                if (left !== -1 && right !== -1 && left > right) {\n                    state.raise(\"Range out of order in character class\");\n                }\n            }\n        }\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n    pp$1.regexp_eatClassAtom = function(state) {\n        var start = state.pos;\n        if (state.eat(0x5C /* \\ */ )) {\n            if (this.regexp_eatClassEscape(state)) {\n                return true;\n            }\n            if (state.switchU) {\n                // Make the same message as V8.\n                var ch$1 = state.current();\n                if (ch$1 === 0x63 /* c */  || isOctalDigit(ch$1)) {\n                    state.raise(\"Invalid class escape\");\n                }\n                state.raise(\"Invalid escape\");\n            }\n            state.pos = start;\n        }\n        var ch = state.current();\n        if (ch !== 0x5D /* ] */ ) {\n            state.lastIntValue = ch;\n            state.advance();\n            return true;\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\n    pp$1.regexp_eatClassEscape = function(state) {\n        var start = state.pos;\n        if (state.eat(0x62 /* b */ )) {\n            state.lastIntValue = 0x08; /* <BS> */ \n            return true;\n        }\n        if (state.switchU && state.eat(0x2D /* - */ )) {\n            state.lastIntValue = 0x2D; /* - */ \n            return true;\n        }\n        if (!state.switchU && state.eat(0x63 /* c */ )) {\n            if (this.regexp_eatClassControlLetter(state)) {\n                return true;\n            }\n            state.pos = start;\n        }\n        return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);\n    };\n    // https://tc39.es/ecma262/#prod-ClassSetExpression\n    // https://tc39.es/ecma262/#prod-ClassUnion\n    // https://tc39.es/ecma262/#prod-ClassIntersection\n    // https://tc39.es/ecma262/#prod-ClassSubtraction\n    pp$1.regexp_classSetExpression = function(state) {\n        var result = CharSetOk, subResult;\n        if (this.regexp_eatClassSetRange(state)) ;\n        else if (subResult = this.regexp_eatClassSetOperand(state)) {\n            if (subResult === CharSetString) {\n                result = CharSetString;\n            }\n            // https://tc39.es/ecma262/#prod-ClassIntersection\n            var start = state.pos;\n            while(state.eatChars([\n                0x26,\n                0x26\n            ])){\n                if (state.current() !== 0x26 /* & */  && (subResult = this.regexp_eatClassSetOperand(state))) {\n                    if (subResult !== CharSetString) {\n                        result = CharSetOk;\n                    }\n                    continue;\n                }\n                state.raise(\"Invalid character in character class\");\n            }\n            if (start !== state.pos) {\n                return result;\n            }\n            // https://tc39.es/ecma262/#prod-ClassSubtraction\n            while(state.eatChars([\n                0x2D,\n                0x2D\n            ])){\n                if (this.regexp_eatClassSetOperand(state)) {\n                    continue;\n                }\n                state.raise(\"Invalid character in character class\");\n            }\n            if (start !== state.pos) {\n                return result;\n            }\n        } else {\n            state.raise(\"Invalid character in character class\");\n        }\n        // https://tc39.es/ecma262/#prod-ClassUnion\n        for(;;){\n            if (this.regexp_eatClassSetRange(state)) {\n                continue;\n            }\n            subResult = this.regexp_eatClassSetOperand(state);\n            if (!subResult) {\n                return result;\n            }\n            if (subResult === CharSetString) {\n                result = CharSetString;\n            }\n        }\n    };\n    // https://tc39.es/ecma262/#prod-ClassSetRange\n    pp$1.regexp_eatClassSetRange = function(state) {\n        var start = state.pos;\n        if (this.regexp_eatClassSetCharacter(state)) {\n            var left = state.lastIntValue;\n            if (state.eat(0x2D /* - */ ) && this.regexp_eatClassSetCharacter(state)) {\n                var right = state.lastIntValue;\n                if (left !== -1 && right !== -1 && left > right) {\n                    state.raise(\"Range out of order in character class\");\n                }\n                return true;\n            }\n            state.pos = start;\n        }\n        return false;\n    };\n    // https://tc39.es/ecma262/#prod-ClassSetOperand\n    pp$1.regexp_eatClassSetOperand = function(state) {\n        if (this.regexp_eatClassSetCharacter(state)) {\n            return CharSetOk;\n        }\n        return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);\n    };\n    // https://tc39.es/ecma262/#prod-NestedClass\n    pp$1.regexp_eatNestedClass = function(state) {\n        var start = state.pos;\n        if (state.eat(0x5B /* [ */ )) {\n            var negate = state.eat(0x5E /* ^ */ );\n            var result = this.regexp_classContents(state);\n            if (state.eat(0x5D /* ] */ )) {\n                if (negate && result === CharSetString) {\n                    state.raise(\"Negated character class may contain strings\");\n                }\n                return result;\n            }\n            state.pos = start;\n        }\n        if (state.eat(0x5C /* \\ */ )) {\n            var result$1 = this.regexp_eatCharacterClassEscape(state);\n            if (result$1) {\n                return result$1;\n            }\n            state.pos = start;\n        }\n        return null;\n    };\n    // https://tc39.es/ecma262/#prod-ClassStringDisjunction\n    pp$1.regexp_eatClassStringDisjunction = function(state) {\n        var start = state.pos;\n        if (state.eatChars([\n            0x5C,\n            0x71\n        ])) {\n            if (state.eat(0x7B /* { */ )) {\n                var result = this.regexp_classStringDisjunctionContents(state);\n                if (state.eat(0x7D /* } */ )) {\n                    return result;\n                }\n            } else {\n                // Make the same message as V8.\n                state.raise(\"Invalid escape\");\n            }\n            state.pos = start;\n        }\n        return null;\n    };\n    // https://tc39.es/ecma262/#prod-ClassStringDisjunctionContents\n    pp$1.regexp_classStringDisjunctionContents = function(state) {\n        var result = this.regexp_classString(state);\n        while(state.eat(0x7C /* | */ )){\n            if (this.regexp_classString(state) === CharSetString) {\n                result = CharSetString;\n            }\n        }\n        return result;\n    };\n    // https://tc39.es/ecma262/#prod-ClassString\n    // https://tc39.es/ecma262/#prod-NonEmptyClassString\n    pp$1.regexp_classString = function(state) {\n        var count = 0;\n        while(this.regexp_eatClassSetCharacter(state)){\n            count++;\n        }\n        return count === 1 ? CharSetOk : CharSetString;\n    };\n    // https://tc39.es/ecma262/#prod-ClassSetCharacter\n    pp$1.regexp_eatClassSetCharacter = function(state) {\n        var start = state.pos;\n        if (state.eat(0x5C /* \\ */ )) {\n            if (this.regexp_eatCharacterEscape(state) || this.regexp_eatClassSetReservedPunctuator(state)) {\n                return true;\n            }\n            if (state.eat(0x62 /* b */ )) {\n                state.lastIntValue = 0x08; /* <BS> */ \n                return true;\n            }\n            state.pos = start;\n            return false;\n        }\n        var ch = state.current();\n        if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) {\n            return false;\n        }\n        if (isClassSetSyntaxCharacter(ch)) {\n            return false;\n        }\n        state.advance();\n        state.lastIntValue = ch;\n        return true;\n    };\n    // https://tc39.es/ecma262/#prod-ClassSetReservedDoublePunctuator\n    function isClassSetReservedDoublePunctuatorCharacter(ch) {\n        return ch === 0x21 /* ! */  || ch >= 0x23 /* # */  && ch <= 0x26 /* & */  || ch >= 0x2A /* * */  && ch <= 0x2C /* , */  || ch === 0x2E /* . */  || ch >= 0x3A /* : */  && ch <= 0x40 /* @ */  || ch === 0x5E /* ^ */  || ch === 0x60 /* ` */  || ch === 0x7E /* ~ */ ;\n    }\n    // https://tc39.es/ecma262/#prod-ClassSetSyntaxCharacter\n    function isClassSetSyntaxCharacter(ch) {\n        return ch === 0x28 /* ( */  || ch === 0x29 /* ) */  || ch === 0x2D /* - */  || ch === 0x2F /* / */  || ch >= 0x5B /* [ */  && ch <= 0x5D /* ] */  || ch >= 0x7B /* { */  && ch <= 0x7D /* } */ ;\n    }\n    // https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\n    pp$1.regexp_eatClassSetReservedPunctuator = function(state) {\n        var ch = state.current();\n        if (isClassSetReservedPunctuator(ch)) {\n            state.lastIntValue = ch;\n            state.advance();\n            return true;\n        }\n        return false;\n    };\n    // https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\n    function isClassSetReservedPunctuator(ch) {\n        return ch === 0x21 /* ! */  || ch === 0x23 /* # */  || ch === 0x25 /* % */  || ch === 0x26 /* & */  || ch === 0x2C /* , */  || ch === 0x2D /* - */  || ch >= 0x3A /* : */  && ch <= 0x3E /* > */  || ch === 0x40 /* @ */  || ch === 0x60 /* ` */  || ch === 0x7E /* ~ */ ;\n    }\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\n    pp$1.regexp_eatClassControlLetter = function(state) {\n        var ch = state.current();\n        if (isDecimalDigit(ch) || ch === 0x5F /* _ */ ) {\n            state.lastIntValue = ch % 0x20;\n            state.advance();\n            return true;\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n    pp$1.regexp_eatHexEscapeSequence = function(state) {\n        var start = state.pos;\n        if (state.eat(0x78 /* x */ )) {\n            if (this.regexp_eatFixedHexDigits(state, 2)) {\n                return true;\n            }\n            if (state.switchU) {\n                state.raise(\"Invalid escape\");\n            }\n            state.pos = start;\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n    pp$1.regexp_eatDecimalDigits = function(state) {\n        var start = state.pos;\n        var ch = 0;\n        state.lastIntValue = 0;\n        while(isDecimalDigit(ch = state.current())){\n            state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */ );\n            state.advance();\n        }\n        return state.pos !== start;\n    };\n    function isDecimalDigit(ch) {\n        return ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ ;\n    }\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n    pp$1.regexp_eatHexDigits = function(state) {\n        var start = state.pos;\n        var ch = 0;\n        state.lastIntValue = 0;\n        while(isHexDigit(ch = state.current())){\n            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n            state.advance();\n        }\n        return state.pos !== start;\n    };\n    function isHexDigit(ch) {\n        return ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */  || ch >= 0x41 /* A */  && ch <= 0x46 /* F */  || ch >= 0x61 /* a */  && ch <= 0x66 /* f */ ;\n    }\n    function hexToInt(ch) {\n        if (ch >= 0x41 /* A */  && ch <= 0x46 /* F */ ) {\n            return 10 + (ch - 0x41 /* A */ );\n        }\n        if (ch >= 0x61 /* a */  && ch <= 0x66 /* f */ ) {\n            return 10 + (ch - 0x61 /* a */ );\n        }\n        return ch - 0x30 /* 0 */ ;\n    }\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n    // Allows only 0-377(octal) i.e. 0-255(decimal).\n    pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\n        if (this.regexp_eatOctalDigit(state)) {\n            var n1 = state.lastIntValue;\n            if (this.regexp_eatOctalDigit(state)) {\n                var n2 = state.lastIntValue;\n                if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n                    state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n                } else {\n                    state.lastIntValue = n1 * 8 + n2;\n                }\n            } else {\n                state.lastIntValue = n1;\n            }\n            return true;\n        }\n        return false;\n    };\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n    pp$1.regexp_eatOctalDigit = function(state) {\n        var ch = state.current();\n        if (isOctalDigit(ch)) {\n            state.lastIntValue = ch - 0x30; /* 0 */ \n            state.advance();\n            return true;\n        }\n        state.lastIntValue = 0;\n        return false;\n    };\n    function isOctalDigit(ch) {\n        return ch >= 0x30 /* 0 */  && ch <= 0x37 /* 7 */ ;\n    }\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n    // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n    // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n    pp$1.regexp_eatFixedHexDigits = function(state, length) {\n        var start = state.pos;\n        state.lastIntValue = 0;\n        for(var i = 0; i < length; ++i){\n            var ch = state.current();\n            if (!isHexDigit(ch)) {\n                state.pos = start;\n                return false;\n            }\n            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n            state.advance();\n        }\n        return true;\n    };\n    // Object type used to represent tokens. Note that normally, tokens\n    // simply exist as properties on the parser object. This is only\n    // used for the onToken callback and the external tokenizer.\n    var Token = function Token(p) {\n        this.type = p.type;\n        this.value = p.value;\n        this.start = p.start;\n        this.end = p.end;\n        if (p.options.locations) {\n            this.loc = new SourceLocation(p, p.startLoc, p.endLoc);\n        }\n        if (p.options.ranges) {\n            this.range = [\n                p.start,\n                p.end\n            ];\n        }\n    };\n    // ## Tokenizer\n    var pp = Parser.prototype;\n    // Move to the next token\n    pp.next = function(ignoreEscapeSequenceInKeyword) {\n        if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {\n            this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword);\n        }\n        if (this.options.onToken) {\n            this.options.onToken(new Token(this));\n        }\n        this.lastTokEnd = this.end;\n        this.lastTokStart = this.start;\n        this.lastTokEndLoc = this.endLoc;\n        this.lastTokStartLoc = this.startLoc;\n        this.nextToken();\n    };\n    pp.getToken = function() {\n        this.next();\n        return new Token(this);\n    };\n    // If we're in an ES6 environment, make parsers iterable\n    if (typeof Symbol !== \"undefined\") {\n        pp[Symbol.iterator] = function() {\n            var this$1$1 = this;\n            return {\n                next: function() {\n                    var token = this$1$1.getToken();\n                    return {\n                        done: token.type === types$1.eof,\n                        value: token\n                    };\n                }\n            };\n        };\n    }\n    // Toggle strict mode. Re-reads the next number or string to please\n    // pedantic tests (`\"use strict\"; 010;` should fail).\n    // Read a single token, updating the parser object's token-related\n    // properties.\n    pp.nextToken = function() {\n        var curContext = this.curContext();\n        if (!curContext || !curContext.preserveSpace) {\n            this.skipSpace();\n        }\n        this.start = this.pos;\n        if (this.options.locations) {\n            this.startLoc = this.curPosition();\n        }\n        if (this.pos >= this.input.length) {\n            return this.finishToken(types$1.eof);\n        }\n        if (curContext.override) {\n            return curContext.override(this);\n        } else {\n            this.readToken(this.fullCharCodeAtPos());\n        }\n    };\n    pp.readToken = function(code) {\n        // Identifier or keyword. '\\uXXXX' sequences are allowed in\n        // identifiers, so '\\' also dispatches to that.\n        if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */ ) {\n            return this.readWord();\n        }\n        return this.getTokenFromCode(code);\n    };\n    pp.fullCharCodeAtPos = function() {\n        var code = this.input.charCodeAt(this.pos);\n        if (code <= 0xd7ff || code >= 0xdc00) {\n            return code;\n        }\n        var next = this.input.charCodeAt(this.pos + 1);\n        return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00;\n    };\n    pp.skipBlockComment = function() {\n        var startLoc = this.options.onComment && this.curPosition();\n        var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n        if (end === -1) {\n            this.raise(this.pos - 2, \"Unterminated comment\");\n        }\n        this.pos = end + 2;\n        if (this.options.locations) {\n            for(var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;){\n                ++this.curLine;\n                pos = this.lineStart = nextBreak;\n            }\n        }\n        if (this.options.onComment) {\n            this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n        }\n    };\n    pp.skipLineComment = function(startSkip) {\n        var start = this.pos;\n        var startLoc = this.options.onComment && this.curPosition();\n        var ch = this.input.charCodeAt(this.pos += startSkip);\n        while(this.pos < this.input.length && !isNewLine(ch)){\n            ch = this.input.charCodeAt(++this.pos);\n        }\n        if (this.options.onComment) {\n            this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n        }\n    };\n    // Called at the start of the parse and after every token. Skips\n    // whitespace and comments, and.\n    pp.skipSpace = function() {\n        loop: while(this.pos < this.input.length){\n            var ch = this.input.charCodeAt(this.pos);\n            switch(ch){\n                case 32:\n                case 160:\n                    ++this.pos;\n                    break;\n                case 13:\n                    if (this.input.charCodeAt(this.pos + 1) === 10) {\n                        ++this.pos;\n                    }\n                case 10:\n                case 8232:\n                case 8233:\n                    ++this.pos;\n                    if (this.options.locations) {\n                        ++this.curLine;\n                        this.lineStart = this.pos;\n                    }\n                    break;\n                case 47:\n                    switch(this.input.charCodeAt(this.pos + 1)){\n                        case 42:\n                            this.skipBlockComment();\n                            break;\n                        case 47:\n                            this.skipLineComment(2);\n                            break;\n                        default:\n                            break loop;\n                    }\n                    break;\n                default:\n                    if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n                        ++this.pos;\n                    } else {\n                        break loop;\n                    }\n            }\n        }\n    };\n    // Called at the end of every token. Sets `end`, `val`, and\n    // maintains `context` and `exprAllowed`, and skips the space after\n    // the token, so that the next one's `start` will point at the\n    // right position.\n    pp.finishToken = function(type, val) {\n        this.end = this.pos;\n        if (this.options.locations) {\n            this.endLoc = this.curPosition();\n        }\n        var prevType = this.type;\n        this.type = type;\n        this.value = val;\n        this.updateContext(prevType);\n    };\n    // ### Token reading\n    // This is the function that is called to fetch the next token. It\n    // is somewhat obscure, because it works in character codes rather\n    // than characters, and because operator parsing has been inlined\n    // into it.\n    //\n    // All in the name of speed.\n    //\n    pp.readToken_dot = function() {\n        var next = this.input.charCodeAt(this.pos + 1);\n        if (next >= 48 && next <= 57) {\n            return this.readNumber(true);\n        }\n        var next2 = this.input.charCodeAt(this.pos + 2);\n        if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n            this.pos += 3;\n            return this.finishToken(types$1.ellipsis);\n        } else {\n            ++this.pos;\n            return this.finishToken(types$1.dot);\n        }\n    };\n    pp.readToken_slash = function() {\n        var next = this.input.charCodeAt(this.pos + 1);\n        if (this.exprAllowed) {\n            ++this.pos;\n            return this.readRegexp();\n        }\n        if (next === 61) {\n            return this.finishOp(types$1.assign, 2);\n        }\n        return this.finishOp(types$1.slash, 1);\n    };\n    pp.readToken_mult_modulo_exp = function(code) {\n        var next = this.input.charCodeAt(this.pos + 1);\n        var size = 1;\n        var tokentype = code === 42 ? types$1.star : types$1.modulo;\n        // exponentiation operator ** and **=\n        if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n            ++size;\n            tokentype = types$1.starstar;\n            next = this.input.charCodeAt(this.pos + 2);\n        }\n        if (next === 61) {\n            return this.finishOp(types$1.assign, size + 1);\n        }\n        return this.finishOp(tokentype, size);\n    };\n    pp.readToken_pipe_amp = function(code) {\n        var next = this.input.charCodeAt(this.pos + 1);\n        if (next === code) {\n            if (this.options.ecmaVersion >= 12) {\n                var next2 = this.input.charCodeAt(this.pos + 2);\n                if (next2 === 61) {\n                    return this.finishOp(types$1.assign, 3);\n                }\n            }\n            return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n        }\n        if (next === 61) {\n            return this.finishOp(types$1.assign, 2);\n        }\n        return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n    };\n    pp.readToken_caret = function() {\n        var next = this.input.charCodeAt(this.pos + 1);\n        if (next === 61) {\n            return this.finishOp(types$1.assign, 2);\n        }\n        return this.finishOp(types$1.bitwiseXOR, 1);\n    };\n    pp.readToken_plus_min = function(code) {\n        var next = this.input.charCodeAt(this.pos + 1);\n        if (next === code) {\n            if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n                // A `-->` line comment\n                this.skipLineComment(3);\n                this.skipSpace();\n                return this.nextToken();\n            }\n            return this.finishOp(types$1.incDec, 2);\n        }\n        if (next === 61) {\n            return this.finishOp(types$1.assign, 2);\n        }\n        return this.finishOp(types$1.plusMin, 1);\n    };\n    pp.readToken_lt_gt = function(code) {\n        var next = this.input.charCodeAt(this.pos + 1);\n        var size = 1;\n        if (next === code) {\n            size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n            if (this.input.charCodeAt(this.pos + size) === 61) {\n                return this.finishOp(types$1.assign, size + 1);\n            }\n            return this.finishOp(types$1.bitShift, size);\n        }\n        if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {\n            // `<!--`, an XML-style comment that should be interpreted as a line comment\n            this.skipLineComment(4);\n            this.skipSpace();\n            return this.nextToken();\n        }\n        if (next === 61) {\n            size = 2;\n        }\n        return this.finishOp(types$1.relational, size);\n    };\n    pp.readToken_eq_excl = function(code) {\n        var next = this.input.charCodeAt(this.pos + 1);\n        if (next === 61) {\n            return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n        }\n        if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n            this.pos += 2;\n            return this.finishToken(types$1.arrow);\n        }\n        return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1);\n    };\n    pp.readToken_question = function() {\n        var ecmaVersion = this.options.ecmaVersion;\n        if (ecmaVersion >= 11) {\n            var next = this.input.charCodeAt(this.pos + 1);\n            if (next === 46) {\n                var next2 = this.input.charCodeAt(this.pos + 2);\n                if (next2 < 48 || next2 > 57) {\n                    return this.finishOp(types$1.questionDot, 2);\n                }\n            }\n            if (next === 63) {\n                if (ecmaVersion >= 12) {\n                    var next2$1 = this.input.charCodeAt(this.pos + 2);\n                    if (next2$1 === 61) {\n                        return this.finishOp(types$1.assign, 3);\n                    }\n                }\n                return this.finishOp(types$1.coalesce, 2);\n            }\n        }\n        return this.finishOp(types$1.question, 1);\n    };\n    pp.readToken_numberSign = function() {\n        var ecmaVersion = this.options.ecmaVersion;\n        var code = 35; // '#'\n        if (ecmaVersion >= 13) {\n            ++this.pos;\n            code = this.fullCharCodeAtPos();\n            if (isIdentifierStart(code, true) || code === 92 /* '\\' */ ) {\n                return this.finishToken(types$1.privateId, this.readWord1());\n            }\n        }\n        this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n    };\n    pp.getTokenFromCode = function(code) {\n        switch(code){\n            // The interpretation of a dot depends on whether it is followed\n            // by a digit or another two dots.\n            case 46:\n                return this.readToken_dot();\n            // Punctuation tokens.\n            case 40:\n                ++this.pos;\n                return this.finishToken(types$1.parenL);\n            case 41:\n                ++this.pos;\n                return this.finishToken(types$1.parenR);\n            case 59:\n                ++this.pos;\n                return this.finishToken(types$1.semi);\n            case 44:\n                ++this.pos;\n                return this.finishToken(types$1.comma);\n            case 91:\n                ++this.pos;\n                return this.finishToken(types$1.bracketL);\n            case 93:\n                ++this.pos;\n                return this.finishToken(types$1.bracketR);\n            case 123:\n                ++this.pos;\n                return this.finishToken(types$1.braceL);\n            case 125:\n                ++this.pos;\n                return this.finishToken(types$1.braceR);\n            case 58:\n                ++this.pos;\n                return this.finishToken(types$1.colon);\n            case 96:\n                if (this.options.ecmaVersion < 6) {\n                    break;\n                }\n                ++this.pos;\n                return this.finishToken(types$1.backQuote);\n            case 48:\n                var next = this.input.charCodeAt(this.pos + 1);\n                if (next === 120 || next === 88) {\n                    return this.readRadixNumber(16);\n                } // '0x', '0X' - hex number\n                if (this.options.ecmaVersion >= 6) {\n                    if (next === 111 || next === 79) {\n                        return this.readRadixNumber(8);\n                    } // '0o', '0O' - octal number\n                    if (next === 98 || next === 66) {\n                        return this.readRadixNumber(2);\n                    } // '0b', '0B' - binary number\n                }\n            // Anything else beginning with a digit is an integer, octal\n            // number, or float.\n            case 49:\n            case 50:\n            case 51:\n            case 52:\n            case 53:\n            case 54:\n            case 55:\n            case 56:\n            case 57:\n                return this.readNumber(false);\n            // Quotes produce strings.\n            case 34:\n            case 39:\n                return this.readString(code);\n            // Operators are parsed inline in tiny state machines. '=' (61) is\n            // often referred to. `finishOp` simply skips the amount of\n            // characters it is given as second argument, and returns a token\n            // of the type given by its first argument.\n            case 47:\n                return this.readToken_slash();\n            case 37:\n            case 42:\n                return this.readToken_mult_modulo_exp(code);\n            case 124:\n            case 38:\n                return this.readToken_pipe_amp(code);\n            case 94:\n                return this.readToken_caret();\n            case 43:\n            case 45:\n                return this.readToken_plus_min(code);\n            case 60:\n            case 62:\n                return this.readToken_lt_gt(code);\n            case 61:\n            case 33:\n                return this.readToken_eq_excl(code);\n            case 63:\n                return this.readToken_question();\n            case 126:\n                return this.finishOp(types$1.prefix, 1);\n            case 35:\n                return this.readToken_numberSign();\n        }\n        this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n    };\n    pp.finishOp = function(type, size) {\n        var str = this.input.slice(this.pos, this.pos + size);\n        this.pos += size;\n        return this.finishToken(type, str);\n    };\n    pp.readRegexp = function() {\n        var escaped, inClass, start = this.pos;\n        for(;;){\n            if (this.pos >= this.input.length) {\n                this.raise(start, \"Unterminated regular expression\");\n            }\n            var ch = this.input.charAt(this.pos);\n            if (lineBreak.test(ch)) {\n                this.raise(start, \"Unterminated regular expression\");\n            }\n            if (!escaped) {\n                if (ch === \"[\") {\n                    inClass = true;\n                } else if (ch === \"]\" && inClass) {\n                    inClass = false;\n                } else if (ch === \"/\" && !inClass) {\n                    break;\n                }\n                escaped = ch === \"\\\\\";\n            } else {\n                escaped = false;\n            }\n            ++this.pos;\n        }\n        var pattern = this.input.slice(start, this.pos);\n        ++this.pos;\n        var flagsStart = this.pos;\n        var flags = this.readWord1();\n        if (this.containsEsc) {\n            this.unexpected(flagsStart);\n        }\n        // Validate pattern\n        var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n        state.reset(start, pattern, flags);\n        this.validateRegExpFlags(state);\n        this.validateRegExpPattern(state);\n        // Create Literal#value property value.\n        var value = null;\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n        // ESTree requires null if it failed to instantiate RegExp object.\n        // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n        }\n        return this.finishToken(types$1.regexp, {\n            pattern: pattern,\n            flags: flags,\n            value: value\n        });\n    };\n    // Read an integer in the given radix. Return null if zero digits\n    // were read, the integer value otherwise. When `len` is given, this\n    // will return `null` unless the integer has exactly `len` digits.\n    pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n        // `len` is used for character escape sequences. In that case, disallow separators.\n        var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n        // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n        // and isn't fraction part nor exponent part. In that case, if the first digit\n        // is zero then disallow separators.\n        var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n        var start = this.pos, total = 0, lastCode = 0;\n        for(var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos){\n            var code = this.input.charCodeAt(this.pos), val = void 0;\n            if (allowSeparators && code === 95) {\n                if (isLegacyOctalNumericLiteral) {\n                    this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\");\n                }\n                if (lastCode === 95) {\n                    this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\");\n                }\n                if (i === 0) {\n                    this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\");\n                }\n                lastCode = code;\n                continue;\n            }\n            if (code >= 97) {\n                val = code - 97 + 10;\n            } else if (code >= 65) {\n                val = code - 65 + 10;\n            } else if (code >= 48 && code <= 57) {\n                val = code - 48;\n            } else {\n                val = Infinity;\n            }\n            if (val >= radix) {\n                break;\n            }\n            lastCode = code;\n            total = total * radix + val;\n        }\n        if (allowSeparators && lastCode === 95) {\n            this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\");\n        }\n        if (this.pos === start || len != null && this.pos - start !== len) {\n            return null;\n        }\n        return total;\n    };\n    function stringToNumber(str, isLegacyOctalNumericLiteral) {\n        if (isLegacyOctalNumericLiteral) {\n            return parseInt(str, 8);\n        }\n        // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n        return parseFloat(str.replace(/_/g, \"\"));\n    }\n    function stringToBigInt(str) {\n        if (typeof BigInt !== \"function\") {\n            return null;\n        }\n        // `BigInt(value)` throws syntax error if the string contains numeric separators.\n        return BigInt(str.replace(/_/g, \"\"));\n    }\n    pp.readRadixNumber = function(radix) {\n        var start = this.pos;\n        this.pos += 2; // 0x\n        var val = this.readInt(radix);\n        if (val == null) {\n            this.raise(this.start + 2, \"Expected number in radix \" + radix);\n        }\n        if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n            val = stringToBigInt(this.input.slice(start, this.pos));\n            ++this.pos;\n        } else if (isIdentifierStart(this.fullCharCodeAtPos())) {\n            this.raise(this.pos, \"Identifier directly after number\");\n        }\n        return this.finishToken(types$1.num, val);\n    };\n    // Read an integer, octal integer, or floating-point number.\n    pp.readNumber = function(startsWithDot) {\n        var start = this.pos;\n        if (!startsWithDot && this.readInt(10, undefined, true) === null) {\n            this.raise(start, \"Invalid number\");\n        }\n        var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n        if (octal && this.strict) {\n            this.raise(start, \"Invalid number\");\n        }\n        var next = this.input.charCodeAt(this.pos);\n        if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n            var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n            ++this.pos;\n            if (isIdentifierStart(this.fullCharCodeAtPos())) {\n                this.raise(this.pos, \"Identifier directly after number\");\n            }\n            return this.finishToken(types$1.num, val$1);\n        }\n        if (octal && /[89]/.test(this.input.slice(start, this.pos))) {\n            octal = false;\n        }\n        if (next === 46 && !octal) {\n            ++this.pos;\n            this.readInt(10);\n            next = this.input.charCodeAt(this.pos);\n        }\n        if ((next === 69 || next === 101) && !octal) {\n            next = this.input.charCodeAt(++this.pos);\n            if (next === 43 || next === 45) {\n                ++this.pos;\n            } // '+-'\n            if (this.readInt(10) === null) {\n                this.raise(start, \"Invalid number\");\n            }\n        }\n        if (isIdentifierStart(this.fullCharCodeAtPos())) {\n            this.raise(this.pos, \"Identifier directly after number\");\n        }\n        var val = stringToNumber(this.input.slice(start, this.pos), octal);\n        return this.finishToken(types$1.num, val);\n    };\n    // Read a string value, interpreting backslash-escapes.\n    pp.readCodePoint = function() {\n        var ch = this.input.charCodeAt(this.pos), code;\n        if (ch === 123) {\n            if (this.options.ecmaVersion < 6) {\n                this.unexpected();\n            }\n            var codePos = ++this.pos;\n            code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n            ++this.pos;\n            if (code > 0x10FFFF) {\n                this.invalidStringToken(codePos, \"Code point out of bounds\");\n            }\n        } else {\n            code = this.readHexChar(4);\n        }\n        return code;\n    };\n    pp.readString = function(quote) {\n        var out = \"\", chunkStart = ++this.pos;\n        for(;;){\n            if (this.pos >= this.input.length) {\n                this.raise(this.start, \"Unterminated string constant\");\n            }\n            var ch = this.input.charCodeAt(this.pos);\n            if (ch === quote) {\n                break;\n            }\n            if (ch === 92) {\n                out += this.input.slice(chunkStart, this.pos);\n                out += this.readEscapedChar(false);\n                chunkStart = this.pos;\n            } else if (ch === 0x2028 || ch === 0x2029) {\n                if (this.options.ecmaVersion < 10) {\n                    this.raise(this.start, \"Unterminated string constant\");\n                }\n                ++this.pos;\n                if (this.options.locations) {\n                    this.curLine++;\n                    this.lineStart = this.pos;\n                }\n            } else {\n                if (isNewLine(ch)) {\n                    this.raise(this.start, \"Unterminated string constant\");\n                }\n                ++this.pos;\n            }\n        }\n        out += this.input.slice(chunkStart, this.pos++);\n        return this.finishToken(types$1.string, out);\n    };\n    // Reads template string tokens.\n    var INVALID_TEMPLATE_ESCAPE_ERROR = {};\n    pp.tryReadTemplateToken = function() {\n        this.inTemplateElement = true;\n        try {\n            this.readTmplToken();\n        } catch (err) {\n            if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n                this.readInvalidTemplateToken();\n            } else {\n                throw err;\n            }\n        }\n        this.inTemplateElement = false;\n    };\n    pp.invalidStringToken = function(position, message) {\n        if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n            throw INVALID_TEMPLATE_ESCAPE_ERROR;\n        } else {\n            this.raise(position, message);\n        }\n    };\n    pp.readTmplToken = function() {\n        var out = \"\", chunkStart = this.pos;\n        for(;;){\n            if (this.pos >= this.input.length) {\n                this.raise(this.start, \"Unterminated template\");\n            }\n            var ch = this.input.charCodeAt(this.pos);\n            if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n                if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\n                    if (ch === 36) {\n                        this.pos += 2;\n                        return this.finishToken(types$1.dollarBraceL);\n                    } else {\n                        ++this.pos;\n                        return this.finishToken(types$1.backQuote);\n                    }\n                }\n                out += this.input.slice(chunkStart, this.pos);\n                return this.finishToken(types$1.template, out);\n            }\n            if (ch === 92) {\n                out += this.input.slice(chunkStart, this.pos);\n                out += this.readEscapedChar(true);\n                chunkStart = this.pos;\n            } else if (isNewLine(ch)) {\n                out += this.input.slice(chunkStart, this.pos);\n                ++this.pos;\n                switch(ch){\n                    case 13:\n                        if (this.input.charCodeAt(this.pos) === 10) {\n                            ++this.pos;\n                        }\n                    case 10:\n                        out += \"\\n\";\n                        break;\n                    default:\n                        out += String.fromCharCode(ch);\n                        break;\n                }\n                if (this.options.locations) {\n                    ++this.curLine;\n                    this.lineStart = this.pos;\n                }\n                chunkStart = this.pos;\n            } else {\n                ++this.pos;\n            }\n        }\n    };\n    // Reads a template token to search for the end, without validating any escape sequences\n    pp.readInvalidTemplateToken = function() {\n        for(; this.pos < this.input.length; this.pos++){\n            switch(this.input[this.pos]){\n                case \"\\\\\":\n                    ++this.pos;\n                    break;\n                case \"$\":\n                    if (this.input[this.pos + 1] !== \"{\") {\n                        break;\n                    }\n                // falls through\n                case \"`\":\n                    return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));\n            }\n        }\n        this.raise(this.start, \"Unterminated template\");\n    };\n    // Used to read escaped characters\n    pp.readEscapedChar = function(inTemplate) {\n        var ch = this.input.charCodeAt(++this.pos);\n        ++this.pos;\n        switch(ch){\n            case 110:\n                return \"\\n\" // 'n' -> '\\n'\n                ;\n            case 114:\n                return \"\\r\" // 'r' -> '\\r'\n                ;\n            case 120:\n                return String.fromCharCode(this.readHexChar(2)) // 'x'\n                ;\n            case 117:\n                return codePointToString(this.readCodePoint()) // 'u'\n                ;\n            case 116:\n                return \"\t\" // 't' -> '\\t'\n                ;\n            case 98:\n                return \"\\b\" // 'b' -> '\\b'\n                ;\n            case 118:\n                return \"\\v\" // 'v' -> '\\u000b'\n                ;\n            case 102:\n                return \"\\f\" // 'f' -> '\\f'\n                ;\n            case 13:\n                if (this.input.charCodeAt(this.pos) === 10) {\n                    ++this.pos;\n                } // '\\r\\n'\n            case 10:\n                if (this.options.locations) {\n                    this.lineStart = this.pos;\n                    ++this.curLine;\n                }\n                return \"\";\n            case 56:\n            case 57:\n                if (this.strict) {\n                    this.invalidStringToken(this.pos - 1, \"Invalid escape sequence\");\n                }\n                if (inTemplate) {\n                    var codePos = this.pos - 1;\n                    this.invalidStringToken(codePos, \"Invalid escape sequence in template string\");\n                }\n            default:\n                if (ch >= 48 && ch <= 55) {\n                    var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n                    var octal = parseInt(octalStr, 8);\n                    if (octal > 255) {\n                        octalStr = octalStr.slice(0, -1);\n                        octal = parseInt(octalStr, 8);\n                    }\n                    this.pos += octalStr.length - 1;\n                    ch = this.input.charCodeAt(this.pos);\n                    if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n                        this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? \"Octal literal in template string\" : \"Octal literal in strict mode\");\n                    }\n                    return String.fromCharCode(octal);\n                }\n                if (isNewLine(ch)) {\n                    // Unicode new line characters after \\ get removed from output in both\n                    // template literals and strings\n                    return \"\";\n                }\n                return String.fromCharCode(ch);\n        }\n    };\n    // Used to read character escape sequences ('\\x', '\\u', '\\U').\n    pp.readHexChar = function(len) {\n        var codePos = this.pos;\n        var n = this.readInt(16, len);\n        if (n === null) {\n            this.invalidStringToken(codePos, \"Bad character escape sequence\");\n        }\n        return n;\n    };\n    // Read an identifier, and return it as a string. Sets `this.containsEsc`\n    // to whether the word contained a '\\u' escape.\n    //\n    // Incrementally adds only escaped chars, adding other chunks as-is\n    // as a micro-optimization.\n    pp.readWord1 = function() {\n        this.containsEsc = false;\n        var word = \"\", first = true, chunkStart = this.pos;\n        var astral = this.options.ecmaVersion >= 6;\n        while(this.pos < this.input.length){\n            var ch = this.fullCharCodeAtPos();\n            if (isIdentifierChar(ch, astral)) {\n                this.pos += ch <= 0xffff ? 1 : 2;\n            } else if (ch === 92) {\n                this.containsEsc = true;\n                word += this.input.slice(chunkStart, this.pos);\n                var escStart = this.pos;\n                if (this.input.charCodeAt(++this.pos) !== 117) {\n                    this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n                }\n                ++this.pos;\n                var esc = this.readCodePoint();\n                if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {\n                    this.invalidStringToken(escStart, \"Invalid Unicode escape\");\n                }\n                word += codePointToString(esc);\n                chunkStart = this.pos;\n            } else {\n                break;\n            }\n            first = false;\n        }\n        return word + this.input.slice(chunkStart, this.pos);\n    };\n    // Read an identifier or keyword token. Will check for reserved\n    // words when necessary.\n    pp.readWord = function() {\n        var word = this.readWord1();\n        var type = types$1.name;\n        if (this.keywords.test(word)) {\n            type = keywords[word];\n        }\n        return this.finishToken(type, word);\n    };\n    // Acorn is a tiny, fast JavaScript parser written in JavaScript.\n    //\n    // Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n    // various contributors and released under an MIT license.\n    //\n    // Git repositories for Acorn are available at\n    //\n    //     http://marijnhaverbeke.nl/git/acorn\n    //     https://github.com/acornjs/acorn.git\n    //\n    // Please use the [github bug tracker][ghbt] to report issues.\n    //\n    // [ghbt]: https://github.com/acornjs/acorn/issues\n    //\n    // [walk]: util/walk.js\n    var version = \"8.11.2\";\n    Parser.acorn = {\n        Parser: Parser,\n        version: version,\n        defaultOptions: defaultOptions,\n        Position: Position,\n        SourceLocation: SourceLocation,\n        getLineInfo: getLineInfo,\n        Node: Node,\n        TokenType: TokenType,\n        tokTypes: types$1,\n        keywordTypes: keywords,\n        TokContext: TokContext,\n        tokContexts: types,\n        isIdentifierChar: isIdentifierChar,\n        isIdentifierStart: isIdentifierStart,\n        Token: Token,\n        isNewLine: isNewLine,\n        lineBreak: lineBreak,\n        lineBreakG: lineBreakG,\n        nonASCIIwhitespace: nonASCIIwhitespace\n    };\n    // The main exported interface (under `self.acorn` when in the\n    // browser) is a `parse` function that takes a code string and\n    // returns an abstract syntax tree as specified by [Mozilla parser\n    // API][api].\n    //\n    // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n    function parse(input, options) {\n        return Parser.parse(input, options);\n    }\n    // This function tries to parse a single expression at a given\n    // offset in a string. Useful for parsing mixed-language formats\n    // that embed JavaScript expressions.\n    function parseExpressionAt(input, pos, options) {\n        return Parser.parseExpressionAt(input, pos, options);\n    }\n    // Acorn is organized as a tokenizer and a recursive-descent parser.\n    // The `tokenizer` export provides an interface to the tokenizer.\n    function tokenizer(input, options) {\n        return Parser.tokenizer(input, options);\n    }\n    exports1.Node = Node;\n    exports1.Parser = Parser;\n    exports1.Position = Position;\n    exports1.SourceLocation = SourceLocation;\n    exports1.TokContext = TokContext;\n    exports1.Token = Token;\n    exports1.TokenType = TokenType;\n    exports1.defaultOptions = defaultOptions;\n    exports1.getLineInfo = getLineInfo;\n    exports1.isIdentifierChar = isIdentifierChar;\n    exports1.isIdentifierStart = isIdentifierStart;\n    exports1.isNewLine = isNewLine;\n    exports1.keywordTypes = keywords;\n    exports1.lineBreak = lineBreak;\n    exports1.lineBreakG = lineBreakG;\n    exports1.nonASCIIwhitespace = nonASCIIwhitespace;\n    exports1.parse = parse;\n    exports1.parseExpressionAt = parseExpressionAt;\n    exports1.tokContexts = types;\n    exports1.tokTypes = types$1;\n    exports1.tokenizer = tokenizer;\n    exports1.version = version;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/acorn/dist/acorn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/acorn/dist/acorn.mjs":
/*!*******************************************!*\
  !*** ./node_modules/acorn/dist/acorn.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   Position: () => (/* binding */ Position),\n/* harmony export */   SourceLocation: () => (/* binding */ SourceLocation),\n/* harmony export */   TokContext: () => (/* binding */ TokContext),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   TokenType: () => (/* binding */ TokenType),\n/* harmony export */   defaultOptions: () => (/* binding */ defaultOptions),\n/* harmony export */   getLineInfo: () => (/* binding */ getLineInfo),\n/* harmony export */   isIdentifierChar: () => (/* binding */ isIdentifierChar),\n/* harmony export */   isIdentifierStart: () => (/* binding */ isIdentifierStart),\n/* harmony export */   isNewLine: () => (/* binding */ isNewLine),\n/* harmony export */   keywordTypes: () => (/* binding */ keywords),\n/* harmony export */   lineBreak: () => (/* binding */ lineBreak),\n/* harmony export */   lineBreakG: () => (/* binding */ lineBreakG),\n/* harmony export */   nonASCIIwhitespace: () => (/* binding */ nonASCIIwhitespace),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseExpressionAt: () => (/* binding */ parseExpressionAt),\n/* harmony export */   tokContexts: () => (/* binding */ types),\n/* harmony export */   tokTypes: () => (/* binding */ types$1),\n/* harmony export */   tokenizer: () => (/* binding */ tokenizer),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n// This file was generated. Do not modify manually!\nvar astralIdentifierCodes = [\n    509,\n    0,\n    227,\n    0,\n    150,\n    4,\n    294,\n    9,\n    1368,\n    2,\n    2,\n    1,\n    6,\n    3,\n    41,\n    2,\n    5,\n    0,\n    166,\n    1,\n    574,\n    3,\n    9,\n    9,\n    370,\n    1,\n    81,\n    2,\n    71,\n    10,\n    50,\n    3,\n    123,\n    2,\n    54,\n    14,\n    32,\n    10,\n    3,\n    1,\n    11,\n    3,\n    46,\n    10,\n    8,\n    0,\n    46,\n    9,\n    7,\n    2,\n    37,\n    13,\n    2,\n    9,\n    6,\n    1,\n    45,\n    0,\n    13,\n    2,\n    49,\n    13,\n    9,\n    3,\n    2,\n    11,\n    83,\n    11,\n    7,\n    0,\n    3,\n    0,\n    158,\n    11,\n    6,\n    9,\n    7,\n    3,\n    56,\n    1,\n    2,\n    6,\n    3,\n    1,\n    3,\n    2,\n    10,\n    0,\n    11,\n    1,\n    3,\n    6,\n    4,\n    4,\n    193,\n    17,\n    10,\n    9,\n    5,\n    0,\n    82,\n    19,\n    13,\n    9,\n    214,\n    6,\n    3,\n    8,\n    28,\n    1,\n    83,\n    16,\n    16,\n    9,\n    82,\n    12,\n    9,\n    9,\n    84,\n    14,\n    5,\n    9,\n    243,\n    14,\n    166,\n    9,\n    71,\n    5,\n    2,\n    1,\n    3,\n    3,\n    2,\n    0,\n    2,\n    1,\n    13,\n    9,\n    120,\n    6,\n    3,\n    6,\n    4,\n    0,\n    29,\n    9,\n    41,\n    6,\n    2,\n    3,\n    9,\n    0,\n    10,\n    10,\n    47,\n    15,\n    406,\n    7,\n    2,\n    7,\n    17,\n    9,\n    57,\n    21,\n    2,\n    13,\n    123,\n    5,\n    4,\n    0,\n    2,\n    1,\n    2,\n    6,\n    2,\n    0,\n    9,\n    9,\n    49,\n    4,\n    2,\n    1,\n    2,\n    4,\n    9,\n    9,\n    330,\n    3,\n    10,\n    1,\n    2,\n    0,\n    49,\n    6,\n    4,\n    4,\n    14,\n    9,\n    5351,\n    0,\n    7,\n    14,\n    13835,\n    9,\n    87,\n    9,\n    39,\n    4,\n    60,\n    6,\n    26,\n    9,\n    1014,\n    0,\n    2,\n    54,\n    8,\n    3,\n    82,\n    0,\n    12,\n    1,\n    19628,\n    1,\n    4706,\n    45,\n    3,\n    22,\n    543,\n    4,\n    4,\n    5,\n    9,\n    7,\n    3,\n    6,\n    31,\n    3,\n    149,\n    2,\n    1418,\n    49,\n    513,\n    54,\n    5,\n    49,\n    9,\n    0,\n    15,\n    0,\n    23,\n    4,\n    2,\n    14,\n    1361,\n    6,\n    2,\n    16,\n    3,\n    6,\n    2,\n    1,\n    2,\n    4,\n    101,\n    0,\n    161,\n    6,\n    10,\n    9,\n    357,\n    0,\n    62,\n    13,\n    499,\n    13,\n    983,\n    6,\n    110,\n    6,\n    6,\n    9,\n    4759,\n    9,\n    787719,\n    239\n];\n// This file was generated. Do not modify manually!\nvar astralIdentifierStartCodes = [\n    0,\n    11,\n    2,\n    25,\n    2,\n    18,\n    2,\n    1,\n    2,\n    14,\n    3,\n    13,\n    35,\n    122,\n    70,\n    52,\n    268,\n    28,\n    4,\n    48,\n    48,\n    31,\n    14,\n    29,\n    6,\n    37,\n    11,\n    29,\n    3,\n    35,\n    5,\n    7,\n    2,\n    4,\n    43,\n    157,\n    19,\n    35,\n    5,\n    35,\n    5,\n    39,\n    9,\n    51,\n    13,\n    10,\n    2,\n    14,\n    2,\n    6,\n    2,\n    1,\n    2,\n    10,\n    2,\n    14,\n    2,\n    6,\n    2,\n    1,\n    68,\n    310,\n    10,\n    21,\n    11,\n    7,\n    25,\n    5,\n    2,\n    41,\n    2,\n    8,\n    70,\n    5,\n    3,\n    0,\n    2,\n    43,\n    2,\n    1,\n    4,\n    0,\n    3,\n    22,\n    11,\n    22,\n    10,\n    30,\n    66,\n    18,\n    2,\n    1,\n    11,\n    21,\n    11,\n    25,\n    71,\n    55,\n    7,\n    1,\n    65,\n    0,\n    16,\n    3,\n    2,\n    2,\n    2,\n    28,\n    43,\n    28,\n    4,\n    28,\n    36,\n    7,\n    2,\n    27,\n    28,\n    53,\n    11,\n    21,\n    11,\n    18,\n    14,\n    17,\n    111,\n    72,\n    56,\n    50,\n    14,\n    50,\n    14,\n    35,\n    349,\n    41,\n    7,\n    1,\n    79,\n    28,\n    11,\n    0,\n    9,\n    21,\n    43,\n    17,\n    47,\n    20,\n    28,\n    22,\n    13,\n    52,\n    58,\n    1,\n    3,\n    0,\n    14,\n    44,\n    33,\n    24,\n    27,\n    35,\n    30,\n    0,\n    3,\n    0,\n    9,\n    34,\n    4,\n    0,\n    13,\n    47,\n    15,\n    3,\n    22,\n    0,\n    2,\n    0,\n    36,\n    17,\n    2,\n    24,\n    20,\n    1,\n    64,\n    6,\n    2,\n    0,\n    2,\n    3,\n    2,\n    14,\n    2,\n    9,\n    8,\n    46,\n    39,\n    7,\n    3,\n    1,\n    3,\n    21,\n    2,\n    6,\n    2,\n    1,\n    2,\n    4,\n    4,\n    0,\n    19,\n    0,\n    13,\n    4,\n    159,\n    52,\n    19,\n    3,\n    21,\n    2,\n    31,\n    47,\n    21,\n    1,\n    2,\n    0,\n    185,\n    46,\n    42,\n    3,\n    37,\n    47,\n    21,\n    0,\n    60,\n    42,\n    14,\n    0,\n    72,\n    26,\n    38,\n    6,\n    186,\n    43,\n    117,\n    63,\n    32,\n    7,\n    3,\n    0,\n    3,\n    7,\n    2,\n    1,\n    2,\n    23,\n    16,\n    0,\n    2,\n    0,\n    95,\n    7,\n    3,\n    38,\n    17,\n    0,\n    2,\n    0,\n    29,\n    0,\n    11,\n    39,\n    8,\n    0,\n    22,\n    0,\n    12,\n    45,\n    20,\n    0,\n    19,\n    72,\n    264,\n    8,\n    2,\n    36,\n    18,\n    0,\n    50,\n    29,\n    113,\n    6,\n    2,\n    1,\n    2,\n    37,\n    22,\n    0,\n    26,\n    5,\n    2,\n    1,\n    2,\n    31,\n    15,\n    0,\n    328,\n    18,\n    16,\n    0,\n    2,\n    12,\n    2,\n    33,\n    125,\n    0,\n    80,\n    921,\n    103,\n    110,\n    18,\n    195,\n    2637,\n    96,\n    16,\n    1071,\n    18,\n    5,\n    4026,\n    582,\n    8634,\n    568,\n    8,\n    30,\n    18,\n    78,\n    18,\n    29,\n    19,\n    47,\n    17,\n    3,\n    32,\n    20,\n    6,\n    18,\n    689,\n    63,\n    129,\n    74,\n    6,\n    0,\n    67,\n    12,\n    65,\n    1,\n    2,\n    0,\n    29,\n    6135,\n    9,\n    1237,\n    43,\n    8,\n    8936,\n    3,\n    2,\n    6,\n    2,\n    1,\n    2,\n    290,\n    16,\n    0,\n    30,\n    2,\n    3,\n    0,\n    15,\n    3,\n    9,\n    395,\n    2309,\n    106,\n    6,\n    12,\n    4,\n    8,\n    8,\n    9,\n    5991,\n    84,\n    2,\n    70,\n    2,\n    1,\n    3,\n    0,\n    3,\n    1,\n    3,\n    3,\n    2,\n    11,\n    2,\n    0,\n    2,\n    6,\n    2,\n    64,\n    2,\n    3,\n    3,\n    7,\n    2,\n    6,\n    2,\n    27,\n    2,\n    3,\n    2,\n    4,\n    2,\n    0,\n    4,\n    6,\n    2,\n    339,\n    3,\n    24,\n    2,\n    24,\n    2,\n    30,\n    2,\n    24,\n    2,\n    30,\n    2,\n    24,\n    2,\n    30,\n    2,\n    24,\n    2,\n    30,\n    2,\n    24,\n    2,\n    7,\n    1845,\n    30,\n    7,\n    5,\n    262,\n    61,\n    147,\n    44,\n    11,\n    6,\n    17,\n    0,\n    322,\n    29,\n    19,\n    43,\n    485,\n    27,\n    757,\n    6,\n    2,\n    3,\n    2,\n    1,\n    2,\n    14,\n    2,\n    196,\n    60,\n    67,\n    8,\n    0,\n    1205,\n    3,\n    2,\n    26,\n    2,\n    1,\n    2,\n    0,\n    3,\n    0,\n    2,\n    9,\n    2,\n    3,\n    2,\n    0,\n    2,\n    0,\n    7,\n    0,\n    5,\n    0,\n    2,\n    0,\n    2,\n    0,\n    2,\n    2,\n    2,\n    1,\n    2,\n    0,\n    3,\n    0,\n    2,\n    0,\n    2,\n    0,\n    2,\n    0,\n    2,\n    0,\n    2,\n    1,\n    2,\n    0,\n    3,\n    3,\n    2,\n    6,\n    2,\n    3,\n    2,\n    3,\n    2,\n    0,\n    2,\n    9,\n    2,\n    16,\n    6,\n    2,\n    2,\n    4,\n    2,\n    16,\n    4421,\n    42719,\n    33,\n    4153,\n    7,\n    221,\n    3,\n    5761,\n    15,\n    7472,\n    16,\n    621,\n    2467,\n    541,\n    1507,\n    4938,\n    6,\n    4191\n];\n// This file was generated. Do not modify manually!\nvar nonASCIIidentifierChars = \"‌‍\\xb7̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･\";\n// This file was generated. Do not modify manually!\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\";\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range.\n// Reserved word lists for various dialects of the language\nvar reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n};\n// And the keywords\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\nvar keywords$1 = {\n    5: ecma5AndLessKeywords,\n    \"5module\": ecma5AndLessKeywords + \" export import\",\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n// ## Character categories\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n    var pos = 0x10000;\n    for(var i = 0; i < set.length; i += 2){\n        pos += set[i];\n        if (pos > code) {\n            return false;\n        }\n        pos += set[i + 1];\n        if (pos >= code) {\n            return true;\n        }\n    }\n    return false;\n}\n// Test whether a given character code starts an identifier.\nfunction isIdentifierStart(code, astral) {\n    if (code < 65) {\n        return code === 36;\n    }\n    if (code < 91) {\n        return true;\n    }\n    if (code < 97) {\n        return code === 95;\n    }\n    if (code < 123) {\n        return true;\n    }\n    if (code <= 0xffff) {\n        return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n    }\n    if (astral === false) {\n        return false;\n    }\n    return isInAstralSet(code, astralIdentifierStartCodes);\n}\n// Test whether a given character is part of an identifier.\nfunction isIdentifierChar(code, astral) {\n    if (code < 48) {\n        return code === 36;\n    }\n    if (code < 58) {\n        return true;\n    }\n    if (code < 65) {\n        return false;\n    }\n    if (code < 91) {\n        return true;\n    }\n    if (code < 97) {\n        return code === 95;\n    }\n    if (code < 123) {\n        return true;\n    }\n    if (code <= 0xffff) {\n        return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n    }\n    if (astral === false) {\n        return false;\n    }\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n// ## Token types\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\nvar TokenType = function TokenType(label, conf) {\n    if (conf === void 0) conf = {};\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop || null;\n    this.updateContext = null;\n};\nfunction binop(name, prec) {\n    return new TokenType(name, {\n        beforeExpr: true,\n        binop: prec\n    });\n}\nvar beforeExpr = {\n    beforeExpr: true\n}, startsExpr = {\n    startsExpr: true\n};\n// Map keyword names to token types.\nvar keywords = {};\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n    if (options === void 0) options = {};\n    options.keyword = name;\n    return keywords[name] = new TokenType(name, options);\n}\nvar types$1 = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    privateId: new TokenType(\"privateId\", startsExpr),\n    eof: new TokenType(\"eof\"),\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {\n        beforeExpr: true,\n        startsExpr: true\n    }),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {\n        beforeExpr: true,\n        startsExpr: true\n    }),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {\n        beforeExpr: true,\n        startsExpr: true\n    }),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    questionDot: new TokenType(\"?.\"),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    invalidTemplate: new TokenType(\"invalidTemplate\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {\n        beforeExpr: true,\n        startsExpr: true\n    }),\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n    eq: new TokenType(\"=\", {\n        beforeExpr: true,\n        isAssign: true\n    }),\n    assign: new TokenType(\"_=\", {\n        beforeExpr: true,\n        isAssign: true\n    }),\n    incDec: new TokenType(\"++/--\", {\n        prefix: true,\n        postfix: true,\n        startsExpr: true\n    }),\n    prefix: new TokenType(\"!/~\", {\n        beforeExpr: true,\n        prefix: true,\n        startsExpr: true\n    }),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=/===/!==\", 6),\n    relational: binop(\"</>/<=/>=\", 7),\n    bitShift: binop(\"<</>>/>>>\", 8),\n    plusMin: new TokenType(\"+/-\", {\n        beforeExpr: true,\n        binop: 9,\n        prefix: true,\n        startsExpr: true\n    }),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {\n        beforeExpr: true\n    }),\n    coalesce: binop(\"??\", 1),\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {\n        isLoop: true,\n        beforeExpr: true\n    }),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {\n        isLoop: true\n    }),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {\n        isLoop: true\n    }),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {\n        beforeExpr: true,\n        startsExpr: true\n    }),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\", startsExpr),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\", startsExpr),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {\n        beforeExpr: true,\n        binop: 7\n    }),\n    _instanceof: kw(\"instanceof\", {\n        beforeExpr: true,\n        binop: 7\n    }),\n    _typeof: kw(\"typeof\", {\n        beforeExpr: true,\n        prefix: true,\n        startsExpr: true\n    }),\n    _void: kw(\"void\", {\n        beforeExpr: true,\n        prefix: true,\n        startsExpr: true\n    }),\n    _delete: kw(\"delete\", {\n        beforeExpr: true,\n        prefix: true,\n        startsExpr: true\n    })\n};\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;\n}\nfunction nextLineBreak(code, from, end) {\n    if (end === void 0) end = code.length;\n    for(var i = from; i < end; i++){\n        var next = code.charCodeAt(i);\n        if (isNewLine(next)) {\n            return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1;\n        }\n    }\n    return -1;\n}\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\nvar hasOwn = Object.hasOwn || function(obj, propName) {\n    return hasOwnProperty.call(obj, propName);\n};\nvar isArray = Array.isArray || function(obj) {\n    return toString.call(obj) === \"[object Array]\";\n};\nvar regexpCache = Object.create(null);\nfunction wordsRegexp(words) {\n    return regexpCache[words] || (regexpCache[words] = new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\"));\n}\nfunction codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) {\n        return String.fromCharCode(code);\n    }\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n}\nvar loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\nvar Position = function Position(line, col) {\n    this.line = line;\n    this.column = col;\n};\nPosition.prototype.offset = function offset(n) {\n    return new Position(this.line, this.column + n);\n};\nvar SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start;\n    this.end = end;\n    if (p.sourceFile !== null) {\n        this.source = p.sourceFile;\n    }\n};\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\nfunction getLineInfo(input, offset) {\n    for(var line = 1, cur = 0;;){\n        var nextBreak = nextLineBreak(input, cur, offset);\n        if (nextBreak < 0) {\n            return new Position(line, offset - cur);\n        }\n        ++line;\n        cur = nextBreak;\n    }\n}\n// A second argument must be given to configure the parser process.\n// These options are recognized (only `ecmaVersion` is required):\nvar defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n    // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n    // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `\"latest\"`\n    // (the latest version the library supports). This influences\n    // support for strict mode, the set of reserved words, and support\n    // for new syntax features.\n    ecmaVersion: null,\n    // `sourceType` indicates the mode the code should be parsed in.\n    // Can be either `\"script\"` or `\"module\"`. This influences global\n    // strict mode and parsing of `import` and `export` declarations.\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called when\n    // a semicolon is automatically inserted. It will be passed the\n    // position of the inserted semicolon as an offset, and if\n    // `locations` is enabled, it is given the location as a `{line,\n    // column}` object as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program, and an import.meta expression\n    // in a script isn't considered an error.\n    allowImportExportEverywhere: false,\n    // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n    // When enabled, await identifiers are allowed to appear at the top-level scope,\n    // but they are still not allowed in non-async functions.\n    allowAwaitOutsideFunction: null,\n    // When enabled, super identifiers are not constrained to\n    // appearing in methods and do not raise an error when they appear elsewhere.\n    allowSuperOutsideMethod: null,\n    // When enabled, hashbang directive in the beginning of file is\n    // allowed and treated as a line comment. Enabled by default when\n    // `ecmaVersion` >= 2023.\n    allowHashBang: false,\n    // By default, the parser will verify that private properties are\n    // only used in places where they are valid and have been declared.\n    // Set this to false to turn such checks off.\n    checkPrivateFields: true,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    // When this option has an array as value, objects representing the\n    // comments are pushed to it.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false\n};\n// Interpret and default an options object\nvar warnedAboutEcmaVersion = false;\nfunction getOptions(opts) {\n    var options = {};\n    for(var opt in defaultOptions){\n        options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];\n    }\n    if (options.ecmaVersion === \"latest\") {\n        options.ecmaVersion = 1e8;\n    } else if (options.ecmaVersion == null) {\n        if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n            warnedAboutEcmaVersion = true;\n            console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n        }\n        options.ecmaVersion = 11;\n    } else if (options.ecmaVersion >= 2015) {\n        options.ecmaVersion -= 2009;\n    }\n    if (options.allowReserved == null) {\n        options.allowReserved = options.ecmaVersion < 5;\n    }\n    if (!opts || opts.allowHashBang == null) {\n        options.allowHashBang = options.ecmaVersion >= 14;\n    }\n    if (isArray(options.onToken)) {\n        var tokens = options.onToken;\n        options.onToken = function(token) {\n            return tokens.push(token);\n        };\n    }\n    if (isArray(options.onComment)) {\n        options.onComment = pushComment(options, options.onComment);\n    }\n    return options;\n}\nfunction pushComment(options, array) {\n    return function(block, text, start, end, startLoc, endLoc) {\n        var comment = {\n            type: block ? \"Block\" : \"Line\",\n            value: text,\n            start: start,\n            end: end\n        };\n        if (options.locations) {\n            comment.loc = new SourceLocation(this, startLoc, endLoc);\n        }\n        if (options.ranges) {\n            comment.range = [\n                start,\n                end\n            ];\n        }\n        array.push(comment);\n    };\n}\n// Each scope gets a bitset that may contain these flags\nvar SCOPE_TOP = 1, SCOPE_FUNCTION = 2, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW = 16, SCOPE_SIMPLE_CATCH = 32, SCOPE_SUPER = 64, SCOPE_DIRECT_SUPER = 128, SCOPE_CLASS_STATIC_BLOCK = 256, SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\nfunction functionFlags(async, generator) {\n    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);\n}\n// Used in checkLVal* and declareName to determine the type of a binding\nvar BIND_NONE = 0, BIND_VAR = 1, BIND_LEXICAL = 2, BIND_FUNCTION = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\nvar Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n    var reserved = \"\";\n    if (options.allowReserved !== true) {\n        reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n        if (options.sourceType === \"module\") {\n            reserved += \" await\";\n        }\n    }\n    this.reservedWords = wordsRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n    this.reservedWordsStrict = wordsRegexp(reservedStrict);\n    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n    this.input = String(input);\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n    // Set up token state\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n        this.pos = startPos;\n        this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n        this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n    } else {\n        this.pos = this.lineStart = 0;\n        this.curLine = 1;\n    }\n    // Properties of the current token:\n    // Its type\n    this.type = types$1.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n    // Figure out if it's a module code.\n    this.inModule = options.sourceType === \"module\";\n    this.strict = this.inModule || this.strictDirective(this.pos);\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n    this.potentialArrowInForAwait = false;\n    // Positions to delayed-check that yield/await does not exist in default parameters.\n    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n    // Labels in scope.\n    this.labels = [];\n    // Thus-far undefined exports.\n    this.undefinedExports = Object.create(null);\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\") {\n        this.skipLineComment(2);\n    }\n    // Scope tracking for duplicate variable names (see scope.js)\n    this.scopeStack = [];\n    this.enterScope(SCOPE_TOP);\n    // For RegExp validation\n    this.regexpState = null;\n    // The stack of private names.\n    // Each element has two properties: 'declared' and 'used'.\n    // When it exited from the outermost class definition, all used private names must be declared.\n    this.privateNameStack = [];\n};\nvar prototypeAccessors = {\n    inFunction: {\n        configurable: true\n    },\n    inGenerator: {\n        configurable: true\n    },\n    inAsync: {\n        configurable: true\n    },\n    canAwait: {\n        configurable: true\n    },\n    allowSuper: {\n        configurable: true\n    },\n    allowDirectSuper: {\n        configurable: true\n    },\n    treatFunctionsAsVar: {\n        configurable: true\n    },\n    allowNewDotTarget: {\n        configurable: true\n    },\n    inClassStaticBlock: {\n        configurable: true\n    }\n};\nParser.prototype.parse = function parse() {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node);\n};\nprototypeAccessors.inFunction.get = function() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n};\nprototypeAccessors.inGenerator.get = function() {\n    return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit;\n};\nprototypeAccessors.inAsync.get = function() {\n    return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit;\n};\nprototypeAccessors.canAwait.get = function() {\n    for(var i = this.scopeStack.length - 1; i >= 0; i--){\n        var scope = this.scopeStack[i];\n        if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) {\n            return false;\n        }\n        if (scope.flags & SCOPE_FUNCTION) {\n            return (scope.flags & SCOPE_ASYNC) > 0;\n        }\n    }\n    return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;\n};\nprototypeAccessors.allowSuper.get = function() {\n    var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n    return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;\n};\nprototypeAccessors.allowDirectSuper.get = function() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n};\nprototypeAccessors.treatFunctionsAsVar.get = function() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n};\nprototypeAccessors.allowNewDotTarget.get = function() {\n    var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n    return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit;\n};\nprototypeAccessors.inClassStaticBlock.get = function() {\n    return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0;\n};\nParser.extend = function extend() {\n    var plugins = [], len = arguments.length;\n    while(len--)plugins[len] = arguments[len];\n    var cls = this;\n    for(var i = 0; i < plugins.length; i++){\n        cls = plugins[i](cls);\n    }\n    return cls;\n};\nParser.parse = function parse(input, options) {\n    return new this(options, input).parse();\n};\nParser.parseExpressionAt = function parseExpressionAt(input, pos, options) {\n    var parser = new this(options, input, pos);\n    parser.nextToken();\n    return parser.parseExpression();\n};\nParser.tokenizer = function tokenizer(input, options) {\n    return new this(options, input);\n};\nObject.defineProperties(Parser.prototype, prototypeAccessors);\nvar pp$9 = Parser.prototype;\n// ## Parser utilities\nvar literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\npp$9.strictDirective = function(start) {\n    if (this.options.ecmaVersion < 5) {\n        return false;\n    }\n    for(;;){\n        // Try to find string literal.\n        skipWhiteSpace.lastIndex = start;\n        start += skipWhiteSpace.exec(this.input)[0].length;\n        var match = literal.exec(this.input.slice(start));\n        if (!match) {\n            return false;\n        }\n        if ((match[1] || match[2]) === \"use strict\") {\n            skipWhiteSpace.lastIndex = start + match[0].length;\n            var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n            var next = this.input.charAt(end);\n            return next === \";\" || next === \"}\" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\");\n        }\n        start += match[0].length;\n        // Skip semicolon, if any.\n        skipWhiteSpace.lastIndex = start;\n        start += skipWhiteSpace.exec(this.input)[0].length;\n        if (this.input[start] === \";\") {\n            start++;\n        }\n    }\n};\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\npp$9.eat = function(type) {\n    if (this.type === type) {\n        this.next();\n        return true;\n    } else {\n        return false;\n    }\n};\n// Tests whether parsed token is a contextual keyword.\npp$9.isContextual = function(name) {\n    return this.type === types$1.name && this.value === name && !this.containsEsc;\n};\n// Consumes contextual keyword if possible.\npp$9.eatContextual = function(name) {\n    if (!this.isContextual(name)) {\n        return false;\n    }\n    this.next();\n    return true;\n};\n// Asserts that following token is given contextual keyword.\npp$9.expectContextual = function(name) {\n    if (!this.eatContextual(name)) {\n        this.unexpected();\n    }\n};\n// Test whether a semicolon can be inserted at the current position.\npp$9.canInsertSemicolon = function() {\n    return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\npp$9.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n        if (this.options.onInsertedSemicolon) {\n            this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n        }\n        return true;\n    }\n};\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\npp$9.semicolon = function() {\n    if (!this.eat(types$1.semi) && !this.insertSemicolon()) {\n        this.unexpected();\n    }\n};\npp$9.afterTrailingComma = function(tokType, notNext) {\n    if (this.type === tokType) {\n        if (this.options.onTrailingComma) {\n            this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n        }\n        if (!notNext) {\n            this.next();\n        }\n        return true;\n    }\n};\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\npp$9.expect = function(type) {\n    this.eat(type) || this.unexpected();\n};\n// Raise an unexpected token error.\npp$9.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\nvar DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;\n};\npp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n    if (!refDestructuringErrors) {\n        return;\n    }\n    if (refDestructuringErrors.trailingComma > -1) {\n        this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\");\n    }\n    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n    if (parens > -1) {\n        this.raiseRecoverable(parens, isAssign ? \"Assigning to rvalue\" : \"Parenthesized pattern\");\n    }\n};\npp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    if (!refDestructuringErrors) {\n        return false;\n    }\n    var shorthandAssign = refDestructuringErrors.shorthandAssign;\n    var doubleProto = refDestructuringErrors.doubleProto;\n    if (!andThrow) {\n        return shorthandAssign >= 0 || doubleProto >= 0;\n    }\n    if (shorthandAssign >= 0) {\n        this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\");\n    }\n    if (doubleProto >= 0) {\n        this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\");\n    }\n};\npp$9.checkYieldAwaitInDefaultParams = function() {\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {\n        this.raise(this.yieldPos, \"Yield expression cannot be a default value\");\n    }\n    if (this.awaitPos) {\n        this.raise(this.awaitPos, \"Await expression cannot be a default value\");\n    }\n};\npp$9.isSimpleAssignTarget = function(expr) {\n    if (expr.type === \"ParenthesizedExpression\") {\n        return this.isSimpleAssignTarget(expr.expression);\n    }\n    return expr.type === \"Identifier\" || expr.type === \"MemberExpression\";\n};\nvar pp$8 = Parser.prototype;\n// ### Statement parsing\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\npp$8.parseTopLevel = function(node) {\n    var exports = Object.create(null);\n    if (!node.body) {\n        node.body = [];\n    }\n    while(this.type !== types$1.eof){\n        var stmt = this.parseStatement(null, true, exports);\n        node.body.push(stmt);\n    }\n    if (this.inModule) {\n        for(var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1){\n            var name = list[i];\n            this.raiseRecoverable(this.undefinedExports[name].start, \"Export '\" + name + \"' is not defined\");\n        }\n    }\n    this.adaptDirectivePrologue(node.body);\n    this.next();\n    node.sourceType = this.options.sourceType;\n    return this.finishNode(node, \"Program\");\n};\nvar loopLabel = {\n    kind: \"loop\"\n}, switchLabel = {\n    kind: \"switch\"\n};\npp$8.isLet = function(context) {\n    if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) {\n        return false;\n    }\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === 91 || nextCh === 92) {\n        return true;\n    } // '[', '/'\n    if (context) {\n        return false;\n    }\n    if (nextCh === 123 || nextCh > 0xd7ff && nextCh < 0xdc00) {\n        return true;\n    } // '{', astral\n    if (isIdentifierStart(nextCh, true)) {\n        var pos = next + 1;\n        while(isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)){\n            ++pos;\n        }\n        if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) {\n            return true;\n        }\n        var ident = this.input.slice(next, pos);\n        if (!keywordRelationalOperator.test(ident)) {\n            return true;\n        }\n    }\n    return false;\n};\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$8.isAsyncFunction = function() {\n    if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\")) {\n        return false;\n    }\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, after;\n    return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === \"function\" && (next + 8 === this.input.length || !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00));\n};\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\npp$8.parseStatement = function(context, topLevel, exports) {\n    var starttype = this.type, node = this.startNode(), kind;\n    if (this.isLet(context)) {\n        starttype = types$1._var;\n        kind = \"let\";\n    }\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n    switch(starttype){\n        case types$1._break:\n        case types$1._continue:\n            return this.parseBreakContinueStatement(node, starttype.keyword);\n        case types$1._debugger:\n            return this.parseDebuggerStatement(node);\n        case types$1._do:\n            return this.parseDoStatement(node);\n        case types$1._for:\n            return this.parseForStatement(node);\n        case types$1._function:\n            // Function as sole body of either an if statement or a labeled statement\n            // works, but not when it is part of a labeled statement that is the sole\n            // body of an if statement.\n            if (context && (this.strict || context !== \"if\" && context !== \"label\") && this.options.ecmaVersion >= 6) {\n                this.unexpected();\n            }\n            return this.parseFunctionStatement(node, false, !context);\n        case types$1._class:\n            if (context) {\n                this.unexpected();\n            }\n            return this.parseClass(node, true);\n        case types$1._if:\n            return this.parseIfStatement(node);\n        case types$1._return:\n            return this.parseReturnStatement(node);\n        case types$1._switch:\n            return this.parseSwitchStatement(node);\n        case types$1._throw:\n            return this.parseThrowStatement(node);\n        case types$1._try:\n            return this.parseTryStatement(node);\n        case types$1._const:\n        case types$1._var:\n            kind = kind || this.value;\n            if (context && kind !== \"var\") {\n                this.unexpected();\n            }\n            return this.parseVarStatement(node, kind);\n        case types$1._while:\n            return this.parseWhileStatement(node);\n        case types$1._with:\n            return this.parseWithStatement(node);\n        case types$1.braceL:\n            return this.parseBlock(true, node);\n        case types$1.semi:\n            return this.parseEmptyStatement(node);\n        case types$1._export:\n        case types$1._import:\n            if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\n                skipWhiteSpace.lastIndex = this.pos;\n                var skip = skipWhiteSpace.exec(this.input);\n                var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n                if (nextCh === 40 || nextCh === 46) {\n                    return this.parseExpressionStatement(node, this.parseExpression());\n                }\n            }\n            if (!this.options.allowImportExportEverywhere) {\n                if (!topLevel) {\n                    this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n                }\n                if (!this.inModule) {\n                    this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n                }\n            }\n            return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports);\n        // If the statement does not start with a statement keyword or a\n        // brace, it's an ExpressionStatement or LabeledStatement. We\n        // simply start parsing an expression, and afterwards, if the\n        // next token is a colon and the expression was a simple\n        // Identifier node, we switch to interpreting it as a label.\n        default:\n            if (this.isAsyncFunction()) {\n                if (context) {\n                    this.unexpected();\n                }\n                this.next();\n                return this.parseFunctionStatement(node, true, !context);\n            }\n            var maybeName = this.value, expr = this.parseExpression();\n            if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n                return this.parseLabeledStatement(node, maybeName, expr, context);\n            } else {\n                return this.parseExpressionStatement(node, expr);\n            }\n    }\n};\npp$8.parseBreakContinueStatement = function(node, keyword) {\n    var isBreak = keyword === \"break\";\n    this.next();\n    if (this.eat(types$1.semi) || this.insertSemicolon()) {\n        node.label = null;\n    } else if (this.type !== types$1.name) {\n        this.unexpected();\n    } else {\n        node.label = this.parseIdent();\n        this.semicolon();\n    }\n    // Verify that there is an actual destination to break or\n    // continue to.\n    var i = 0;\n    for(; i < this.labels.length; ++i){\n        var lab = this.labels[i];\n        if (node.label == null || lab.name === node.label.name) {\n            if (lab.kind != null && (isBreak || lab.kind === \"loop\")) {\n                break;\n            }\n            if (node.label && isBreak) {\n                break;\n            }\n        }\n    }\n    if (i === this.labels.length) {\n        this.raise(node.start, \"Unsyntactic \" + keyword);\n    }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\npp$8.parseDebuggerStatement = function(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n};\npp$8.parseDoStatement = function(node) {\n    this.next();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"do\");\n    this.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseParenExpression();\n    if (this.options.ecmaVersion >= 6) {\n        this.eat(types$1.semi);\n    } else {\n        this.semicolon();\n    }\n    return this.finishNode(node, \"DoWhileStatement\");\n};\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\npp$8.parseForStatement = function(node) {\n    this.next();\n    var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\") ? this.lastTokStart : -1;\n    this.labels.push(loopLabel);\n    this.enterScope(0);\n    this.expect(types$1.parenL);\n    if (this.type === types$1.semi) {\n        if (awaitAt > -1) {\n            this.unexpected(awaitAt);\n        }\n        return this.parseFor(node, null);\n    }\n    var isLet = this.isLet();\n    if (this.type === types$1._var || this.type === types$1._const || isLet) {\n        var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n        this.next();\n        this.parseVar(init$1, true, kind);\n        this.finishNode(init$1, \"VariableDeclaration\");\n        if ((this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && init$1.declarations.length === 1) {\n            if (this.options.ecmaVersion >= 9) {\n                if (this.type === types$1._in) {\n                    if (awaitAt > -1) {\n                        this.unexpected(awaitAt);\n                    }\n                } else {\n                    node.await = awaitAt > -1;\n                }\n            }\n            return this.parseForIn(node, init$1);\n        }\n        if (awaitAt > -1) {\n            this.unexpected(awaitAt);\n        }\n        return this.parseFor(node, init$1);\n    }\n    var startsWithLet = this.isContextual(\"let\"), isForOf = false;\n    var refDestructuringErrors = new DestructuringErrors;\n    var init = this.parseExpression(awaitAt > -1 ? \"await\" : true, refDestructuringErrors);\n    if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n        if (this.options.ecmaVersion >= 9) {\n            if (this.type === types$1._in) {\n                if (awaitAt > -1) {\n                    this.unexpected(awaitAt);\n                }\n            } else {\n                node.await = awaitAt > -1;\n            }\n        }\n        if (startsWithLet && isForOf) {\n            this.raise(init.start, \"The left-hand side of a for-of loop may not start with 'let'.\");\n        }\n        this.toAssignable(init, false, refDestructuringErrors);\n        this.checkLValPattern(init);\n        return this.parseForIn(node, init);\n    } else {\n        this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n    if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n};\npp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);\n};\npp$8.parseIfStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    // allow function declarations in branches, but only in non-strict mode\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n};\npp$8.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction) {\n        this.raise(this.start, \"'return' outside of function\");\n    }\n    this.next();\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n    if (this.eat(types$1.semi) || this.insertSemicolon()) {\n        node.argument = null;\n    } else {\n        node.argument = this.parseExpression();\n        this.semicolon();\n    }\n    return this.finishNode(node, \"ReturnStatement\");\n};\npp$8.parseSwitchStatement = function(node) {\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.expect(types$1.braceL);\n    this.labels.push(switchLabel);\n    this.enterScope(0);\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n    var cur;\n    for(var sawDefault = false; this.type !== types$1.braceR;){\n        if (this.type === types$1._case || this.type === types$1._default) {\n            var isCase = this.type === types$1._case;\n            if (cur) {\n                this.finishNode(cur, \"SwitchCase\");\n            }\n            node.cases.push(cur = this.startNode());\n            cur.consequent = [];\n            this.next();\n            if (isCase) {\n                cur.test = this.parseExpression();\n            } else {\n                if (sawDefault) {\n                    this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\");\n                }\n                sawDefault = true;\n                cur.test = null;\n            }\n            this.expect(types$1.colon);\n        } else {\n            if (!cur) {\n                this.unexpected();\n            }\n            cur.consequent.push(this.parseStatement(null));\n        }\n    }\n    this.exitScope();\n    if (cur) {\n        this.finishNode(cur, \"SwitchCase\");\n    }\n    this.next(); // Closing brace\n    this.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n};\npp$8.parseThrowStatement = function(node) {\n    this.next();\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {\n        this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n};\n// Reused empty array added for node fields that are always empty.\nvar empty$1 = [];\npp$8.parseCatchClauseParam = function() {\n    var param = this.parseBindingAtom();\n    var simple = param.type === \"Identifier\";\n    this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n    this.expect(types$1.parenR);\n    return param;\n};\npp$8.parseTryStatement = function(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.type === types$1._catch) {\n        var clause = this.startNode();\n        this.next();\n        if (this.eat(types$1.parenL)) {\n            clause.param = this.parseCatchClauseParam();\n        } else {\n            if (this.options.ecmaVersion < 10) {\n                this.unexpected();\n            }\n            clause.param = null;\n            this.enterScope(0);\n        }\n        clause.body = this.parseBlock(false);\n        this.exitScope();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) {\n        this.raise(node.start, \"Missing catch or finally clause\");\n    }\n    return this.finishNode(node, \"TryStatement\");\n};\npp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n};\npp$8.parseWhileStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"while\");\n    this.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n};\npp$8.parseWithStatement = function(node) {\n    if (this.strict) {\n        this.raise(this.start, \"'with' in strict mode\");\n    }\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement(\"with\");\n    return this.finishNode(node, \"WithStatement\");\n};\npp$8.parseEmptyStatement = function(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n};\npp$8.parseLabeledStatement = function(node, maybeName, expr, context) {\n    for(var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1){\n        var label = list[i$1];\n        if (label.name === maybeName) {\n            this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n        }\n    }\n    var kind = this.type.isLoop ? \"loop\" : this.type === types$1._switch ? \"switch\" : null;\n    for(var i = this.labels.length - 1; i >= 0; i--){\n        var label$1 = this.labels[i];\n        if (label$1.statementStart === node.start) {\n            // Update information about previous labels on this node\n            label$1.statementStart = this.start;\n            label$1.kind = kind;\n        } else {\n            break;\n        }\n    }\n    this.labels.push({\n        name: maybeName,\n        kind: kind,\n        statementStart: this.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n};\npp$8.parseExpressionStatement = function(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n};\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\npp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n    if (createNewLexicalScope === void 0) createNewLexicalScope = true;\n    if (node === void 0) node = this.startNode();\n    node.body = [];\n    this.expect(types$1.braceL);\n    if (createNewLexicalScope) {\n        this.enterScope(0);\n    }\n    while(this.type !== types$1.braceR){\n        var stmt = this.parseStatement(null);\n        node.body.push(stmt);\n    }\n    if (exitStrict) {\n        this.strict = false;\n    }\n    this.next();\n    if (createNewLexicalScope) {\n        this.exitScope();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n};\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\npp$8.parseFor = function(node, init) {\n    node.init = init;\n    this.expect(types$1.semi);\n    node.test = this.type === types$1.semi ? null : this.parseExpression();\n    this.expect(types$1.semi);\n    node.update = this.type === types$1.parenR ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n};\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\npp$8.parseForIn = function(node, init) {\n    var isForIn = this.type === types$1._in;\n    this.next();\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n        this.raise(init.start, (isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\");\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types$1.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n};\n// Parse a list of variable declarations.\npp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {\n    node.declarations = [];\n    node.kind = kind;\n    for(;;){\n        var decl = this.startNode();\n        this.parseVarId(decl, kind);\n        if (this.eat(types$1.eq)) {\n            decl.init = this.parseMaybeAssign(isFor);\n        } else if (!allowMissingInitializer && kind === \"const\" && !(this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n            this.unexpected();\n        } else if (!allowMissingInitializer && decl.id.type !== \"Identifier\" && !(isFor && (this.type === types$1._in || this.isContextual(\"of\")))) {\n            this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n        } else {\n            decl.init = null;\n        }\n        node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n        if (!this.eat(types$1.comma)) {\n            break;\n        }\n    }\n    return node;\n};\npp$8.parseVarId = function(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\nvar FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n        if (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT) {\n            this.unexpected();\n        }\n        node.generator = this.eat(types$1.star);\n    }\n    if (this.options.ecmaVersion >= 8) {\n        node.async = !!isAsync;\n    }\n    if (statement & FUNC_STATEMENT) {\n        node.id = statement & FUNC_NULLABLE_ID && this.type !== types$1.name ? null : this.parseIdent();\n        if (node.id && !(statement & FUNC_HANGING_STATEMENT)) // If it is a regular function declaration in sloppy mode, then it is\n        // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n        // mode depends on properties of the current scope (see\n        // treatFunctionsAsVar).\n        {\n            this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);\n        }\n    }\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(node.async, node.generator));\n    if (!(statement & FUNC_STATEMENT)) {\n        node.id = this.type === types$1.name ? this.parseIdent() : null;\n    }\n    this.parseFunctionParams(node);\n    this.parseFunctionBody(node, allowExpressionBody, false, forInit);\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, statement & FUNC_STATEMENT ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\npp$8.parseFunctionParams = function(node) {\n    this.expect(types$1.parenL);\n    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n};\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\npp$8.parseClass = function(node, isStatement) {\n    this.next();\n    // ecma-262 14.6 Class Definitions\n    // A class definition is always strict mode code.\n    var oldStrict = this.strict;\n    this.strict = true;\n    this.parseClassId(node, isStatement);\n    this.parseClassSuper(node);\n    var privateNameMap = this.enterClassBody();\n    var classBody = this.startNode();\n    var hadConstructor = false;\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    while(this.type !== types$1.braceR){\n        var element = this.parseClassElement(node.superClass !== null);\n        if (element) {\n            classBody.body.push(element);\n            if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n                if (hadConstructor) {\n                    this.raiseRecoverable(element.start, \"Duplicate constructor in the same class\");\n                }\n                hadConstructor = true;\n            } else if (element.key && element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\n                this.raiseRecoverable(element.key.start, \"Identifier '#\" + element.key.name + \"' has already been declared\");\n            }\n        }\n    }\n    this.strict = oldStrict;\n    this.next();\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    this.exitClassBody();\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\npp$8.parseClassElement = function(constructorAllowsSuper) {\n    if (this.eat(types$1.semi)) {\n        return null;\n    }\n    var ecmaVersion = this.options.ecmaVersion;\n    var node = this.startNode();\n    var keyName = \"\";\n    var isGenerator = false;\n    var isAsync = false;\n    var kind = \"method\";\n    var isStatic = false;\n    if (this.eatContextual(\"static\")) {\n        // Parse static init block\n        if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\n            this.parseClassStaticBlock(node);\n            return node;\n        }\n        if (this.isClassElementNameStart() || this.type === types$1.star) {\n            isStatic = true;\n        } else {\n            keyName = \"static\";\n        }\n    }\n    node.static = isStatic;\n    if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n        if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\n            isAsync = true;\n        } else {\n            keyName = \"async\";\n        }\n    }\n    if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\n        isGenerator = true;\n    }\n    if (!keyName && !isAsync && !isGenerator) {\n        var lastValue = this.value;\n        if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n            if (this.isClassElementNameStart()) {\n                kind = lastValue;\n            } else {\n                keyName = lastValue;\n            }\n        }\n    }\n    // Parse element name\n    if (keyName) {\n        // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n        // The last token is any of those. Make it the element name.\n        node.computed = false;\n        node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\n        node.key.name = keyName;\n        this.finishNode(node.key, \"Identifier\");\n    } else {\n        this.parseClassElementName(node);\n    }\n    // Parse element value\n    if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== \"method\" || isGenerator || isAsync) {\n        var isConstructor = !node.static && checkKeyName(node, \"constructor\");\n        var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n        // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n        if (isConstructor && kind !== \"method\") {\n            this.raise(node.key.start, \"Constructor can't have get/set modifier\");\n        }\n        node.kind = isConstructor ? \"constructor\" : kind;\n        this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\n    } else {\n        this.parseClassField(node);\n    }\n    return node;\n};\npp$8.isClassElementNameStart = function() {\n    return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;\n};\npp$8.parseClassElementName = function(element) {\n    if (this.type === types$1.privateId) {\n        if (this.value === \"constructor\") {\n            this.raise(this.start, \"Classes can't have an element named '#constructor'\");\n        }\n        element.computed = false;\n        element.key = this.parsePrivateIdent();\n    } else {\n        this.parsePropertyName(element);\n    }\n};\npp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n    // Check key and flags\n    var key = method.key;\n    if (method.kind === \"constructor\") {\n        if (isGenerator) {\n            this.raise(key.start, \"Constructor can't be a generator\");\n        }\n        if (isAsync) {\n            this.raise(key.start, \"Constructor can't be an async method\");\n        }\n    } else if (method.static && checkKeyName(method, \"prototype\")) {\n        this.raise(key.start, \"Classes may not have a static property named prototype\");\n    }\n    // Parse value\n    var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n    // Check value\n    if (method.kind === \"get\" && value.params.length !== 0) {\n        this.raiseRecoverable(value.start, \"getter should have no params\");\n    }\n    if (method.kind === \"set\" && value.params.length !== 1) {\n        this.raiseRecoverable(value.start, \"setter should have exactly one param\");\n    }\n    if (method.kind === \"set\" && value.params[0].type === \"RestElement\") {\n        this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\");\n    }\n    return this.finishNode(method, \"MethodDefinition\");\n};\npp$8.parseClassField = function(field) {\n    if (checkKeyName(field, \"constructor\")) {\n        this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\n    } else if (field.static && checkKeyName(field, \"prototype\")) {\n        this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\n    }\n    if (this.eat(types$1.eq)) {\n        // To raise SyntaxError if 'arguments' exists in the initializer.\n        var scope = this.currentThisScope();\n        var inClassFieldInit = scope.inClassFieldInit;\n        scope.inClassFieldInit = true;\n        field.value = this.parseMaybeAssign();\n        scope.inClassFieldInit = inClassFieldInit;\n    } else {\n        field.value = null;\n    }\n    this.semicolon();\n    return this.finishNode(field, \"PropertyDefinition\");\n};\npp$8.parseClassStaticBlock = function(node) {\n    node.body = [];\n    var oldLabels = this.labels;\n    this.labels = [];\n    this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\n    while(this.type !== types$1.braceR){\n        var stmt = this.parseStatement(null);\n        node.body.push(stmt);\n    }\n    this.next();\n    this.exitScope();\n    this.labels = oldLabels;\n    return this.finishNode(node, \"StaticBlock\");\n};\npp$8.parseClassId = function(node, isStatement) {\n    if (this.type === types$1.name) {\n        node.id = this.parseIdent();\n        if (isStatement) {\n            this.checkLValSimple(node.id, BIND_LEXICAL, false);\n        }\n    } else {\n        if (isStatement === true) {\n            this.unexpected();\n        }\n        node.id = null;\n    }\n};\npp$8.parseClassSuper = function(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;\n};\npp$8.enterClassBody = function() {\n    var element = {\n        declared: Object.create(null),\n        used: []\n    };\n    this.privateNameStack.push(element);\n    return element.declared;\n};\npp$8.exitClassBody = function() {\n    var ref = this.privateNameStack.pop();\n    var declared = ref.declared;\n    var used = ref.used;\n    if (!this.options.checkPrivateFields) {\n        return;\n    }\n    var len = this.privateNameStack.length;\n    var parent = len === 0 ? null : this.privateNameStack[len - 1];\n    for(var i = 0; i < used.length; ++i){\n        var id = used[i];\n        if (!hasOwn(declared, id.name)) {\n            if (parent) {\n                parent.used.push(id);\n            } else {\n                this.raiseRecoverable(id.start, \"Private field '#\" + id.name + \"' must be declared in an enclosing class\");\n            }\n        }\n    }\n};\nfunction isPrivateNameConflicted(privateNameMap, element) {\n    var name = element.key.name;\n    var curr = privateNameMap[name];\n    var next = \"true\";\n    if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\n        next = (element.static ? \"s\" : \"i\") + element.kind;\n    }\n    // `class { get #a(){}; static set #a(_){} }` is also conflict.\n    if (curr === \"iget\" && next === \"iset\" || curr === \"iset\" && next === \"iget\" || curr === \"sget\" && next === \"sset\" || curr === \"sset\" && next === \"sget\") {\n        privateNameMap[name] = \"true\";\n        return false;\n    } else if (!curr) {\n        privateNameMap[name] = next;\n        return false;\n    } else {\n        return true;\n    }\n}\nfunction checkKeyName(node, name) {\n    var computed = node.computed;\n    var key = node.key;\n    return !computed && (key.type === \"Identifier\" && key.name === name || key.type === \"Literal\" && key.value === name);\n}\n// Parses module export declaration.\npp$8.parseExportAllDeclaration = function(node, exports) {\n    if (this.options.ecmaVersion >= 11) {\n        if (this.eatContextual(\"as\")) {\n            node.exported = this.parseModuleExportName();\n            this.checkExport(exports, node.exported, this.lastTokStart);\n        } else {\n            node.exported = null;\n        }\n    }\n    this.expectContextual(\"from\");\n    if (this.type !== types$1.string) {\n        this.unexpected();\n    }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n};\npp$8.parseExport = function(node, exports) {\n    this.next();\n    // export * from '...'\n    if (this.eat(types$1.star)) {\n        return this.parseExportAllDeclaration(node, exports);\n    }\n    if (this.eat(types$1._default)) {\n        this.checkExport(exports, \"default\", this.lastTokStart);\n        node.declaration = this.parseExportDefaultDeclaration();\n        return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n        node.declaration = this.parseExportDeclaration(node);\n        if (node.declaration.type === \"VariableDeclaration\") {\n            this.checkVariableExport(exports, node.declaration.declarations);\n        } else {\n            this.checkExport(exports, node.declaration.id, node.declaration.id.start);\n        }\n        node.specifiers = [];\n        node.source = null;\n    } else {\n        node.declaration = null;\n        node.specifiers = this.parseExportSpecifiers(exports);\n        if (this.eatContextual(\"from\")) {\n            if (this.type !== types$1.string) {\n                this.unexpected();\n            }\n            node.source = this.parseExprAtom();\n        } else {\n            for(var i = 0, list = node.specifiers; i < list.length; i += 1){\n                // check for keywords used as local names\n                var spec = list[i];\n                this.checkUnreserved(spec.local);\n                // check if export is defined\n                this.checkLocalExport(spec.local);\n                if (spec.local.type === \"Literal\") {\n                    this.raise(spec.local.start, \"A string literal cannot be used as an exported binding without `from`.\");\n                }\n            }\n            node.source = null;\n        }\n        this.semicolon();\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\");\n};\npp$8.parseExportDeclaration = function(node) {\n    return this.parseStatement(null);\n};\npp$8.parseExportDefaultDeclaration = function() {\n    var isAsync;\n    if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\n        var fNode = this.startNode();\n        this.next();\n        if (isAsync) {\n            this.next();\n        }\n        return this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n    } else if (this.type === types$1._class) {\n        var cNode = this.startNode();\n        return this.parseClass(cNode, \"nullableID\");\n    } else {\n        var declaration = this.parseMaybeAssign();\n        this.semicolon();\n        return declaration;\n    }\n};\npp$8.checkExport = function(exports, name, pos) {\n    if (!exports) {\n        return;\n    }\n    if (typeof name !== \"string\") {\n        name = name.type === \"Identifier\" ? name.name : name.value;\n    }\n    if (hasOwn(exports, name)) {\n        this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\");\n    }\n    exports[name] = true;\n};\npp$8.checkPatternExport = function(exports, pat) {\n    var type = pat.type;\n    if (type === \"Identifier\") {\n        this.checkExport(exports, pat, pat.start);\n    } else if (type === \"ObjectPattern\") {\n        for(var i = 0, list = pat.properties; i < list.length; i += 1){\n            var prop = list[i];\n            this.checkPatternExport(exports, prop);\n        }\n    } else if (type === \"ArrayPattern\") {\n        for(var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1){\n            var elt = list$1[i$1];\n            if (elt) {\n                this.checkPatternExport(exports, elt);\n            }\n        }\n    } else if (type === \"Property\") {\n        this.checkPatternExport(exports, pat.value);\n    } else if (type === \"AssignmentPattern\") {\n        this.checkPatternExport(exports, pat.left);\n    } else if (type === \"RestElement\") {\n        this.checkPatternExport(exports, pat.argument);\n    }\n};\npp$8.checkVariableExport = function(exports, decls) {\n    if (!exports) {\n        return;\n    }\n    for(var i = 0, list = decls; i < list.length; i += 1){\n        var decl = list[i];\n        this.checkPatternExport(exports, decl.id);\n    }\n};\npp$8.shouldParseExportStatement = function() {\n    return this.type.keyword === \"var\" || this.type.keyword === \"const\" || this.type.keyword === \"class\" || this.type.keyword === \"function\" || this.isLet() || this.isAsyncFunction();\n};\n// Parses a comma-separated list of module exports.\npp$8.parseExportSpecifier = function(exports) {\n    var node = this.startNode();\n    node.local = this.parseModuleExportName();\n    node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local;\n    this.checkExport(exports, node.exported, node.exported.start);\n    return this.finishNode(node, \"ExportSpecifier\");\n};\npp$8.parseExportSpecifiers = function(exports) {\n    var nodes = [], first = true;\n    // export { x, y as z } [from '...']\n    this.expect(types$1.braceL);\n    while(!this.eat(types$1.braceR)){\n        if (!first) {\n            this.expect(types$1.comma);\n            if (this.afterTrailingComma(types$1.braceR)) {\n                break;\n            }\n        } else {\n            first = false;\n        }\n        nodes.push(this.parseExportSpecifier(exports));\n    }\n    return nodes;\n};\n// Parses import declaration.\npp$8.parseImport = function(node) {\n    this.next();\n    // import '...'\n    if (this.type === types$1.string) {\n        node.specifiers = empty$1;\n        node.source = this.parseExprAtom();\n    } else {\n        node.specifiers = this.parseImportSpecifiers();\n        this.expectContextual(\"from\");\n        node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n};\n// Parses a comma-separated list of module imports.\npp$8.parseImportSpecifier = function() {\n    var node = this.startNode();\n    node.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n        node.local = this.parseIdent();\n    } else {\n        this.checkUnreserved(node.imported);\n        node.local = node.imported;\n    }\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    return this.finishNode(node, \"ImportSpecifier\");\n};\npp$8.parseImportDefaultSpecifier = function() {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    return this.finishNode(node, \"ImportDefaultSpecifier\");\n};\npp$8.parseImportNamespaceSpecifier = function() {\n    var node = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    return this.finishNode(node, \"ImportNamespaceSpecifier\");\n};\npp$8.parseImportSpecifiers = function() {\n    var nodes = [], first = true;\n    if (this.type === types$1.name) {\n        nodes.push(this.parseImportDefaultSpecifier());\n        if (!this.eat(types$1.comma)) {\n            return nodes;\n        }\n    }\n    if (this.type === types$1.star) {\n        nodes.push(this.parseImportNamespaceSpecifier());\n        return nodes;\n    }\n    this.expect(types$1.braceL);\n    while(!this.eat(types$1.braceR)){\n        if (!first) {\n            this.expect(types$1.comma);\n            if (this.afterTrailingComma(types$1.braceR)) {\n                break;\n            }\n        } else {\n            first = false;\n        }\n        nodes.push(this.parseImportSpecifier());\n    }\n    return nodes;\n};\npp$8.parseModuleExportName = function() {\n    if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\n        var stringLiteral = this.parseLiteral(this.value);\n        if (loneSurrogate.test(stringLiteral.value)) {\n            this.raise(stringLiteral.start, \"An export name cannot include a lone surrogate.\");\n        }\n        return stringLiteral;\n    }\n    return this.parseIdent(true);\n};\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$8.adaptDirectivePrologue = function(statements) {\n    for(var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i){\n        statements[i].directive = statements[i].expression.raw.slice(1, -1);\n    }\n};\npp$8.isDirectiveCandidate = function(statement) {\n    return this.options.ecmaVersion >= 5 && statement.type === \"ExpressionStatement\" && statement.expression.type === \"Literal\" && typeof statement.expression.value === \"string\" && // Reject parenthesized strings.\n    (this.input[statement.start] === '\"' || this.input[statement.start] === \"'\");\n};\nvar pp$7 = Parser.prototype;\n// Convert existing expression atom to assignable pattern\n// if possible.\npp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 6 && node) {\n        switch(node.type){\n            case \"Identifier\":\n                if (this.inAsync && node.name === \"await\") {\n                    this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\");\n                }\n                break;\n            case \"ObjectPattern\":\n            case \"ArrayPattern\":\n            case \"AssignmentPattern\":\n            case \"RestElement\":\n                break;\n            case \"ObjectExpression\":\n                node.type = \"ObjectPattern\";\n                if (refDestructuringErrors) {\n                    this.checkPatternErrors(refDestructuringErrors, true);\n                }\n                for(var i = 0, list = node.properties; i < list.length; i += 1){\n                    var prop = list[i];\n                    this.toAssignable(prop, isBinding);\n                    // Early error:\n                    //   AssignmentRestProperty[Yield, Await] :\n                    //     `...` DestructuringAssignmentTarget[Yield, Await]\n                    //\n                    //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n                    if (prop.type === \"RestElement\" && (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")) {\n                        this.raise(prop.argument.start, \"Unexpected token\");\n                    }\n                }\n                break;\n            case \"Property\":\n                // AssignmentProperty has type === \"Property\"\n                if (node.kind !== \"init\") {\n                    this.raise(node.key.start, \"Object pattern can't contain getter or setter\");\n                }\n                this.toAssignable(node.value, isBinding);\n                break;\n            case \"ArrayExpression\":\n                node.type = \"ArrayPattern\";\n                if (refDestructuringErrors) {\n                    this.checkPatternErrors(refDestructuringErrors, true);\n                }\n                this.toAssignableList(node.elements, isBinding);\n                break;\n            case \"SpreadElement\":\n                node.type = \"RestElement\";\n                this.toAssignable(node.argument, isBinding);\n                if (node.argument.type === \"AssignmentPattern\") {\n                    this.raise(node.argument.start, \"Rest elements cannot have a default value\");\n                }\n                break;\n            case \"AssignmentExpression\":\n                if (node.operator !== \"=\") {\n                    this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n                }\n                node.type = \"AssignmentPattern\";\n                delete node.operator;\n                this.toAssignable(node.left, isBinding);\n                break;\n            case \"ParenthesizedExpression\":\n                this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n                break;\n            case \"ChainExpression\":\n                this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n                break;\n            case \"MemberExpression\":\n                if (!isBinding) {\n                    break;\n                }\n            default:\n                this.raise(node.start, \"Assigning to rvalue\");\n        }\n    } else if (refDestructuringErrors) {\n        this.checkPatternErrors(refDestructuringErrors, true);\n    }\n    return node;\n};\n// Convert list of expression atoms to binding list.\npp$7.toAssignableList = function(exprList, isBinding) {\n    var end = exprList.length;\n    for(var i = 0; i < end; i++){\n        var elt = exprList[i];\n        if (elt) {\n            this.toAssignable(elt, isBinding);\n        }\n    }\n    if (end) {\n        var last = exprList[end - 1];\n        if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") {\n            this.unexpected(last.argument.start);\n        }\n    }\n    return exprList;\n};\n// Parses spread element.\npp$7.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    return this.finishNode(node, \"SpreadElement\");\n};\npp$7.parseRestBinding = function() {\n    var node = this.startNode();\n    this.next();\n    // RestElement inside of a function parameter must be an identifier\n    if (this.options.ecmaVersion === 6 && this.type !== types$1.name) {\n        this.unexpected();\n    }\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n};\n// Parses lvalue (assignable) atom.\npp$7.parseBindingAtom = function() {\n    if (this.options.ecmaVersion >= 6) {\n        switch(this.type){\n            case types$1.bracketL:\n                var node = this.startNode();\n                this.next();\n                node.elements = this.parseBindingList(types$1.bracketR, true, true);\n                return this.finishNode(node, \"ArrayPattern\");\n            case types$1.braceL:\n                return this.parseObj(true);\n        }\n    }\n    return this.parseIdent();\n};\npp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {\n    var elts = [], first = true;\n    while(!this.eat(close)){\n        if (first) {\n            first = false;\n        } else {\n            this.expect(types$1.comma);\n        }\n        if (allowEmpty && this.type === types$1.comma) {\n            elts.push(null);\n        } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n            break;\n        } else if (this.type === types$1.ellipsis) {\n            var rest = this.parseRestBinding();\n            this.parseBindingListItem(rest);\n            elts.push(rest);\n            if (this.type === types$1.comma) {\n                this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\");\n            }\n            this.expect(close);\n            break;\n        } else {\n            elts.push(this.parseAssignableListItem(allowModifiers));\n        }\n    }\n    return elts;\n};\npp$7.parseAssignableListItem = function(allowModifiers) {\n    var elem = this.parseMaybeDefault(this.start, this.startLoc);\n    this.parseBindingListItem(elem);\n    return elem;\n};\npp$7.parseBindingListItem = function(param) {\n    return param;\n};\n// Parses assignment pattern around given atom if possible.\npp$7.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom();\n    if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) {\n        return left;\n    }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n};\n// The following three functions all verify that a node is an lvalue —\n// something that can be bound, or assigned to. In order to do so, they perform\n// a variety of checks:\n//\n// - Check that none of the bound/assigned-to identifiers are reserved words.\n// - Record name declarations for bindings in the appropriate scope.\n// - Check duplicate argument names, if checkClashes is set.\n//\n// If a complex binding pattern is encountered (e.g., object and array\n// destructuring), the entire pattern is recursively checked.\n//\n// There are three versions of checkLVal*() appropriate for different\n// circumstances:\n//\n// - checkLValSimple() shall be used if the syntactic construct supports\n//   nothing other than identifiers and member expressions. Parenthesized\n//   expressions are also correctly handled. This is generally appropriate for\n//   constructs for which the spec says\n//\n//   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   It is also appropriate for checking if an identifier is valid and not\n//   defined elsewhere, like import declarations or function/class identifiers.\n//\n//   Examples where this is used include:\n//     a += …;\n//     import a from '…';\n//   where a is the node to be checked.\n//\n// - checkLValPattern() shall be used if the syntactic construct supports\n//   anything checkLValSimple() supports, as well as object and array\n//   destructuring patterns. This is generally appropriate for constructs for\n//   which the spec says\n//\n//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n//   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   Examples where this is used include:\n//     (a = …);\n//     const a = …;\n//     try { … } catch (a) { … }\n//   where a is the node to be checked.\n//\n// - checkLValInnerPattern() shall be used if the syntactic construct supports\n//   anything checkLValPattern() supports, as well as default assignment\n//   patterns, rest elements, and other constructs that may appear within an\n//   object or array destructuring pattern.\n//\n//   As a special case, function parameters also use checkLValInnerPattern(),\n//   as they also support defaults and rest constructs.\n//\n// These functions deliberately support both assignment and binding constructs,\n// as the logic for both is exceedingly similar. If the node is the target of\n// an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n// should be set to the appropriate BIND_* constant, like BIND_VAR or\n// BIND_LEXICAL.\n//\n// If the function is called with a non-BIND_NONE bindingType, then\n// additionally a checkClashes object may be specified to allow checking for\n// duplicate argument names. checkClashes is ignored if the provided construct\n// is an assignment (i.e., bindingType is BIND_NONE).\npp$7.checkLValSimple = function(expr, bindingType, checkClashes) {\n    if (bindingType === void 0) bindingType = BIND_NONE;\n    var isBind = bindingType !== BIND_NONE;\n    switch(expr.type){\n        case \"Identifier\":\n            if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {\n                this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n            }\n            if (isBind) {\n                if (bindingType === BIND_LEXICAL && expr.name === \"let\") {\n                    this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\");\n                }\n                if (checkClashes) {\n                    if (hasOwn(checkClashes, expr.name)) {\n                        this.raiseRecoverable(expr.start, \"Argument name clash\");\n                    }\n                    checkClashes[expr.name] = true;\n                }\n                if (bindingType !== BIND_OUTSIDE) {\n                    this.declareName(expr.name, bindingType, expr.start);\n                }\n            }\n            break;\n        case \"ChainExpression\":\n            this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n            break;\n        case \"MemberExpression\":\n            if (isBind) {\n                this.raiseRecoverable(expr.start, \"Binding member expression\");\n            }\n            break;\n        case \"ParenthesizedExpression\":\n            if (isBind) {\n                this.raiseRecoverable(expr.start, \"Binding parenthesized expression\");\n            }\n            return this.checkLValSimple(expr.expression, bindingType, checkClashes);\n        default:\n            this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n    }\n};\npp$7.checkLValPattern = function(expr, bindingType, checkClashes) {\n    if (bindingType === void 0) bindingType = BIND_NONE;\n    switch(expr.type){\n        case \"ObjectPattern\":\n            for(var i = 0, list = expr.properties; i < list.length; i += 1){\n                var prop = list[i];\n                this.checkLValInnerPattern(prop, bindingType, checkClashes);\n            }\n            break;\n        case \"ArrayPattern\":\n            for(var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1){\n                var elem = list$1[i$1];\n                if (elem) {\n                    this.checkLValInnerPattern(elem, bindingType, checkClashes);\n                }\n            }\n            break;\n        default:\n            this.checkLValSimple(expr, bindingType, checkClashes);\n    }\n};\npp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n    if (bindingType === void 0) bindingType = BIND_NONE;\n    switch(expr.type){\n        case \"Property\":\n            // AssignmentProperty has type === \"Property\"\n            this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n            break;\n        case \"AssignmentPattern\":\n            this.checkLValPattern(expr.left, bindingType, checkClashes);\n            break;\n        case \"RestElement\":\n            this.checkLValPattern(expr.argument, bindingType, checkClashes);\n            break;\n        default:\n            this.checkLValPattern(expr, bindingType, checkClashes);\n    }\n};\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n    this.generator = !!generator;\n};\nvar types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", false),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function(p) {\n        return p.tryReadTemplateToken();\n    }),\n    f_stat: new TokContext(\"function\", false),\n    f_expr: new TokContext(\"function\", true),\n    f_expr_gen: new TokContext(\"function\", true, false, null, true),\n    f_gen: new TokContext(\"function\", false, false, null, true)\n};\nvar pp$6 = Parser.prototype;\npp$6.initialContext = function() {\n    return [\n        types.b_stat\n    ];\n};\npp$6.curContext = function() {\n    return this.context[this.context.length - 1];\n};\npp$6.braceIsBlock = function(prevType) {\n    var parent = this.curContext();\n    if (parent === types.f_expr || parent === types.f_stat) {\n        return true;\n    }\n    if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr)) {\n        return !parent.isExpr;\n    }\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed) {\n        return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n    }\n    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {\n        return true;\n    }\n    if (prevType === types$1.braceL) {\n        return parent === types.b_stat;\n    }\n    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {\n        return false;\n    }\n    return !this.exprAllowed;\n};\npp$6.inGeneratorContext = function() {\n    for(var i = this.context.length - 1; i >= 1; i--){\n        var context = this.context[i];\n        if (context.token === \"function\") {\n            return context.generator;\n        }\n    }\n    return false;\n};\npp$6.updateContext = function(prevType) {\n    var update, type = this.type;\n    if (type.keyword && prevType === types$1.dot) {\n        this.exprAllowed = false;\n    } else if (update = type.updateContext) {\n        update.call(this, prevType);\n    } else {\n        this.exprAllowed = type.beforeExpr;\n    }\n};\n// Used to handle edge cases when token context could not be inferred correctly during tokenization phase\npp$6.overrideContext = function(tokenCtx) {\n    if (this.curContext() !== tokenCtx) {\n        this.context[this.context.length - 1] = tokenCtx;\n    }\n};\n// Token-specific context update code\ntypes$1.parenR.updateContext = types$1.braceR.updateContext = function() {\n    if (this.context.length === 1) {\n        this.exprAllowed = true;\n        return;\n    }\n    var out = this.context.pop();\n    if (out === types.b_stat && this.curContext().token === \"function\") {\n        out = this.context.pop();\n    }\n    this.exprAllowed = !out.isExpr;\n};\ntypes$1.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n    this.exprAllowed = true;\n};\ntypes$1.dollarBraceL.updateContext = function() {\n    this.context.push(types.b_tmpl);\n    this.exprAllowed = true;\n};\ntypes$1.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n    this.context.push(statementParens ? types.p_stat : types.p_expr);\n    this.exprAllowed = true;\n};\ntypes$1.incDec.updateContext = function() {\n// tokExprAllowed stays unchanged\n};\ntypes$1._function.updateContext = types$1._class.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== types$1._else && !(prevType === types$1.semi && this.curContext() !== types.p_stat) && !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {\n        this.context.push(types.f_expr);\n    } else {\n        this.context.push(types.f_stat);\n    }\n    this.exprAllowed = false;\n};\ntypes$1.colon.updateContext = function() {\n    if (this.curContext().token === \"function\") {\n        this.context.pop();\n    }\n    this.exprAllowed = true;\n};\ntypes$1.backQuote.updateContext = function() {\n    if (this.curContext() === types.q_tmpl) {\n        this.context.pop();\n    } else {\n        this.context.push(types.q_tmpl);\n    }\n    this.exprAllowed = false;\n};\ntypes$1.star.updateContext = function(prevType) {\n    if (prevType === types$1._function) {\n        var index = this.context.length - 1;\n        if (this.context[index] === types.f_expr) {\n            this.context[index] = types.f_expr_gen;\n        } else {\n            this.context[index] = types.f_gen;\n        }\n    }\n    this.exprAllowed = true;\n};\ntypes$1.name.updateContext = function(prevType) {\n    var allowed = false;\n    if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\n        if (this.value === \"of\" && !this.exprAllowed || this.value === \"yield\" && this.inGeneratorContext()) {\n            allowed = true;\n        }\n    }\n    this.exprAllowed = allowed;\n};\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\nvar pp$5 = Parser.prototype;\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\npp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\") {\n        return;\n    }\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {\n        return;\n    }\n    var key = prop.key;\n    var name;\n    switch(key.type){\n        case \"Identifier\":\n            name = key.name;\n            break;\n        case \"Literal\":\n            name = String(key.value);\n            break;\n        default:\n            return;\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n        if (name === \"__proto__\" && kind === \"init\") {\n            if (propHash.proto) {\n                if (refDestructuringErrors) {\n                    if (refDestructuringErrors.doubleProto < 0) {\n                        refDestructuringErrors.doubleProto = key.start;\n                    }\n                } else {\n                    this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n                }\n            }\n            propHash.proto = true;\n        }\n        return;\n    }\n    name = \"$\" + name;\n    var other = propHash[name];\n    if (other) {\n        var redefinition;\n        if (kind === \"init\") {\n            redefinition = this.strict && other.init || other.get || other.set;\n        } else {\n            redefinition = other.init || other[kind];\n        }\n        if (redefinition) {\n            this.raiseRecoverable(key.start, \"Redefinition of property\");\n        }\n    } else {\n        other = propHash[name] = {\n            init: false,\n            get: false,\n            set: false\n        };\n    }\n    other[kind] = true;\n};\n// ### Expression parsing\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\npp$5.parseExpression = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\n    if (this.type === types$1.comma) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.expressions = [\n            expr\n        ];\n        while(this.eat(types$1.comma)){\n            node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));\n        }\n        return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n};\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\npp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\n    if (this.isContextual(\"yield\")) {\n        if (this.inGenerator) {\n            return this.parseYield(forInit);\n        } else {\n            this.exprAllowed = false;\n        }\n    }\n    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;\n    if (refDestructuringErrors) {\n        oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n        oldTrailingComma = refDestructuringErrors.trailingComma;\n        oldDoubleProto = refDestructuringErrors.doubleProto;\n        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n    } else {\n        refDestructuringErrors = new DestructuringErrors;\n        ownDestructuringErrors = true;\n    }\n    var startPos = this.start, startLoc = this.startLoc;\n    if (this.type === types$1.parenL || this.type === types$1.name) {\n        this.potentialArrowAt = this.start;\n        this.potentialArrowInForAwait = forInit === \"await\";\n    }\n    var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\n    if (afterLeftParse) {\n        left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.type.isAssign) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.operator = this.value;\n        if (this.type === types$1.eq) {\n            left = this.toAssignable(left, false, refDestructuringErrors);\n        }\n        if (!ownDestructuringErrors) {\n            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n        }\n        if (refDestructuringErrors.shorthandAssign >= left.start) {\n            refDestructuringErrors.shorthandAssign = -1;\n        } // reset because shorthand default was used correctly\n        if (this.type === types$1.eq) {\n            this.checkLValPattern(left);\n        } else {\n            this.checkLValSimple(left);\n        }\n        node.left = left;\n        this.next();\n        node.right = this.parseMaybeAssign(forInit);\n        if (oldDoubleProto > -1) {\n            refDestructuringErrors.doubleProto = oldDoubleProto;\n        }\n        return this.finishNode(node, \"AssignmentExpression\");\n    } else {\n        if (ownDestructuringErrors) {\n            this.checkExpressionErrors(refDestructuringErrors, true);\n        }\n    }\n    if (oldParenAssign > -1) {\n        refDestructuringErrors.parenthesizedAssign = oldParenAssign;\n    }\n    if (oldTrailingComma > -1) {\n        refDestructuringErrors.trailingComma = oldTrailingComma;\n    }\n    return left;\n};\n// Parse a ternary conditional (`?:`) operator.\npp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprOps(forInit, refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) {\n        return expr;\n    }\n    if (this.eat(types$1.question)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.test = expr;\n        node.consequent = this.parseMaybeAssign();\n        this.expect(types$1.colon);\n        node.alternate = this.parseMaybeAssign(forInit);\n        return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n};\n// Start the precedence parser.\npp$5.parseExprOps = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);\n    if (this.checkExpressionErrors(refDestructuringErrors)) {\n        return expr;\n    }\n    return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);\n};\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\npp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\n    var prec = this.type.binop;\n    if (prec != null && (!forInit || this.type !== types$1._in)) {\n        if (prec > minPrec) {\n            var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\n            var coalesce = this.type === types$1.coalesce;\n            if (coalesce) {\n                // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n                // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n                prec = types$1.logicalAND.binop;\n            }\n            var op = this.value;\n            this.next();\n            var startPos = this.start, startLoc = this.startLoc;\n            var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);\n            var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n            if (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) {\n                this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n            }\n            return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);\n        }\n    }\n    return left;\n};\npp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    if (right.type === \"PrivateIdentifier\") {\n        this.raise(right.start, \"Private identifier can only be left side of binary expression\");\n    }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.operator = op;\n    node.right = right;\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\");\n};\n// Parse unary operators, both prefix and postfix.\npp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {\n    var startPos = this.start, startLoc = this.startLoc, expr;\n    if (this.isContextual(\"await\") && this.canAwait) {\n        expr = this.parseAwait(forInit);\n        sawUnary = true;\n    } else if (this.type.prefix) {\n        var node = this.startNode(), update = this.type === types$1.incDec;\n        node.operator = this.value;\n        node.prefix = true;\n        this.next();\n        node.argument = this.parseMaybeUnary(null, true, update, forInit);\n        this.checkExpressionErrors(refDestructuringErrors, true);\n        if (update) {\n            this.checkLValSimple(node.argument);\n        } else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") {\n            this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\");\n        } else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument)) {\n            this.raiseRecoverable(node.start, \"Private fields can not be deleted\");\n        } else {\n            sawUnary = true;\n        }\n        expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else if (!sawUnary && this.type === types$1.privateId) {\n        if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) {\n            this.unexpected();\n        }\n        expr = this.parsePrivateIdent();\n        // only could be private fields in 'in', such as #x in obj\n        if (this.type !== types$1._in) {\n            this.unexpected();\n        }\n    } else {\n        expr = this.parseExprSubscripts(refDestructuringErrors, forInit);\n        if (this.checkExpressionErrors(refDestructuringErrors)) {\n            return expr;\n        }\n        while(this.type.postfix && !this.canInsertSemicolon()){\n            var node$1 = this.startNodeAt(startPos, startLoc);\n            node$1.operator = this.value;\n            node$1.prefix = false;\n            node$1.argument = expr;\n            this.checkLValSimple(expr);\n            this.next();\n            expr = this.finishNode(node$1, \"UpdateExpression\");\n        }\n    }\n    if (!incDec && this.eat(types$1.starstar)) {\n        if (sawUnary) {\n            this.unexpected(this.lastTokStart);\n        } else {\n            return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), \"**\", false);\n        }\n    } else {\n        return expr;\n    }\n};\nfunction isPrivateFieldAccess(node) {\n    return node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" || node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression);\n}\n// Parse call, dot, and `[]`-subscript expressions.\npp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprAtom(refDestructuringErrors, forInit);\n    if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\") {\n        return expr;\n    }\n    var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);\n    if (refDestructuringErrors && result.type === \"MemberExpression\") {\n        if (refDestructuringErrors.parenthesizedAssign >= result.start) {\n            refDestructuringErrors.parenthesizedAssign = -1;\n        }\n        if (refDestructuringErrors.parenthesizedBind >= result.start) {\n            refDestructuringErrors.parenthesizedBind = -1;\n        }\n        if (refDestructuringErrors.trailingComma >= result.start) {\n            refDestructuringErrors.trailingComma = -1;\n        }\n    }\n    return result;\n};\npp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {\n    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;\n    var optionalChained = false;\n    while(true){\n        var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);\n        if (element.optional) {\n            optionalChained = true;\n        }\n        if (element === base || element.type === \"ArrowFunctionExpression\") {\n            if (optionalChained) {\n                var chainNode = this.startNodeAt(startPos, startLoc);\n                chainNode.expression = element;\n                element = this.finishNode(chainNode, \"ChainExpression\");\n            }\n            return element;\n        }\n        base = element;\n    }\n};\npp$5.shouldParseAsyncArrow = function() {\n    return !this.canInsertSemicolon() && this.eat(types$1.arrow);\n};\npp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);\n};\npp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {\n    var optionalSupported = this.options.ecmaVersion >= 11;\n    var optional = optionalSupported && this.eat(types$1.questionDot);\n    if (noCalls && optional) {\n        this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\");\n    }\n    var computed = this.eat(types$1.bracketL);\n    if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.object = base;\n        if (computed) {\n            node.property = this.parseExpression();\n            this.expect(types$1.bracketR);\n        } else if (this.type === types$1.privateId && base.type !== \"Super\") {\n            node.property = this.parsePrivateIdent();\n        } else {\n            node.property = this.parseIdent(this.options.allowReserved !== \"never\");\n        }\n        node.computed = !!computed;\n        if (optionalSupported) {\n            node.optional = optional;\n        }\n        base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(types$1.parenL)) {\n        var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n        this.yieldPos = 0;\n        this.awaitPos = 0;\n        this.awaitIdentPos = 0;\n        var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n        if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {\n            this.checkPatternErrors(refDestructuringErrors, false);\n            this.checkYieldAwaitInDefaultParams();\n            if (this.awaitIdentPos > 0) {\n                this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\");\n            }\n            this.yieldPos = oldYieldPos;\n            this.awaitPos = oldAwaitPos;\n            this.awaitIdentPos = oldAwaitIdentPos;\n            return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);\n        }\n        this.checkExpressionErrors(refDestructuringErrors, true);\n        this.yieldPos = oldYieldPos || this.yieldPos;\n        this.awaitPos = oldAwaitPos || this.awaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n        var node$1 = this.startNodeAt(startPos, startLoc);\n        node$1.callee = base;\n        node$1.arguments = exprList;\n        if (optionalSupported) {\n            node$1.optional = optional;\n        }\n        base = this.finishNode(node$1, \"CallExpression\");\n    } else if (this.type === types$1.backQuote) {\n        if (optional || optionalChained) {\n            this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n        }\n        var node$2 = this.startNodeAt(startPos, startLoc);\n        node$2.tag = base;\n        node$2.quasi = this.parseTemplate({\n            isTagged: true\n        });\n        base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n    }\n    return base;\n};\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\npp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.type === types$1.slash) {\n        this.readRegexp();\n    }\n    var node, canBeArrow = this.potentialArrowAt === this.start;\n    switch(this.type){\n        case types$1._super:\n            if (!this.allowSuper) {\n                this.raise(this.start, \"'super' keyword outside a method\");\n            }\n            node = this.startNode();\n            this.next();\n            if (this.type === types$1.parenL && !this.allowDirectSuper) {\n                this.raise(node.start, \"super() call outside constructor of a subclass\");\n            }\n            // The `super` keyword can appear at below:\n            // SuperProperty:\n            //     super [ Expression ]\n            //     super . IdentifierName\n            // SuperCall:\n            //     super ( Arguments )\n            if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL) {\n                this.unexpected();\n            }\n            return this.finishNode(node, \"Super\");\n        case types$1._this:\n            node = this.startNode();\n            this.next();\n            return this.finishNode(node, \"ThisExpression\");\n        case types$1.name:\n            var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n            var id = this.parseIdent(false);\n            if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\n                this.overrideContext(types.f_expr);\n                return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);\n            }\n            if (canBeArrow && !this.canInsertSemicolon()) {\n                if (this.eat(types$1.arrow)) {\n                    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [\n                        id\n                    ], false, forInit);\n                }\n                if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\n                    id = this.parseIdent(false);\n                    if (this.canInsertSemicolon() || !this.eat(types$1.arrow)) {\n                        this.unexpected();\n                    }\n                    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [\n                        id\n                    ], true, forInit);\n                }\n            }\n            return id;\n        case types$1.regexp:\n            var value = this.value;\n            node = this.parseLiteral(value.value);\n            node.regex = {\n                pattern: value.pattern,\n                flags: value.flags\n            };\n            return node;\n        case types$1.num:\n        case types$1.string:\n            return this.parseLiteral(this.value);\n        case types$1._null:\n        case types$1._true:\n        case types$1._false:\n            node = this.startNode();\n            node.value = this.type === types$1._null ? null : this.type === types$1._true;\n            node.raw = this.type.keyword;\n            this.next();\n            return this.finishNode(node, \"Literal\");\n        case types$1.parenL:\n            var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);\n            if (refDestructuringErrors) {\n                if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {\n                    refDestructuringErrors.parenthesizedAssign = start;\n                }\n                if (refDestructuringErrors.parenthesizedBind < 0) {\n                    refDestructuringErrors.parenthesizedBind = start;\n                }\n            }\n            return expr;\n        case types$1.bracketL:\n            node = this.startNode();\n            this.next();\n            node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);\n            return this.finishNode(node, \"ArrayExpression\");\n        case types$1.braceL:\n            this.overrideContext(types.b_expr);\n            return this.parseObj(false, refDestructuringErrors);\n        case types$1._function:\n            node = this.startNode();\n            this.next();\n            return this.parseFunction(node, 0);\n        case types$1._class:\n            return this.parseClass(this.startNode(), false);\n        case types$1._new:\n            return this.parseNew();\n        case types$1.backQuote:\n            return this.parseTemplate();\n        case types$1._import:\n            if (this.options.ecmaVersion >= 11) {\n                return this.parseExprImport(forNew);\n            } else {\n                return this.unexpected();\n            }\n        default:\n            return this.parseExprAtomDefault();\n    }\n};\npp$5.parseExprAtomDefault = function() {\n    this.unexpected();\n};\npp$5.parseExprImport = function(forNew) {\n    var node = this.startNode();\n    // Consume `import` as an identifier for `import.meta`.\n    // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n    if (this.containsEsc) {\n        this.raiseRecoverable(this.start, \"Escape sequence in keyword import\");\n    }\n    var meta = this.parseIdent(true);\n    if (this.type === types$1.parenL && !forNew) {\n        return this.parseDynamicImport(node);\n    } else if (this.type === types$1.dot) {\n        node.meta = meta;\n        return this.parseImportMeta(node);\n    } else {\n        this.unexpected();\n    }\n};\npp$5.parseDynamicImport = function(node) {\n    this.next(); // skip `(`\n    // Parse node.source.\n    node.source = this.parseMaybeAssign();\n    // Verify ending.\n    if (!this.eat(types$1.parenR)) {\n        var errorPos = this.start;\n        if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\n            this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n        } else {\n            this.unexpected(errorPos);\n        }\n    }\n    return this.finishNode(node, \"ImportExpression\");\n};\npp$5.parseImportMeta = function(node) {\n    this.next(); // skip `.`\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"meta\") {\n        this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\");\n    }\n    if (containsEsc) {\n        this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\");\n    }\n    if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere) {\n        this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\");\n    }\n    return this.finishNode(node, \"MetaProperty\");\n};\npp$5.parseLiteral = function(value) {\n    var node = this.startNode();\n    node.value = value;\n    node.raw = this.input.slice(this.start, this.end);\n    if (node.raw.charCodeAt(node.raw.length - 1) === 110) {\n        node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\");\n    }\n    this.next();\n    return this.finishNode(node, \"Literal\");\n};\npp$5.parseParenExpression = function() {\n    this.expect(types$1.parenL);\n    var val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n};\npp$5.shouldParseArrow = function(exprList) {\n    return !this.canInsertSemicolon();\n};\npp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {\n    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n    if (this.options.ecmaVersion >= 6) {\n        this.next();\n        var innerStartPos = this.start, innerStartLoc = this.startLoc;\n        var exprList = [], first = true, lastIsComma = false;\n        var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n        this.yieldPos = 0;\n        this.awaitPos = 0;\n        // Do not save awaitIdentPos to allow checking awaits nested in parameters\n        while(this.type !== types$1.parenR){\n            first ? first = false : this.expect(types$1.comma);\n            if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {\n                lastIsComma = true;\n                break;\n            } else if (this.type === types$1.ellipsis) {\n                spreadStart = this.start;\n                exprList.push(this.parseParenItem(this.parseRestBinding()));\n                if (this.type === types$1.comma) {\n                    this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\");\n                }\n                break;\n            } else {\n                exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n            }\n        }\n        var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;\n        this.expect(types$1.parenR);\n        if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {\n            this.checkPatternErrors(refDestructuringErrors, false);\n            this.checkYieldAwaitInDefaultParams();\n            this.yieldPos = oldYieldPos;\n            this.awaitPos = oldAwaitPos;\n            return this.parseParenArrowList(startPos, startLoc, exprList, forInit);\n        }\n        if (!exprList.length || lastIsComma) {\n            this.unexpected(this.lastTokStart);\n        }\n        if (spreadStart) {\n            this.unexpected(spreadStart);\n        }\n        this.checkExpressionErrors(refDestructuringErrors, true);\n        this.yieldPos = oldYieldPos || this.yieldPos;\n        this.awaitPos = oldAwaitPos || this.awaitPos;\n        if (exprList.length > 1) {\n            val = this.startNodeAt(innerStartPos, innerStartLoc);\n            val.expressions = exprList;\n            this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n        } else {\n            val = exprList[0];\n        }\n    } else {\n        val = this.parseParenExpression();\n    }\n    if (this.options.preserveParens) {\n        var par = this.startNodeAt(startPos, startLoc);\n        par.expression = val;\n        return this.finishNode(par, \"ParenthesizedExpression\");\n    } else {\n        return val;\n    }\n};\npp$5.parseParenItem = function(item) {\n    return item;\n};\npp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);\n};\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\nvar empty = [];\npp$5.parseNew = function() {\n    if (this.containsEsc) {\n        this.raiseRecoverable(this.start, \"Escape sequence in keyword new\");\n    }\n    var node = this.startNode();\n    this.next();\n    if (this.options.ecmaVersion >= 6 && this.type === types$1.dot) {\n        var meta = this.startNodeAt(node.start, node.startLoc);\n        meta.name = \"new\";\n        node.meta = this.finishNode(meta, \"Identifier\");\n        this.next();\n        var containsEsc = this.containsEsc;\n        node.property = this.parseIdent(true);\n        if (node.property.name !== \"target\") {\n            this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\");\n        }\n        if (containsEsc) {\n            this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\");\n        }\n        if (!this.allowNewDotTarget) {\n            this.raiseRecoverable(node.start, \"'new.target' can only be used in functions and class static block\");\n        }\n        return this.finishNode(node, \"MetaProperty\");\n    }\n    var startPos = this.start, startLoc = this.startLoc;\n    node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);\n    if (this.eat(types$1.parenL)) {\n        node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false);\n    } else {\n        node.arguments = empty;\n    }\n    return this.finishNode(node, \"NewExpression\");\n};\n// Parse template expression.\npp$5.parseTemplateElement = function(ref) {\n    var isTagged = ref.isTagged;\n    var elem = this.startNode();\n    if (this.type === types$1.invalidTemplate) {\n        if (!isTagged) {\n            this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n        }\n        elem.value = {\n            raw: this.value,\n            cooked: null\n        };\n    } else {\n        elem.value = {\n            raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n            cooked: this.value\n        };\n    }\n    this.next();\n    elem.tail = this.type === types$1.backQuote;\n    return this.finishNode(elem, \"TemplateElement\");\n};\npp$5.parseTemplate = function(ref) {\n    if (ref === void 0) ref = {};\n    var isTagged = ref.isTagged;\n    if (isTagged === void 0) isTagged = false;\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement({\n        isTagged: isTagged\n    });\n    node.quasis = [\n        curElt\n    ];\n    while(!curElt.tail){\n        if (this.type === types$1.eof) {\n            this.raise(this.pos, \"Unterminated template literal\");\n        }\n        this.expect(types$1.dollarBraceL);\n        node.expressions.push(this.parseExpression());\n        this.expect(types$1.braceR);\n        node.quasis.push(curElt = this.parseTemplateElement({\n            isTagged: isTagged\n        }));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n};\npp$5.isAsyncProp = function(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\n// Parse an object literal or binding pattern.\npp$5.parseObj = function(isPattern, refDestructuringErrors) {\n    var node = this.startNode(), first = true, propHash = {};\n    node.properties = [];\n    this.next();\n    while(!this.eat(types$1.braceR)){\n        if (!first) {\n            this.expect(types$1.comma);\n            if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) {\n                break;\n            }\n        } else {\n            first = false;\n        }\n        var prop = this.parseProperty(isPattern, refDestructuringErrors);\n        if (!isPattern) {\n            this.checkPropClash(prop, propHash, refDestructuringErrors);\n        }\n        node.properties.push(prop);\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\npp$5.parseProperty = function(isPattern, refDestructuringErrors) {\n    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n    if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\n        if (isPattern) {\n            prop.argument = this.parseIdent(false);\n            if (this.type === types$1.comma) {\n                this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\");\n            }\n            return this.finishNode(prop, \"RestElement\");\n        }\n        // Parse argument.\n        prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n        // To disallow trailing comma via `this.toAssignable()`.\n        if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n            refDestructuringErrors.trailingComma = this.start;\n        }\n        // Finish\n        return this.finishNode(prop, \"SpreadElement\");\n    }\n    if (this.options.ecmaVersion >= 6) {\n        prop.method = false;\n        prop.shorthand = false;\n        if (isPattern || refDestructuringErrors) {\n            startPos = this.start;\n            startLoc = this.startLoc;\n        }\n        if (!isPattern) {\n            isGenerator = this.eat(types$1.star);\n        }\n    }\n    var containsEsc = this.containsEsc;\n    this.parsePropertyName(prop);\n    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n        isAsync = true;\n        isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\n        this.parsePropertyName(prop);\n    } else {\n        isAsync = false;\n    }\n    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n    return this.finishNode(prop, \"Property\");\n};\npp$5.parseGetterSetter = function(prop) {\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start;\n        if (prop.kind === \"get\") {\n            this.raiseRecoverable(start, \"getter should have no params\");\n        } else {\n            this.raiseRecoverable(start, \"setter should have exactly one param\");\n        }\n    } else {\n        if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n            this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\");\n        }\n    }\n};\npp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n    if ((isGenerator || isAsync) && this.type === types$1.colon) {\n        this.unexpected();\n    }\n    if (this.eat(types$1.colon)) {\n        prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n        prop.kind = \"init\";\n    } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\n        if (isPattern) {\n            this.unexpected();\n        }\n        prop.kind = \"init\";\n        prop.method = true;\n        prop.value = this.parseMethod(isGenerator, isAsync);\n    } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq) {\n        if (isGenerator || isAsync) {\n            this.unexpected();\n        }\n        this.parseGetterSetter(prop);\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n        if (isGenerator || isAsync) {\n            this.unexpected();\n        }\n        this.checkUnreserved(prop.key);\n        if (prop.key.name === \"await\" && !this.awaitIdentPos) {\n            this.awaitIdentPos = startPos;\n        }\n        prop.kind = \"init\";\n        if (isPattern) {\n            prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n        } else if (this.type === types$1.eq && refDestructuringErrors) {\n            if (refDestructuringErrors.shorthandAssign < 0) {\n                refDestructuringErrors.shorthandAssign = this.start;\n            }\n            prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n        } else {\n            prop.value = this.copyNode(prop.key);\n        }\n        prop.shorthand = true;\n    } else {\n        this.unexpected();\n    }\n};\npp$5.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n        if (this.eat(types$1.bracketL)) {\n            prop.computed = true;\n            prop.key = this.parseMaybeAssign();\n            this.expect(types$1.bracketR);\n            return prop.key;\n        } else {\n            prop.computed = false;\n        }\n    }\n    return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\");\n};\n// Initialize empty function node.\npp$5.initFunction = function(node) {\n    node.id = null;\n    if (this.options.ecmaVersion >= 6) {\n        node.generator = node.expression = false;\n    }\n    if (this.options.ecmaVersion >= 8) {\n        node.async = false;\n    }\n};\n// Parse object or class method.\npp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6) {\n        node.generator = isGenerator;\n    }\n    if (this.options.ecmaVersion >= 8) {\n        node.async = !!isAsync;\n    }\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.expect(types$1.parenL);\n    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBody(node, false, true, false);\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"FunctionExpression\");\n};\n// Parse arrow function expression with given parameters.\npp$5.parseArrowExpression = function(node, params, isAsync, forInit) {\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8) {\n        node.async = !!isAsync;\n    }\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    node.params = this.toAssignableList(params, true);\n    this.parseFunctionBody(node, true, false, forInit);\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n// Parse function body and check parameters.\npp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {\n    var isExpression = isArrowFunction && this.type !== types$1.braceL;\n    var oldStrict = this.strict, useStrict = false;\n    if (isExpression) {\n        node.body = this.parseMaybeAssign(forInit);\n        node.expression = true;\n        this.checkParams(node, false);\n    } else {\n        var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n        if (!oldStrict || nonSimple) {\n            useStrict = this.strictDirective(this.end);\n            // If this is a strict mode function, verify that argument names\n            // are not repeated, and it does not try to bind the words `eval`\n            // or `arguments`.\n            if (useStrict && nonSimple) {\n                this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n            }\n        }\n        // Start a new scope with regard to labels and the `inFunction`\n        // flag (restore them to their old value afterwards).\n        var oldLabels = this.labels;\n        this.labels = [];\n        if (useStrict) {\n            this.strict = true;\n        }\n        // Add the params to varDeclaredNames to ensure that an error is thrown\n        // if a let/const declaration in the function clashes with one of the params.\n        this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n        // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n        if (this.strict && node.id) {\n            this.checkLValSimple(node.id, BIND_OUTSIDE);\n        }\n        node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n        node.expression = false;\n        this.adaptDirectivePrologue(node.body.body);\n        this.labels = oldLabels;\n    }\n    this.exitScope();\n};\npp$5.isSimpleParamList = function(params) {\n    for(var i = 0, list = params; i < list.length; i += 1){\n        var param = list[i];\n        if (param.type !== \"Identifier\") {\n            return false;\n        }\n    }\n    return true;\n};\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\npp$5.checkParams = function(node, allowDuplicates) {\n    var nameHash = Object.create(null);\n    for(var i = 0, list = node.params; i < list.length; i += 1){\n        var param = list[i];\n        this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n    }\n};\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\npp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var elts = [], first = true;\n    while(!this.eat(close)){\n        if (!first) {\n            this.expect(types$1.comma);\n            if (allowTrailingComma && this.afterTrailingComma(close)) {\n                break;\n            }\n        } else {\n            first = false;\n        }\n        var elt = void 0;\n        if (allowEmpty && this.type === types$1.comma) {\n            elt = null;\n        } else if (this.type === types$1.ellipsis) {\n            elt = this.parseSpread(refDestructuringErrors);\n            if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0) {\n                refDestructuringErrors.trailingComma = this.start;\n            }\n        } else {\n            elt = this.parseMaybeAssign(false, refDestructuringErrors);\n        }\n        elts.push(elt);\n    }\n    return elts;\n};\npp$5.checkUnreserved = function(ref) {\n    var start = ref.start;\n    var end = ref.end;\n    var name = ref.name;\n    if (this.inGenerator && name === \"yield\") {\n        this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\");\n    }\n    if (this.inAsync && name === \"await\") {\n        this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\");\n    }\n    if (this.currentThisScope().inClassFieldInit && name === \"arguments\") {\n        this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\");\n    }\n    if (this.inClassStaticBlock && (name === \"arguments\" || name === \"await\")) {\n        this.raise(start, \"Cannot use \" + name + \" in class static initialization block\");\n    }\n    if (this.keywords.test(name)) {\n        this.raise(start, \"Unexpected keyword '\" + name + \"'\");\n    }\n    if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf(\"\\\\\") !== -1) {\n        return;\n    }\n    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n    if (re.test(name)) {\n        if (!this.inAsync && name === \"await\") {\n            this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\");\n        }\n        this.raiseRecoverable(start, \"The keyword '\" + name + \"' is reserved\");\n    }\n};\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\npp$5.parseIdent = function(liberal) {\n    var node = this.parseIdentNode();\n    this.next(!!liberal);\n    this.finishNode(node, \"Identifier\");\n    if (!liberal) {\n        this.checkUnreserved(node);\n        if (node.name === \"await\" && !this.awaitIdentPos) {\n            this.awaitIdentPos = node.start;\n        }\n    }\n    return node;\n};\npp$5.parseIdentNode = function() {\n    var node = this.startNode();\n    if (this.type === types$1.name) {\n        node.name = this.value;\n    } else if (this.type.keyword) {\n        node.name = this.type.keyword;\n        // To fix https://github.com/acornjs/acorn/issues/575\n        // `class` and `function` keywords push new context into this.context.\n        // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n        // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n        if ((node.name === \"class\" || node.name === \"function\") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n            this.context.pop();\n        }\n        this.type = types$1.name;\n    } else {\n        this.unexpected();\n    }\n    return node;\n};\npp$5.parsePrivateIdent = function() {\n    var node = this.startNode();\n    if (this.type === types$1.privateId) {\n        node.name = this.value;\n    } else {\n        this.unexpected();\n    }\n    this.next();\n    this.finishNode(node, \"PrivateIdentifier\");\n    // For validating existence\n    if (this.options.checkPrivateFields) {\n        if (this.privateNameStack.length === 0) {\n            this.raise(node.start, \"Private field '#\" + node.name + \"' must be declared in an enclosing class\");\n        } else {\n            this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n        }\n    }\n    return node;\n};\n// Parses yield expression inside generator.\npp$5.parseYield = function(forInit) {\n    if (!this.yieldPos) {\n        this.yieldPos = this.start;\n    }\n    var node = this.startNode();\n    this.next();\n    if (this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr) {\n        node.delegate = false;\n        node.argument = null;\n    } else {\n        node.delegate = this.eat(types$1.star);\n        node.argument = this.parseMaybeAssign(forInit);\n    }\n    return this.finishNode(node, \"YieldExpression\");\n};\npp$5.parseAwait = function(forInit) {\n    if (!this.awaitPos) {\n        this.awaitPos = this.start;\n    }\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true, false, forInit);\n    return this.finishNode(node, \"AwaitExpression\");\n};\nvar pp$4 = Parser.prototype;\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\npp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos);\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\n    var err = new SyntaxError(message);\n    err.pos = pos;\n    err.loc = loc;\n    err.raisedAt = this.pos;\n    throw err;\n};\npp$4.raiseRecoverable = pp$4.raise;\npp$4.curPosition = function() {\n    if (this.options.locations) {\n        return new Position(this.curLine, this.pos - this.lineStart);\n    }\n};\nvar pp$3 = Parser.prototype;\nvar Scope = function Scope(flags) {\n    this.flags = flags;\n    // A list of var-declared names in the current lexical scope\n    this.var = [];\n    // A list of lexically-declared names in the current lexical scope\n    this.lexical = [];\n    // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n    this.functions = [];\n    // A switch to disallow the identifier reference 'arguments'\n    this.inClassFieldInit = false;\n};\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\npp$3.enterScope = function(flags) {\n    this.scopeStack.push(new Scope(flags));\n};\npp$3.exitScope = function() {\n    this.scopeStack.pop();\n};\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$3.treatFunctionsAsVarInScope = function(scope) {\n    return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;\n};\npp$3.declareName = function(name, bindingType, pos) {\n    var redeclared = false;\n    if (bindingType === BIND_LEXICAL) {\n        var scope = this.currentScope();\n        redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n        scope.lexical.push(name);\n        if (this.inModule && scope.flags & SCOPE_TOP) {\n            delete this.undefinedExports[name];\n        }\n    } else if (bindingType === BIND_SIMPLE_CATCH) {\n        var scope$1 = this.currentScope();\n        scope$1.lexical.push(name);\n    } else if (bindingType === BIND_FUNCTION) {\n        var scope$2 = this.currentScope();\n        if (this.treatFunctionsAsVar) {\n            redeclared = scope$2.lexical.indexOf(name) > -1;\n        } else {\n            redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;\n        }\n        scope$2.functions.push(name);\n    } else {\n        for(var i = this.scopeStack.length - 1; i >= 0; --i){\n            var scope$3 = this.scopeStack[i];\n            if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n                redeclared = true;\n                break;\n            }\n            scope$3.var.push(name);\n            if (this.inModule && scope$3.flags & SCOPE_TOP) {\n                delete this.undefinedExports[name];\n            }\n            if (scope$3.flags & SCOPE_VAR) {\n                break;\n            }\n        }\n    }\n    if (redeclared) {\n        this.raiseRecoverable(pos, \"Identifier '\" + name + \"' has already been declared\");\n    }\n};\npp$3.checkLocalExport = function(id) {\n    // scope.functions must be empty as Module code is always strict.\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {\n        this.undefinedExports[id.name] = id;\n    }\n};\npp$3.currentScope = function() {\n    return this.scopeStack[this.scopeStack.length - 1];\n};\npp$3.currentVarScope = function() {\n    for(var i = this.scopeStack.length - 1;; i--){\n        var scope = this.scopeStack[i];\n        if (scope.flags & SCOPE_VAR) {\n            return scope;\n        }\n    }\n};\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$3.currentThisScope = function() {\n    for(var i = this.scopeStack.length - 1;; i--){\n        var scope = this.scopeStack[i];\n        if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {\n            return scope;\n        }\n    }\n};\nvar Node = function Node(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    if (parser.options.locations) {\n        this.loc = new SourceLocation(parser, loc);\n    }\n    if (parser.options.directSourceFile) {\n        this.sourceFile = parser.options.directSourceFile;\n    }\n    if (parser.options.ranges) {\n        this.range = [\n            pos,\n            0\n        ];\n    }\n};\n// Start an AST node, attaching a start offset.\nvar pp$2 = Parser.prototype;\npp$2.startNode = function() {\n    return new Node(this, this.start, this.startLoc);\n};\npp$2.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc);\n};\n// Finish an AST node, adding `type` and `end` properties.\nfunction finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    if (this.options.locations) {\n        node.loc.end = loc;\n    }\n    if (this.options.ranges) {\n        node.range[1] = pos;\n    }\n    return node;\n}\npp$2.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n};\n// Finish node at given position\npp$2.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc);\n};\npp$2.copyNode = function(node) {\n    var newNode = new Node(this, node.start, this.startLoc);\n    for(var prop in node){\n        newNode[prop] = node[prop];\n    }\n    return newNode;\n};\n// This file contains Unicode properties extracted from the ECMAScript specification.\n// The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\nvar ecma13BinaryProperties = ecma12BinaryProperties;\nvar ecma14BinaryProperties = ecma13BinaryProperties;\nvar unicodeBinaryProperties = {\n    9: ecma9BinaryProperties,\n    10: ecma10BinaryProperties,\n    11: ecma11BinaryProperties,\n    12: ecma12BinaryProperties,\n    13: ecma13BinaryProperties,\n    14: ecma14BinaryProperties\n};\n// #table-binary-unicode-properties-of-strings\nvar ecma14BinaryPropertiesOfStrings = \"Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji\";\nvar unicodeBinaryPropertiesOfStrings = {\n    9: \"\",\n    10: \"\",\n    11: \"\",\n    12: \"\",\n    13: \"\",\n    14: ecma14BinaryPropertiesOfStrings\n};\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n// #table-unicode-script-values\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\nvar ecma13ScriptValues = ecma12ScriptValues + \" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith\";\nvar ecma14ScriptValues = ecma13ScriptValues + \" Hrkt Katakana_Or_Hiragana Kawi Nag_Mundari Nagm Unknown Zzzz\";\nvar unicodeScriptValues = {\n    9: ecma9ScriptValues,\n    10: ecma10ScriptValues,\n    11: ecma11ScriptValues,\n    12: ecma12ScriptValues,\n    13: ecma13ScriptValues,\n    14: ecma14ScriptValues\n};\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n    var d = data[ecmaVersion] = {\n        binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n        binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]),\n        nonBinary: {\n            General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n            Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n        }\n    };\n    d.nonBinary.Script_Extensions = d.nonBinary.Script;\n    d.nonBinary.gc = d.nonBinary.General_Category;\n    d.nonBinary.sc = d.nonBinary.Script;\n    d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\nfor(var i = 0, list = [\n    9,\n    10,\n    11,\n    12,\n    13,\n    14\n]; i < list.length; i += 1){\n    var ecmaVersion = list[i];\n    buildUnicodeData(ecmaVersion);\n}\nvar pp$1 = Parser.prototype;\nvar RegExpValidationState = function RegExpValidationState(parser) {\n    this.parser = parser;\n    this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\") + (parser.options.ecmaVersion >= 15 ? \"v\" : \"\");\n    this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];\n    this.source = \"\";\n    this.flags = \"\";\n    this.start = 0;\n    this.switchU = false;\n    this.switchV = false;\n    this.switchN = false;\n    this.pos = 0;\n    this.lastIntValue = 0;\n    this.lastStringValue = \"\";\n    this.lastAssertionIsQuantifiable = false;\n    this.numCapturingParens = 0;\n    this.maxBackReference = 0;\n    this.groupNames = [];\n    this.backReferenceNames = [];\n};\nRegExpValidationState.prototype.reset = function reset(start, pattern, flags) {\n    var unicodeSets = flags.indexOf(\"v\") !== -1;\n    var unicode = flags.indexOf(\"u\") !== -1;\n    this.start = start | 0;\n    this.source = pattern + \"\";\n    this.flags = flags;\n    if (unicodeSets && this.parser.options.ecmaVersion >= 15) {\n        this.switchU = true;\n        this.switchV = true;\n        this.switchN = true;\n    } else {\n        this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n        this.switchV = false;\n        this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n    }\n};\nRegExpValidationState.prototype.raise = function raise(message) {\n    this.parser.raiseRecoverable(this.start, \"Invalid regular expression: /\" + this.source + \"/: \" + message);\n};\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at(i, forceU) {\n    if (forceU === void 0) forceU = false;\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n        return -1;\n    }\n    var c = s.charCodeAt(i);\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n        return c;\n    }\n    var next = s.charCodeAt(i + 1);\n    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c;\n};\nRegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {\n    if (forceU === void 0) forceU = false;\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n        return l;\n    }\n    var c = s.charCodeAt(i), next;\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n        return i + 1;\n    }\n    return i + 2;\n};\nRegExpValidationState.prototype.current = function current(forceU) {\n    if (forceU === void 0) forceU = false;\n    return this.at(this.pos, forceU);\n};\nRegExpValidationState.prototype.lookahead = function lookahead(forceU) {\n    if (forceU === void 0) forceU = false;\n    return this.at(this.nextIndex(this.pos, forceU), forceU);\n};\nRegExpValidationState.prototype.advance = function advance(forceU) {\n    if (forceU === void 0) forceU = false;\n    this.pos = this.nextIndex(this.pos, forceU);\n};\nRegExpValidationState.prototype.eat = function eat(ch, forceU) {\n    if (forceU === void 0) forceU = false;\n    if (this.current(forceU) === ch) {\n        this.advance(forceU);\n        return true;\n    }\n    return false;\n};\nRegExpValidationState.prototype.eatChars = function eatChars(chs, forceU) {\n    if (forceU === void 0) forceU = false;\n    var pos = this.pos;\n    for(var i = 0, list = chs; i < list.length; i += 1){\n        var ch = list[i];\n        var current = this.at(pos, forceU);\n        if (current === -1 || current !== ch) {\n            return false;\n        }\n        pos = this.nextIndex(pos, forceU);\n    }\n    this.pos = pos;\n    return true;\n};\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */ pp$1.validateRegExpFlags = function(state) {\n    var validFlags = state.validFlags;\n    var flags = state.flags;\n    var u = false;\n    var v = false;\n    for(var i = 0; i < flags.length; i++){\n        var flag = flags.charAt(i);\n        if (validFlags.indexOf(flag) === -1) {\n            this.raise(state.start, \"Invalid regular expression flag\");\n        }\n        if (flags.indexOf(flag, i + 1) > -1) {\n            this.raise(state.start, \"Duplicate regular expression flag\");\n        }\n        if (flag === \"u\") {\n            u = true;\n        }\n        if (flag === \"v\") {\n            v = true;\n        }\n    }\n    if (this.options.ecmaVersion >= 15 && u && v) {\n        this.raise(state.start, \"Invalid regular expression flag\");\n    }\n};\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */ pp$1.validateRegExpPattern = function(state) {\n    this.regexp_pattern(state);\n    // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n    // parsing contains a |GroupName|, reparse with the goal symbol\n    // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n    // exception if _P_ did not conform to the grammar, if any elements of _P_\n    // were not matched by the parse, or if any Early Error conditions exist.\n    if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n        state.switchN = true;\n        this.regexp_pattern(state);\n    }\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$1.regexp_pattern = function(state) {\n    state.pos = 0;\n    state.lastIntValue = 0;\n    state.lastStringValue = \"\";\n    state.lastAssertionIsQuantifiable = false;\n    state.numCapturingParens = 0;\n    state.maxBackReference = 0;\n    state.groupNames.length = 0;\n    state.backReferenceNames.length = 0;\n    this.regexp_disjunction(state);\n    if (state.pos !== state.source.length) {\n        // Make the same messages as V8.\n        if (state.eat(0x29 /* ) */ )) {\n            state.raise(\"Unmatched ')'\");\n        }\n        if (state.eat(0x5D /* ] */ ) || state.eat(0x7D /* } */ )) {\n            state.raise(\"Lone quantifier brackets\");\n        }\n    }\n    if (state.maxBackReference > state.numCapturingParens) {\n        state.raise(\"Invalid escape\");\n    }\n    for(var i = 0, list = state.backReferenceNames; i < list.length; i += 1){\n        var name = list[i];\n        if (state.groupNames.indexOf(name) === -1) {\n            state.raise(\"Invalid named capture referenced\");\n        }\n    }\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$1.regexp_disjunction = function(state) {\n    this.regexp_alternative(state);\n    while(state.eat(0x7C /* | */ )){\n        this.regexp_alternative(state);\n    }\n    // Make the same message as V8.\n    if (this.regexp_eatQuantifier(state, true)) {\n        state.raise(\"Nothing to repeat\");\n    }\n    if (state.eat(0x7B /* { */ )) {\n        state.raise(\"Lone quantifier brackets\");\n    }\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$1.regexp_alternative = function(state) {\n    while(state.pos < state.source.length && this.regexp_eatTerm(state)){}\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$1.regexp_eatTerm = function(state) {\n    if (this.regexp_eatAssertion(state)) {\n        // Handle `QuantifiableAssertion Quantifier` alternative.\n        // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n        // is a QuantifiableAssertion.\n        if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n            // Make the same message as V8.\n            if (state.switchU) {\n                state.raise(\"Invalid quantifier\");\n            }\n        }\n        return true;\n    }\n    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n        this.regexp_eatQuantifier(state);\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$1.regexp_eatAssertion = function(state) {\n    var start = state.pos;\n    state.lastAssertionIsQuantifiable = false;\n    // ^, $\n    if (state.eat(0x5E /* ^ */ ) || state.eat(0x24 /* $ */ )) {\n        return true;\n    }\n    // \\b \\B\n    if (state.eat(0x5C /* \\ */ )) {\n        if (state.eat(0x42 /* B */ ) || state.eat(0x62 /* b */ )) {\n            return true;\n        }\n        state.pos = start;\n    }\n    // Lookahead / Lookbehind\n    if (state.eat(0x28 /* ( */ ) && state.eat(0x3F /* ? */ )) {\n        var lookbehind = false;\n        if (this.options.ecmaVersion >= 9) {\n            lookbehind = state.eat(0x3C /* < */ );\n        }\n        if (state.eat(0x3D /* = */ ) || state.eat(0x21 /* ! */ )) {\n            this.regexp_disjunction(state);\n            if (!state.eat(0x29 /* ) */ )) {\n                state.raise(\"Unterminated group\");\n            }\n            state.lastAssertionIsQuantifiable = !lookbehind;\n            return true;\n        }\n    }\n    state.pos = start;\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$1.regexp_eatQuantifier = function(state, noError) {\n    if (noError === void 0) noError = false;\n    if (this.regexp_eatQuantifierPrefix(state, noError)) {\n        state.eat(0x3F /* ? */ );\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$1.regexp_eatQuantifierPrefix = function(state, noError) {\n    return state.eat(0x2A /* * */ ) || state.eat(0x2B /* + */ ) || state.eat(0x3F /* ? */ ) || this.regexp_eatBracedQuantifier(state, noError);\n};\npp$1.regexp_eatBracedQuantifier = function(state, noError) {\n    var start = state.pos;\n    if (state.eat(0x7B /* { */ )) {\n        var min = 0, max = -1;\n        if (this.regexp_eatDecimalDigits(state)) {\n            min = state.lastIntValue;\n            if (state.eat(0x2C /* , */ ) && this.regexp_eatDecimalDigits(state)) {\n                max = state.lastIntValue;\n            }\n            if (state.eat(0x7D /* } */ )) {\n                // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n                if (max !== -1 && max < min && !noError) {\n                    state.raise(\"numbers out of order in {} quantifier\");\n                }\n                return true;\n            }\n        }\n        if (state.switchU && !noError) {\n            state.raise(\"Incomplete quantifier\");\n        }\n        state.pos = start;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$1.regexp_eatAtom = function(state) {\n    return this.regexp_eatPatternCharacters(state) || state.eat(0x2E /* . */ ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);\n};\npp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */ )) {\n        if (this.regexp_eatAtomEscape(state)) {\n            return true;\n        }\n        state.pos = start;\n    }\n    return false;\n};\npp$1.regexp_eatUncapturingGroup = function(state) {\n    var start = state.pos;\n    if (state.eat(0x28 /* ( */ )) {\n        if (state.eat(0x3F /* ? */ ) && state.eat(0x3A /* : */ )) {\n            this.regexp_disjunction(state);\n            if (state.eat(0x29 /* ) */ )) {\n                return true;\n            }\n            state.raise(\"Unterminated group\");\n        }\n        state.pos = start;\n    }\n    return false;\n};\npp$1.regexp_eatCapturingGroup = function(state) {\n    if (state.eat(0x28 /* ( */ )) {\n        if (this.options.ecmaVersion >= 9) {\n            this.regexp_groupSpecifier(state);\n        } else if (state.current() === 0x3F /* ? */ ) {\n            state.raise(\"Invalid group\");\n        }\n        this.regexp_disjunction(state);\n        if (state.eat(0x29 /* ) */ )) {\n            state.numCapturingParens += 1;\n            return true;\n        }\n        state.raise(\"Unterminated group\");\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$1.regexp_eatExtendedAtom = function(state) {\n    return state.eat(0x2E /* . */ ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$1.regexp_eatInvalidBracedQuantifier = function(state) {\n    if (this.regexp_eatBracedQuantifier(state, true)) {\n        state.raise(\"Nothing to repeat\");\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$1.regexp_eatSyntaxCharacter = function(state) {\n    var ch = state.current();\n    if (isSyntaxCharacter(ch)) {\n        state.lastIntValue = ch;\n        state.advance();\n        return true;\n    }\n    return false;\n};\nfunction isSyntaxCharacter(ch) {\n    return ch === 0x24 /* $ */  || ch >= 0x28 /* ( */  && ch <= 0x2B /* + */  || ch === 0x2E /* . */  || ch === 0x3F /* ? */  || ch >= 0x5B /* [ */  && ch <= 0x5E /* ^ */  || ch >= 0x7B /* { */  && ch <= 0x7D /* } */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$1.regexp_eatPatternCharacters = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    while((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)){\n        state.advance();\n    }\n    return state.pos !== start;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$1.regexp_eatExtendedPatternCharacter = function(state) {\n    var ch = state.current();\n    if (ch !== -1 && ch !== 0x24 /* $ */  && !(ch >= 0x28 /* ( */  && ch <= 0x2B /* + */ ) && ch !== 0x2E /* . */  && ch !== 0x3F /* ? */  && ch !== 0x5B /* [ */  && ch !== 0x5E /* ^ */  && ch !== 0x7C /* | */ ) {\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$1.regexp_groupSpecifier = function(state) {\n    if (state.eat(0x3F /* ? */ )) {\n        if (this.regexp_eatGroupName(state)) {\n            if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n                state.raise(\"Duplicate capture group name\");\n            }\n            state.groupNames.push(state.lastStringValue);\n            return;\n        }\n        state.raise(\"Invalid group\");\n    }\n};\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatGroupName = function(state) {\n    state.lastStringValue = \"\";\n    if (state.eat(0x3C /* < */ )) {\n        if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */ )) {\n            return true;\n        }\n        state.raise(\"Invalid capture group name\");\n    }\n    return false;\n};\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatRegExpIdentifierName = function(state) {\n    state.lastStringValue = \"\";\n    if (this.regexp_eatRegExpIdentifierStart(state)) {\n        state.lastStringValue += codePointToString(state.lastIntValue);\n        while(this.regexp_eatRegExpIdentifierPart(state)){\n            state.lastStringValue += codePointToString(state.lastIntValue);\n        }\n        return true;\n    }\n    return false;\n};\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$1.regexp_eatRegExpIdentifierStart = function(state) {\n    var start = state.pos;\n    var forceU = this.options.ecmaVersion >= 11;\n    var ch = state.current(forceU);\n    state.advance(forceU);\n    if (ch === 0x5C /* \\ */  && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n        ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierStart(ch)) {\n        state.lastIntValue = ch;\n        return true;\n    }\n    state.pos = start;\n    return false;\n};\nfunction isRegExpIdentifierStart(ch) {\n    return isIdentifierStart(ch, true) || ch === 0x24 /* $ */  || ch === 0x5F /* _ */ ;\n}\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$1.regexp_eatRegExpIdentifierPart = function(state) {\n    var start = state.pos;\n    var forceU = this.options.ecmaVersion >= 11;\n    var ch = state.current(forceU);\n    state.advance(forceU);\n    if (ch === 0x5C /* \\ */  && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n        ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierPart(ch)) {\n        state.lastIntValue = ch;\n        return true;\n    }\n    state.pos = start;\n    return false;\n};\nfunction isRegExpIdentifierPart(ch) {\n    return isIdentifierChar(ch, true) || ch === 0x24 /* $ */  || ch === 0x5F /* _ */  || ch === 0x200C /* <ZWNJ> */  || ch === 0x200D /* <ZWJ> */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$1.regexp_eatAtomEscape = function(state) {\n    if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {\n        return true;\n    }\n    if (state.switchU) {\n        // Make the same message as V8.\n        if (state.current() === 0x63 /* c */ ) {\n            state.raise(\"Invalid unicode escape\");\n        }\n        state.raise(\"Invalid escape\");\n    }\n    return false;\n};\npp$1.regexp_eatBackReference = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatDecimalEscape(state)) {\n        var n = state.lastIntValue;\n        if (state.switchU) {\n            // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n            if (n > state.maxBackReference) {\n                state.maxBackReference = n;\n            }\n            return true;\n        }\n        if (n <= state.numCapturingParens) {\n            return true;\n        }\n        state.pos = start;\n    }\n    return false;\n};\npp$1.regexp_eatKGroupName = function(state) {\n    if (state.eat(0x6B /* k */ )) {\n        if (this.regexp_eatGroupName(state)) {\n            state.backReferenceNames.push(state.lastStringValue);\n            return true;\n        }\n        state.raise(\"Invalid named reference\");\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$1.regexp_eatCharacterEscape = function(state) {\n    return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);\n};\npp$1.regexp_eatCControlLetter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x63 /* c */ )) {\n        if (this.regexp_eatControlLetter(state)) {\n            return true;\n        }\n        state.pos = start;\n    }\n    return false;\n};\npp$1.regexp_eatZero = function(state) {\n    if (state.current() === 0x30 /* 0 */  && !isDecimalDigit(state.lookahead())) {\n        state.lastIntValue = 0;\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$1.regexp_eatControlEscape = function(state) {\n    var ch = state.current();\n    if (ch === 0x74 /* t */ ) {\n        state.lastIntValue = 0x09; /* \\t */ \n        state.advance();\n        return true;\n    }\n    if (ch === 0x6E /* n */ ) {\n        state.lastIntValue = 0x0A; /* \\n */ \n        state.advance();\n        return true;\n    }\n    if (ch === 0x76 /* v */ ) {\n        state.lastIntValue = 0x0B; /* \\v */ \n        state.advance();\n        return true;\n    }\n    if (ch === 0x66 /* f */ ) {\n        state.lastIntValue = 0x0C; /* \\f */ \n        state.advance();\n        return true;\n    }\n    if (ch === 0x72 /* r */ ) {\n        state.lastIntValue = 0x0D; /* \\r */ \n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$1.regexp_eatControlLetter = function(state) {\n    var ch = state.current();\n    if (isControlLetter(ch)) {\n        state.lastIntValue = ch % 0x20;\n        state.advance();\n        return true;\n    }\n    return false;\n};\nfunction isControlLetter(ch) {\n    return ch >= 0x41 /* A */  && ch <= 0x5A /* Z */  || ch >= 0x61 /* a */  && ch <= 0x7A /* z */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n    if (forceU === void 0) forceU = false;\n    var start = state.pos;\n    var switchU = forceU || state.switchU;\n    if (state.eat(0x75 /* u */ )) {\n        if (this.regexp_eatFixedHexDigits(state, 4)) {\n            var lead = state.lastIntValue;\n            if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n                var leadSurrogateEnd = state.pos;\n                if (state.eat(0x5C /* \\ */ ) && state.eat(0x75 /* u */ ) && this.regexp_eatFixedHexDigits(state, 4)) {\n                    var trail = state.lastIntValue;\n                    if (trail >= 0xDC00 && trail <= 0xDFFF) {\n                        state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n                        return true;\n                    }\n                }\n                state.pos = leadSurrogateEnd;\n                state.lastIntValue = lead;\n            }\n            return true;\n        }\n        if (switchU && state.eat(0x7B /* { */ ) && this.regexp_eatHexDigits(state) && state.eat(0x7D /* } */ ) && isValidUnicode(state.lastIntValue)) {\n            return true;\n        }\n        if (switchU) {\n            state.raise(\"Invalid unicode escape\");\n        }\n        state.pos = start;\n    }\n    return false;\n};\nfunction isValidUnicode(ch) {\n    return ch >= 0 && ch <= 0x10FFFF;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$1.regexp_eatIdentityEscape = function(state) {\n    if (state.switchU) {\n        if (this.regexp_eatSyntaxCharacter(state)) {\n            return true;\n        }\n        if (state.eat(0x2F /* / */ )) {\n            state.lastIntValue = 0x2F; /* / */ \n            return true;\n        }\n        return false;\n    }\n    var ch = state.current();\n    if (ch !== 0x63 /* c */  && (!state.switchN || ch !== 0x6B /* k */ )) {\n        state.lastIntValue = ch;\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$1.regexp_eatDecimalEscape = function(state) {\n    state.lastIntValue = 0;\n    var ch = state.current();\n    if (ch >= 0x31 /* 1 */  && ch <= 0x39 /* 9 */ ) {\n        do {\n            state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */ );\n            state.advance();\n        }while ((ch = state.current()) >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ );\n        return true;\n    }\n    return false;\n};\n// Return values used by character set parsing methods, needed to\n// forbid negation of sets that can match strings.\nvar CharSetNone = 0; // Nothing parsed\nvar CharSetOk = 1; // Construct parsed, cannot contain strings\nvar CharSetString = 2; // Construct parsed, can contain strings\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$1.regexp_eatCharacterClassEscape = function(state) {\n    var ch = state.current();\n    if (isCharacterClassEscape(ch)) {\n        state.lastIntValue = -1;\n        state.advance();\n        return CharSetOk;\n    }\n    var negate = false;\n    if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = ch === 0x50 /* P */ ) || ch === 0x70 /* p */ )) {\n        state.lastIntValue = -1;\n        state.advance();\n        var result;\n        if (state.eat(0x7B /* { */ ) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(0x7D /* } */ )) {\n            if (negate && result === CharSetString) {\n                state.raise(\"Invalid property name\");\n            }\n            return result;\n        }\n        state.raise(\"Invalid property name\");\n    }\n    return CharSetNone;\n};\nfunction isCharacterClassEscape(ch) {\n    return ch === 0x64 /* d */  || ch === 0x44 /* D */  || ch === 0x73 /* s */  || ch === 0x53 /* S */  || ch === 0x77 /* w */  || ch === 0x57 /* W */ ;\n}\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\n    var start = state.pos;\n    // UnicodePropertyName `=` UnicodePropertyValue\n    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */ )) {\n        var name = state.lastStringValue;\n        if (this.regexp_eatUnicodePropertyValue(state)) {\n            var value = state.lastStringValue;\n            this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n            return CharSetOk;\n        }\n    }\n    state.pos = start;\n    // LoneUnicodePropertyNameOrValue\n    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n        var nameOrValue = state.lastStringValue;\n        return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    }\n    return CharSetNone;\n};\npp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n    if (!hasOwn(state.unicodeProperties.nonBinary, name)) {\n        state.raise(\"Invalid property name\");\n    }\n    if (!state.unicodeProperties.nonBinary[name].test(value)) {\n        state.raise(\"Invalid property value\");\n    }\n};\npp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n    if (state.unicodeProperties.binary.test(nameOrValue)) {\n        return CharSetOk;\n    }\n    if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) {\n        return CharSetString;\n    }\n    state.raise(\"Invalid property name\");\n};\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$1.regexp_eatUnicodePropertyName = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while(isUnicodePropertyNameCharacter(ch = state.current())){\n        state.lastStringValue += codePointToString(ch);\n        state.advance();\n    }\n    return state.lastStringValue !== \"\";\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n    return isControlLetter(ch) || ch === 0x5F /* _ */ ;\n}\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatUnicodePropertyValue = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while(isUnicodePropertyValueCharacter(ch = state.current())){\n        state.lastStringValue += codePointToString(ch);\n        state.advance();\n    }\n    return state.lastStringValue !== \"\";\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n    return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);\n}\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n    return this.regexp_eatUnicodePropertyValue(state);\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$1.regexp_eatCharacterClass = function(state) {\n    if (state.eat(0x5B /* [ */ )) {\n        var negate = state.eat(0x5E /* ^ */ );\n        var result = this.regexp_classContents(state);\n        if (!state.eat(0x5D /* ] */ )) {\n            state.raise(\"Unterminated character class\");\n        }\n        if (negate && result === CharSetString) {\n            state.raise(\"Negated character class may contain strings\");\n        }\n        return true;\n    }\n    return false;\n};\n// https://tc39.es/ecma262/#prod-ClassContents\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\npp$1.regexp_classContents = function(state) {\n    if (state.current() === 0x5D /* ] */ ) {\n        return CharSetOk;\n    }\n    if (state.switchV) {\n        return this.regexp_classSetExpression(state);\n    }\n    this.regexp_nonEmptyClassRanges(state);\n    return CharSetOk;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$1.regexp_nonEmptyClassRanges = function(state) {\n    while(this.regexp_eatClassAtom(state)){\n        var left = state.lastIntValue;\n        if (state.eat(0x2D /* - */ ) && this.regexp_eatClassAtom(state)) {\n            var right = state.lastIntValue;\n            if (state.switchU && (left === -1 || right === -1)) {\n                state.raise(\"Invalid character class\");\n            }\n            if (left !== -1 && right !== -1 && left > right) {\n                state.raise(\"Range out of order in character class\");\n            }\n        }\n    }\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$1.regexp_eatClassAtom = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */ )) {\n        if (this.regexp_eatClassEscape(state)) {\n            return true;\n        }\n        if (state.switchU) {\n            // Make the same message as V8.\n            var ch$1 = state.current();\n            if (ch$1 === 0x63 /* c */  || isOctalDigit(ch$1)) {\n                state.raise(\"Invalid class escape\");\n            }\n            state.raise(\"Invalid escape\");\n        }\n        state.pos = start;\n    }\n    var ch = state.current();\n    if (ch !== 0x5D /* ] */ ) {\n        state.lastIntValue = ch;\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$1.regexp_eatClassEscape = function(state) {\n    var start = state.pos;\n    if (state.eat(0x62 /* b */ )) {\n        state.lastIntValue = 0x08; /* <BS> */ \n        return true;\n    }\n    if (state.switchU && state.eat(0x2D /* - */ )) {\n        state.lastIntValue = 0x2D; /* - */ \n        return true;\n    }\n    if (!state.switchU && state.eat(0x63 /* c */ )) {\n        if (this.regexp_eatClassControlLetter(state)) {\n            return true;\n        }\n        state.pos = start;\n    }\n    return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);\n};\n// https://tc39.es/ecma262/#prod-ClassSetExpression\n// https://tc39.es/ecma262/#prod-ClassUnion\n// https://tc39.es/ecma262/#prod-ClassIntersection\n// https://tc39.es/ecma262/#prod-ClassSubtraction\npp$1.regexp_classSetExpression = function(state) {\n    var result = CharSetOk, subResult;\n    if (this.regexp_eatClassSetRange(state)) ;\n    else if (subResult = this.regexp_eatClassSetOperand(state)) {\n        if (subResult === CharSetString) {\n            result = CharSetString;\n        }\n        // https://tc39.es/ecma262/#prod-ClassIntersection\n        var start = state.pos;\n        while(state.eatChars([\n            0x26,\n            0x26\n        ])){\n            if (state.current() !== 0x26 /* & */  && (subResult = this.regexp_eatClassSetOperand(state))) {\n                if (subResult !== CharSetString) {\n                    result = CharSetOk;\n                }\n                continue;\n            }\n            state.raise(\"Invalid character in character class\");\n        }\n        if (start !== state.pos) {\n            return result;\n        }\n        // https://tc39.es/ecma262/#prod-ClassSubtraction\n        while(state.eatChars([\n            0x2D,\n            0x2D\n        ])){\n            if (this.regexp_eatClassSetOperand(state)) {\n                continue;\n            }\n            state.raise(\"Invalid character in character class\");\n        }\n        if (start !== state.pos) {\n            return result;\n        }\n    } else {\n        state.raise(\"Invalid character in character class\");\n    }\n    // https://tc39.es/ecma262/#prod-ClassUnion\n    for(;;){\n        if (this.regexp_eatClassSetRange(state)) {\n            continue;\n        }\n        subResult = this.regexp_eatClassSetOperand(state);\n        if (!subResult) {\n            return result;\n        }\n        if (subResult === CharSetString) {\n            result = CharSetString;\n        }\n    }\n};\n// https://tc39.es/ecma262/#prod-ClassSetRange\npp$1.regexp_eatClassSetRange = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatClassSetCharacter(state)) {\n        var left = state.lastIntValue;\n        if (state.eat(0x2D /* - */ ) && this.regexp_eatClassSetCharacter(state)) {\n            var right = state.lastIntValue;\n            if (left !== -1 && right !== -1 && left > right) {\n                state.raise(\"Range out of order in character class\");\n            }\n            return true;\n        }\n        state.pos = start;\n    }\n    return false;\n};\n// https://tc39.es/ecma262/#prod-ClassSetOperand\npp$1.regexp_eatClassSetOperand = function(state) {\n    if (this.regexp_eatClassSetCharacter(state)) {\n        return CharSetOk;\n    }\n    return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);\n};\n// https://tc39.es/ecma262/#prod-NestedClass\npp$1.regexp_eatNestedClass = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5B /* [ */ )) {\n        var negate = state.eat(0x5E /* ^ */ );\n        var result = this.regexp_classContents(state);\n        if (state.eat(0x5D /* ] */ )) {\n            if (negate && result === CharSetString) {\n                state.raise(\"Negated character class may contain strings\");\n            }\n            return result;\n        }\n        state.pos = start;\n    }\n    if (state.eat(0x5C /* \\ */ )) {\n        var result$1 = this.regexp_eatCharacterClassEscape(state);\n        if (result$1) {\n            return result$1;\n        }\n        state.pos = start;\n    }\n    return null;\n};\n// https://tc39.es/ecma262/#prod-ClassStringDisjunction\npp$1.regexp_eatClassStringDisjunction = function(state) {\n    var start = state.pos;\n    if (state.eatChars([\n        0x5C,\n        0x71\n    ])) {\n        if (state.eat(0x7B /* { */ )) {\n            var result = this.regexp_classStringDisjunctionContents(state);\n            if (state.eat(0x7D /* } */ )) {\n                return result;\n            }\n        } else {\n            // Make the same message as V8.\n            state.raise(\"Invalid escape\");\n        }\n        state.pos = start;\n    }\n    return null;\n};\n// https://tc39.es/ecma262/#prod-ClassStringDisjunctionContents\npp$1.regexp_classStringDisjunctionContents = function(state) {\n    var result = this.regexp_classString(state);\n    while(state.eat(0x7C /* | */ )){\n        if (this.regexp_classString(state) === CharSetString) {\n            result = CharSetString;\n        }\n    }\n    return result;\n};\n// https://tc39.es/ecma262/#prod-ClassString\n// https://tc39.es/ecma262/#prod-NonEmptyClassString\npp$1.regexp_classString = function(state) {\n    var count = 0;\n    while(this.regexp_eatClassSetCharacter(state)){\n        count++;\n    }\n    return count === 1 ? CharSetOk : CharSetString;\n};\n// https://tc39.es/ecma262/#prod-ClassSetCharacter\npp$1.regexp_eatClassSetCharacter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */ )) {\n        if (this.regexp_eatCharacterEscape(state) || this.regexp_eatClassSetReservedPunctuator(state)) {\n            return true;\n        }\n        if (state.eat(0x62 /* b */ )) {\n            state.lastIntValue = 0x08; /* <BS> */ \n            return true;\n        }\n        state.pos = start;\n        return false;\n    }\n    var ch = state.current();\n    if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) {\n        return false;\n    }\n    if (isClassSetSyntaxCharacter(ch)) {\n        return false;\n    }\n    state.advance();\n    state.lastIntValue = ch;\n    return true;\n};\n// https://tc39.es/ecma262/#prod-ClassSetReservedDoublePunctuator\nfunction isClassSetReservedDoublePunctuatorCharacter(ch) {\n    return ch === 0x21 /* ! */  || ch >= 0x23 /* # */  && ch <= 0x26 /* & */  || ch >= 0x2A /* * */  && ch <= 0x2C /* , */  || ch === 0x2E /* . */  || ch >= 0x3A /* : */  && ch <= 0x40 /* @ */  || ch === 0x5E /* ^ */  || ch === 0x60 /* ` */  || ch === 0x7E /* ~ */ ;\n}\n// https://tc39.es/ecma262/#prod-ClassSetSyntaxCharacter\nfunction isClassSetSyntaxCharacter(ch) {\n    return ch === 0x28 /* ( */  || ch === 0x29 /* ) */  || ch === 0x2D /* - */  || ch === 0x2F /* / */  || ch >= 0x5B /* [ */  && ch <= 0x5D /* ] */  || ch >= 0x7B /* { */  && ch <= 0x7D /* } */ ;\n}\n// https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\npp$1.regexp_eatClassSetReservedPunctuator = function(state) {\n    var ch = state.current();\n    if (isClassSetReservedPunctuator(ch)) {\n        state.lastIntValue = ch;\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\nfunction isClassSetReservedPunctuator(ch) {\n    return ch === 0x21 /* ! */  || ch === 0x23 /* # */  || ch === 0x25 /* % */  || ch === 0x26 /* & */  || ch === 0x2C /* , */  || ch === 0x2D /* - */  || ch >= 0x3A /* : */  && ch <= 0x3E /* > */  || ch === 0x40 /* @ */  || ch === 0x60 /* ` */  || ch === 0x7E /* ~ */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$1.regexp_eatClassControlLetter = function(state) {\n    var ch = state.current();\n    if (isDecimalDigit(ch) || ch === 0x5F /* _ */ ) {\n        state.lastIntValue = ch % 0x20;\n        state.advance();\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatHexEscapeSequence = function(state) {\n    var start = state.pos;\n    if (state.eat(0x78 /* x */ )) {\n        if (this.regexp_eatFixedHexDigits(state, 2)) {\n            return true;\n        }\n        if (state.switchU) {\n            state.raise(\"Invalid escape\");\n        }\n        state.pos = start;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$1.regexp_eatDecimalDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while(isDecimalDigit(ch = state.current())){\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */ );\n        state.advance();\n    }\n    return state.pos !== start;\n};\nfunction isDecimalDigit(ch) {\n    return ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$1.regexp_eatHexDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while(isHexDigit(ch = state.current())){\n        state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n        state.advance();\n    }\n    return state.pos !== start;\n};\nfunction isHexDigit(ch) {\n    return ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */  || ch >= 0x41 /* A */  && ch <= 0x46 /* F */  || ch >= 0x61 /* a */  && ch <= 0x66 /* f */ ;\n}\nfunction hexToInt(ch) {\n    if (ch >= 0x41 /* A */  && ch <= 0x46 /* F */ ) {\n        return 10 + (ch - 0x41 /* A */ );\n    }\n    if (ch >= 0x61 /* a */  && ch <= 0x66 /* f */ ) {\n        return 10 + (ch - 0x61 /* a */ );\n    }\n    return ch - 0x30 /* 0 */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\n    if (this.regexp_eatOctalDigit(state)) {\n        var n1 = state.lastIntValue;\n        if (this.regexp_eatOctalDigit(state)) {\n            var n2 = state.lastIntValue;\n            if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n                state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n            } else {\n                state.lastIntValue = n1 * 8 + n2;\n            }\n        } else {\n            state.lastIntValue = n1;\n        }\n        return true;\n    }\n    return false;\n};\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$1.regexp_eatOctalDigit = function(state) {\n    var ch = state.current();\n    if (isOctalDigit(ch)) {\n        state.lastIntValue = ch - 0x30; /* 0 */ \n        state.advance();\n        return true;\n    }\n    state.lastIntValue = 0;\n    return false;\n};\nfunction isOctalDigit(ch) {\n    return ch >= 0x30 /* 0 */  && ch <= 0x37 /* 7 */ ;\n}\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatFixedHexDigits = function(state, length) {\n    var start = state.pos;\n    state.lastIntValue = 0;\n    for(var i = 0; i < length; ++i){\n        var ch = state.current();\n        if (!isHexDigit(ch)) {\n            state.pos = start;\n            return false;\n        }\n        state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n        state.advance();\n    }\n    return true;\n};\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\nvar Token = function Token(p) {\n    this.type = p.type;\n    this.value = p.value;\n    this.start = p.start;\n    this.end = p.end;\n    if (p.options.locations) {\n        this.loc = new SourceLocation(p, p.startLoc, p.endLoc);\n    }\n    if (p.options.ranges) {\n        this.range = [\n            p.start,\n            p.end\n        ];\n    }\n};\n// ## Tokenizer\nvar pp = Parser.prototype;\n// Move to the next token\npp.next = function(ignoreEscapeSequenceInKeyword) {\n    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {\n        this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword);\n    }\n    if (this.options.onToken) {\n        this.options.onToken(new Token(this));\n    }\n    this.lastTokEnd = this.end;\n    this.lastTokStart = this.start;\n    this.lastTokEndLoc = this.endLoc;\n    this.lastTokStartLoc = this.startLoc;\n    this.nextToken();\n};\npp.getToken = function() {\n    this.next();\n    return new Token(this);\n};\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\") {\n    pp[Symbol.iterator] = function() {\n        var this$1$1 = this;\n        return {\n            next: function() {\n                var token = this$1$1.getToken();\n                return {\n                    done: token.type === types$1.eof,\n                    value: token\n                };\n            }\n        };\n    };\n}\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n// Read a single token, updating the parser object's token-related\n// properties.\npp.nextToken = function() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) {\n        this.skipSpace();\n    }\n    this.start = this.pos;\n    if (this.options.locations) {\n        this.startLoc = this.curPosition();\n    }\n    if (this.pos >= this.input.length) {\n        return this.finishToken(types$1.eof);\n    }\n    if (curContext.override) {\n        return curContext.override(this);\n    } else {\n        this.readToken(this.fullCharCodeAtPos());\n    }\n};\npp.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */ ) {\n        return this.readWord();\n    }\n    return this.getTokenFromCode(code);\n};\npp.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos);\n    if (code <= 0xd7ff || code >= 0xdc00) {\n        return code;\n    }\n    var next = this.input.charCodeAt(this.pos + 1);\n    return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00;\n};\npp.skipBlockComment = function() {\n    var startLoc = this.options.onComment && this.curPosition();\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n    if (end === -1) {\n        this.raise(this.pos - 2, \"Unterminated comment\");\n    }\n    this.pos = end + 2;\n    if (this.options.locations) {\n        for(var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;){\n            ++this.curLine;\n            pos = this.lineStart = nextBreak;\n        }\n    }\n    if (this.options.onComment) {\n        this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n    }\n};\npp.skipLineComment = function(startSkip) {\n    var start = this.pos;\n    var startLoc = this.options.onComment && this.curPosition();\n    var ch = this.input.charCodeAt(this.pos += startSkip);\n    while(this.pos < this.input.length && !isNewLine(ch)){\n        ch = this.input.charCodeAt(++this.pos);\n    }\n    if (this.options.onComment) {\n        this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n    }\n};\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\npp.skipSpace = function() {\n    loop: while(this.pos < this.input.length){\n        var ch = this.input.charCodeAt(this.pos);\n        switch(ch){\n            case 32:\n            case 160:\n                ++this.pos;\n                break;\n            case 13:\n                if (this.input.charCodeAt(this.pos + 1) === 10) {\n                    ++this.pos;\n                }\n            case 10:\n            case 8232:\n            case 8233:\n                ++this.pos;\n                if (this.options.locations) {\n                    ++this.curLine;\n                    this.lineStart = this.pos;\n                }\n                break;\n            case 47:\n                switch(this.input.charCodeAt(this.pos + 1)){\n                    case 42:\n                        this.skipBlockComment();\n                        break;\n                    case 47:\n                        this.skipLineComment(2);\n                        break;\n                    default:\n                        break loop;\n                }\n                break;\n            default:\n                if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n                    ++this.pos;\n                } else {\n                    break loop;\n                }\n        }\n    }\n};\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\npp.finishToken = function(type, val) {\n    this.end = this.pos;\n    if (this.options.locations) {\n        this.endLoc = this.curPosition();\n    }\n    var prevType = this.type;\n    this.type = type;\n    this.value = val;\n    this.updateContext(prevType);\n};\n// ### Token reading\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next >= 48 && next <= 57) {\n        return this.readNumber(true);\n    }\n    var next2 = this.input.charCodeAt(this.pos + 2);\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n        this.pos += 3;\n        return this.finishToken(types$1.ellipsis);\n    } else {\n        ++this.pos;\n        return this.finishToken(types$1.dot);\n    }\n};\npp.readToken_slash = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (this.exprAllowed) {\n        ++this.pos;\n        return this.readRegexp();\n    }\n    if (next === 61) {\n        return this.finishOp(types$1.assign, 2);\n    }\n    return this.finishOp(types$1.slash, 1);\n};\npp.readToken_mult_modulo_exp = function(code) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    var tokentype = code === 42 ? types$1.star : types$1.modulo;\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n        ++size;\n        tokentype = types$1.starstar;\n        next = this.input.charCodeAt(this.pos + 2);\n    }\n    if (next === 61) {\n        return this.finishOp(types$1.assign, size + 1);\n    }\n    return this.finishOp(tokentype, size);\n};\npp.readToken_pipe_amp = function(code) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n        if (this.options.ecmaVersion >= 12) {\n            var next2 = this.input.charCodeAt(this.pos + 2);\n            if (next2 === 61) {\n                return this.finishOp(types$1.assign, 3);\n            }\n        }\n        return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n    }\n    if (next === 61) {\n        return this.finishOp(types$1.assign, 2);\n    }\n    return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n};\npp.readToken_caret = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) {\n        return this.finishOp(types$1.assign, 2);\n    }\n    return this.finishOp(types$1.bitwiseXOR, 1);\n};\npp.readToken_plus_min = function(code) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n        if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n            // A `-->` line comment\n            this.skipLineComment(3);\n            this.skipSpace();\n            return this.nextToken();\n        }\n        return this.finishOp(types$1.incDec, 2);\n    }\n    if (next === 61) {\n        return this.finishOp(types$1.assign, 2);\n    }\n    return this.finishOp(types$1.plusMin, 1);\n};\npp.readToken_lt_gt = function(code) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    if (next === code) {\n        size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n        if (this.input.charCodeAt(this.pos + size) === 61) {\n            return this.finishOp(types$1.assign, size + 1);\n        }\n        return this.finishOp(types$1.bitShift, size);\n    }\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {\n        // `<!--`, an XML-style comment that should be interpreted as a line comment\n        this.skipLineComment(4);\n        this.skipSpace();\n        return this.nextToken();\n    }\n    if (next === 61) {\n        size = 2;\n    }\n    return this.finishOp(types$1.relational, size);\n};\npp.readToken_eq_excl = function(code) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) {\n        return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n    }\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n        this.pos += 2;\n        return this.finishToken(types$1.arrow);\n    }\n    return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1);\n};\npp.readToken_question = function() {\n    var ecmaVersion = this.options.ecmaVersion;\n    if (ecmaVersion >= 11) {\n        var next = this.input.charCodeAt(this.pos + 1);\n        if (next === 46) {\n            var next2 = this.input.charCodeAt(this.pos + 2);\n            if (next2 < 48 || next2 > 57) {\n                return this.finishOp(types$1.questionDot, 2);\n            }\n        }\n        if (next === 63) {\n            if (ecmaVersion >= 12) {\n                var next2$1 = this.input.charCodeAt(this.pos + 2);\n                if (next2$1 === 61) {\n                    return this.finishOp(types$1.assign, 3);\n                }\n            }\n            return this.finishOp(types$1.coalesce, 2);\n        }\n    }\n    return this.finishOp(types$1.question, 1);\n};\npp.readToken_numberSign = function() {\n    var ecmaVersion = this.options.ecmaVersion;\n    var code = 35; // '#'\n    if (ecmaVersion >= 13) {\n        ++this.pos;\n        code = this.fullCharCodeAtPos();\n        if (isIdentifierStart(code, true) || code === 92 /* '\\' */ ) {\n            return this.finishToken(types$1.privateId, this.readWord1());\n        }\n    }\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\npp.getTokenFromCode = function(code) {\n    switch(code){\n        // The interpretation of a dot depends on whether it is followed\n        // by a digit or another two dots.\n        case 46:\n            return this.readToken_dot();\n        // Punctuation tokens.\n        case 40:\n            ++this.pos;\n            return this.finishToken(types$1.parenL);\n        case 41:\n            ++this.pos;\n            return this.finishToken(types$1.parenR);\n        case 59:\n            ++this.pos;\n            return this.finishToken(types$1.semi);\n        case 44:\n            ++this.pos;\n            return this.finishToken(types$1.comma);\n        case 91:\n            ++this.pos;\n            return this.finishToken(types$1.bracketL);\n        case 93:\n            ++this.pos;\n            return this.finishToken(types$1.bracketR);\n        case 123:\n            ++this.pos;\n            return this.finishToken(types$1.braceL);\n        case 125:\n            ++this.pos;\n            return this.finishToken(types$1.braceR);\n        case 58:\n            ++this.pos;\n            return this.finishToken(types$1.colon);\n        case 96:\n            if (this.options.ecmaVersion < 6) {\n                break;\n            }\n            ++this.pos;\n            return this.finishToken(types$1.backQuote);\n        case 48:\n            var next = this.input.charCodeAt(this.pos + 1);\n            if (next === 120 || next === 88) {\n                return this.readRadixNumber(16);\n            } // '0x', '0X' - hex number\n            if (this.options.ecmaVersion >= 6) {\n                if (next === 111 || next === 79) {\n                    return this.readRadixNumber(8);\n                } // '0o', '0O' - octal number\n                if (next === 98 || next === 66) {\n                    return this.readRadixNumber(2);\n                } // '0b', '0B' - binary number\n            }\n        // Anything else beginning with a digit is an integer, octal\n        // number, or float.\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n            return this.readNumber(false);\n        // Quotes produce strings.\n        case 34:\n        case 39:\n            return this.readString(code);\n        // Operators are parsed inline in tiny state machines. '=' (61) is\n        // often referred to. `finishOp` simply skips the amount of\n        // characters it is given as second argument, and returns a token\n        // of the type given by its first argument.\n        case 47:\n            return this.readToken_slash();\n        case 37:\n        case 42:\n            return this.readToken_mult_modulo_exp(code);\n        case 124:\n        case 38:\n            return this.readToken_pipe_amp(code);\n        case 94:\n            return this.readToken_caret();\n        case 43:\n        case 45:\n            return this.readToken_plus_min(code);\n        case 60:\n        case 62:\n            return this.readToken_lt_gt(code);\n        case 61:\n        case 33:\n            return this.readToken_eq_excl(code);\n        case 63:\n            return this.readToken_question();\n        case 126:\n            return this.finishOp(types$1.prefix, 1);\n        case 35:\n            return this.readToken_numberSign();\n    }\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\npp.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size);\n    this.pos += size;\n    return this.finishToken(type, str);\n};\npp.readRegexp = function() {\n    var escaped, inClass, start = this.pos;\n    for(;;){\n        if (this.pos >= this.input.length) {\n            this.raise(start, \"Unterminated regular expression\");\n        }\n        var ch = this.input.charAt(this.pos);\n        if (lineBreak.test(ch)) {\n            this.raise(start, \"Unterminated regular expression\");\n        }\n        if (!escaped) {\n            if (ch === \"[\") {\n                inClass = true;\n            } else if (ch === \"]\" && inClass) {\n                inClass = false;\n            } else if (ch === \"/\" && !inClass) {\n                break;\n            }\n            escaped = ch === \"\\\\\";\n        } else {\n            escaped = false;\n        }\n        ++this.pos;\n    }\n    var pattern = this.input.slice(start, this.pos);\n    ++this.pos;\n    var flagsStart = this.pos;\n    var flags = this.readWord1();\n    if (this.containsEsc) {\n        this.unexpected(flagsStart);\n    }\n    // Validate pattern\n    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n    state.reset(start, pattern, flags);\n    this.validateRegExpFlags(state);\n    this.validateRegExpPattern(state);\n    // Create Literal#value property value.\n    var value = null;\n    try {\n        value = new RegExp(pattern, flags);\n    } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n    }\n    return this.finishToken(types$1.regexp, {\n        pattern: pattern,\n        flags: flags,\n        value: value\n    });\n};\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\npp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n    // `len` is used for character escape sequences. In that case, disallow separators.\n    var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n    // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n    // and isn't fraction part nor exponent part. In that case, if the first digit\n    // is zero then disallow separators.\n    var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n    var start = this.pos, total = 0, lastCode = 0;\n    for(var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos){\n        var code = this.input.charCodeAt(this.pos), val = void 0;\n        if (allowSeparators && code === 95) {\n            if (isLegacyOctalNumericLiteral) {\n                this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\");\n            }\n            if (lastCode === 95) {\n                this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\");\n            }\n            if (i === 0) {\n                this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\");\n            }\n            lastCode = code;\n            continue;\n        }\n        if (code >= 97) {\n            val = code - 97 + 10;\n        } else if (code >= 65) {\n            val = code - 65 + 10;\n        } else if (code >= 48 && code <= 57) {\n            val = code - 48;\n        } else {\n            val = Infinity;\n        }\n        if (val >= radix) {\n            break;\n        }\n        lastCode = code;\n        total = total * radix + val;\n    }\n    if (allowSeparators && lastCode === 95) {\n        this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\");\n    }\n    if (this.pos === start || len != null && this.pos - start !== len) {\n        return null;\n    }\n    return total;\n};\nfunction stringToNumber(str, isLegacyOctalNumericLiteral) {\n    if (isLegacyOctalNumericLiteral) {\n        return parseInt(str, 8);\n    }\n    // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n    return parseFloat(str.replace(/_/g, \"\"));\n}\nfunction stringToBigInt(str) {\n    if (typeof BigInt !== \"function\") {\n        return null;\n    }\n    // `BigInt(value)` throws syntax error if the string contains numeric separators.\n    return BigInt(str.replace(/_/g, \"\"));\n}\npp.readRadixNumber = function(radix) {\n    var start = this.pos;\n    this.pos += 2; // 0x\n    var val = this.readInt(radix);\n    if (val == null) {\n        this.raise(this.start + 2, \"Expected number in radix \" + radix);\n    }\n    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n        val = stringToBigInt(this.input.slice(start, this.pos));\n        ++this.pos;\n    } else if (isIdentifierStart(this.fullCharCodeAtPos())) {\n        this.raise(this.pos, \"Identifier directly after number\");\n    }\n    return this.finishToken(types$1.num, val);\n};\n// Read an integer, octal integer, or floating-point number.\npp.readNumber = function(startsWithDot) {\n    var start = this.pos;\n    if (!startsWithDot && this.readInt(10, undefined, true) === null) {\n        this.raise(start, \"Invalid number\");\n    }\n    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (octal && this.strict) {\n        this.raise(start, \"Invalid number\");\n    }\n    var next = this.input.charCodeAt(this.pos);\n    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n        var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n        ++this.pos;\n        if (isIdentifierStart(this.fullCharCodeAtPos())) {\n            this.raise(this.pos, \"Identifier directly after number\");\n        }\n        return this.finishToken(types$1.num, val$1);\n    }\n    if (octal && /[89]/.test(this.input.slice(start, this.pos))) {\n        octal = false;\n    }\n    if (next === 46 && !octal) {\n        ++this.pos;\n        this.readInt(10);\n        next = this.input.charCodeAt(this.pos);\n    }\n    if ((next === 69 || next === 101) && !octal) {\n        next = this.input.charCodeAt(++this.pos);\n        if (next === 43 || next === 45) {\n            ++this.pos;\n        } // '+-'\n        if (this.readInt(10) === null) {\n            this.raise(start, \"Invalid number\");\n        }\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) {\n        this.raise(this.pos, \"Identifier directly after number\");\n    }\n    var val = stringToNumber(this.input.slice(start, this.pos), octal);\n    return this.finishToken(types$1.num, val);\n};\n// Read a string value, interpreting backslash-escapes.\npp.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code;\n    if (ch === 123) {\n        if (this.options.ecmaVersion < 6) {\n            this.unexpected();\n        }\n        var codePos = ++this.pos;\n        code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n        ++this.pos;\n        if (code > 0x10FFFF) {\n            this.invalidStringToken(codePos, \"Code point out of bounds\");\n        }\n    } else {\n        code = this.readHexChar(4);\n    }\n    return code;\n};\npp.readString = function(quote) {\n    var out = \"\", chunkStart = ++this.pos;\n    for(;;){\n        if (this.pos >= this.input.length) {\n            this.raise(this.start, \"Unterminated string constant\");\n        }\n        var ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) {\n            break;\n        }\n        if (ch === 92) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.readEscapedChar(false);\n            chunkStart = this.pos;\n        } else if (ch === 0x2028 || ch === 0x2029) {\n            if (this.options.ecmaVersion < 10) {\n                this.raise(this.start, \"Unterminated string constant\");\n            }\n            ++this.pos;\n            if (this.options.locations) {\n                this.curLine++;\n                this.lineStart = this.pos;\n            }\n        } else {\n            if (isNewLine(ch)) {\n                this.raise(this.start, \"Unterminated string constant\");\n            }\n            ++this.pos;\n        }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(types$1.string, out);\n};\n// Reads template string tokens.\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\npp.tryReadTemplateToken = function() {\n    this.inTemplateElement = true;\n    try {\n        this.readTmplToken();\n    } catch (err) {\n        if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n            this.readInvalidTemplateToken();\n        } else {\n            throw err;\n        }\n    }\n    this.inTemplateElement = false;\n};\npp.invalidStringToken = function(position, message) {\n    if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n        throw INVALID_TEMPLATE_ESCAPE_ERROR;\n    } else {\n        this.raise(position, message);\n    }\n};\npp.readTmplToken = function() {\n    var out = \"\", chunkStart = this.pos;\n    for(;;){\n        if (this.pos >= this.input.length) {\n            this.raise(this.start, \"Unterminated template\");\n        }\n        var ch = this.input.charCodeAt(this.pos);\n        if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n            if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\n                if (ch === 36) {\n                    this.pos += 2;\n                    return this.finishToken(types$1.dollarBraceL);\n                } else {\n                    ++this.pos;\n                    return this.finishToken(types$1.backQuote);\n                }\n            }\n            out += this.input.slice(chunkStart, this.pos);\n            return this.finishToken(types$1.template, out);\n        }\n        if (ch === 92) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.readEscapedChar(true);\n            chunkStart = this.pos;\n        } else if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            ++this.pos;\n            switch(ch){\n                case 13:\n                    if (this.input.charCodeAt(this.pos) === 10) {\n                        ++this.pos;\n                    }\n                case 10:\n                    out += \"\\n\";\n                    break;\n                default:\n                    out += String.fromCharCode(ch);\n                    break;\n            }\n            if (this.options.locations) {\n                ++this.curLine;\n                this.lineStart = this.pos;\n            }\n            chunkStart = this.pos;\n        } else {\n            ++this.pos;\n        }\n    }\n};\n// Reads a template token to search for the end, without validating any escape sequences\npp.readInvalidTemplateToken = function() {\n    for(; this.pos < this.input.length; this.pos++){\n        switch(this.input[this.pos]){\n            case \"\\\\\":\n                ++this.pos;\n                break;\n            case \"$\":\n                if (this.input[this.pos + 1] !== \"{\") {\n                    break;\n                }\n            // falls through\n            case \"`\":\n                return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));\n        }\n    }\n    this.raise(this.start, \"Unterminated template\");\n};\n// Used to read escaped characters\npp.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos);\n    ++this.pos;\n    switch(ch){\n        case 110:\n            return \"\\n\" // 'n' -> '\\n'\n            ;\n        case 114:\n            return \"\\r\" // 'r' -> '\\r'\n            ;\n        case 120:\n            return String.fromCharCode(this.readHexChar(2)) // 'x'\n            ;\n        case 117:\n            return codePointToString(this.readCodePoint()) // 'u'\n            ;\n        case 116:\n            return \"\t\" // 't' -> '\\t'\n            ;\n        case 98:\n            return \"\\b\" // 'b' -> '\\b'\n            ;\n        case 118:\n            return \"\\v\" // 'v' -> '\\u000b'\n            ;\n        case 102:\n            return \"\\f\" // 'f' -> '\\f'\n            ;\n        case 13:\n            if (this.input.charCodeAt(this.pos) === 10) {\n                ++this.pos;\n            } // '\\r\\n'\n        case 10:\n            if (this.options.locations) {\n                this.lineStart = this.pos;\n                ++this.curLine;\n            }\n            return \"\";\n        case 56:\n        case 57:\n            if (this.strict) {\n                this.invalidStringToken(this.pos - 1, \"Invalid escape sequence\");\n            }\n            if (inTemplate) {\n                var codePos = this.pos - 1;\n                this.invalidStringToken(codePos, \"Invalid escape sequence in template string\");\n            }\n        default:\n            if (ch >= 48 && ch <= 55) {\n                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n                var octal = parseInt(octalStr, 8);\n                if (octal > 255) {\n                    octalStr = octalStr.slice(0, -1);\n                    octal = parseInt(octalStr, 8);\n                }\n                this.pos += octalStr.length - 1;\n                ch = this.input.charCodeAt(this.pos);\n                if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n                    this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? \"Octal literal in template string\" : \"Octal literal in strict mode\");\n                }\n                return String.fromCharCode(octal);\n            }\n            if (isNewLine(ch)) {\n                // Unicode new line characters after \\ get removed from output in both\n                // template literals and strings\n                return \"\";\n            }\n            return String.fromCharCode(ch);\n    }\n};\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\npp.readHexChar = function(len) {\n    var codePos = this.pos;\n    var n = this.readInt(16, len);\n    if (n === null) {\n        this.invalidStringToken(codePos, \"Bad character escape sequence\");\n    }\n    return n;\n};\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\npp.readWord1 = function() {\n    this.containsEsc = false;\n    var word = \"\", first = true, chunkStart = this.pos;\n    var astral = this.options.ecmaVersion >= 6;\n    while(this.pos < this.input.length){\n        var ch = this.fullCharCodeAtPos();\n        if (isIdentifierChar(ch, astral)) {\n            this.pos += ch <= 0xffff ? 1 : 2;\n        } else if (ch === 92) {\n            this.containsEsc = true;\n            word += this.input.slice(chunkStart, this.pos);\n            var escStart = this.pos;\n            if (this.input.charCodeAt(++this.pos) !== 117) {\n                this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n            }\n            ++this.pos;\n            var esc = this.readCodePoint();\n            if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {\n                this.invalidStringToken(escStart, \"Invalid Unicode escape\");\n            }\n            word += codePointToString(esc);\n            chunkStart = this.pos;\n        } else {\n            break;\n        }\n        first = false;\n    }\n    return word + this.input.slice(chunkStart, this.pos);\n};\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\npp.readWord = function() {\n    var word = this.readWord1();\n    var type = types$1.name;\n    if (this.keywords.test(word)) {\n        type = keywords[word];\n    }\n    return this.finishToken(type, word);\n};\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/acornjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/acornjs/acorn/issues\n//\n// [walk]: util/walk.js\nvar version = \"8.11.2\";\nParser.acorn = {\n    Parser: Parser,\n    version: version,\n    defaultOptions: defaultOptions,\n    Position: Position,\n    SourceLocation: SourceLocation,\n    getLineInfo: getLineInfo,\n    Node: Node,\n    TokenType: TokenType,\n    tokTypes: types$1,\n    keywordTypes: keywords,\n    TokContext: TokContext,\n    tokContexts: types,\n    isIdentifierChar: isIdentifierChar,\n    isIdentifierStart: isIdentifierStart,\n    Token: Token,\n    isNewLine: isNewLine,\n    lineBreak: lineBreak,\n    lineBreakG: lineBreakG,\n    nonASCIIwhitespace: nonASCIIwhitespace\n};\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\nfunction parse(input, options) {\n    return Parser.parse(input, options);\n}\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\nfunction parseExpressionAt(input, pos, options) {\n    return Parser.parseExpressionAt(input, pos, options);\n}\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\nfunction tokenizer(input, options) {\n    return Parser.tokenizer(input, options);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/acorn/dist/acorn.mjs\n");

/***/ })

};
;