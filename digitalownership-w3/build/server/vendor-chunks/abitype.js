"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/abitype";
exports.ids = ["vendor-chunks/abitype"];
exports.modules = {

/***/ "(ssr)/./node_modules/abitype/dist/chunk-NHABU752.mjs":
/*!******************************************************!*\
  !*** ./node_modules/abitype/dist/chunk-NHABU752.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __publicField: () => (/* binding */ __publicField)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2NodW5rLU5IQUJVNzUyLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTUosVUFBVUksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxnQkFBZ0IsQ0FBQ04sS0FBS0MsS0FBS0M7SUFDN0JILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7SUFDL0QsT0FBT0E7QUFDVDtBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9jaHVuay1OSEFCVTc1Mi5tanM/ZTA5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmV4cG9ydCB7XG4gIF9fcHVibGljRmllbGRcbn07XG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abitype/dist/chunk-NHABU752.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/abitype/dist/chunk-WP7KDV47.mjs":
/*!******************************************************!*\
  !*** ./node_modules/abitype/dist/chunk-WP7KDV47.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bytesRegex: () => (/* binding */ bytesRegex),\n/* harmony export */   execTyped: () => (/* binding */ execTyped),\n/* harmony export */   integerRegex: () => (/* binding */ integerRegex),\n/* harmony export */   isTupleRegex: () => (/* binding */ isTupleRegex)\n/* harmony export */ });\n// src/regex.ts\nfunction execTyped(regex, string) {\n    const match = regex.exec(string);\n    return match?.groups;\n}\nvar bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\nvar integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\nvar isTupleRegex = /^\\(.+?\\).*?$/;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2NodW5rLVdQN0tEVjQ3Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsZUFBZTtBQUNmLFNBQVNBLFVBQVVDLEtBQUssRUFBRUMsTUFBTTtJQUM5QixNQUFNQyxRQUFRRixNQUFNRyxJQUFJLENBQUNGO0lBQ3pCLE9BQU9DLE9BQU9FO0FBQ2hCO0FBQ0EsSUFBSUMsYUFBYTtBQUNqQixJQUFJQyxlQUFlO0FBQ25CLElBQUlDLGVBQWU7QUFPakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2NodW5rLVdQN0tEVjQ3Lm1qcz85YjhlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9yZWdleC50c1xuZnVuY3Rpb24gZXhlY1R5cGVkKHJlZ2V4LCBzdHJpbmcpIHtcbiAgY29uc3QgbWF0Y2ggPSByZWdleC5leGVjKHN0cmluZyk7XG4gIHJldHVybiBtYXRjaD8uZ3JvdXBzO1xufVxudmFyIGJ5dGVzUmVnZXggPSAvXmJ5dGVzKFsxLTldfDFbMC05XXwyWzAtOV18M1swLTJdKT8kLztcbnZhciBpbnRlZ2VyUmVnZXggPSAvXnU/aW50KDh8MTZ8MjR8MzJ8NDB8NDh8NTZ8NjR8NzJ8ODB8ODh8OTZ8MTA0fDExMnwxMjB8MTI4fDEzNnwxNDR8MTUyfDE2MHwxNjh8MTc2fDE4NHwxOTJ8MjAwfDIwOHwyMTZ8MjI0fDIzMnwyNDB8MjQ4fDI1Nik/JC87XG52YXIgaXNUdXBsZVJlZ2V4ID0gL15cXCguKz9cXCkuKj8kLztcblxuZXhwb3J0IHtcbiAgZXhlY1R5cGVkLFxuICBieXRlc1JlZ2V4LFxuICBpbnRlZ2VyUmVnZXgsXG4gIGlzVHVwbGVSZWdleFxufTtcbiJdLCJuYW1lcyI6WyJleGVjVHlwZWQiLCJyZWdleCIsInN0cmluZyIsIm1hdGNoIiwiZXhlYyIsImdyb3VwcyIsImJ5dGVzUmVnZXgiLCJpbnRlZ2VyUmVnZXgiLCJpc1R1cGxlUmVnZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abitype/dist/chunk-WP7KDV47.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/abitype/dist/index.mjs":
/*!*********************************************!*\
  !*** ./node_modules/abitype/dist/index.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseError: () => (/* binding */ BaseError),\n/* harmony export */   narrow: () => (/* binding */ narrow),\n/* harmony export */   parseAbi: () => (/* binding */ parseAbi),\n/* harmony export */   parseAbiItem: () => (/* binding */ parseAbiItem),\n/* harmony export */   parseAbiParameter: () => (/* binding */ parseAbiParameter2),\n/* harmony export */   parseAbiParameters: () => (/* binding */ parseAbiParameters)\n/* harmony export */ });\n/* harmony import */ var _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-WP7KDV47.mjs */ \"(ssr)/./node_modules/abitype/dist/chunk-WP7KDV47.mjs\");\n/* harmony import */ var _chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-NHABU752.mjs */ \"(ssr)/./node_modules/abitype/dist/chunk-NHABU752.mjs\");\n\n\n// package.json\nvar name = \"abitype\";\nvar version = \"0.7.1\";\n// src/errors.ts\nvar BaseError = class extends Error {\n    constructor(shortMessage, args = {}){\n        const details = args.cause instanceof BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;\n        const docsPath = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;\n        const message = [\n            shortMessage || \"An error occurred.\",\n            \"\",\n            ...args.metaMessages ? [\n                ...args.metaMessages,\n                \"\"\n            ] : [],\n            ...docsPath ? [\n                `Docs: https://abitype.dev${docsPath}`\n            ] : [],\n            ...details ? [\n                `Details: ${details}`\n            ] : [],\n            `Version: ${name}@${version}`\n        ].join(\"\\n\");\n        super(message);\n        (0,_chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"details\");\n        (0,_chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"docsPath\");\n        (0,_chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"metaMessages\");\n        (0,_chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"shortMessage\");\n        (0,_chunk_NHABU752_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"name\", \"AbiTypeError\");\n        if (args.cause) this.cause = args.cause;\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = args.metaMessages;\n        this.shortMessage = shortMessage;\n    }\n};\n// src/narrow.ts\nfunction narrow(value) {\n    return value;\n}\n// src/human-readable/runtime/signatures.ts\nvar errorSignatureRegex = /^error (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)$/;\nfunction isErrorSignature(signature) {\n    return errorSignatureRegex.test(signature);\n}\nfunction execErrorSignature(signature) {\n    return (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(errorSignatureRegex, signature);\n}\nvar eventSignatureRegex = /^event (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)$/;\nfunction isEventSignature(signature) {\n    return eventSignatureRegex.test(signature);\n}\nfunction execEventSignature(signature) {\n    return (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(eventSignatureRegex, signature);\n}\nvar functionSignatureRegex = /^function (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns \\((?<returns>.*?)\\))?$/;\nfunction isFunctionSignature(signature) {\n    return functionSignatureRegex.test(signature);\n}\nfunction execFunctionSignature(signature) {\n    return (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(functionSignatureRegex, signature);\n}\nvar structSignatureRegex = /^struct (?<name>[a-zA-Z0-9_]+) \\{(?<properties>.*?)\\}$/;\nfunction isStructSignature(signature) {\n    return structSignatureRegex.test(signature);\n}\nfunction execStructSignature(signature) {\n    return (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(structSignatureRegex, signature);\n}\nvar constructorSignatureRegex = /^constructor\\((?<parameters>.*?)\\)(?:\\s(?<stateMutability>payable{1}))?$/;\nfunction isConstructorSignature(signature) {\n    return constructorSignatureRegex.test(signature);\n}\nfunction execConstructorSignature(signature) {\n    return (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(constructorSignatureRegex, signature);\n}\nvar fallbackSignatureRegex = /^fallback\\(\\)$/;\nfunction isFallbackSignature(signature) {\n    return fallbackSignatureRegex.test(signature);\n}\nvar receiveSignatureRegex = /^receive\\(\\) external payable$/;\nfunction isReceiveSignature(signature) {\n    return receiveSignatureRegex.test(signature);\n}\nvar modifiers = /* @__PURE__ */ new Set([\n    \"memory\",\n    \"indexed\",\n    \"storage\",\n    \"calldata\"\n]);\nvar eventModifiers = /* @__PURE__ */ new Set([\n    \"indexed\"\n]);\nvar functionModifiers = /* @__PURE__ */ new Set([\n    \"calldata\",\n    \"memory\",\n    \"storage\"\n]);\n// src/human-readable/runtime/cache.ts\nfunction getParameterCacheKey(param, type) {\n    if (type) return `${type}:${param}`;\n    return param;\n}\nvar parameterCache = /* @__PURE__ */ new Map([\n    // Unnamed\n    [\n        \"address\",\n        {\n            type: \"address\"\n        }\n    ],\n    [\n        \"bool\",\n        {\n            type: \"bool\"\n        }\n    ],\n    [\n        \"bytes\",\n        {\n            type: \"bytes\"\n        }\n    ],\n    [\n        \"bytes32\",\n        {\n            type: \"bytes32\"\n        }\n    ],\n    [\n        \"int\",\n        {\n            type: \"int256\"\n        }\n    ],\n    [\n        \"int256\",\n        {\n            type: \"int256\"\n        }\n    ],\n    [\n        \"string\",\n        {\n            type: \"string\"\n        }\n    ],\n    [\n        \"uint\",\n        {\n            type: \"uint256\"\n        }\n    ],\n    [\n        \"uint8\",\n        {\n            type: \"uint8\"\n        }\n    ],\n    [\n        \"uint16\",\n        {\n            type: \"uint16\"\n        }\n    ],\n    [\n        \"uint24\",\n        {\n            type: \"uint24\"\n        }\n    ],\n    [\n        \"uint32\",\n        {\n            type: \"uint32\"\n        }\n    ],\n    [\n        \"uint64\",\n        {\n            type: \"uint64\"\n        }\n    ],\n    [\n        \"uint96\",\n        {\n            type: \"uint96\"\n        }\n    ],\n    [\n        \"uint112\",\n        {\n            type: \"uint112\"\n        }\n    ],\n    [\n        \"uint160\",\n        {\n            type: \"uint160\"\n        }\n    ],\n    [\n        \"uint192\",\n        {\n            type: \"uint192\"\n        }\n    ],\n    [\n        \"uint256\",\n        {\n            type: \"uint256\"\n        }\n    ],\n    // Named\n    [\n        \"address owner\",\n        {\n            type: \"address\",\n            name: \"owner\"\n        }\n    ],\n    [\n        \"address to\",\n        {\n            type: \"address\",\n            name: \"to\"\n        }\n    ],\n    [\n        \"bool approved\",\n        {\n            type: \"bool\",\n            name: \"approved\"\n        }\n    ],\n    [\n        \"bytes _data\",\n        {\n            type: \"bytes\",\n            name: \"_data\"\n        }\n    ],\n    [\n        \"bytes data\",\n        {\n            type: \"bytes\",\n            name: \"data\"\n        }\n    ],\n    [\n        \"bytes signature\",\n        {\n            type: \"bytes\",\n            name: \"signature\"\n        }\n    ],\n    [\n        \"bytes32 hash\",\n        {\n            type: \"bytes32\",\n            name: \"hash\"\n        }\n    ],\n    [\n        \"bytes32 r\",\n        {\n            type: \"bytes32\",\n            name: \"r\"\n        }\n    ],\n    [\n        \"bytes32 root\",\n        {\n            type: \"bytes32\",\n            name: \"root\"\n        }\n    ],\n    [\n        \"bytes32 s\",\n        {\n            type: \"bytes32\",\n            name: \"s\"\n        }\n    ],\n    [\n        \"string name\",\n        {\n            type: \"string\",\n            name: \"name\"\n        }\n    ],\n    [\n        \"string symbol\",\n        {\n            type: \"string\",\n            name: \"symbol\"\n        }\n    ],\n    [\n        \"string tokenURI\",\n        {\n            type: \"string\",\n            name: \"tokenURI\"\n        }\n    ],\n    [\n        \"uint tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\"\n        }\n    ],\n    [\n        \"uint8 v\",\n        {\n            type: \"uint8\",\n            name: \"v\"\n        }\n    ],\n    [\n        \"uint256 balance\",\n        {\n            type: \"uint256\",\n            name: \"balance\"\n        }\n    ],\n    [\n        \"uint256 tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\"\n        }\n    ],\n    [\n        \"uint256 value\",\n        {\n            type: \"uint256\",\n            name: \"value\"\n        }\n    ],\n    // Indexed\n    [\n        \"event:address indexed from\",\n        {\n            type: \"address\",\n            name: \"from\",\n            indexed: true\n        }\n    ],\n    [\n        \"event:address indexed to\",\n        {\n            type: \"address\",\n            name: \"to\",\n            indexed: true\n        }\n    ],\n    [\n        \"event:uint indexed tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\",\n            indexed: true\n        }\n    ],\n    [\n        \"event:uint256 indexed tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\",\n            indexed: true\n        }\n    ]\n]);\n// src/human-readable/runtime/utils.ts\nfunction parseSignature(signature, structs = {}) {\n    if (isFunctionSignature(signature)) {\n        const match = execFunctionSignature(signature);\n        if (!match) throw new BaseError(\"Invalid function signature.\", {\n            details: signature\n        });\n        const inputParams = splitParameters(match.parameters);\n        const inputs = [];\n        const inputLength = inputParams.length;\n        for(let i = 0; i < inputLength; i++){\n            inputs.push(parseAbiParameter(inputParams[i], {\n                modifiers: functionModifiers,\n                structs,\n                type: \"function\"\n            }));\n        }\n        const outputs = [];\n        if (match.returns) {\n            const outputParams = splitParameters(match.returns);\n            const outputLength = outputParams.length;\n            for(let i = 0; i < outputLength; i++){\n                outputs.push(parseAbiParameter(outputParams[i], {\n                    modifiers: functionModifiers,\n                    structs,\n                    type: \"function\"\n                }));\n            }\n        }\n        return {\n            name: match.name,\n            type: \"function\",\n            stateMutability: match.stateMutability ?? \"nonpayable\",\n            inputs,\n            outputs\n        };\n    }\n    if (isEventSignature(signature)) {\n        const match = execEventSignature(signature);\n        if (!match) throw new BaseError(\"Invalid event signature.\", {\n            details: signature\n        });\n        const params = splitParameters(match.parameters);\n        const abiParameters = [];\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            abiParameters.push(parseAbiParameter(params[i], {\n                modifiers: eventModifiers,\n                structs,\n                type: \"event\"\n            }));\n        }\n        return {\n            name: match.name,\n            type: \"event\",\n            inputs: abiParameters\n        };\n    }\n    if (isErrorSignature(signature)) {\n        const match = execErrorSignature(signature);\n        if (!match) throw new BaseError(\"Invalid error signature.\", {\n            details: signature\n        });\n        const params = splitParameters(match.parameters);\n        const abiParameters = [];\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            abiParameters.push(parseAbiParameter(params[i], {\n                structs,\n                type: \"error\"\n            }));\n        }\n        return {\n            name: match.name,\n            type: \"error\",\n            inputs: abiParameters\n        };\n    }\n    if (isConstructorSignature(signature)) {\n        const match = execConstructorSignature(signature);\n        if (!match) throw new BaseError(\"Invalid constructor signature.\", {\n            details: signature\n        });\n        const params = splitParameters(match.parameters);\n        const abiParameters = [];\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            abiParameters.push(parseAbiParameter(params[i], {\n                structs,\n                type: \"constructor\"\n            }));\n        }\n        return {\n            type: \"constructor\",\n            stateMutability: match.stateMutability ?? \"nonpayable\",\n            inputs: abiParameters\n        };\n    }\n    if (isFallbackSignature(signature)) return {\n        type: \"fallback\"\n    };\n    if (isReceiveSignature(signature)) return {\n        type: \"receive\",\n        stateMutability: \"payable\"\n    };\n    throw new BaseError(\"Unknown signature.\", {\n        details: signature\n    });\n}\nvar abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z0-9_]+))?$/;\nvar abiParameterWithTupleRegex = /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z0-9_]+))?$/;\nvar dynamicIntegerRegex = /^u?int$/;\nfunction parseAbiParameter(param, options) {\n    const parameterCacheKey = getParameterCacheKey(param, options?.type);\n    if (parameterCache.has(parameterCacheKey)) return parameterCache.get(parameterCacheKey);\n    const isTuple = _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.isTupleRegex.test(param);\n    const match = (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);\n    if (!match) throw new BaseError(\"Invalid ABI parameter.\", {\n        details: param\n    });\n    if (match.name && isSolidityKeyword(match.name)) throw new BaseError(\"Invalid ABI parameter.\", {\n        details: param,\n        metaMessages: [\n            `\"${match.name}\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`\n        ]\n    });\n    const name2 = match.name ? {\n        name: match.name\n    } : {};\n    const indexed = match.modifier === \"indexed\" ? {\n        indexed: true\n    } : {};\n    const structs = options?.structs ?? {};\n    let type;\n    let components = {};\n    if (isTuple) {\n        type = \"tuple\";\n        const params = splitParameters(match.type);\n        const components_ = [];\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            components_.push(parseAbiParameter(params[i], {\n                structs\n            }));\n        }\n        components = {\n            components: components_\n        };\n    } else if (match.type in structs) {\n        type = \"tuple\";\n        components = {\n            components: structs[match.type]\n        };\n    } else if (dynamicIntegerRegex.test(match.type)) {\n        type = `${match.type}256`;\n    } else {\n        type = match.type;\n        if (!(options?.type === \"struct\") && !isSolidityType(type)) throw new BaseError(\"Unknown type.\", {\n            metaMessages: [\n                `Type \"${type}\" is not a valid ABI type.`\n            ]\n        });\n    }\n    if (match.modifier) {\n        if (!options?.modifiers?.has?.(match.modifier)) throw new BaseError(\"Invalid ABI parameter.\", {\n            details: param,\n            metaMessages: [\n                `Modifier \"${match.modifier}\" not allowed${options?.type ? ` in \"${options.type}\" type` : \"\"}.`\n            ]\n        });\n        if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array)) throw new BaseError(\"Invalid ABI parameter.\", {\n            details: param,\n            metaMessages: [\n                `Modifier \"${match.modifier}\" not allowed${options?.type ? ` in \"${options.type}\" type` : \"\"}.`,\n                `Data location can only be specified for array, struct, or mapping types, but \"${match.modifier}\" was given.`\n            ]\n        });\n    }\n    const abiParameter = {\n        type: `${type}${match.array ?? \"\"}`,\n        ...name2,\n        ...indexed,\n        ...components\n    };\n    parameterCache.set(parameterCacheKey, abiParameter);\n    return abiParameter;\n}\nfunction splitParameters(params, result = [], current = \"\", depth = 0) {\n    if (params === \"\") {\n        if (current === \"\") return result;\n        if (depth !== 0) throw new BaseError(\"Unbalanced parentheses.\", {\n            metaMessages: [\n                `\"${current.trim()}\" has too many ${depth > 0 ? \"opening\" : \"closing\"} parentheses.`\n            ],\n            details: `Depth \"${depth}\"`\n        });\n        return [\n            ...result,\n            current.trim()\n        ];\n    }\n    const length = params.length;\n    for(let i = 0; i < length; i++){\n        const char = params[i];\n        const tail = params.slice(i + 1);\n        switch(char){\n            case \",\":\n                return depth === 0 ? splitParameters(tail, [\n                    ...result,\n                    current.trim()\n                ]) : splitParameters(tail, result, `${current}${char}`, depth);\n            case \"(\":\n                return splitParameters(tail, result, `${current}${char}`, depth + 1);\n            case \")\":\n                return splitParameters(tail, result, `${current}${char}`, depth - 1);\n            default:\n                return splitParameters(tail, result, `${current}${char}`, depth);\n        }\n    }\n    return [];\n}\nfunction isSolidityType(type) {\n    return type === \"address\" || type === \"bool\" || type === \"function\" || type === \"string\" || _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.bytesRegex.test(type) || _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.integerRegex.test(type);\n}\nvar protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;\nfunction isSolidityKeyword(name2) {\n    return name2 === \"address\" || name2 === \"bool\" || name2 === \"function\" || name2 === \"string\" || name2 === \"tuple\" || _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.bytesRegex.test(name2) || _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.integerRegex.test(name2) || protectedKeywordsRegex.test(name2);\n}\nfunction isValidDataLocation(type, isArray) {\n    return isArray || type === \"bytes\" || type === \"string\" || type === \"tuple\";\n}\n// src/human-readable/runtime/structs.ts\nfunction parseStructs(signatures) {\n    const shallowStructs = {};\n    const signaturesLength = signatures.length;\n    for(let i = 0; i < signaturesLength; i++){\n        const signature = signatures[i];\n        if (!isStructSignature(signature)) continue;\n        const match = execStructSignature(signature);\n        if (!match) throw new BaseError(\"Invalid struct signature.\", {\n            details: signature\n        });\n        const properties = match.properties.split(\";\");\n        const components = [];\n        const propertiesLength = properties.length;\n        for(let k = 0; k < propertiesLength; k++){\n            const property = properties[k];\n            const trimmed = property.trim();\n            if (!trimmed) continue;\n            const abiParameter = parseAbiParameter(trimmed, {\n                type: \"struct\"\n            });\n            components.push(abiParameter);\n        }\n        if (!components.length) throw new BaseError(\"Invalid struct signature.\", {\n            details: signature,\n            metaMessages: [\n                \"No properties exist.\"\n            ]\n        });\n        shallowStructs[match.name] = components;\n    }\n    const resolvedStructs = {};\n    const entries = Object.entries(shallowStructs);\n    const entriesLength = entries.length;\n    for(let i = 0; i < entriesLength; i++){\n        const [name2, parameters] = entries[i];\n        resolvedStructs[name2] = resolveStructs(parameters, shallowStructs);\n    }\n    return resolvedStructs;\n}\nvar typeWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\\[\\d*?\\])+?)?$/;\nfunction resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {\n    const components = [];\n    const length = abiParameters.length;\n    for(let i = 0; i < length; i++){\n        const abiParameter = abiParameters[i];\n        const isTuple = _chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.isTupleRegex.test(abiParameter.type);\n        if (isTuple) components.push(abiParameter);\n        else {\n            const match = (0,_chunk_WP7KDV47_mjs__WEBPACK_IMPORTED_MODULE_1__.execTyped)(typeWithoutTupleRegex, abiParameter.type);\n            if (!match?.type) throw new BaseError(\"Invalid ABI parameter.\", {\n                details: JSON.stringify(abiParameter, null, 2),\n                metaMessages: [\n                    \"ABI parameter type is invalid.\"\n                ]\n            });\n            const { array, type } = match;\n            if (type in structs) {\n                if (ancestors.has(type)) throw new BaseError(\"Circular reference detected.\", {\n                    metaMessages: [\n                        `Struct \"${type}\" is a circular reference.`\n                    ]\n                });\n                components.push({\n                    ...abiParameter,\n                    type: `tuple${array ?? \"\"}`,\n                    components: resolveStructs(structs[type] ?? [], structs, /* @__PURE__ */ new Set([\n                        ...ancestors,\n                        type\n                    ]))\n                });\n            } else {\n                if (isSolidityType(type)) components.push(abiParameter);\n                else throw new BaseError(\"Unknown type.\", {\n                    metaMessages: [\n                        `Type \"${type}\" is not a valid ABI type. Perhaps you forgot to include a struct signature?`\n                    ]\n                });\n            }\n        }\n    }\n    return components;\n}\n// src/human-readable/parseAbi.ts\nfunction parseAbi(signatures) {\n    const structs = parseStructs(signatures);\n    const abi = [];\n    const length = signatures.length;\n    for(let i = 0; i < length; i++){\n        const signature = signatures[i];\n        if (isStructSignature(signature)) continue;\n        abi.push(parseSignature(signature, structs));\n    }\n    return abi;\n}\n// src/human-readable/parseAbiItem.ts\nfunction parseAbiItem(signature) {\n    let abiItem;\n    if (typeof signature === \"string\") abiItem = parseSignature(signature);\n    else {\n        const structs = parseStructs(signature);\n        const length = signature.length;\n        for(let i = 0; i < length; i++){\n            const signature_ = signature[i];\n            if (isStructSignature(signature_)) continue;\n            abiItem = parseSignature(signature_, structs);\n            break;\n        }\n    }\n    if (!abiItem) throw new BaseError(\"Failed to parse ABI item.\", {\n        details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,\n        docsPath: \"/api/human.html#parseabiitem-1\"\n    });\n    return abiItem;\n}\n// src/human-readable/parseAbiParameter.ts\nfunction parseAbiParameter2(param) {\n    let abiParameter;\n    if (typeof param === \"string\") abiParameter = parseAbiParameter(param, {\n        modifiers\n    });\n    else {\n        const structs = parseStructs(param);\n        const length = param.length;\n        for(let i = 0; i < length; i++){\n            const signature = param[i];\n            if (isStructSignature(signature)) continue;\n            abiParameter = parseAbiParameter(signature, {\n                modifiers,\n                structs\n            });\n            break;\n        }\n    }\n    if (!abiParameter) throw new BaseError(\"Failed to parse ABI parameter.\", {\n        details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,\n        docsPath: \"/api/human.html#parseabiparameter-1\"\n    });\n    return abiParameter;\n}\n// src/human-readable/parseAbiParameters.ts\nfunction parseAbiParameters(params) {\n    const abiParameters = [];\n    if (typeof params === \"string\") {\n        const parameters = splitParameters(params);\n        const length = parameters.length;\n        for(let i = 0; i < length; i++){\n            abiParameters.push(parseAbiParameter(parameters[i], {\n                modifiers\n            }));\n        }\n    } else {\n        const structs = parseStructs(params);\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            const signature = params[i];\n            if (isStructSignature(signature)) continue;\n            const parameters = splitParameters(signature);\n            const length2 = parameters.length;\n            for(let k = 0; k < length2; k++){\n                abiParameters.push(parseAbiParameter(parameters[k], {\n                    modifiers,\n                    structs\n                }));\n            }\n        }\n    }\n    if (abiParameters.length === 0) throw new BaseError(\"Failed to parse ABI parameters.\", {\n        details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,\n        docsPath: \"/api/human.html#parseabiparameters-1\"\n    });\n    return abiParameters;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUs4QjtBQUdBO0FBRTlCLGVBQWU7QUFDZixJQUFJSyxPQUFPO0FBQ1gsSUFBSUMsVUFBVTtBQUVkLGdCQUFnQjtBQUNoQixJQUFJQyxZQUFZLGNBQWNDO0lBQzVCQyxZQUFZQyxZQUFZLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLENBQUU7UUFDbkMsTUFBTUMsVUFBVUQsS0FBS0UsS0FBSyxZQUFZTixZQUFZSSxLQUFLRSxLQUFLLENBQUNELE9BQU8sR0FBR0QsS0FBS0UsS0FBSyxFQUFFQyxVQUFVSCxLQUFLRSxLQUFLLENBQUNDLE9BQU8sR0FBR0gsS0FBS0MsT0FBTztRQUM5SCxNQUFNRyxXQUFXSixLQUFLRSxLQUFLLFlBQVlOLFlBQVlJLEtBQUtFLEtBQUssQ0FBQ0UsUUFBUSxJQUFJSixLQUFLSSxRQUFRLEdBQUdKLEtBQUtJLFFBQVE7UUFDdkcsTUFBTUQsVUFBVTtZQUNkSixnQkFBZ0I7WUFDaEI7ZUFDR0MsS0FBS0ssWUFBWSxHQUFHO21CQUFJTCxLQUFLSyxZQUFZO2dCQUFFO2FBQUcsR0FBRyxFQUFFO2VBQ25ERCxXQUFXO2dCQUFDLENBQUMseUJBQXlCLEVBQUVBLFNBQVMsQ0FBQzthQUFDLEdBQUcsRUFBRTtlQUN4REgsVUFBVTtnQkFBQyxDQUFDLFNBQVMsRUFBRUEsUUFBUSxDQUFDO2FBQUMsR0FBRyxFQUFFO1lBQ3pDLENBQUMsU0FBUyxFQUFFUCxLQUFLLENBQUMsRUFBRUMsUUFBUSxDQUFDO1NBQzlCLENBQUNXLElBQUksQ0FBQztRQUNQLEtBQUssQ0FBQ0g7UUFDTlYsa0VBQWFBLENBQUMsSUFBSSxFQUFFO1FBQ3BCQSxrRUFBYUEsQ0FBQyxJQUFJLEVBQUU7UUFDcEJBLGtFQUFhQSxDQUFDLElBQUksRUFBRTtRQUNwQkEsa0VBQWFBLENBQUMsSUFBSSxFQUFFO1FBQ3BCQSxrRUFBYUEsQ0FBQyxJQUFJLEVBQUUsUUFB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QUFNWixhQUFhRCxnQkFBZ0JhO1FBQ25DLE1BQU1ULFNBQVNILFdBQVdHLE1BQU07UUFDaEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlELFFBQVFDLElBQUs7WUFDL0JTLGNBQWNSLElBQUksQ0FBQ0Msa0JBQWtCTixVQUFVLENBQUNJLEVBQUUsRUFBRTtnQkFBRW5CO1lBQVU7UUFDbEU7SUFDRixPQUFPO1FBQ0wsTUFBTVcsVUFBVTZDLGFBQWE3QjtRQUM3QixNQUFNVCxTQUFTUyxPQUFPVCxNQUFNO1FBQzVCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRCxRQUFRQyxJQUFLO1lBQy9CLE1BQU10QyxZQUFZOEMsTUFBTSxDQUFDUixFQUFFO1lBQzNCLElBQUk1QixrQkFBa0JWLFlBQ3BCO1lBQ0YsTUFBTWtDLGFBQWFELGdCQUFnQmpDO1lBQ25DLE1BQU1xRyxVQUFVbkUsV0FBV0csTUFBTTtZQUNqQyxJQUFLLElBQUk2QyxJQUFJLEdBQUdBLElBQUltQixTQUFTbkIsSUFBSztnQkFDaENuQyxjQUFjUixJQUFJLENBQ2hCQyxrQkFBa0JOLFVBQVUsQ0FBQ2dELEVBQUUsRUFBRTtvQkFBRS9EO29CQUFXVztnQkFBUTtZQUUxRDtRQUNGO0lBQ0Y7SUFDQSxJQUFJaUIsY0FBY1YsTUFBTSxLQUFLLEdBQzNCLE1BQU0sSUFBSXBELFVBQVUsbUNBQW1DO1FBQ3JESyxTQUFTLENBQUMsbUJBQW1CLEVBQUVzRyxLQUFLQyxTQUFTLENBQUMvQyxRQUFRLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDakVyRCxVQUFVO0lBQ1o7SUFDRixPQUFPc0Q7QUFDVDtBQVFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9pbmRleC5tanM/MzkxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBieXRlc1JlZ2V4LFxuICBleGVjVHlwZWQsXG4gIGludGVnZXJSZWdleCxcbiAgaXNUdXBsZVJlZ2V4XG59IGZyb20gXCIuL2NodW5rLVdQN0tEVjQ3Lm1qc1wiO1xuaW1wb3J0IHtcbiAgX19wdWJsaWNGaWVsZFxufSBmcm9tIFwiLi9jaHVuay1OSEFCVTc1Mi5tanNcIjtcblxuLy8gcGFja2FnZS5qc29uXG52YXIgbmFtZSA9IFwiYWJpdHlwZVwiO1xudmFyIHZlcnNpb24gPSBcIjAuNy4xXCI7XG5cbi8vIHNyYy9lcnJvcnMudHNcbnZhciBCYXNlRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Ioc2hvcnRNZXNzYWdlLCBhcmdzID0ge30pIHtcbiAgICBjb25zdCBkZXRhaWxzID0gYXJncy5jYXVzZSBpbnN0YW5jZW9mIEJhc2VFcnJvciA/IGFyZ3MuY2F1c2UuZGV0YWlscyA6IGFyZ3MuY2F1c2U/Lm1lc3NhZ2UgPyBhcmdzLmNhdXNlLm1lc3NhZ2UgOiBhcmdzLmRldGFpbHM7XG4gICAgY29uc3QgZG9jc1BhdGggPSBhcmdzLmNhdXNlIGluc3RhbmNlb2YgQmFzZUVycm9yID8gYXJncy5jYXVzZS5kb2NzUGF0aCB8fCBhcmdzLmRvY3NQYXRoIDogYXJncy5kb2NzUGF0aDtcbiAgICBjb25zdCBtZXNzYWdlID0gW1xuICAgICAgc2hvcnRNZXNzYWdlIHx8IFwiQW4gZXJyb3Igb2NjdXJyZWQuXCIsXG4gICAgICBcIlwiLFxuICAgICAgLi4uYXJncy5tZXRhTWVzc2FnZXMgPyBbLi4uYXJncy5tZXRhTWVzc2FnZXMsIFwiXCJdIDogW10sXG4gICAgICAuLi5kb2NzUGF0aCA/IFtgRG9jczogaHR0cHM6Ly9hYml0eXBlLmRldiR7ZG9jc1BhdGh9YF0gOiBbXSxcbiAgICAgIC4uLmRldGFpbHMgPyBbYERldGFpbHM6ICR7ZGV0YWlsc31gXSA6IFtdLFxuICAgICAgYFZlcnNpb246ICR7bmFtZX1AJHt2ZXJzaW9ufWBcbiAgICBdLmpvaW4oXCJcXG5cIik7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRldGFpbHNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRvY3NQYXRoXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJtZXRhTWVzc2FnZXNcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInNob3J0TWVzc2FnZVwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibmFtZVwiLCBcIkFiaVR5cGVFcnJvclwiKTtcbiAgICBpZiAoYXJncy5jYXVzZSlcbiAgICAgIHRoaXMuY2F1c2UgPSBhcmdzLmNhdXNlO1xuICAgIHRoaXMuZGV0YWlscyA9IGRldGFpbHM7XG4gICAgdGhpcy5kb2NzUGF0aCA9IGRvY3NQYXRoO1xuICAgIHRoaXMubWV0YU1lc3NhZ2VzID0gYXJncy5tZXRhTWVzc2FnZXM7XG4gICAgdGhpcy5zaG9ydE1lc3NhZ2UgPSBzaG9ydE1lc3NhZ2U7XG4gIH1cbn07XG5cbi8vIHNyYy9uYXJyb3cudHNcbmZ1bmN0aW9uIG5hcnJvdyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIHNyYy9odW1hbi1yZWFkYWJsZS9ydW50aW1lL3NpZ25hdHVyZXMudHNcbnZhciBlcnJvclNpZ25hdHVyZVJlZ2V4ID0gL15lcnJvciAoPzxuYW1lPlthLXpBLVowLTlfXSspXFwoKD88cGFyYW1ldGVycz4uKj8pXFwpJC87XG5mdW5jdGlvbiBpc0Vycm9yU2lnbmF0dXJlKHNpZ25hdHVyZSkge1xuICByZXR1cm4gZXJyb3JTaWduYXR1cmVSZWdleC50ZXN0KHNpZ25hdHVyZSk7XG59XG5mdW5jdGlvbiBleGVjRXJyb3JTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBleGVjVHlwZWQoXG4gICAgZXJyb3JTaWduYXR1cmVSZWdleCxcbiAgICBzaWduYXR1cmVcbiAgKTtcbn1cbnZhciBldmVudFNpZ25hdHVyZVJlZ2V4ID0gL15ldmVudCAoPzxuYW1lPlthLXpBLVowLTlfXSspXFwoKD88cGFyYW1ldGVycz4uKj8pXFwpJC87XG5mdW5jdGlvbiBpc0V2ZW50U2lnbmF0dXJlKHNpZ25hdHVyZSkge1xuICByZXR1cm4gZXZlbnRTaWduYXR1cmVSZWdleC50ZXN0KHNpZ25hdHVyZSk7XG59XG5mdW5jdGlvbiBleGVjRXZlbnRTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBleGVjVHlwZWQoXG4gICAgZXZlbnRTaWduYXR1cmVSZWdleCxcbiAgICBzaWduYXR1cmVcbiAgKTtcbn1cbnZhciBmdW5jdGlvblNpZ25hdHVyZVJlZ2V4ID0gL15mdW5jdGlvbiAoPzxuYW1lPlthLXpBLVowLTlfXSspXFwoKD88cGFyYW1ldGVycz4uKj8pXFwpKD86ICg/PHNjb3BlPmV4dGVybmFsfHB1YmxpY3sxfSkpPyg/OiAoPzxzdGF0ZU11dGFiaWxpdHk+cHVyZXx2aWV3fG5vbnBheWFibGV8cGF5YWJsZXsxfSkpPyg/OiByZXR1cm5zIFxcKCg/PHJldHVybnM+Lio/KVxcKSk/JC87XG5mdW5jdGlvbiBpc0Z1bmN0aW9uU2lnbmF0dXJlKHNpZ25hdHVyZSkge1xuICByZXR1cm4gZnVuY3Rpb25TaWduYXR1cmVSZWdleC50ZXN0KHNpZ25hdHVyZSk7XG59XG5mdW5jdGlvbiBleGVjRnVuY3Rpb25TaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBleGVjVHlwZWQoZnVuY3Rpb25TaWduYXR1cmVSZWdleCwgc2lnbmF0dXJlKTtcbn1cbnZhciBzdHJ1Y3RTaWduYXR1cmVSZWdleCA9IC9ec3RydWN0ICg/PG5hbWU+W2EtekEtWjAtOV9dKykgXFx7KD88cHJvcGVydGllcz4uKj8pXFx9JC87XG5mdW5jdGlvbiBpc1N0cnVjdFNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgcmV0dXJuIHN0cnVjdFNpZ25hdHVyZVJlZ2V4LnRlc3Qoc2lnbmF0dXJlKTtcbn1cbmZ1bmN0aW9uIGV4ZWNTdHJ1Y3RTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBleGVjVHlwZWQoXG4gICAgc3RydWN0U2lnbmF0dXJlUmVnZXgsXG4gICAgc2lnbmF0dXJlXG4gICk7XG59XG52YXIgY29uc3RydWN0b3JTaWduYXR1cmVSZWdleCA9IC9eY29uc3RydWN0b3JcXCgoPzxwYXJhbWV0ZXJzPi4qPylcXCkoPzpcXHMoPzxzdGF0ZU11dGFiaWxpdHk+cGF5YWJsZXsxfSkpPyQvO1xuZnVuY3Rpb24gaXNDb25zdHJ1Y3RvclNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgcmV0dXJuIGNvbnN0cnVjdG9yU2lnbmF0dXJlUmVnZXgudGVzdChzaWduYXR1cmUpO1xufVxuZnVuY3Rpb24gZXhlY0NvbnN0cnVjdG9yU2lnbmF0dXJlKHNpZ25hdHVyZSkge1xuICByZXR1cm4gZXhlY1R5cGVkKGNvbnN0cnVjdG9yU2lnbmF0dXJlUmVnZXgsIHNpZ25hdHVyZSk7XG59XG52YXIgZmFsbGJhY2tTaWduYXR1cmVSZWdleCA9IC9eZmFsbGJhY2tcXChcXCkkLztcbmZ1bmN0aW9uIGlzRmFsbGJhY2tTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gIHJldHVybiBmYWxsYmFja1NpZ25hdHVyZVJlZ2V4LnRlc3Qoc2lnbmF0dXJlKTtcbn1cbnZhciByZWNlaXZlU2lnbmF0dXJlUmVnZXggPSAvXnJlY2VpdmVcXChcXCkgZXh0ZXJuYWwgcGF5YWJsZSQvO1xuZnVuY3Rpb24gaXNSZWNlaXZlU2lnbmF0dXJlKHNpZ25hdHVyZSkge1xuICByZXR1cm4gcmVjZWl2ZVNpZ25hdHVyZVJlZ2V4LnRlc3Qoc2lnbmF0dXJlKTtcbn1cbnZhciBtb2RpZmllcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXG4gIFwibWVtb3J5XCIsXG4gIFwiaW5kZXhlZFwiLFxuICBcInN0b3JhZ2VcIixcbiAgXCJjYWxsZGF0YVwiXG5dKTtcbnZhciBldmVudE1vZGlmaWVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImluZGV4ZWRcIl0pO1xudmFyIGZ1bmN0aW9uTW9kaWZpZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICBcImNhbGxkYXRhXCIsXG4gIFwibWVtb3J5XCIsXG4gIFwic3RvcmFnZVwiXG5dKTtcblxuLy8gc3JjL2h1bWFuLXJlYWRhYmxlL3J1bnRpbWUvY2FjaGUudHNcbmZ1bmN0aW9uIGdldFBhcmFtZXRlckNhY2hlS2V5KHBhcmFtLCB0eXBlKSB7XG4gIGlmICh0eXBlKVxuICAgIHJldHVybiBgJHt0eXBlfToke3BhcmFtfWA7XG4gIHJldHVybiBwYXJhbTtcbn1cbnZhciBwYXJhbWV0ZXJDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKFtcbiAgLy8gVW5uYW1lZFxuICBbXCJhZGRyZXNzXCIsIHsgdHlwZTogXCJhZGRyZXNzXCIgfV0sXG4gIFtcImJvb2xcIiwgeyB0eXBlOiBcImJvb2xcIiB9XSxcbiAgW1wiYnl0ZXNcIiwgeyB0eXBlOiBcImJ5dGVzXCIgfV0sXG4gIFtcImJ5dGVzMzJcIiwgeyB0eXBlOiBcImJ5dGVzMzJcIiB9XSxcbiAgW1wiaW50XCIsIHsgdHlwZTogXCJpbnQyNTZcIiB9XSxcbiAgW1wiaW50MjU2XCIsIHsgdHlwZTogXCJpbnQyNTZcIiB9XSxcbiAgW1wic3RyaW5nXCIsIHsgdHlwZTogXCJzdHJpbmdcIiB9XSxcbiAgW1widWludFwiLCB7IHR5cGU6IFwidWludDI1NlwiIH1dLFxuICBbXCJ1aW50OFwiLCB7IHR5cGU6IFwidWludDhcIiB9XSxcbiAgW1widWludDE2XCIsIHsgdHlwZTogXCJ1aW50MTZcIiB9XSxcbiAgW1widWludDI0XCIsIHsgdHlwZTogXCJ1aW50MjRcIiB9XSxcbiAgW1widWludDMyXCIsIHsgdHlwZTogXCJ1aW50MzJcIiB9XSxcbiAgW1widWludDY0XCIsIHsgdHlwZTogXCJ1aW50NjRcIiB9XSxcbiAgW1widWludDk2XCIsIHsgdHlwZTogXCJ1aW50OTZcIiB9XSxcbiAgW1widWludDExMlwiLCB7IHR5cGU6IFwidWludDExMlwiIH1dLFxuICBbXCJ1aW50MTYwXCIsIHsgdHlwZTogXCJ1aW50MTYwXCIgfV0sXG4gIFtcInVpbnQxOTJcIiwgeyB0eXBlOiBcInVpbnQxOTJcIiB9XSxcbiAgW1widWludDI1NlwiLCB7IHR5cGU6IFwidWludDI1NlwiIH1dLFxuICAvLyBOYW1lZFxuICBbXCJhZGRyZXNzIG93bmVyXCIsIHsgdHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwib3duZXJcIiB9XSxcbiAgW1wiYWRkcmVzcyB0b1wiLCB7IHR5cGU6IFwiYWRkcmVzc1wiLCBuYW1lOiBcInRvXCIgfV0sXG4gIFtcImJvb2wgYXBwcm92ZWRcIiwgeyB0eXBlOiBcImJvb2xcIiwgbmFtZTogXCJhcHByb3ZlZFwiIH1dLFxuICBbXCJieXRlcyBfZGF0YVwiLCB7IHR5cGU6IFwiYnl0ZXNcIiwgbmFtZTogXCJfZGF0YVwiIH1dLFxuICBbXCJieXRlcyBkYXRhXCIsIHsgdHlwZTogXCJieXRlc1wiLCBuYW1lOiBcImRhdGFcIiB9XSxcbiAgW1wiYnl0ZXMgc2lnbmF0dXJlXCIsIHsgdHlwZTogXCJieXRlc1wiLCBuYW1lOiBcInNpZ25hdHVyZVwiIH1dLFxuICBbXCJieXRlczMyIGhhc2hcIiwgeyB0eXBlOiBcImJ5dGVzMzJcIiwgbmFtZTogXCJoYXNoXCIgfV0sXG4gIFtcImJ5dGVzMzIgclwiLCB7IHR5cGU6IFwiYnl0ZXMzMlwiLCBuYW1lOiBcInJcIiB9XSxcbiAgW1wiYnl0ZXMzMiByb290XCIsIHsgdHlwZTogXCJieXRlczMyXCIsIG5hbWU6IFwicm9vdFwiIH1dLFxuICBbXCJieXRlczMyIHNcIiwgeyB0eXBlOiBcImJ5dGVzMzJcIiwgbmFtZTogXCJzXCIgfV0sXG4gIFtcInN0cmluZyBuYW1lXCIsIHsgdHlwZTogXCJzdHJpbmdcIiwgbmFtZTogXCJuYW1lXCIgfV0sXG4gIFtcInN0cmluZyBzeW1ib2xcIiwgeyB0eXBlOiBcInN0cmluZ1wiLCBuYW1lOiBcInN5bWJvbFwiIH1dLFxuICBbXCJzdHJpbmcgdG9rZW5VUklcIiwgeyB0eXBlOiBcInN0cmluZ1wiLCBuYW1lOiBcInRva2VuVVJJXCIgfV0sXG4gIFtcInVpbnQgdG9rZW5JZFwiLCB7IHR5cGU6IFwidWludDI1NlwiLCBuYW1lOiBcInRva2VuSWRcIiB9XSxcbiAgW1widWludDggdlwiLCB7IHR5cGU6IFwidWludDhcIiwgbmFtZTogXCJ2XCIgfV0sXG4gIFtcInVpbnQyNTYgYmFsYW5jZVwiLCB7IHR5cGU6IFwidWludDI1NlwiLCBuYW1lOiBcImJhbGFuY2VcIiB9XSxcbiAgW1widWludDI1NiB0b2tlbklkXCIsIHsgdHlwZTogXCJ1aW50MjU2XCIsIG5hbWU6IFwidG9rZW5JZFwiIH1dLFxuICBbXCJ1aW50MjU2IHZhbHVlXCIsIHsgdHlwZTogXCJ1aW50MjU2XCIsIG5hbWU6IFwidmFsdWVcIiB9XSxcbiAgLy8gSW5kZXhlZFxuICBbXG4gICAgXCJldmVudDphZGRyZXNzIGluZGV4ZWQgZnJvbVwiLFxuICAgIHsgdHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwiZnJvbVwiLCBpbmRleGVkOiB0cnVlIH1cbiAgXSxcbiAgW1wiZXZlbnQ6YWRkcmVzcyBpbmRleGVkIHRvXCIsIHsgdHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwidG9cIiwgaW5kZXhlZDogdHJ1ZSB9XSxcbiAgW1xuICAgIFwiZXZlbnQ6dWludCBpbmRleGVkIHRva2VuSWRcIixcbiAgICB7IHR5cGU6IFwidWludDI1NlwiLCBuYW1lOiBcInRva2VuSWRcIiwgaW5kZXhlZDogdHJ1ZSB9XG4gIF0sXG4gIFtcbiAgICBcImV2ZW50OnVpbnQyNTYgaW5kZXhlZCB0b2tlbklkXCIsXG4gICAgeyB0eXBlOiBcInVpbnQyNTZcIiwgbmFtZTogXCJ0b2tlbklkXCIsIGluZGV4ZWQ6IHRydWUgfVxuICBdXG5dKTtcblxuLy8gc3JjL2h1bWFuLXJlYWRhYmxlL3J1bnRpbWUvdXRpbHMudHNcbmZ1bmN0aW9uIHBhcnNlU2lnbmF0dXJlKHNpZ25hdHVyZSwgc3RydWN0cyA9IHt9KSB7XG4gIGlmIChpc0Z1bmN0aW9uU2lnbmF0dXJlKHNpZ25hdHVyZSkpIHtcbiAgICBjb25zdCBtYXRjaCA9IGV4ZWNGdW5jdGlvblNpZ25hdHVyZShzaWduYXR1cmUpO1xuICAgIGlmICghbWF0Y2gpXG4gICAgICB0aHJvdyBuZXcgQmFzZUVycm9yKFwiSW52YWxpZCBmdW5jdGlvbiBzaWduYXR1cmUuXCIsIHtcbiAgICAgICAgZGV0YWlsczogc2lnbmF0dXJlXG4gICAgICB9KTtcbiAgICBjb25zdCBpbnB1dFBhcmFtcyA9IHNwbGl0UGFyYW1ldGVycyhtYXRjaC5wYXJhbWV0ZXJzKTtcbiAgICBjb25zdCBpbnB1dHMgPSBbXTtcbiAgICBjb25zdCBpbnB1dExlbmd0aCA9IGlucHV0UGFyYW1zLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0TGVuZ3RoOyBpKyspIHtcbiAgICAgIGlucHV0cy5wdXNoKFxuICAgICAgICBwYXJzZUFiaVBhcmFtZXRlcihpbnB1dFBhcmFtc1tpXSwge1xuICAgICAgICAgIG1vZGlmaWVyczogZnVuY3Rpb25Nb2RpZmllcnMsXG4gICAgICAgICAgc3RydWN0cyxcbiAgICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCJcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IG91dHB1dHMgPSBbXTtcbiAgICBpZiAobWF0Y2gucmV0dXJucykge1xuICAgICAgY29uc3Qgb3V0cHV0UGFyYW1zID0gc3BsaXRQYXJhbWV0ZXJzKG1hdGNoLnJldHVybnMpO1xuICAgICAgY29uc3Qgb3V0cHV0TGVuZ3RoID0gb3V0cHV0UGFyYW1zLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb3V0cHV0cy5wdXNoKFxuICAgICAgICAgIHBhcnNlQWJpUGFyYW1ldGVyKG91dHB1dFBhcmFtc1tpXSwge1xuICAgICAgICAgICAgbW9kaWZpZXJzOiBmdW5jdGlvbk1vZGlmaWVycyxcbiAgICAgICAgICAgIHN0cnVjdHMsXG4gICAgICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCJcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbWF0Y2gubmFtZSxcbiAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgIHN0YXRlTXV0YWJpbGl0eTogbWF0Y2guc3RhdGVNdXRhYmlsaXR5ID8/IFwibm9ucGF5YWJsZVwiLFxuICAgICAgaW5wdXRzLFxuICAgICAgb3V0cHV0c1xuICAgIH07XG4gIH1cbiAgaWYgKGlzRXZlbnRTaWduYXR1cmUoc2lnbmF0dXJlKSkge1xuICAgIGNvbnN0IG1hdGNoID0gZXhlY0V2ZW50U2lnbmF0dXJlKHNpZ25hdHVyZSk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgIHRocm93IG5ldyBCYXNlRXJyb3IoXCJJbnZhbGlkIGV2ZW50IHNpZ25hdHVyZS5cIiwge1xuICAgICAgICBkZXRhaWxzOiBzaWduYXR1cmVcbiAgICAgIH0pO1xuICAgIGNvbnN0IHBhcmFtcyA9IHNwbGl0UGFyYW1ldGVycyhtYXRjaC5wYXJhbWV0ZXJzKTtcbiAgICBjb25zdCBhYmlQYXJhbWV0ZXJzID0gW107XG4gICAgY29uc3QgbGVuZ3RoID0gcGFyYW1zLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBhYmlQYXJhbWV0ZXJzLnB1c2goXG4gICAgICAgIHBhcnNlQWJpUGFyYW1ldGVyKHBhcmFtc1tpXSwge1xuICAgICAgICAgIG1vZGlmaWVyczogZXZlbnRNb2RpZmllcnMsXG4gICAgICAgICAgc3RydWN0cyxcbiAgICAgICAgICB0eXBlOiBcImV2ZW50XCJcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7IG5hbWU6IG1hdGNoLm5hbWUsIHR5cGU6IFwiZXZlbnRcIiwgaW5wdXRzOiBhYmlQYXJhbWV0ZXJzIH07XG4gIH1cbiAgaWYgKGlzRXJyb3JTaWduYXR1cmUoc2lnbmF0dXJlKSkge1xuICAgIGNvbnN0IG1hdGNoID0gZXhlY0Vycm9yU2lnbmF0dXJlKHNpZ25hdHVyZSk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgIHRocm93IG5ldyBCYXNlRXJyb3IoXCJJbnZhbGlkIGVycm9yIHNpZ25hdHVyZS5cIiwge1xuICAgICAgICBkZXRhaWxzOiBzaWduYXR1cmVcbiAgICAgIH0pO1xuICAgIGNvbnN0IHBhcmFtcyA9IHNwbGl0UGFyYW1ldGVycyhtYXRjaC5wYXJhbWV0ZXJzKTtcbiAgICBjb25zdCBhYmlQYXJhbWV0ZXJzID0gW107XG4gICAgY29uc3QgbGVuZ3RoID0gcGFyYW1zLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBhYmlQYXJhbWV0ZXJzLnB1c2goXG4gICAgICAgIHBhcnNlQWJpUGFyYW1ldGVyKHBhcmFtc1tpXSwgeyBzdHJ1Y3RzLCB0eXBlOiBcImVycm9yXCIgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7IG5hbWU6IG1hdGNoLm5hbWUsIHR5cGU6IFwiZXJyb3JcIiwgaW5wdXRzOiBhYmlQYXJhbWV0ZXJzIH07XG4gIH1cbiAgaWYgKGlzQ29uc3RydWN0b3JTaWduYXR1cmUoc2lnbmF0dXJlKSkge1xuICAgIGNvbnN0IG1hdGNoID0gZXhlY0NvbnN0cnVjdG9yU2lnbmF0dXJlKHNpZ25hdHVyZSk7XG4gICAgaWYgKCFtYXRjaClcbiAgICAgIHRocm93IG5ldyBCYXNlRXJyb3IoXCJJbnZhbGlkIGNvbnN0cnVjdG9yIHNpZ25hdHVyZS5cIiwge1xuICAgICAgICBkZXRhaWxzOiBzaWduYXR1cmVcbiAgICAgIH0pO1xuICAgIGNvbnN0IHBhcmFtcyA9IHNwbGl0UGFyYW1ldGVycyhtYXRjaC5wYXJhbWV0ZXJzKTtcbiAgICBjb25zdCBhYmlQYXJhbWV0ZXJzID0gW107XG4gICAgY29uc3QgbGVuZ3RoID0gcGFyYW1zLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBhYmlQYXJhbWV0ZXJzLnB1c2goXG4gICAgICAgIHBhcnNlQWJpUGFyYW1ldGVyKHBhcmFtc1tpXSwgeyBzdHJ1Y3RzLCB0eXBlOiBcImNvbnN0cnVjdG9yXCIgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImNvbnN0cnVjdG9yXCIsXG4gICAgICBzdGF0ZU11dGFiaWxpdHk6IG1hdGNoLnN0YXRlTXV0YWJpbGl0eSA/PyBcIm5vbnBheWFibGVcIixcbiAgICAgIGlucHV0czogYWJpUGFyYW1ldGVyc1xuICAgIH07XG4gIH1cbiAgaWYgKGlzRmFsbGJhY2tTaWduYXR1cmUoc2lnbmF0dXJlKSlcbiAgICByZXR1cm4geyB0eXBlOiBcImZhbGxiYWNrXCIgfTtcbiAgaWYgKGlzUmVjZWl2ZVNpZ25hdHVyZShzaWduYXR1cmUpKVxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInJlY2VpdmVcIixcbiAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJwYXlhYmxlXCJcbiAgICB9O1xuICB0aHJvdyBuZXcgQmFzZUVycm9yKFwiVW5rbm93biBzaWduYXR1cmUuXCIsIHtcbiAgICBkZXRhaWxzOiBzaWduYXR1cmVcbiAgfSk7XG59XG52YXIgYWJpUGFyYW1ldGVyV2l0aG91dFR1cGxlUmVnZXggPSAvXig/PHR5cGU+W2EtekEtWjAtOV9dKz8pKD88YXJyYXk+KD86XFxbXFxkKj9cXF0pKz8pPyg/Olxccyg/PG1vZGlmaWVyPmNhbGxkYXRhfGluZGV4ZWR8bWVtb3J5fHN0b3JhZ2V7MX0pKT8oPzpcXHMoPzxuYW1lPlthLXpBLVowLTlfXSspKT8kLztcbnZhciBhYmlQYXJhbWV0ZXJXaXRoVHVwbGVSZWdleCA9IC9eXFwoKD88dHlwZT4uKz8pXFwpKD88YXJyYXk+KD86XFxbXFxkKj9cXF0pKz8pPyg/Olxccyg/PG1vZGlmaWVyPmNhbGxkYXRhfGluZGV4ZWR8bWVtb3J5fHN0b3JhZ2V7MX0pKT8oPzpcXHMoPzxuYW1lPlthLXpBLVowLTlfXSspKT8kLztcbnZhciBkeW5hbWljSW50ZWdlclJlZ2V4ID0gL151P2ludCQvO1xuZnVuY3Rpb24gcGFyc2VBYmlQYXJhbWV0ZXIocGFyYW0sIG9wdGlvbnMpIHtcbiAgY29uc3QgcGFyYW1ldGVyQ2FjaGVLZXkgPSBnZXRQYXJhbWV0ZXJDYWNoZUtleShwYXJhbSwgb3B0aW9ucz8udHlwZSk7XG4gIGlmIChwYXJhbWV0ZXJDYWNoZS5oYXMocGFyYW1ldGVyQ2FjaGVLZXkpKVxuICAgIHJldHVybiBwYXJhbWV0ZXJDYWNoZS5nZXQocGFyYW1ldGVyQ2FjaGVLZXkpO1xuICBjb25zdCBpc1R1cGxlID0gaXNUdXBsZVJlZ2V4LnRlc3QocGFyYW0pO1xuICBjb25zdCBtYXRjaCA9IGV4ZWNUeXBlZChcbiAgICBpc1R1cGxlID8gYWJpUGFyYW1ldGVyV2l0aFR1cGxlUmVnZXggOiBhYmlQYXJhbWV0ZXJXaXRob3V0VHVwbGVSZWdleCxcbiAgICBwYXJhbVxuICApO1xuICBpZiAoIW1hdGNoKVxuICAgIHRocm93IG5ldyBCYXNlRXJyb3IoXCJJbnZhbGlkIEFCSSBwYXJhbWV0ZXIuXCIsIHtcbiAgICAgIGRldGFpbHM6IHBhcmFtXG4gICAgfSk7XG4gIGlmIChtYXRjaC5uYW1lICYmIGlzU29saWRpdHlLZXl3b3JkKG1hdGNoLm5hbWUpKVxuICAgIHRocm93IG5ldyBCYXNlRXJyb3IoXCJJbnZhbGlkIEFCSSBwYXJhbWV0ZXIuXCIsIHtcbiAgICAgIGRldGFpbHM6IHBhcmFtLFxuICAgICAgbWV0YU1lc3NhZ2VzOiBbXG4gICAgICAgIGBcIiR7bWF0Y2gubmFtZX1cIiBpcyBhIHByb3RlY3RlZCBTb2xpZGl0eSBrZXl3b3JkLiBNb3JlIGluZm86IGh0dHBzOi8vZG9jcy5zb2xpZGl0eWxhbmcub3JnL2VuL2xhdGVzdC9jaGVhdHNoZWV0Lmh0bWxgXG4gICAgICBdXG4gICAgfSk7XG4gIGNvbnN0IG5hbWUyID0gbWF0Y2gubmFtZSA/IHsgbmFtZTogbWF0Y2gubmFtZSB9IDoge307XG4gIGNvbnN0IGluZGV4ZWQgPSBtYXRjaC5tb2RpZmllciA9PT0gXCJpbmRleGVkXCIgPyB7IGluZGV4ZWQ6IHRydWUgfSA6IHt9O1xuICBjb25zdCBzdHJ1Y3RzID0gb3B0aW9ucz8uc3RydWN0cyA/PyB7fTtcbiAgbGV0IHR5cGU7XG4gIGxldCBjb21wb25lbnRzID0ge307XG4gIGlmIChpc1R1cGxlKSB7XG4gICAgdHlwZSA9IFwidHVwbGVcIjtcbiAgICBjb25zdCBwYXJhbXMgPSBzcGxpdFBhcmFtZXRlcnMobWF0Y2gudHlwZSk7XG4gICAgY29uc3QgY29tcG9uZW50c18gPSBbXTtcbiAgICBjb25zdCBsZW5ndGggPSBwYXJhbXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbXBvbmVudHNfLnB1c2gocGFyc2VBYmlQYXJhbWV0ZXIocGFyYW1zW2ldLCB7IHN0cnVjdHMgfSkpO1xuICAgIH1cbiAgICBjb21wb25lbnRzID0geyBjb21wb25lbnRzOiBjb21wb25lbnRzXyB9O1xuICB9IGVsc2UgaWYgKG1hdGNoLnR5cGUgaW4gc3RydWN0cykge1xuICAgIHR5cGUgPSBcInR1cGxlXCI7XG4gICAgY29tcG9uZW50cyA9IHsgY29tcG9uZW50czogc3RydWN0c1ttYXRjaC50eXBlXSB9O1xuICB9IGVsc2UgaWYgKGR5bmFtaWNJbnRlZ2VyUmVnZXgudGVzdChtYXRjaC50eXBlKSkge1xuICAgIHR5cGUgPSBgJHttYXRjaC50eXBlfTI1NmA7XG4gIH0gZWxzZSB7XG4gICAgdHlwZSA9IG1hdGNoLnR5cGU7XG4gICAgaWYgKCEob3B0aW9ucz8udHlwZSA9PT0gXCJzdHJ1Y3RcIikgJiYgIWlzU29saWRpdHlUeXBlKHR5cGUpKVxuICAgICAgdGhyb3cgbmV3IEJhc2VFcnJvcihcIlVua25vd24gdHlwZS5cIiwge1xuICAgICAgICBtZXRhTWVzc2FnZXM6IFtgVHlwZSBcIiR7dHlwZX1cIiBpcyBub3QgYSB2YWxpZCBBQkkgdHlwZS5gXVxuICAgICAgfSk7XG4gIH1cbiAgaWYgKG1hdGNoLm1vZGlmaWVyKSB7XG4gICAgaWYgKCFvcHRpb25zPy5tb2RpZmllcnM/Lmhhcz8uKG1hdGNoLm1vZGlmaWVyKSlcbiAgICAgIHRocm93IG5ldyBCYXNlRXJyb3IoXCJJbnZhbGlkIEFCSSBwYXJhbWV0ZXIuXCIsIHtcbiAgICAgICAgZGV0YWlsczogcGFyYW0sXG4gICAgICAgIG1ldGFNZXNzYWdlczogW1xuICAgICAgICAgIGBNb2RpZmllciBcIiR7bWF0Y2gubW9kaWZpZXJ9XCIgbm90IGFsbG93ZWQke29wdGlvbnM/LnR5cGUgPyBgIGluIFwiJHtvcHRpb25zLnR5cGV9XCIgdHlwZWAgOiBcIlwifS5gXG4gICAgICAgIF1cbiAgICAgIH0pO1xuICAgIGlmIChmdW5jdGlvbk1vZGlmaWVycy5oYXMobWF0Y2gubW9kaWZpZXIpICYmICFpc1ZhbGlkRGF0YUxvY2F0aW9uKHR5cGUsICEhbWF0Y2guYXJyYXkpKVxuICAgICAgdGhyb3cgbmV3IEJhc2VFcnJvcihcIkludmFsaWQgQUJJIHBhcmFtZXRlci5cIiwge1xuICAgICAgICBkZXRhaWxzOiBwYXJhbSxcbiAgICAgICAgbWV0YU1lc3NhZ2VzOiBbXG4gICAgICAgICAgYE1vZGlmaWVyIFwiJHttYXRjaC5tb2RpZmllcn1cIiBub3QgYWxsb3dlZCR7b3B0aW9ucz8udHlwZSA/IGAgaW4gXCIke29wdGlvbnMudHlwZX1cIiB0eXBlYCA6IFwiXCJ9LmAsXG4gICAgICAgICAgYERhdGEgbG9jYXRpb24gY2FuIG9ubHkgYmUgc3BlY2lmaWVkIGZvciBhcnJheSwgc3RydWN0LCBvciBtYXBwaW5nIHR5cGVzLCBidXQgXCIke21hdGNoLm1vZGlmaWVyfVwiIHdhcyBnaXZlbi5gXG4gICAgICAgIF1cbiAgICAgIH0pO1xuICB9XG4gIGNvbnN0IGFiaVBhcmFtZXRlciA9IHtcbiAgICB0eXBlOiBgJHt0eXBlfSR7bWF0Y2guYXJyYXkgPz8gXCJcIn1gLFxuICAgIC4uLm5hbWUyLFxuICAgIC4uLmluZGV4ZWQsXG4gICAgLi4uY29tcG9uZW50c1xuICB9O1xuICBwYXJhbWV0ZXJDYWNoZS5zZXQocGFyYW1ldGVyQ2FjaGVLZXksIGFiaVBhcmFtZXRlcik7XG4gIHJldHVybiBhYmlQYXJhbWV0ZXI7XG59XG5mdW5jdGlvbiBzcGxpdFBhcmFtZXRlcnMocGFyYW1zLCByZXN1bHQgPSBbXSwgY3VycmVudCA9IFwiXCIsIGRlcHRoID0gMCkge1xuICBpZiAocGFyYW1zID09PSBcIlwiKSB7XG4gICAgaWYgKGN1cnJlbnQgPT09IFwiXCIpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChkZXB0aCAhPT0gMClcbiAgICAgIHRocm93IG5ldyBCYXNlRXJyb3IoXCJVbmJhbGFuY2VkIHBhcmVudGhlc2VzLlwiLCB7XG4gICAgICAgIG1ldGFNZXNzYWdlczogW1xuICAgICAgICAgIGBcIiR7Y3VycmVudC50cmltKCl9XCIgaGFzIHRvbyBtYW55ICR7ZGVwdGggPiAwID8gXCJvcGVuaW5nXCIgOiBcImNsb3NpbmdcIn0gcGFyZW50aGVzZXMuYFxuICAgICAgICBdLFxuICAgICAgICBkZXRhaWxzOiBgRGVwdGggXCIke2RlcHRofVwiYFxuICAgICAgfSk7XG4gICAgcmV0dXJuIFsuLi5yZXN1bHQsIGN1cnJlbnQudHJpbSgpXTtcbiAgfVxuICBjb25zdCBsZW5ndGggPSBwYXJhbXMubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hhciA9IHBhcmFtc1tpXTtcbiAgICBjb25zdCB0YWlsID0gcGFyYW1zLnNsaWNlKGkgKyAxKTtcbiAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgIGNhc2UgXCIsXCI6XG4gICAgICAgIHJldHVybiBkZXB0aCA9PT0gMCA/IHNwbGl0UGFyYW1ldGVycyh0YWlsLCBbLi4ucmVzdWx0LCBjdXJyZW50LnRyaW0oKV0pIDogc3BsaXRQYXJhbWV0ZXJzKHRhaWwsIHJlc3VsdCwgYCR7Y3VycmVudH0ke2NoYXJ9YCwgZGVwdGgpO1xuICAgICAgY2FzZSBcIihcIjpcbiAgICAgICAgcmV0dXJuIHNwbGl0UGFyYW1ldGVycyh0YWlsLCByZXN1bHQsIGAke2N1cnJlbnR9JHtjaGFyfWAsIGRlcHRoICsgMSk7XG4gICAgICBjYXNlIFwiKVwiOlxuICAgICAgICByZXR1cm4gc3BsaXRQYXJhbWV0ZXJzKHRhaWwsIHJlc3VsdCwgYCR7Y3VycmVudH0ke2NoYXJ9YCwgZGVwdGggLSAxKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzcGxpdFBhcmFtZXRlcnModGFpbCwgcmVzdWx0LCBgJHtjdXJyZW50fSR7Y2hhcn1gLCBkZXB0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBbXTtcbn1cbmZ1bmN0aW9uIGlzU29saWRpdHlUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUgPT09IFwiYWRkcmVzc1wiIHx8IHR5cGUgPT09IFwiYm9vbFwiIHx8IHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlID09PSBcInN0cmluZ1wiIHx8IGJ5dGVzUmVnZXgudGVzdCh0eXBlKSB8fCBpbnRlZ2VyUmVnZXgudGVzdCh0eXBlKTtcbn1cbnZhciBwcm90ZWN0ZWRLZXl3b3Jkc1JlZ2V4ID0gL14oPzphZnRlcnxhbGlhc3xhbm9ueW1vdXN8YXBwbHl8YXV0b3xieXRlfGNhbGxkYXRhfGNhc2V8Y2F0Y2h8Y29uc3RhbnR8Y29weW9mfGRlZmF1bHR8ZGVmaW5lZHxlcnJvcnxldmVudHxleHRlcm5hbHxmYWxzZXxmaW5hbHxmdW5jdGlvbnxpbW11dGFibGV8aW1wbGVtZW50c3xpbnxpbmRleGVkfGlubGluZXxpbnRlcm5hbHxsZXR8bWFwcGluZ3xtYXRjaHxtZW1vcnl8bXV0YWJsZXxudWxsfG9mfG92ZXJyaWRlfHBhcnRpYWx8cHJpdmF0ZXxwcm9taXNlfHB1YmxpY3xwdXJlfHJlZmVyZW5jZXxyZWxvY2F0YWJsZXxyZXR1cm58cmV0dXJuc3xzaXplb2Z8c3RhdGljfHN0b3JhZ2V8c3RydWN0fHN1cGVyfHN1cHBvcnRzfHN3aXRjaHx0aGlzfHRydWV8dHJ5fHR5cGVkZWZ8dHlwZW9mfHZhcnx2aWV3fHZpcnR1YWwpJC87XG5mdW5jdGlvbiBpc1NvbGlkaXR5S2V5d29yZChuYW1lMikge1xuICByZXR1cm4gbmFtZTIgPT09IFwiYWRkcmVzc1wiIHx8IG5hbWUyID09PSBcImJvb2xcIiB8fCBuYW1lMiA9PT0gXCJmdW5jdGlvblwiIHx8IG5hbWUyID09PSBcInN0cmluZ1wiIHx8IG5hbWUyID09PSBcInR1cGxlXCIgfHwgYnl0ZXNSZWdleC50ZXN0KG5hbWUyKSB8fCBpbnRlZ2VyUmVnZXgudGVzdChuYW1lMikgfHwgcHJvdGVjdGVkS2V5d29yZHNSZWdleC50ZXN0KG5hbWUyKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWREYXRhTG9jYXRpb24odHlwZSwgaXNBcnJheSkge1xuICByZXR1cm4gaXNBcnJheSB8fCB0eXBlID09PSBcImJ5dGVzXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlID09PSBcInR1cGxlXCI7XG59XG5cbi8vIHNyYy9odW1hbi1yZWFkYWJsZS9ydW50aW1lL3N0cnVjdHMudHNcbmZ1bmN0aW9uIHBhcnNlU3RydWN0cyhzaWduYXR1cmVzKSB7XG4gIGNvbnN0IHNoYWxsb3dTdHJ1Y3RzID0ge307XG4gIGNvbnN0IHNpZ25hdHVyZXNMZW5ndGggPSBzaWduYXR1cmVzLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWduYXR1cmVzTGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBzaWduYXR1cmVzW2ldO1xuICAgIGlmICghaXNTdHJ1Y3RTaWduYXR1cmUoc2lnbmF0dXJlKSlcbiAgICAgIGNvbnRpbnVlO1xuICAgIGNvbnN0IG1hdGNoID0gZXhlY1N0cnVjdFNpZ25hdHVyZShzaWduYXR1cmUpO1xuICAgIGlmICghbWF0Y2gpXG4gICAgICB0aHJvdyBuZXcgQmFzZUVycm9yKFwiSW52YWxpZCBzdHJ1Y3Qgc2lnbmF0dXJlLlwiLCB7XG4gICAgICAgIGRldGFpbHM6IHNpZ25hdHVyZVxuICAgICAgfSk7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IG1hdGNoLnByb3BlcnRpZXMuc3BsaXQoXCI7XCIpO1xuICAgIGNvbnN0IGNvbXBvbmVudHMgPSBbXTtcbiAgICBjb25zdCBwcm9wZXJ0aWVzTGVuZ3RoID0gcHJvcGVydGllcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCBwcm9wZXJ0aWVzTGVuZ3RoOyBrKyspIHtcbiAgICAgIGNvbnN0IHByb3BlcnR5ID0gcHJvcGVydGllc1trXTtcbiAgICAgIGNvbnN0IHRyaW1tZWQgPSBwcm9wZXJ0eS50cmltKCk7XG4gICAgICBpZiAoIXRyaW1tZWQpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY29uc3QgYWJpUGFyYW1ldGVyID0gcGFyc2VBYmlQYXJhbWV0ZXIodHJpbW1lZCwge1xuICAgICAgICB0eXBlOiBcInN0cnVjdFwiXG4gICAgICB9KTtcbiAgICAgIGNvbXBvbmVudHMucHVzaChhYmlQYXJhbWV0ZXIpO1xuICAgIH1cbiAgICBpZiAoIWNvbXBvbmVudHMubGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3IEJhc2VFcnJvcihcIkludmFsaWQgc3RydWN0IHNpZ25hdHVyZS5cIiwge1xuICAgICAgICBkZXRhaWxzOiBzaWduYXR1cmUsXG4gICAgICAgIG1ldGFNZXNzYWdlczogW1wiTm8gcHJvcGVydGllcyBleGlzdC5cIl1cbiAgICAgIH0pO1xuICAgIHNoYWxsb3dTdHJ1Y3RzW21hdGNoLm5hbWVdID0gY29tcG9uZW50cztcbiAgfVxuICBjb25zdCByZXNvbHZlZFN0cnVjdHMgPSB7fTtcbiAgY29uc3QgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHNoYWxsb3dTdHJ1Y3RzKTtcbiAgY29uc3QgZW50cmllc0xlbmd0aCA9IGVudHJpZXMubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVudHJpZXNMZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IFtuYW1lMiwgcGFyYW1ldGVyc10gPSBlbnRyaWVzW2ldO1xuICAgIHJlc29sdmVkU3RydWN0c1tuYW1lMl0gPSByZXNvbHZlU3RydWN0cyhwYXJhbWV0ZXJzLCBzaGFsbG93U3RydWN0cyk7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkU3RydWN0cztcbn1cbnZhciB0eXBlV2l0aG91dFR1cGxlUmVnZXggPSAvXig/PHR5cGU+W2EtekEtWjAtOV9dKz8pKD88YXJyYXk+KD86XFxbXFxkKj9cXF0pKz8pPyQvO1xuZnVuY3Rpb24gcmVzb2x2ZVN0cnVjdHMoYWJpUGFyYW1ldGVycywgc3RydWN0cywgYW5jZXN0b3JzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSkge1xuICBjb25zdCBjb21wb25lbnRzID0gW107XG4gIGNvbnN0IGxlbmd0aCA9IGFiaVBhcmFtZXRlcnMubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYWJpUGFyYW1ldGVyID0gYWJpUGFyYW1ldGVyc1tpXTtcbiAgICBjb25zdCBpc1R1cGxlID0gaXNUdXBsZVJlZ2V4LnRlc3QoYWJpUGFyYW1ldGVyLnR5cGUpO1xuICAgIGlmIChpc1R1cGxlKVxuICAgICAgY29tcG9uZW50cy5wdXNoKGFiaVBhcmFtZXRlcik7XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBtYXRjaCA9IGV4ZWNUeXBlZChcbiAgICAgICAgdHlwZVdpdGhvdXRUdXBsZVJlZ2V4LFxuICAgICAgICBhYmlQYXJhbWV0ZXIudHlwZVxuICAgICAgKTtcbiAgICAgIGlmICghbWF0Y2g/LnR5cGUpXG4gICAgICAgIHRocm93IG5ldyBCYXNlRXJyb3IoXCJJbnZhbGlkIEFCSSBwYXJhbWV0ZXIuXCIsIHtcbiAgICAgICAgICBkZXRhaWxzOiBKU09OLnN0cmluZ2lmeShhYmlQYXJhbWV0ZXIsIG51bGwsIDIpLFxuICAgICAgICAgIG1ldGFNZXNzYWdlczogW1wiQUJJIHBhcmFtZXRlciB0eXBlIGlzIGludmFsaWQuXCJdXG4gICAgICAgIH0pO1xuICAgICAgY29uc3QgeyBhcnJheSwgdHlwZSB9ID0gbWF0Y2g7XG4gICAgICBpZiAodHlwZSBpbiBzdHJ1Y3RzKSB7XG4gICAgICAgIGlmIChhbmNlc3RvcnMuaGFzKHR5cGUpKVxuICAgICAgICAgIHRocm93IG5ldyBCYXNlRXJyb3IoXCJDaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQuXCIsIHtcbiAgICAgICAgICAgIG1ldGFNZXNzYWdlczogW2BTdHJ1Y3QgXCIke3R5cGV9XCIgaXMgYSBjaXJjdWxhciByZWZlcmVuY2UuYF1cbiAgICAgICAgICB9KTtcbiAgICAgICAgY29tcG9uZW50cy5wdXNoKHtcbiAgICAgICAgICAuLi5hYmlQYXJhbWV0ZXIsXG4gICAgICAgICAgdHlwZTogYHR1cGxlJHthcnJheSA/PyBcIlwifWAsXG4gICAgICAgICAgY29tcG9uZW50czogcmVzb2x2ZVN0cnVjdHMoXG4gICAgICAgICAgICBzdHJ1Y3RzW3R5cGVdID8/IFtdLFxuICAgICAgICAgICAgc3RydWN0cyxcbiAgICAgICAgICAgIC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFsuLi5hbmNlc3RvcnMsIHR5cGVdKVxuICAgICAgICAgIClcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTb2xpZGl0eVR5cGUodHlwZSkpXG4gICAgICAgICAgY29tcG9uZW50cy5wdXNoKGFiaVBhcmFtZXRlcik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0aHJvdyBuZXcgQmFzZUVycm9yKFwiVW5rbm93biB0eXBlLlwiLCB7XG4gICAgICAgICAgICBtZXRhTWVzc2FnZXM6IFtcbiAgICAgICAgICAgICAgYFR5cGUgXCIke3R5cGV9XCIgaXMgbm90IGEgdmFsaWQgQUJJIHR5cGUuIFBlcmhhcHMgeW91IGZvcmdvdCB0byBpbmNsdWRlIGEgc3RydWN0IHNpZ25hdHVyZT9gXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb21wb25lbnRzO1xufVxuXG4vLyBzcmMvaHVtYW4tcmVhZGFibGUvcGFyc2VBYmkudHNcbmZ1bmN0aW9uIHBhcnNlQWJpKHNpZ25hdHVyZXMpIHtcbiAgY29uc3Qgc3RydWN0cyA9IHBhcnNlU3RydWN0cyhzaWduYXR1cmVzKTtcbiAgY29uc3QgYWJpID0gW107XG4gIGNvbnN0IGxlbmd0aCA9IHNpZ25hdHVyZXMubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gc2lnbmF0dXJlc1tpXTtcbiAgICBpZiAoaXNTdHJ1Y3RTaWduYXR1cmUoc2lnbmF0dXJlKSlcbiAgICAgIGNvbnRpbnVlO1xuICAgIGFiaS5wdXNoKHBhcnNlU2lnbmF0dXJlKHNpZ25hdHVyZSwgc3RydWN0cykpO1xuICB9XG4gIHJldHVybiBhYmk7XG59XG5cbi8vIHNyYy9odW1hbi1yZWFkYWJsZS9wYXJzZUFiaUl0ZW0udHNcbmZ1bmN0aW9uIHBhcnNlQWJpSXRlbShzaWduYXR1cmUpIHtcbiAgbGV0IGFiaUl0ZW07XG4gIGlmICh0eXBlb2Ygc2lnbmF0dXJlID09PSBcInN0cmluZ1wiKVxuICAgIGFiaUl0ZW0gPSBwYXJzZVNpZ25hdHVyZShzaWduYXR1cmUpO1xuICBlbHNlIHtcbiAgICBjb25zdCBzdHJ1Y3RzID0gcGFyc2VTdHJ1Y3RzKHNpZ25hdHVyZSk7XG4gICAgY29uc3QgbGVuZ3RoID0gc2lnbmF0dXJlLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzaWduYXR1cmVfID0gc2lnbmF0dXJlW2ldO1xuICAgICAgaWYgKGlzU3RydWN0U2lnbmF0dXJlKHNpZ25hdHVyZV8pKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGFiaUl0ZW0gPSBwYXJzZVNpZ25hdHVyZShzaWduYXR1cmVfLCBzdHJ1Y3RzKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoIWFiaUl0ZW0pXG4gICAgdGhyb3cgbmV3IEJhc2VFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBBQkkgaXRlbS5cIiwge1xuICAgICAgZGV0YWlsczogYHBhcnNlQWJpSXRlbSgke0pTT04uc3RyaW5naWZ5KHNpZ25hdHVyZSwgbnVsbCwgMil9KWAsXG4gICAgICBkb2NzUGF0aDogXCIvYXBpL2h1bWFuLmh0bWwjcGFyc2VhYmlpdGVtLTFcIlxuICAgIH0pO1xuICByZXR1cm4gYWJpSXRlbTtcbn1cblxuLy8gc3JjL2h1bWFuLXJlYWRhYmxlL3BhcnNlQWJpUGFyYW1ldGVyLnRzXG5mdW5jdGlvbiBwYXJzZUFiaVBhcmFtZXRlcjIocGFyYW0pIHtcbiAgbGV0IGFiaVBhcmFtZXRlcjtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJzdHJpbmdcIilcbiAgICBhYmlQYXJhbWV0ZXIgPSBwYXJzZUFiaVBhcmFtZXRlcihwYXJhbSwge1xuICAgICAgbW9kaWZpZXJzXG4gICAgfSk7XG4gIGVsc2Uge1xuICAgIGNvbnN0IHN0cnVjdHMgPSBwYXJzZVN0cnVjdHMocGFyYW0pO1xuICAgIGNvbnN0IGxlbmd0aCA9IHBhcmFtLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBwYXJhbVtpXTtcbiAgICAgIGlmIChpc1N0cnVjdFNpZ25hdHVyZShzaWduYXR1cmUpKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGFiaVBhcmFtZXRlciA9IHBhcnNlQWJpUGFyYW1ldGVyKHNpZ25hdHVyZSwgeyBtb2RpZmllcnMsIHN0cnVjdHMgfSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKCFhYmlQYXJhbWV0ZXIpXG4gICAgdGhyb3cgbmV3IEJhc2VFcnJvcihcIkZhaWxlZCB0byBwYXJzZSBBQkkgcGFyYW1ldGVyLlwiLCB7XG4gICAgICBkZXRhaWxzOiBgcGFyc2VBYmlQYXJhbWV0ZXIoJHtKU09OLnN0cmluZ2lmeShwYXJhbSwgbnVsbCwgMil9KWAsXG4gICAgICBkb2NzUGF0aDogXCIvYXBpL2h1bWFuLmh0bWwjcGFyc2VhYmlwYXJhbWV0ZXItMVwiXG4gICAgfSk7XG4gIHJldHVybiBhYmlQYXJhbWV0ZXI7XG59XG5cbi8vIHNyYy9odW1hbi1yZWFkYWJsZS9wYXJzZUFiaVBhcmFtZXRlcnMudHNcbmZ1bmN0aW9uIHBhcnNlQWJpUGFyYW1ldGVycyhwYXJhbXMpIHtcbiAgY29uc3QgYWJpUGFyYW1ldGVycyA9IFtdO1xuICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gXCJzdHJpbmdcIikge1xuICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBzcGxpdFBhcmFtZXRlcnMocGFyYW1zKTtcbiAgICBjb25zdCBsZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBhYmlQYXJhbWV0ZXJzLnB1c2gocGFyc2VBYmlQYXJhbWV0ZXIocGFyYW1ldGVyc1tpXSwgeyBtb2RpZmllcnMgfSkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzdHJ1Y3RzID0gcGFyc2VTdHJ1Y3RzKHBhcmFtcyk7XG4gICAgY29uc3QgbGVuZ3RoID0gcGFyYW1zLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBwYXJhbXNbaV07XG4gICAgICBpZiAoaXNTdHJ1Y3RTaWduYXR1cmUoc2lnbmF0dXJlKSlcbiAgICAgICAgY29udGludWU7XG4gICAgICBjb25zdCBwYXJhbWV0ZXJzID0gc3BsaXRQYXJhbWV0ZXJzKHNpZ25hdHVyZSk7XG4gICAgICBjb25zdCBsZW5ndGgyID0gcGFyYW1ldGVycy5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8IGxlbmd0aDI7IGsrKykge1xuICAgICAgICBhYmlQYXJhbWV0ZXJzLnB1c2goXG4gICAgICAgICAgcGFyc2VBYmlQYXJhbWV0ZXIocGFyYW1ldGVyc1trXSwgeyBtb2RpZmllcnMsIHN0cnVjdHMgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGFiaVBhcmFtZXRlcnMubGVuZ3RoID09PSAwKVxuICAgIHRocm93IG5ldyBCYXNlRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgQUJJIHBhcmFtZXRlcnMuXCIsIHtcbiAgICAgIGRldGFpbHM6IGBwYXJzZUFiaVBhcmFtZXRlcnMoJHtKU09OLnN0cmluZ2lmeShwYXJhbXMsIG51bGwsIDIpfSlgLFxuICAgICAgZG9jc1BhdGg6IFwiL2FwaS9odW1hbi5odG1sI3BhcnNlYWJpcGFyYW1ldGVycy0xXCJcbiAgICB9KTtcbiAgcmV0dXJuIGFiaVBhcmFtZXRlcnM7XG59XG5leHBvcnQge1xuICBCYXNlRXJyb3IsXG4gIG5hcnJvdyxcbiAgcGFyc2VBYmksXG4gIHBhcnNlQWJpSXRlbSxcbiAgcGFyc2VBYmlQYXJhbWV0ZXIyIGFzIHBhcnNlQWJpUGFyYW1ldGVyLFxuICBwYXJzZUFiaVBhcmFtZXRlcnNcbn07XG4iXSwibmFtZXMiOlsiYnl0ZXNSZWdleCIsImV4ZWNUeXBlZCIsImludGVnZXJSZWdleCIsImlzVHVwbGVSZWdleCIsIl9fcHVibGljRmllbGQiLCJuYW1lIiwidmVyc2lvbiIsIkJhc2VFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJzaG9ydE1lc3NhZ2UiLCJhcmdzIiwiZGV0YWlscyIsImNhdXNlIiwibWVzc2FnZSIsImRvY3NQYXRoIiwibWV0YU1lc3NhZ2VzIiwiam9pbiIsIm5hcnJvdyIsInZhbHVlIiwiZXJyb3JTaWduYXR1cmVSZWdleCIsImlzRXJyb3JTaWduYXR1cmUiLCJzaWduYXR1cmUiLCJ0ZXN0IiwiZXhlY0Vycm9yU2lnbmF0dXJlIiwiZXZlbnRTaWduYXR1cmVSZWdleCIsImlzRXZlbnRTaWduYXR1cmUiLCJleGVjRXZlbnRTaWduYXR1cmUiLCJmdW5jdGlvblNpZ25hdHVyZVJlZ2V4IiwiaXNGdW5jdGlvblNpZ25hdHVyZSIsImV4ZWNGdW5jdGlvblNpZ25hdHVyZSIsInN0cnVjdFNpZ25hdHVyZVJlZ2V4IiwiaXNTdHJ1Y3RTaWduYXR1cmUiLCJleGVjU3RydWN0U2lnbmF0dXJlIiwiY29uc3RydWN0b3JTaWduYXR1cmVSZWdleCIsImlzQ29uc3RydWN0b3JTaWduYXR1cmUiLCJleGVjQ29uc3RydWN0b3JTaWduYXR1cmUiLCJmYWxsYmFja1NpZ25hdHVyZVJlZ2V4IiwiaXNGYWxsYmFja1NpZ25hdHVyZSIsInJlY2VpdmVTaWduYXR1cmVSZWdleCIsImlzUmVjZWl2ZVNpZ25hdHVyZSIsIm1vZGlmaWVycyIsIlNldCIsImV2ZW50TW9kaWZpZXJzIiwiZnVuY3Rpb25Nb2RpZmllcnMiLCJnZXRQYXJhbWV0ZXJDYWNoZUtleSIsInBhcmFtIiwidHlwZSIsInBhcmFtZXRlckNhY2hlIiwiTWFwIiwiaW5kZXhlZCIsInBhcnNlU2lnbmF0dXJlIiwic3RydWN0cyIsIm1hdGNoIiwiaW5wdXRQYXJhbXMiLCJzcGxpdFBhcmFtZXRlcnMiLCJwYXJhbWV0ZXJzIiwiaW5wdXRzIiwiaW5wdXRMZW5ndGgiLCJsZW5ndGgiLCJpIiwicHVzaCIsInBhcnNlQWJpUGFyYW1ldGVyIiwib3V0cHV0cyIsInJldHVybnMiLCJvdXRwdXRQYXJhbXMiLCJvdXRwdXRMZW5ndGgiLCJzdGF0ZU11dGFiaWxpdHkiLCJwYXJhbXMiLCJhYmlQYXJhbWV0ZXJzIiwiYWJpUGFyYW1ldGVyV2l0aG91dFR1cGxlUmVnZXgiLCJhYmlQYXJhbWV0ZXJXaXRoVHVwbGVSZWdleCIsImR5bmFtaWNJbnRlZ2VyUmVnZXgiLCJvcHRpb25zIiwicGFyYW1ldGVyQ2FjaGVLZXkiLCJoYXMiLCJnZXQiLCJpc1R1cGxlIiwiaXNTb2xpZGl0eUtleXdvcmQiLCJuYW1lMiIsIm1vZGlmaWVyIiwiY29tcG9uZW50cyIsImNvbXBvbmVudHNfIiwiaXNTb2xpZGl0eVR5cGUiLCJpc1ZhbGlkRGF0YUxvY2F0aW9uIiwiYXJyYXkiLCJhYmlQYXJhbWV0ZXIiLCJzZXQiLCJyZXN1bHQiLCJjdXJyZW50IiwiZGVwdGgiLCJ0cmltIiwiY2hhciIsInRhaWwiLCJzbGljZSIsInByb3RlY3RlZEtleXdvcmRzUmVnZXgiLCJpc0FycmF5IiwicGFyc2VTdHJ1Y3RzIiwic2lnbmF0dXJlcyIsInNoYWxsb3dTdHJ1Y3RzIiwic2lnbmF0dXJlc0xlbmd0aCIsInByb3BlcnRpZXMiLCJzcGxpdCIsInByb3BlcnRpZXNMZW5ndGgiLCJrIiwicHJvcGVydHkiLCJ0cmltbWVkIiwicmVzb2x2ZWRTdHJ1Y3RzIiwiZW50cmllcyIsIk9iamVjdCIsImVudHJpZXNMZW5ndGgiLCJyZXNvbHZlU3RydWN0cyIsInR5cGVXaXRob3V0VHVwbGVSZWdleCIsImFuY2VzdG9ycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZUFiaSIsImFiaSIsInBhcnNlQWJpSXRlbSIsImFiaUl0ZW0iLCJzaWduYXR1cmVfIiwicGFyc2VBYmlQYXJhbWV0ZXIyIiwicGFyc2VBYmlQYXJhbWV0ZXJzIiwibGVuZ3RoMiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/abitype/dist/index.mjs\n");

/***/ })

};
;