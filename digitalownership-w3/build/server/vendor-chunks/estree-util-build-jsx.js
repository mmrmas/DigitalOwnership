"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/estree-util-build-jsx";
exports.ids = ["vendor-chunks/estree-util-build-jsx"];
exports.modules = {

/***/ "(ssr)/./node_modules/estree-util-build-jsx/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/estree-util-build-jsx/lib/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildJsx: () => (/* binding */ buildJsx)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(ssr)/./node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/index.js\");\n/**\n * @typedef {import('estree-jsx').Expression} Expression\n * @typedef {import('estree-jsx').Identifier} Identifier\n * @typedef {import('estree-jsx').ImportSpecifier} ImportSpecifier\n * @typedef {import('estree-jsx').JSXAttribute} JSXAttribute\n * @typedef {import('estree-jsx').JSXIdentifier} JSXIdentifier\n * @typedef {import('estree-jsx').JSXMemberExpression} JSXMemberExpression\n * @typedef {import('estree-jsx').JSXNamespacedName} JSXNamespacedName\n * @typedef {import('estree-jsx').Literal} Literal\n * @typedef {import('estree-jsx').MemberExpression} MemberExpression\n * @typedef {import('estree-jsx').Node} Node\n * @typedef {import('estree-jsx').ObjectExpression} ObjectExpression\n * @typedef {import('estree-jsx').Property} Property\n * @typedef {import('estree-jsx').SpreadElement} SpreadElement\n *\n * @typedef {'automatic' | 'classic'} Runtime\n *   How to transform JSX.\n *\n * @typedef Options\n *   Configuration.\n *\n *   > ðŸ‘‰ **Note**: you can also configure `runtime`, `importSource`, `pragma`,\n *   > and `pragmaFrag` from within files through comments.\n * @property {Runtime | null | undefined} [runtime='classic']\n *   Choose the runtime (default: `'classic'`).\n *\n *   Comment form: `@jsxRuntime theRuntime`.\n * @property {string | null | undefined} [importSource='react']\n *   Place to import `jsx`, `jsxs`, `jsxDEV`, and `Fragment` from, when the\n *   effective runtime is automatic (default: `'react'`).\n *\n *   Comment form: `@jsxImportSource theSource`.\n *\n *   > ðŸ‘‰ **Note**: `/jsx-runtime` or `/jsx-dev-runtime` is appended to this\n *   > provided source.\n *   > In CJS, that can resolve to a file (as in `theSource/jsx-runtime.js`),\n *   > but for ESM an export map needs to be set up to point to files:\n *   >\n *   > ```js\n *   > // â€¦\n *   > \"exports\": {\n *   >   // â€¦\n *   >   \"./jsx-runtime\": \"./path/to/jsx-runtime.js\",\n *   >   \"./jsx-dev-runtime\": \"./path/to/jsx-runtime.js\"\n *   >   // â€¦\n *   > ```\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Identifier or member expression to call when the effective runtime is\n *   classic (default: `'React.createElement'`).\n *\n *   Comment form: `@jsx identifier`.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Identifier or member expression to use as a symbol for fragments when the\n *   effective runtime is classic (default: `'React.Fragment'`).\n *\n *   Comment form: `@jsxFrag identifier`.\n * @property {boolean | null | undefined} [development=false]\n *   When in the automatic runtime, whether to import\n *   `theSource/jsx-dev-runtime.js`, use `jsxDEV`, and pass location info when\n *   available (default: `false`).\n *\n *   This helps debugging but adds a lot of code that you donâ€™t want in\n *   production.\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in location info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n *\n * @typedef Annotations\n *   State where info from comments is gathered.\n * @property {string | undefined} [jsx]\n *   JSX identifier (`pragma`).\n * @property {string | undefined} [jsxFrag]\n *   JSX identifier of fragment (`pragmaFrag`).\n * @property {string | undefined} [jsxImportSource]\n *   Where to import an automatic JSX runtime from.\n * @property {Runtime | undefined} [jsxRuntime]\n *   Runtime.\n *\n * @typedef Imports\n *   State of used identifiers from the automatic runtime.\n * @property {boolean | undefined} [fragment]\n *   Symbol of `Fragment`.\n * @property {boolean | undefined} [jsx]\n *   Symbol of `jsx`.\n * @property {boolean | undefined} [jsxs]\n *   Symbol of `jsxs`.\n * @property {boolean | undefined} [jsxDEV]\n *   Symbol of `jsxDEV`.\n */ \n\n\nconst regex = /@(jsx|jsxFrag|jsxImportSource|jsxRuntime)\\s+(\\S+)/g;\n/**\n * Turn JSX in `tree` into function calls: `<x />` -> `h('x')`!\n *\n * ###### Algorithm\n *\n * In almost all cases, this utility is the same as the Babel plugin, except that\n * they work on slightly different syntax trees.\n *\n * Some differences:\n *\n * *   no pure annotations things\n * *   `this` is not a component: `<this>` -> `h('this')`, not `h(this)`\n * *   namespaces are supported: `<a:b c:d>` -> `h('a:b', {'c:d': true})`,\n *     which throws by default in Babel or can be turned on with `throwIfNamespace`\n * *   no `useSpread`, `useBuiltIns`, or `filter` options\n *\n * @param {Node} tree\n *   Tree to transform (typically `Program`).\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */ function buildJsx(tree, options) {\n    const config = options || {};\n    let automatic = config.runtime === \"automatic\";\n    /** @type {Annotations} */ const annotations = {};\n    /** @type {Imports} */ const imports = {};\n    (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n        enter (node) {\n            if (node.type === \"Program\") {\n                const comments = node.comments || [];\n                let index = -1;\n                while(++index < comments.length){\n                    regex.lastIndex = 0;\n                    let match = regex.exec(comments[index].value);\n                    while(match){\n                        // @ts-expect-error: `match[1]` is always a key, `match[2]` when\n                        // runtime is checked later.\n                        annotations[match[1]] = match[2];\n                        match = regex.exec(comments[index].value);\n                    }\n                }\n                if (annotations.jsxRuntime) {\n                    if (annotations.jsxRuntime === \"automatic\") {\n                        automatic = true;\n                        if (annotations.jsx) {\n                            throw new Error(\"Unexpected `@jsx` pragma w/ automatic runtime\");\n                        }\n                        if (annotations.jsxFrag) {\n                            throw new Error(\"Unexpected `@jsxFrag` pragma w/ automatic runtime\");\n                        }\n                    } else if (annotations.jsxRuntime === \"classic\") {\n                        automatic = false;\n                        if (annotations.jsxImportSource) {\n                            throw new Error(\"Unexpected `@jsxImportSource` w/ classic runtime\");\n                        }\n                    } else {\n                        throw new Error(\"Unexpected `jsxRuntime` `\" + annotations.jsxRuntime + \"`, expected `automatic` or `classic`\");\n                    }\n                }\n            }\n        },\n        // eslint-disable-next-line complexity\n        leave (node) {\n            if (node.type === \"Program\") {\n                /** @type {Array<ImportSpecifier>} */ const specifiers = [];\n                if (imports.fragment) {\n                    specifiers.push({\n                        type: \"ImportSpecifier\",\n                        imported: {\n                            type: \"Identifier\",\n                            name: \"Fragment\"\n                        },\n                        local: {\n                            type: \"Identifier\",\n                            name: \"_Fragment\"\n                        }\n                    });\n                }\n                if (imports.jsx) {\n                    specifiers.push({\n                        type: \"ImportSpecifier\",\n                        imported: {\n                            type: \"Identifier\",\n                            name: \"jsx\"\n                        },\n                        local: {\n                            type: \"Identifier\",\n                            name: \"_jsx\"\n                        }\n                    });\n                }\n                if (imports.jsxs) {\n                    specifiers.push({\n                        type: \"ImportSpecifier\",\n                        imported: {\n                            type: \"Identifier\",\n                            name: \"jsxs\"\n                        },\n                        local: {\n                            type: \"Identifier\",\n                            name: \"_jsxs\"\n                        }\n                    });\n                }\n                if (imports.jsxDEV) {\n                    specifiers.push({\n                        type: \"ImportSpecifier\",\n                        imported: {\n                            type: \"Identifier\",\n                            name: \"jsxDEV\"\n                        },\n                        local: {\n                            type: \"Identifier\",\n                            name: \"_jsxDEV\"\n                        }\n                    });\n                }\n                if (specifiers.length > 0) {\n                    let injectIndex = 0;\n                    while(injectIndex < node.body.length){\n                        const child = node.body[injectIndex];\n                        if (\"directive\" in child && child.directive) {\n                            injectIndex++;\n                        } else {\n                            break;\n                        }\n                    }\n                    node.body.splice(injectIndex, 0, {\n                        type: \"ImportDeclaration\",\n                        specifiers,\n                        source: {\n                            type: \"Literal\",\n                            value: (annotations.jsxImportSource || config.importSource || \"react\") + (config.development ? \"/jsx-dev-runtime\" : \"/jsx-runtime\")\n                        }\n                    });\n                }\n            }\n            if (node.type !== \"JSXElement\" && node.type !== \"JSXFragment\") {\n                return;\n            }\n            /** @type {Array<Expression>} */ const children = [];\n            let index = -1;\n            // Figure out `children`.\n            while(++index < node.children.length){\n                const child = node.children[index];\n                if (child.type === \"JSXExpressionContainer\") {\n                    // Ignore empty expressions.\n                    if (child.expression.type !== \"JSXEmptyExpression\") {\n                        children.push(child.expression);\n                    }\n                } else if (child.type === \"JSXText\") {\n                    const value = child.value// Replace tabs w/ spaces.\n                    .replace(/\\t/g, \" \")// Use line feeds, drop spaces around them.\n                    .replace(/ *(\\r?\\n|\\r) */g, \"\\n\")// Collapse multiple line feeds.\n                    .replace(/\\n+/g, \"\\n\")// Drop final line feeds.\n                    .replace(/\\n+$/, \"\")// Drop first line feeds.\n                    .replace(/^\\n+/, \"\")// Replace line feeds with spaces.\n                    .replace(/\\n/g, \" \");\n                    // Ignore collapsible text.\n                    if (value) {\n                        /** @type {Node} */ const text = {\n                            type: \"Literal\",\n                            value\n                        };\n                        create(child, text);\n                        children.push(text);\n                    }\n                } else {\n                    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(child.type !== \"JSXElement\" && child.type !== \"JSXFragment\" && child.type !== \"JSXSpreadChild\");\n                    children.push(child);\n                }\n            }\n            /** @type {Identifier | Literal | MemberExpression} */ let name;\n            /** @type {Array<Property | SpreadElement>} */ const fields = [];\n            /** @type {Array<Expression>} */ let parameters = [];\n            /** @type {Expression | undefined} */ let key;\n            // Do the stuff needed for elements.\n            if (node.type === \"JSXElement\") {\n                name = toIdentifier(node.openingElement.name);\n                // If the name could be an identifier, but start with a lowercase letter,\n                // itâ€™s not a component.\n                if (name.type === \"Identifier\" && /^[a-z]/.test(name.name)) {\n                    /** @type {Node} */ const next = {\n                        type: \"Literal\",\n                        value: name.name\n                    };\n                    create(name, next);\n                    name = next;\n                }\n                /** @type {boolean | undefined} */ let spread;\n                const attributes = node.openingElement.attributes;\n                let index = -1;\n                // Place props in the right order, because we might have duplicates\n                // in them and whatâ€™s spread in.\n                while(++index < attributes.length){\n                    const attribute = attributes[index];\n                    if (attribute.type === \"JSXSpreadAttribute\") {\n                        if (attribute.argument.type === \"ObjectExpression\") {\n                            fields.push(...attribute.argument.properties);\n                        } else {\n                            fields.push({\n                                type: \"SpreadElement\",\n                                argument: attribute.argument\n                            });\n                        }\n                        spread = true;\n                    } else {\n                        const prop = toProperty(attribute);\n                        if (automatic && prop.key.type === \"Identifier\" && prop.key.name === \"key\") {\n                            if (spread) {\n                                throw new Error(\"Expected `key` to come before any spread expressions\");\n                            }\n                            const value = prop.value;\n                            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(value.type !== \"AssignmentPattern\" && value.type !== \"ArrayPattern\" && value.type !== \"ObjectPattern\" && value.type !== \"RestElement\");\n                            key = value;\n                        } else {\n                            fields.push(prop);\n                        }\n                    }\n                }\n            } else if (automatic) {\n                imports.fragment = true;\n                name = {\n                    type: \"Identifier\",\n                    name: \"_Fragment\"\n                };\n            } else {\n                name = toMemberExpression(annotations.jsxFrag || config.pragmaFrag || \"React.Fragment\");\n            }\n            if (automatic) {\n                if (children.length > 0) {\n                    fields.push({\n                        type: \"Property\",\n                        key: {\n                            type: \"Identifier\",\n                            name: \"children\"\n                        },\n                        value: children.length > 1 ? {\n                            type: \"ArrayExpression\",\n                            elements: children\n                        } : children[0],\n                        kind: \"init\",\n                        method: false,\n                        shorthand: false,\n                        computed: false\n                    });\n                }\n            } else {\n                parameters = children;\n            }\n            /** @type {Identifier | Literal | MemberExpression} */ let callee;\n            if (automatic) {\n                parameters.push({\n                    type: \"ObjectExpression\",\n                    properties: fields\n                });\n                if (key) {\n                    parameters.push(key);\n                } else if (config.development) {\n                    parameters.push({\n                        type: \"Identifier\",\n                        name: \"undefined\"\n                    });\n                }\n                const isStaticChildren = children.length > 1;\n                if (config.development) {\n                    imports.jsxDEV = true;\n                    callee = {\n                        type: \"Identifier\",\n                        name: \"_jsxDEV\"\n                    };\n                    parameters.push({\n                        type: \"Literal\",\n                        value: isStaticChildren\n                    });\n                    /** @type {ObjectExpression} */ const source = {\n                        type: \"ObjectExpression\",\n                        properties: [\n                            {\n                                type: \"Property\",\n                                method: false,\n                                shorthand: false,\n                                computed: false,\n                                kind: \"init\",\n                                key: {\n                                    type: \"Identifier\",\n                                    name: \"fileName\"\n                                },\n                                value: {\n                                    type: \"Literal\",\n                                    value: config.filePath || \"<source.js>\"\n                                }\n                            }\n                        ]\n                    };\n                    if (node.loc) {\n                        source.properties.push({\n                            type: \"Property\",\n                            method: false,\n                            shorthand: false,\n                            computed: false,\n                            kind: \"init\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"lineNumber\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: node.loc.start.line\n                            }\n                        }, {\n                            type: \"Property\",\n                            method: false,\n                            shorthand: false,\n                            computed: false,\n                            kind: \"init\",\n                            key: {\n                                type: \"Identifier\",\n                                name: \"columnNumber\"\n                            },\n                            value: {\n                                type: \"Literal\",\n                                value: node.loc.start.column + 1\n                            }\n                        });\n                    }\n                    parameters.push(source, {\n                        type: \"ThisExpression\"\n                    });\n                } else if (isStaticChildren) {\n                    imports.jsxs = true;\n                    callee = {\n                        type: \"Identifier\",\n                        name: \"_jsxs\"\n                    };\n                } else {\n                    imports.jsx = true;\n                    callee = {\n                        type: \"Identifier\",\n                        name: \"_jsx\"\n                    };\n                }\n            } else {\n                if (fields.length > 0) {\n                    parameters.unshift({\n                        type: \"ObjectExpression\",\n                        properties: fields\n                    });\n                } else if (parameters.length > 0) {\n                    parameters.unshift({\n                        type: \"Literal\",\n                        value: null\n                    });\n                }\n                callee = toMemberExpression(annotations.jsx || config.pragma || \"React.createElement\");\n            }\n            parameters.unshift(name);\n            /** @type {Node} */ const call = {\n                type: \"CallExpression\",\n                callee,\n                arguments: parameters,\n                optional: false\n            };\n            create(node, call);\n            this.replace(call);\n        }\n    });\n}\n/**\n * Turn a JSX attribute into a JavaScript property.\n *\n * @param {JSXAttribute} node\n *   JSX attribute.\n * @returns {Property}\n *   JS property.\n */ function toProperty(node) {\n    /** @type {Expression} */ let value;\n    if (node.value) {\n        if (node.value.type === \"JSXExpressionContainer\") {\n            const valueExpression = node.value.expression;\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(valueExpression.type !== \"JSXEmptyExpression\", \"`JSXEmptyExpression` is not allowed in props.\");\n            value = valueExpression;\n        } else {\n            const nodeValue = node.value;\n            (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(nodeValue.type !== \"JSXElement\" && nodeValue.type !== \"JSXFragment\", \"JSX{Element,Fragment} are already compiled to `CallExpression`\");\n            value = nodeValue;\n            delete value.raw;\n        }\n    } else {\n        value = {\n            type: \"Literal\",\n            value: true\n        };\n    }\n    /** @type {Property} */ const replacement = {\n        type: \"Property\",\n        key: toIdentifier(node.name),\n        value,\n        kind: \"init\",\n        method: false,\n        shorthand: false,\n        computed: false\n    };\n    create(node, replacement);\n    return replacement;\n}\n/**\n * Turn a JSX identifier into a normal JS identifier.\n *\n * @param {JSXIdentifier | JSXMemberExpression | JSXNamespacedName} node\n *   JSX identifier.\n * @returns {Identifier | Literal | MemberExpression}\n *   JS identifier.\n */ function toIdentifier(node) {\n    /** @type {Identifier | Literal | MemberExpression} */ let replace;\n    if (node.type === \"JSXMemberExpression\") {\n        // `property` is always a `JSXIdentifier`, but it could be something that\n        // isnâ€™t an ES identifier name.\n        const id = toIdentifier(node.property);\n        replace = {\n            type: \"MemberExpression\",\n            object: toIdentifier(node.object),\n            property: id,\n            computed: id.type === \"Literal\",\n            optional: false\n        };\n    } else if (node.type === \"JSXNamespacedName\") {\n        replace = {\n            type: \"Literal\",\n            value: node.namespace.name + \":\" + node.name.name\n        };\n    } else {\n        replace = (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(node.name) ? {\n            type: \"Identifier\",\n            name: node.name\n        } : {\n            type: \"Literal\",\n            value: node.name\n        };\n    }\n    create(node, replace);\n    return replace;\n}\n/**\n * Turn a dotted string into a member expression.\n *\n * @param {string} id\n *   Identifiers.\n * @returns {Identifier | Literal | MemberExpression}\n *   Expression.\n */ function toMemberExpression(id) {\n    const identifiers = id.split(\".\");\n    let index = -1;\n    /** @type {Identifier | Literal | MemberExpression | undefined} */ let result;\n    while(++index < identifiers.length){\n        /** @type {Identifier | Literal} */ const prop = (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(identifiers[index]) ? {\n            type: \"Identifier\",\n            name: identifiers[index]\n        } : {\n            type: \"Literal\",\n            value: identifiers[index]\n        };\n        result = result ? {\n            type: \"MemberExpression\",\n            object: result,\n            property: prop,\n            computed: Boolean(index && prop.type === \"Literal\"),\n            optional: false\n        } : prop;\n    }\n    (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(result, \"always a result\");\n    return result;\n}\n/**\n * Inherit some fields from `from` into `to`.\n *\n * @param {Node} from\n *   Node to inherit from.\n * @param {Node} to\n *   Node to add to.\n * @returns {undefined}\n *   Nothing.\n */ function create(from, to) {\n    const fields = [\n        \"start\",\n        \"end\",\n        \"loc\",\n        \"range\",\n        \"comments\"\n    ];\n    let index = -1;\n    while(++index < fields.length){\n        const field = fields[index];\n        if (field in from) {\n            // @ts-expect-error: indexable.\n            to[field] = from[field];\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/estree-util-build-jsx/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/async.js":
/*!************************************************************************************!*\
  !*** ./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/async.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncWalker: () => (/* binding */ AsyncWalker)\n/* harmony export */ });\n/* harmony import */ var _walker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./walker.js */ \"(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/walker.js\");\n\n/**\n * @typedef { import('estree').Node} Node\n * @typedef { import('./walker.js').WalkerContext} WalkerContext\n * @typedef {(\n *    this: WalkerContext,\n *    node: Node,\n *    parent: Node | null,\n *    key: string | number | symbol | null | undefined,\n *    index: number | null | undefined\n * ) => Promise<void>} AsyncHandler\n */ class AsyncWalker extends _walker_js__WEBPACK_IMPORTED_MODULE_0__.WalkerBase {\n    /**\n\t *\n\t * @param {AsyncHandler} [enter]\n\t * @param {AsyncHandler} [leave]\n\t */ constructor(enter, leave){\n        super();\n        /** @type {boolean} */ this.should_skip = false;\n        /** @type {boolean} */ this.should_remove = false;\n        /** @type {Node | null} */ this.replacement = null;\n        /** @type {WalkerContext} */ this.context = {\n            skip: ()=>this.should_skip = true,\n            remove: ()=>this.should_remove = true,\n            replace: (node)=>this.replacement = node\n        };\n        /** @type {AsyncHandler | undefined} */ this.enter = enter;\n        /** @type {AsyncHandler | undefined} */ this.leave = leave;\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Node} node\n\t * @param {Parent | null} parent\n\t * @param {keyof Parent} [prop]\n\t * @param {number | null} [index]\n\t * @returns {Promise<Node | null>}\n\t */ async visit(node, parent, prop, index) {\n        if (node) {\n            if (this.enter) {\n                const _should_skip = this.should_skip;\n                const _should_remove = this.should_remove;\n                const _replacement = this.replacement;\n                this.should_skip = false;\n                this.should_remove = false;\n                this.replacement = null;\n                await this.enter.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const skipped = this.should_skip;\n                const removed = this.should_remove;\n                this.should_skip = _should_skip;\n                this.should_remove = _should_remove;\n                this.replacement = _replacement;\n                if (skipped) return node;\n                if (removed) return null;\n            }\n            /** @type {keyof Node} */ let key;\n            for(key in node){\n                /** @type {unknown} */ const value = node[key];\n                if (value && typeof value === \"object\") {\n                    if (Array.isArray(value)) {\n                        const nodes = /** @type {Array<unknown>} */ value;\n                        for(let i = 0; i < nodes.length; i += 1){\n                            const item = nodes[i];\n                            if (isNode(item)) {\n                                if (!await this.visit(item, node, key, i)) {\n                                    // removed\n                                    i--;\n                                }\n                            }\n                        }\n                    } else if (isNode(value)) {\n                        await this.visit(value, node, key, null);\n                    }\n                }\n            }\n            if (this.leave) {\n                const _replacement = this.replacement;\n                const _should_remove = this.should_remove;\n                this.replacement = null;\n                this.should_remove = false;\n                await this.leave.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const removed = this.should_remove;\n                this.replacement = _replacement;\n                this.should_remove = _should_remove;\n                if (removed) return null;\n            }\n        }\n        return node;\n    }\n}\n/**\n * Ducktype a node.\n *\n * @param {unknown} value\n * @returns {value is Node}\n */ function isNode(value) {\n    return value !== null && typeof value === \"object\" && \"type\" in value && typeof value.type === \"string\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asyncWalk: () => (/* binding */ asyncWalk),\n/* harmony export */   walk: () => (/* binding */ walk)\n/* harmony export */ });\n/* harmony import */ var _sync_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sync.js */ \"(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/sync.js\");\n/* harmony import */ var _async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async.js */ \"(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/async.js\");\n\n\n/**\n * @typedef {import('estree').Node} Node\n * @typedef {import('./sync.js').SyncHandler} SyncHandler\n * @typedef {import('./async.js').AsyncHandler} AsyncHandler\n */ /**\n * @param {Node} ast\n * @param {{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }} walker\n * @returns {Node | null}\n */ function walk(ast, { enter, leave }) {\n    const instance = new _sync_js__WEBPACK_IMPORTED_MODULE_0__.SyncWalker(enter, leave);\n    return instance.visit(ast, null);\n}\n/**\n * @param {Node} ast\n * @param {{\n *   enter?: AsyncHandler\n *   leave?: AsyncHandler\n * }} walker\n * @returns {Promise<Node | null>}\n */ async function asyncWalk(ast, { enter, leave }) {\n    const instance = new _async_js__WEBPACK_IMPORTED_MODULE_1__.AsyncWalker(enter, leave);\n    return await instance.visit(ast, null);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXN0cmVlLXV0aWwtYnVpbGQtanN4L25vZGVfbW9kdWxlcy9lc3RyZWUtd2Fsa2VyL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVDO0FBQ0U7QUFFekM7Ozs7Q0FJQyxHQUVEOzs7Ozs7O0NBT0MsR0FDTSxTQUFTRSxLQUFLQyxHQUFHLEVBQUUsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUU7SUFDekMsTUFBTUMsV0FBVyxJQUFJTixnREFBVUEsQ0FBQ0ksT0FBT0M7SUFDdkMsT0FBT0MsU0FBU0MsS0FBSyxDQUFDSixLQUFLO0FBQzVCO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNNLGVBQWVLLFVBQVVMLEdBQUcsRUFBRSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRTtJQUNwRCxNQUFNQyxXQUFXLElBQUlMLGtEQUFXQSxDQUFDRyxPQUFPQztJQUN4QyxPQUFPLE1BQU1DLFNBQVNDLEtBQUssQ0FBQ0osS0FBSztBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy9lc3RyZWUtdXRpbC1idWlsZC1qc3gvbm9kZV9tb2R1bGVzL2VzdHJlZS13YWxrZXIvc3JjL2luZGV4LmpzPzgzNDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3luY1dhbGtlciB9IGZyb20gJy4vc3luYy5qcyc7XG5pbXBvcnQgeyBBc3luY1dhbGtlciB9IGZyb20gJy4vYXN5bmMuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2VzdHJlZScpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc3luYy5qcycpLlN5bmNIYW5kbGVyfSBTeW5jSGFuZGxlclxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9hc3luYy5qcycpLkFzeW5jSGFuZGxlcn0gQXN5bmNIYW5kbGVyXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IGFzdFxuICogQHBhcmFtIHt7XG4gKiAgIGVudGVyPzogU3luY0hhbmRsZXJcbiAqICAgbGVhdmU/OiBTeW5jSGFuZGxlclxuICogfX0gd2Fsa2VyXG4gKiBAcmV0dXJucyB7Tm9kZSB8IG51bGx9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YWxrKGFzdCwgeyBlbnRlciwgbGVhdmUgfSkge1xuXHRjb25zdCBpbnN0YW5jZSA9IG5ldyBTeW5jV2Fsa2VyKGVudGVyLCBsZWF2ZSk7XG5cdHJldHVybiBpbnN0YW5jZS52aXNpdChhc3QsIG51bGwpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gYXN0XG4gKiBAcGFyYW0ge3tcbiAqICAgZW50ZXI/OiBBc3luY0hhbmRsZXJcbiAqICAgbGVhdmU/OiBBc3luY0hhbmRsZXJcbiAqIH19IHdhbGtlclxuICogQHJldHVybnMge1Byb21pc2U8Tm9kZSB8IG51bGw+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXN5bmNXYWxrKGFzdCwgeyBlbnRlciwgbGVhdmUgfSkge1xuXHRjb25zdCBpbnN0YW5jZSA9IG5ldyBBc3luY1dhbGtlcihlbnRlciwgbGVhdmUpO1xuXHRyZXR1cm4gYXdhaXQgaW5zdGFuY2UudmlzaXQoYXN0LCBudWxsKTtcbn1cbiJdLCJuYW1lcyI6WyJTeW5jV2Fsa2VyIiwiQXN5bmNXYWxrZXIiLCJ3YWxrIiwiYXN0IiwiZW50ZXIiLCJsZWF2ZSIsImluc3RhbmNlIiwidmlzaXQiLCJhc3luY1dhbGsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/sync.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/sync.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SyncWalker: () => (/* binding */ SyncWalker)\n/* harmony export */ });\n/* harmony import */ var _walker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./walker.js */ \"(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/walker.js\");\n\n/**\n * @typedef { import('estree').Node} Node\n * @typedef { import('./walker.js').WalkerContext} WalkerContext\n * @typedef {(\n *    this: WalkerContext,\n *    node: Node,\n *    parent: Node | null,\n *    key: string | number | symbol | null | undefined,\n *    index: number | null | undefined\n * ) => void} SyncHandler\n */ class SyncWalker extends _walker_js__WEBPACK_IMPORTED_MODULE_0__.WalkerBase {\n    /**\n\t *\n\t * @param {SyncHandler} [enter]\n\t * @param {SyncHandler} [leave]\n\t */ constructor(enter, leave){\n        super();\n        /** @type {boolean} */ this.should_skip = false;\n        /** @type {boolean} */ this.should_remove = false;\n        /** @type {Node | null} */ this.replacement = null;\n        /** @type {WalkerContext} */ this.context = {\n            skip: ()=>this.should_skip = true,\n            remove: ()=>this.should_remove = true,\n            replace: (node)=>this.replacement = node\n        };\n        /** @type {SyncHandler | undefined} */ this.enter = enter;\n        /** @type {SyncHandler | undefined} */ this.leave = leave;\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Node} node\n\t * @param {Parent | null} parent\n\t * @param {keyof Parent} [prop]\n\t * @param {number | null} [index]\n\t * @returns {Node | null}\n\t */ visit(node, parent, prop, index) {\n        if (node) {\n            if (this.enter) {\n                const _should_skip = this.should_skip;\n                const _should_remove = this.should_remove;\n                const _replacement = this.replacement;\n                this.should_skip = false;\n                this.should_remove = false;\n                this.replacement = null;\n                this.enter.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const skipped = this.should_skip;\n                const removed = this.should_remove;\n                this.should_skip = _should_skip;\n                this.should_remove = _should_remove;\n                this.replacement = _replacement;\n                if (skipped) return node;\n                if (removed) return null;\n            }\n            /** @type {keyof Node} */ let key;\n            for(key in node){\n                /** @type {unknown} */ const value = node[key];\n                if (value && typeof value === \"object\") {\n                    if (Array.isArray(value)) {\n                        const nodes = /** @type {Array<unknown>} */ value;\n                        for(let i = 0; i < nodes.length; i += 1){\n                            const item = nodes[i];\n                            if (isNode(item)) {\n                                if (!this.visit(item, node, key, i)) {\n                                    // removed\n                                    i--;\n                                }\n                            }\n                        }\n                    } else if (isNode(value)) {\n                        this.visit(value, node, key, null);\n                    }\n                }\n            }\n            if (this.leave) {\n                const _replacement = this.replacement;\n                const _should_remove = this.should_remove;\n                this.replacement = null;\n                this.should_remove = false;\n                this.leave.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const removed = this.should_remove;\n                this.replacement = _replacement;\n                this.should_remove = _should_remove;\n                if (removed) return null;\n            }\n        }\n        return node;\n    }\n}\n/**\n * Ducktype a node.\n *\n * @param {unknown} value\n * @returns {value is Node}\n */ function isNode(value) {\n    return value !== null && typeof value === \"object\" && \"type\" in value && typeof value.type === \"string\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/walker.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/walker.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalkerBase: () => (/* binding */ WalkerBase)\n/* harmony export */ });\n/**\n * @typedef { import('estree').Node} Node\n * @typedef {{\n *   skip: () => void;\n *   remove: () => void;\n *   replace: (node: Node) => void;\n * }} WalkerContext\n */ class WalkerBase {\n    constructor(){\n        /** @type {boolean} */ this.should_skip = false;\n        /** @type {boolean} */ this.should_remove = false;\n        /** @type {Node | null} */ this.replacement = null;\n        /** @type {WalkerContext} */ this.context = {\n            skip: ()=>this.should_skip = true,\n            remove: ()=>this.should_remove = true,\n            replace: (node)=>this.replacement = node\n        };\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Parent | null | undefined} parent\n\t * @param {keyof Parent | null | undefined} prop\n\t * @param {number | null | undefined} index\n\t * @param {Node} node\n\t */ replace(parent, prop, index, node) {\n        if (parent && prop) {\n            if (index != null) {\n                /** @type {Array<Node>} */ parent[prop][index] = node;\n            } else {\n                /** @type {Node} */ parent[prop] = node;\n            }\n        }\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Parent | null | undefined} parent\n\t * @param {keyof Parent | null | undefined} prop\n\t * @param {number | null | undefined} index\n\t */ remove(parent, prop, index) {\n        if (parent && prop) {\n            if (index !== null && index !== undefined) {\n                /** @type {Array<Node>} */ parent[prop].splice(index, 1);\n            } else {\n                delete parent[prop];\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXN0cmVlLXV0aWwtYnVpbGQtanN4L25vZGVfbW9kdWxlcy9lc3RyZWUtd2Fsa2VyL3NyYy93YWxrZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFTSxNQUFNQTtJQUNaQyxhQUFjO1FBQ2Isb0JBQW9CLEdBQ3BCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBRW5CLG9CQUFvQixHQUNwQixJQUFJLENBQUNDLGFBQWEsR0FBRztRQUVyQix3QkFBd0IsR0FDeEIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFFbkIsMEJBQTBCLEdBQzFCLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1lBQ2RDLE1BQU0sSUFBTyxJQUFJLENBQUNKLFdBQVcsR0FBRztZQUNoQ0ssUUFBUSxJQUFPLElBQUksQ0FBQ0osYUFBYSxHQUFHO1lBQ3BDSyxTQUFTLENBQUNDLE9BQVUsSUFBSSxDQUFDTCxXQUFXLEdBQUdLO1FBQ3hDO0lBQ0Q7SUFFQTs7Ozs7O0VBTUMsR0FDREQsUUFBUUUsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRUgsSUFBSSxFQUFFO1FBQ2xDLElBQUlDLFVBQVVDLE1BQU07WUFDbkIsSUFBSUMsU0FBUyxNQUFNO2dCQUNsQix3QkFBd0IsR0FBSUYsTUFBTSxDQUFDQyxLQUFLLENBQUVDLE1BQU0sR0FBR0g7WUFDcEQsT0FBTztnQkFDTixpQkFBaUIsR0FBSUMsTUFBTSxDQUFDQyxLQUFLLEdBQUlGO1lBQ3RDO1FBQ0Q7SUFDRDtJQUVBOzs7OztFQUtDLEdBQ0RGLE9BQU9HLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUU7UUFDM0IsSUFBSUYsVUFBVUMsTUFBTTtZQUNuQixJQUFJQyxVQUFVLFFBQVFBLFVBQVVDLFdBQVc7Z0JBQzFDLHdCQUF3QixHQUFJSCxNQUFNLENBQUNDLEtBQUssQ0FBRUcsTUFBTSxDQUFDRixPQUFPO1lBQ3pELE9BQU87Z0JBQ04sT0FBT0YsTUFBTSxDQUFDQyxLQUFLO1lBQ3BCO1FBQ0Q7SUFDRDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL2VzdHJlZS11dGlsLWJ1aWxkLWpzeC9ub2RlX21vZHVsZXMvZXN0cmVlLXdhbGtlci9zcmMvd2Fsa2VyLmpzP2JjZDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnZXN0cmVlJykuTm9kZX0gTm9kZVxuICogQHR5cGVkZWYge3tcbiAqICAgc2tpcDogKCkgPT4gdm9pZDtcbiAqICAgcmVtb3ZlOiAoKSA9PiB2b2lkO1xuICogICByZXBsYWNlOiAobm9kZTogTm9kZSkgPT4gdm9pZDtcbiAqIH19IFdhbGtlckNvbnRleHRcbiAqL1xuXG5leHBvcnQgY2xhc3MgV2Fsa2VyQmFzZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cblx0XHR0aGlzLnNob3VsZF9za2lwID0gZmFsc2U7XG5cblx0XHQvKiogQHR5cGUge2Jvb2xlYW59ICovXG5cdFx0dGhpcy5zaG91bGRfcmVtb3ZlID0gZmFsc2U7XG5cblx0XHQvKiogQHR5cGUge05vZGUgfCBudWxsfSAqL1xuXHRcdHRoaXMucmVwbGFjZW1lbnQgPSBudWxsO1xuXG5cdFx0LyoqIEB0eXBlIHtXYWxrZXJDb250ZXh0fSAqL1xuXHRcdHRoaXMuY29udGV4dCA9IHtcblx0XHRcdHNraXA6ICgpID0+ICh0aGlzLnNob3VsZF9za2lwID0gdHJ1ZSksXG5cdFx0XHRyZW1vdmU6ICgpID0+ICh0aGlzLnNob3VsZF9yZW1vdmUgPSB0cnVlKSxcblx0XHRcdHJlcGxhY2U6IChub2RlKSA9PiAodGhpcy5yZXBsYWNlbWVudCA9IG5vZGUpXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAdGVtcGxhdGUge05vZGV9IFBhcmVudFxuXHQgKiBAcGFyYW0ge1BhcmVudCB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuXHQgKiBAcGFyYW0ge2tleW9mIFBhcmVudCB8IG51bGwgfCB1bmRlZmluZWR9IHByb3Bcblx0ICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBpbmRleFxuXHQgKiBAcGFyYW0ge05vZGV9IG5vZGVcblx0ICovXG5cdHJlcGxhY2UocGFyZW50LCBwcm9wLCBpbmRleCwgbm9kZSkge1xuXHRcdGlmIChwYXJlbnQgJiYgcHJvcCkge1xuXHRcdFx0aWYgKGluZGV4ICE9IG51bGwpIHtcblx0XHRcdFx0LyoqIEB0eXBlIHtBcnJheTxOb2RlPn0gKi8gKHBhcmVudFtwcm9wXSlbaW5kZXhdID0gbm9kZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8qKiBAdHlwZSB7Tm9kZX0gKi8gKHBhcmVudFtwcm9wXSkgPSBub2RlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAdGVtcGxhdGUge05vZGV9IFBhcmVudFxuXHQgKiBAcGFyYW0ge1BhcmVudCB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuXHQgKiBAcGFyYW0ge2tleW9mIFBhcmVudCB8IG51bGwgfCB1bmRlZmluZWR9IHByb3Bcblx0ICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBpbmRleFxuXHQgKi9cblx0cmVtb3ZlKHBhcmVudCwgcHJvcCwgaW5kZXgpIHtcblx0XHRpZiAocGFyZW50ICYmIHByb3ApIHtcblx0XHRcdGlmIChpbmRleCAhPT0gbnVsbCAmJiBpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdC8qKiBAdHlwZSB7QXJyYXk8Tm9kZT59ICovIChwYXJlbnRbcHJvcF0pLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgcGFyZW50W3Byb3BdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIl0sIm5hbWVzIjpbIldhbGtlckJhc2UiLCJjb25zdHJ1Y3RvciIsInNob3VsZF9za2lwIiwic2hvdWxkX3JlbW92ZSIsInJlcGxhY2VtZW50IiwiY29udGV4dCIsInNraXAiLCJyZW1vdmUiLCJyZXBsYWNlIiwibm9kZSIsInBhcmVudCIsInByb3AiLCJpbmRleCIsInVuZGVmaW5lZCIsInNwbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/estree-util-build-jsx/node_modules/estree-walker/src/walker.js\n");

/***/ })

};
;