"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/acorn-jsx";
exports.ids = ["vendor-chunks/acorn-jsx"];
exports.modules = {

/***/ "(ssr)/./node_modules/acorn-jsx/index.js":
/*!*****************************************!*\
  !*** ./node_modules/acorn-jsx/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst XHTMLEntities = __webpack_require__(/*! ./xhtml */ \"(ssr)/./node_modules/acorn-jsx/xhtml.js\");\nconst hexNumber = /^[\\da-fA-F]+$/;\nconst decimalNumber = /^\\d+$/;\n// The map to `acorn-jsx` tokens from `acorn` namespace objects.\nconst acornJsxMap = new WeakMap();\n// Get the original tokens for the given `acorn` namespace object.\nfunction getJsxTokens(acorn) {\n    acorn = acorn.Parser.acorn || acorn;\n    let acornJsx = acornJsxMap.get(acorn);\n    if (!acornJsx) {\n        const tt = acorn.tokTypes;\n        const TokContext = acorn.TokContext;\n        const TokenType = acorn.TokenType;\n        const tc_oTag = new TokContext(\"<tag\", false);\n        const tc_cTag = new TokContext(\"</tag\", false);\n        const tc_expr = new TokContext(\"<tag>...</tag>\", true, true);\n        const tokContexts = {\n            tc_oTag: tc_oTag,\n            tc_cTag: tc_cTag,\n            tc_expr: tc_expr\n        };\n        const tokTypes = {\n            jsxName: new TokenType(\"jsxName\"),\n            jsxText: new TokenType(\"jsxText\", {\n                beforeExpr: true\n            }),\n            jsxTagStart: new TokenType(\"jsxTagStart\", {\n                startsExpr: true\n            }),\n            jsxTagEnd: new TokenType(\"jsxTagEnd\")\n        };\n        tokTypes.jsxTagStart.updateContext = function() {\n            this.context.push(tc_expr); // treat as beginning of JSX expression\n            this.context.push(tc_oTag); // start opening tag context\n            this.exprAllowed = false;\n        };\n        tokTypes.jsxTagEnd.updateContext = function(prevType) {\n            let out = this.context.pop();\n            if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n                this.context.pop();\n                this.exprAllowed = this.curContext() === tc_expr;\n            } else {\n                this.exprAllowed = true;\n            }\n        };\n        acornJsx = {\n            tokContexts: tokContexts,\n            tokTypes: tokTypes\n        };\n        acornJsxMap.set(acorn, acornJsx);\n    }\n    return acornJsx;\n}\n// Transforms JSX element name to string.\nfunction getQualifiedJSXName(object) {\n    if (!object) return object;\n    if (object.type === \"JSXIdentifier\") return object.name;\n    if (object.type === \"JSXNamespacedName\") return object.namespace.name + \":\" + object.name.name;\n    if (object.type === \"JSXMemberExpression\") return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n}\nmodule.exports = function(options) {\n    options = options || {};\n    return function(Parser) {\n        return plugin({\n            allowNamespaces: options.allowNamespaces !== false,\n            allowNamespacedObjects: !!options.allowNamespacedObjects\n        }, Parser);\n    };\n};\n// This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\nObject.defineProperty(module.exports, \"tokTypes\", ({\n    get: function get_tokTypes() {\n        return getJsxTokens(__webpack_require__(/*! acorn */ \"(ssr)/./node_modules/acorn/dist/acorn.js\")).tokTypes;\n    },\n    configurable: true,\n    enumerable: true\n}));\nfunction plugin(options, Parser) {\n    const acorn = Parser.acorn || __webpack_require__(/*! acorn */ \"(ssr)/./node_modules/acorn/dist/acorn.js\");\n    const acornJsx = getJsxTokens(acorn);\n    const tt = acorn.tokTypes;\n    const tok = acornJsx.tokTypes;\n    const tokContexts = acorn.tokContexts;\n    const tc_oTag = acornJsx.tokContexts.tc_oTag;\n    const tc_cTag = acornJsx.tokContexts.tc_cTag;\n    const tc_expr = acornJsx.tokContexts.tc_expr;\n    const isNewLine = acorn.isNewLine;\n    const isIdentifierStart = acorn.isIdentifierStart;\n    const isIdentifierChar = acorn.isIdentifierChar;\n    return class extends Parser {\n        // Expose actual `tokTypes` and `tokContexts` to other plugins.\n        static get acornJsx() {\n            return acornJsx;\n        }\n        // Reads inline JSX contents token.\n        jsx_readToken() {\n            let out = \"\", chunkStart = this.pos;\n            for(;;){\n                if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated JSX contents\");\n                let ch = this.input.charCodeAt(this.pos);\n                switch(ch){\n                    case 60:\n                    case 123:\n                        if (this.pos === this.start) {\n                            if (ch === 60 && this.exprAllowed) {\n                                ++this.pos;\n                                return this.finishToken(tok.jsxTagStart);\n                            }\n                            return this.getTokenFromCode(ch);\n                        }\n                        out += this.input.slice(chunkStart, this.pos);\n                        return this.finishToken(tok.jsxText, out);\n                    case 38:\n                        out += this.input.slice(chunkStart, this.pos);\n                        out += this.jsx_readEntity();\n                        chunkStart = this.pos;\n                        break;\n                    case 62:\n                    case 125:\n                        this.raise(this.pos, \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" + (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + '`{\"' + this.input[this.pos] + '\"}' + \"`?\");\n                    default:\n                        if (isNewLine(ch)) {\n                            out += this.input.slice(chunkStart, this.pos);\n                            out += this.jsx_readNewLine(true);\n                            chunkStart = this.pos;\n                        } else {\n                            ++this.pos;\n                        }\n                }\n            }\n        }\n        jsx_readNewLine(normalizeCRLF) {\n            let ch = this.input.charCodeAt(this.pos);\n            let out;\n            ++this.pos;\n            if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n                ++this.pos;\n                out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n            } else {\n                out = String.fromCharCode(ch);\n            }\n            if (this.options.locations) {\n                ++this.curLine;\n                this.lineStart = this.pos;\n            }\n            return out;\n        }\n        jsx_readString(quote) {\n            let out = \"\", chunkStart = ++this.pos;\n            for(;;){\n                if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n                let ch = this.input.charCodeAt(this.pos);\n                if (ch === quote) break;\n                if (ch === 38) {\n                    out += this.input.slice(chunkStart, this.pos);\n                    out += this.jsx_readEntity();\n                    chunkStart = this.pos;\n                } else if (isNewLine(ch)) {\n                    out += this.input.slice(chunkStart, this.pos);\n                    out += this.jsx_readNewLine(false);\n                    chunkStart = this.pos;\n                } else {\n                    ++this.pos;\n                }\n            }\n            out += this.input.slice(chunkStart, this.pos++);\n            return this.finishToken(tt.string, out);\n        }\n        jsx_readEntity() {\n            let str = \"\", count = 0, entity;\n            let ch = this.input[this.pos];\n            if (ch !== \"&\") this.raise(this.pos, \"Entity must start with an ampersand\");\n            let startPos = ++this.pos;\n            while(this.pos < this.input.length && count++ < 10){\n                ch = this.input[this.pos++];\n                if (ch === \";\") {\n                    if (str[0] === \"#\") {\n                        if (str[1] === \"x\") {\n                            str = str.substr(2);\n                            if (hexNumber.test(str)) entity = String.fromCharCode(parseInt(str, 16));\n                        } else {\n                            str = str.substr(1);\n                            if (decimalNumber.test(str)) entity = String.fromCharCode(parseInt(str, 10));\n                        }\n                    } else {\n                        entity = XHTMLEntities[str];\n                    }\n                    break;\n                }\n                str += ch;\n            }\n            if (!entity) {\n                this.pos = startPos;\n                return \"&\";\n            }\n            return entity;\n        }\n        // Read a JSX identifier (valid tag or attribute name).\n        //\n        // Optimized version since JSX identifiers can't contain\n        // escape characters and so can be read as single slice.\n        // Also assumes that first character was already checked\n        // by isIdentifierStart in readToken.\n        jsx_readWord() {\n            let ch, start = this.pos;\n            do {\n                ch = this.input.charCodeAt(++this.pos);\n            }while (isIdentifierChar(ch) || ch === 45); // '-'\n            return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n        }\n        // Parse next token as JSX identifier\n        jsx_parseIdentifier() {\n            let node = this.startNode();\n            if (this.type === tok.jsxName) node.name = this.value;\n            else if (this.type.keyword) node.name = this.type.keyword;\n            else this.unexpected();\n            this.next();\n            return this.finishNode(node, \"JSXIdentifier\");\n        }\n        // Parse namespaced identifier.\n        jsx_parseNamespacedName() {\n            let startPos = this.start, startLoc = this.startLoc;\n            let name = this.jsx_parseIdentifier();\n            if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n            var node = this.startNodeAt(startPos, startLoc);\n            node.namespace = name;\n            node.name = this.jsx_parseIdentifier();\n            return this.finishNode(node, \"JSXNamespacedName\");\n        }\n        // Parses element name in any form - namespaced, member\n        // or single identifier.\n        jsx_parseElementName() {\n            if (this.type === tok.jsxTagEnd) return \"\";\n            let startPos = this.start, startLoc = this.startLoc;\n            let node = this.jsx_parseNamespacedName();\n            if (this.type === tt.dot && node.type === \"JSXNamespacedName\" && !options.allowNamespacedObjects) {\n                this.unexpected();\n            }\n            while(this.eat(tt.dot)){\n                let newNode = this.startNodeAt(startPos, startLoc);\n                newNode.object = node;\n                newNode.property = this.jsx_parseIdentifier();\n                node = this.finishNode(newNode, \"JSXMemberExpression\");\n            }\n            return node;\n        }\n        // Parses any type of JSX attribute value.\n        jsx_parseAttributeValue() {\n            switch(this.type){\n                case tt.braceL:\n                    let node = this.jsx_parseExpressionContainer();\n                    if (node.expression.type === \"JSXEmptyExpression\") this.raise(node.start, \"JSX attributes must only be assigned a non-empty expression\");\n                    return node;\n                case tok.jsxTagStart:\n                case tt.string:\n                    return this.parseExprAtom();\n                default:\n                    this.raise(this.start, \"JSX value should be either an expression or a quoted JSX text\");\n            }\n        }\n        // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n        // and so it should start at the end of last read token (left brace) and finish\n        // at the beginning of the next one (right brace).\n        jsx_parseEmptyExpression() {\n            let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n            return this.finishNodeAt(node, \"JSXEmptyExpression\", this.start, this.startLoc);\n        }\n        // Parses JSX expression enclosed into curly brackets.\n        jsx_parseExpressionContainer() {\n            let node = this.startNode();\n            this.next();\n            node.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"JSXExpressionContainer\");\n        }\n        // Parses following JSX attribute name-value pair.\n        jsx_parseAttribute() {\n            let node = this.startNode();\n            if (this.eat(tt.braceL)) {\n                this.expect(tt.ellipsis);\n                node.argument = this.parseMaybeAssign();\n                this.expect(tt.braceR);\n                return this.finishNode(node, \"JSXSpreadAttribute\");\n            }\n            node.name = this.jsx_parseNamespacedName();\n            node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n            return this.finishNode(node, \"JSXAttribute\");\n        }\n        // Parses JSX opening tag starting after '<'.\n        jsx_parseOpeningElementAt(startPos, startLoc) {\n            let node = this.startNodeAt(startPos, startLoc);\n            node.attributes = [];\n            let nodeName = this.jsx_parseElementName();\n            if (nodeName) node.name = nodeName;\n            while(this.type !== tt.slash && this.type !== tok.jsxTagEnd)node.attributes.push(this.jsx_parseAttribute());\n            node.selfClosing = this.eat(tt.slash);\n            this.expect(tok.jsxTagEnd);\n            return this.finishNode(node, nodeName ? \"JSXOpeningElement\" : \"JSXOpeningFragment\");\n        }\n        // Parses JSX closing tag starting after '</'.\n        jsx_parseClosingElementAt(startPos, startLoc) {\n            let node = this.startNodeAt(startPos, startLoc);\n            let nodeName = this.jsx_parseElementName();\n            if (nodeName) node.name = nodeName;\n            this.expect(tok.jsxTagEnd);\n            return this.finishNode(node, nodeName ? \"JSXClosingElement\" : \"JSXClosingFragment\");\n        }\n        // Parses entire JSX element, including it's opening tag\n        // (starting after '<'), attributes, contents and closing tag.\n        jsx_parseElementAt(startPos, startLoc) {\n            let node = this.startNodeAt(startPos, startLoc);\n            let children = [];\n            let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n            let closingElement = null;\n            if (!openingElement.selfClosing) {\n                contents: for(;;){\n                    switch(this.type){\n                        case tok.jsxTagStart:\n                            startPos = this.start;\n                            startLoc = this.startLoc;\n                            this.next();\n                            if (this.eat(tt.slash)) {\n                                closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n                                break contents;\n                            }\n                            children.push(this.jsx_parseElementAt(startPos, startLoc));\n                            break;\n                        case tok.jsxText:\n                            children.push(this.parseExprAtom());\n                            break;\n                        case tt.braceL:\n                            children.push(this.jsx_parseExpressionContainer());\n                            break;\n                        default:\n                            this.unexpected();\n                    }\n                }\n                if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n                    this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n                }\n            }\n            let fragmentOrElement = openingElement.name ? \"Element\" : \"Fragment\";\n            node[\"opening\" + fragmentOrElement] = openingElement;\n            node[\"closing\" + fragmentOrElement] = closingElement;\n            node.children = children;\n            if (this.type === tt.relational && this.value === \"<\") {\n                this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n            }\n            return this.finishNode(node, \"JSX\" + fragmentOrElement);\n        }\n        // Parse JSX text\n        jsx_parseText() {\n            let node = this.parseLiteral(this.value);\n            node.type = \"JSXText\";\n            return node;\n        }\n        // Parses entire JSX element from current position.\n        jsx_parseElement() {\n            let startPos = this.start, startLoc = this.startLoc;\n            this.next();\n            return this.jsx_parseElementAt(startPos, startLoc);\n        }\n        parseExprAtom(refShortHandDefaultPos) {\n            if (this.type === tok.jsxText) return this.jsx_parseText();\n            else if (this.type === tok.jsxTagStart) return this.jsx_parseElement();\n            else return super.parseExprAtom(refShortHandDefaultPos);\n        }\n        readToken(code) {\n            let context = this.curContext();\n            if (context === tc_expr) return this.jsx_readToken();\n            if (context === tc_oTag || context === tc_cTag) {\n                if (isIdentifierStart(code)) return this.jsx_readWord();\n                if (code == 62) {\n                    ++this.pos;\n                    return this.finishToken(tok.jsxTagEnd);\n                }\n                if ((code === 34 || code === 39) && context == tc_oTag) return this.jsx_readString(code);\n            }\n            if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n                ++this.pos;\n                return this.finishToken(tok.jsxTagStart);\n            }\n            return super.readToken(code);\n        }\n        updateContext(prevType) {\n            if (this.type == tt.braceL) {\n                var curContext = this.curContext();\n                if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\n                else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\n                else super.updateContext(prevType);\n                this.exprAllowed = true;\n            } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n                this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n                this.context.push(tc_cTag); // reconsider as closing tag context\n                this.exprAllowed = false;\n            } else {\n                return super.updateContext(prevType);\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/acorn-jsx/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/acorn-jsx/xhtml.js":
/*!*****************************************!*\
  !*** ./node_modules/acorn-jsx/xhtml.js ***!
  \*****************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    quot: '\"',\n    amp: \"&\",\n    apos: \"'\",\n    lt: \"<\",\n    gt: \">\",\n    nbsp: \"\\xa0\",\n    iexcl: \"\\xa1\",\n    cent: \"\\xa2\",\n    pound: \"\\xa3\",\n    curren: \"\\xa4\",\n    yen: \"\\xa5\",\n    brvbar: \"\\xa6\",\n    sect: \"\\xa7\",\n    uml: \"\\xa8\",\n    copy: \"\\xa9\",\n    ordf: \"\\xaa\",\n    laquo: \"\\xab\",\n    not: \"\\xac\",\n    shy: \"\\xad\",\n    reg: \"\\xae\",\n    macr: \"\\xaf\",\n    deg: \"\\xb0\",\n    plusmn: \"\\xb1\",\n    sup2: \"\\xb2\",\n    sup3: \"\\xb3\",\n    acute: \"\\xb4\",\n    micro: \"\\xb5\",\n    para: \"\\xb6\",\n    middot: \"\\xb7\",\n    cedil: \"\\xb8\",\n    sup1: \"\\xb9\",\n    ordm: \"\\xba\",\n    raquo: \"\\xbb\",\n    frac14: \"\\xbc\",\n    frac12: \"\\xbd\",\n    frac34: \"\\xbe\",\n    iquest: \"\\xbf\",\n    Agrave: \"\\xc0\",\n    Aacute: \"\\xc1\",\n    Acirc: \"\\xc2\",\n    Atilde: \"\\xc3\",\n    Auml: \"\\xc4\",\n    Aring: \"\\xc5\",\n    AElig: \"\\xc6\",\n    Ccedil: \"\\xc7\",\n    Egrave: \"\\xc8\",\n    Eacute: \"\\xc9\",\n    Ecirc: \"\\xca\",\n    Euml: \"\\xcb\",\n    Igrave: \"\\xcc\",\n    Iacute: \"\\xcd\",\n    Icirc: \"\\xce\",\n    Iuml: \"\\xcf\",\n    ETH: \"\\xd0\",\n    Ntilde: \"\\xd1\",\n    Ograve: \"\\xd2\",\n    Oacute: \"\\xd3\",\n    Ocirc: \"\\xd4\",\n    Otilde: \"\\xd5\",\n    Ouml: \"\\xd6\",\n    times: \"\\xd7\",\n    Oslash: \"\\xd8\",\n    Ugrave: \"\\xd9\",\n    Uacute: \"\\xda\",\n    Ucirc: \"\\xdb\",\n    Uuml: \"\\xdc\",\n    Yacute: \"\\xdd\",\n    THORN: \"\\xde\",\n    szlig: \"\\xdf\",\n    agrave: \"\\xe0\",\n    aacute: \"\\xe1\",\n    acirc: \"\\xe2\",\n    atilde: \"\\xe3\",\n    auml: \"\\xe4\",\n    aring: \"\\xe5\",\n    aelig: \"\\xe6\",\n    ccedil: \"\\xe7\",\n    egrave: \"\\xe8\",\n    eacute: \"\\xe9\",\n    ecirc: \"\\xea\",\n    euml: \"\\xeb\",\n    igrave: \"\\xec\",\n    iacute: \"\\xed\",\n    icirc: \"\\xee\",\n    iuml: \"\\xef\",\n    eth: \"\\xf0\",\n    ntilde: \"\\xf1\",\n    ograve: \"\\xf2\",\n    oacute: \"\\xf3\",\n    ocirc: \"\\xf4\",\n    otilde: \"\\xf5\",\n    ouml: \"\\xf6\",\n    divide: \"\\xf7\",\n    oslash: \"\\xf8\",\n    ugrave: \"\\xf9\",\n    uacute: \"\\xfa\",\n    ucirc: \"\\xfb\",\n    uuml: \"\\xfc\",\n    yacute: \"\\xfd\",\n    thorn: \"\\xfe\",\n    yuml: \"\\xff\",\n    OElig: \"Œ\",\n    oelig: \"œ\",\n    Scaron: \"Š\",\n    scaron: \"š\",\n    Yuml: \"Ÿ\",\n    fnof: \"ƒ\",\n    circ: \"ˆ\",\n    tilde: \"˜\",\n    Alpha: \"Α\",\n    Beta: \"Β\",\n    Gamma: \"Γ\",\n    Delta: \"Δ\",\n    Epsilon: \"Ε\",\n    Zeta: \"Ζ\",\n    Eta: \"Η\",\n    Theta: \"Θ\",\n    Iota: \"Ι\",\n    Kappa: \"Κ\",\n    Lambda: \"Λ\",\n    Mu: \"Μ\",\n    Nu: \"Ν\",\n    Xi: \"Ξ\",\n    Omicron: \"Ο\",\n    Pi: \"Π\",\n    Rho: \"Ρ\",\n    Sigma: \"Σ\",\n    Tau: \"Τ\",\n    Upsilon: \"Υ\",\n    Phi: \"Φ\",\n    Chi: \"Χ\",\n    Psi: \"Ψ\",\n    Omega: \"Ω\",\n    alpha: \"α\",\n    beta: \"β\",\n    gamma: \"γ\",\n    delta: \"δ\",\n    epsilon: \"ε\",\n    zeta: \"ζ\",\n    eta: \"η\",\n    theta: \"θ\",\n    iota: \"ι\",\n    kappa: \"κ\",\n    lambda: \"λ\",\n    mu: \"μ\",\n    nu: \"ν\",\n    xi: \"ξ\",\n    omicron: \"ο\",\n    pi: \"π\",\n    rho: \"ρ\",\n    sigmaf: \"ς\",\n    sigma: \"σ\",\n    tau: \"τ\",\n    upsilon: \"υ\",\n    phi: \"φ\",\n    chi: \"χ\",\n    psi: \"ψ\",\n    omega: \"ω\",\n    thetasym: \"ϑ\",\n    upsih: \"ϒ\",\n    piv: \"ϖ\",\n    ensp: \" \",\n    emsp: \" \",\n    thinsp: \" \",\n    zwnj: \"‌\",\n    zwj: \"‍\",\n    lrm: \"‎\",\n    rlm: \"‏\",\n    ndash: \"–\",\n    mdash: \"—\",\n    lsquo: \"‘\",\n    rsquo: \"’\",\n    sbquo: \"‚\",\n    ldquo: \"“\",\n    rdquo: \"”\",\n    bdquo: \"„\",\n    dagger: \"†\",\n    Dagger: \"‡\",\n    bull: \"•\",\n    hellip: \"…\",\n    permil: \"‰\",\n    prime: \"′\",\n    Prime: \"″\",\n    lsaquo: \"‹\",\n    rsaquo: \"›\",\n    oline: \"‾\",\n    frasl: \"⁄\",\n    euro: \"€\",\n    image: \"ℑ\",\n    weierp: \"℘\",\n    real: \"ℜ\",\n    trade: \"™\",\n    alefsym: \"ℵ\",\n    larr: \"←\",\n    uarr: \"↑\",\n    rarr: \"→\",\n    darr: \"↓\",\n    harr: \"↔\",\n    crarr: \"↵\",\n    lArr: \"⇐\",\n    uArr: \"⇑\",\n    rArr: \"⇒\",\n    dArr: \"⇓\",\n    hArr: \"⇔\",\n    forall: \"∀\",\n    part: \"∂\",\n    exist: \"∃\",\n    empty: \"∅\",\n    nabla: \"∇\",\n    isin: \"∈\",\n    notin: \"∉\",\n    ni: \"∋\",\n    prod: \"∏\",\n    sum: \"∑\",\n    minus: \"−\",\n    lowast: \"∗\",\n    radic: \"√\",\n    prop: \"∝\",\n    infin: \"∞\",\n    ang: \"∠\",\n    and: \"∧\",\n    or: \"∨\",\n    cap: \"∩\",\n    cup: \"∪\",\n    \"int\": \"∫\",\n    there4: \"∴\",\n    sim: \"∼\",\n    cong: \"≅\",\n    asymp: \"≈\",\n    ne: \"≠\",\n    equiv: \"≡\",\n    le: \"≤\",\n    ge: \"≥\",\n    sub: \"⊂\",\n    sup: \"⊃\",\n    nsub: \"⊄\",\n    sube: \"⊆\",\n    supe: \"⊇\",\n    oplus: \"⊕\",\n    otimes: \"⊗\",\n    perp: \"⊥\",\n    sdot: \"⋅\",\n    lceil: \"⌈\",\n    rceil: \"⌉\",\n    lfloor: \"⌊\",\n    rfloor: \"⌋\",\n    lang: \"〈\",\n    rang: \"〉\",\n    loz: \"◊\",\n    spades: \"♠\",\n    clubs: \"♣\",\n    hearts: \"♥\",\n    diams: \"♦\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/acorn-jsx/xhtml.js\n");

/***/ })

};
;