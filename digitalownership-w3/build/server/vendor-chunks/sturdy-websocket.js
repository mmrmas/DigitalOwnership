"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sturdy-websocket";
exports.ids = ["vendor-chunks/sturdy-websocket"];
exports.modules = {

/***/ "(ssr)/../node_modules/sturdy-websocket/dist/index.js":
/*!******************************************************!*\
  !*** ../node_modules/sturdy-websocket/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar SHOULD_RECONNECT_FALSE_MESSAGE = \"Provided shouldReconnect() returned false. Closing permanently.\";\nvar SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE = \"Provided shouldReconnect() resolved to false. Closing permanently.\";\nvar SturdyWebSocket = /** @class */ function() {\n    function SturdyWebSocket(url, protocolsOrOptions, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this.url = url;\n        this.onclose = null;\n        this.onerror = null;\n        this.onmessage = null;\n        this.onopen = null;\n        this.ondown = null;\n        this.onreopen = null;\n        this.CONNECTING = SturdyWebSocket.CONNECTING;\n        this.OPEN = SturdyWebSocket.OPEN;\n        this.CLOSING = SturdyWebSocket.CLOSING;\n        this.CLOSED = SturdyWebSocket.CLOSED;\n        this.hasBeenOpened = false;\n        this.isClosed = false;\n        this.messageBuffer = [];\n        this.nextRetryTime = 0;\n        this.reconnectCount = 0;\n        this.lastKnownExtensions = \"\";\n        this.lastKnownProtocol = \"\";\n        this.listeners = {};\n        if (protocolsOrOptions == null || typeof protocolsOrOptions === \"string\" || Array.isArray(protocolsOrOptions)) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\"WebSocket not present in global scope and no \" + \"wsConstructor option was provided.\");\n            }\n        }\n        this.openNewWebSocket();\n    }\n    Object.defineProperty(SturdyWebSocket.prototype, \"binaryType\", {\n        get: function() {\n            return this.binaryTypeInternal || \"blob\";\n        },\n        set: function(binaryType) {\n            this.binaryTypeInternal = binaryType;\n            if (this.ws) {\n                this.ws.binaryType = binaryType;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"bufferedAmount\", {\n        get: function() {\n            var sum = this.ws ? this.ws.bufferedAmount : 0;\n            var hasUnknownAmount = false;\n            this.messageBuffer.forEach(function(data) {\n                var byteLength = getDataByteLength(data);\n                if (byteLength != null) {\n                    sum += byteLength;\n                } else {\n                    hasUnknownAmount = true;\n                }\n            });\n            if (hasUnknownAmount) {\n                this.debugLog(\"Some buffered data had unknown length. bufferedAmount()\" + \" return value may be below the correct amount.\");\n            }\n            return sum;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"extensions\", {\n        get: function() {\n            return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"protocol\", {\n        get: function() {\n            return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SturdyWebSocket.prototype, \"readyState\", {\n        get: function() {\n            return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SturdyWebSocket.prototype.close = function(code, reason) {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    };\n    SturdyWebSocket.prototype.send = function(data) {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    };\n    SturdyWebSocket.prototype.reconnect = function() {\n        if (this.isClosed) {\n            throw new Error(\"Cannot call reconnect() on socket which is permanently closed.\");\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    };\n    SturdyWebSocket.prototype.addEventListener = function(type, listener) {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    };\n    SturdyWebSocket.prototype.dispatchEvent = function(event) {\n        return this.dispatchEventOfType(event.type, event);\n    };\n    SturdyWebSocket.prototype.removeEventListener = function(type, listener) {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(function(l) {\n                return l !== listener;\n            });\n        }\n    };\n    SturdyWebSocket.prototype.openNewWebSocket = function() {\n        var _this = this;\n        if (this.isClosed) {\n            return;\n        }\n        var _a = this.options, connectTimeout = _a.connectTimeout, wsConstructor = _a.wsConstructor;\n        this.debugLog(\"Opening new WebSocket to \" + this.url + \".\");\n        var ws = new wsConstructor(this.url, this.protocols);\n        ws.onclose = function(event) {\n            return _this.handleClose(event);\n        };\n        ws.onerror = function(event) {\n            return _this.handleError(event);\n        };\n        ws.onmessage = function(event) {\n            return _this.handleMessage(event);\n        };\n        ws.onopen = function(event) {\n            return _this.handleOpen(event);\n        };\n        this.connectTimeoutId = setTimeout(function() {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            _this.clearConnectTimeout();\n            _this.disposeSocket();\n            _this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    };\n    SturdyWebSocket.prototype.handleOpen = function(event) {\n        var _this = this;\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        var allClearResetTime = this.options.allClearResetTime;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(function(message) {\n            return _this.send(message);\n        });\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(function() {\n            _this.clearAllClearTimeout();\n            _this.nextRetryTime = 0;\n            _this.reconnectCount = 0;\n            var openTime = allClearResetTime / 1000 | 0;\n            _this.debugLog(\"WebSocket remained open for \" + openTime + \" seconds. Resetting\" + \" retry time and count.\");\n        }, allClearResetTime);\n    };\n    SturdyWebSocket.prototype.handleMessage = function(event) {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    };\n    SturdyWebSocket.prototype.handleClose = function(event) {\n        var _this = this;\n        if (this.isClosed) {\n            return;\n        }\n        var _a = this.options, maxReconnectAttempts = _a.maxReconnectAttempts, shouldReconnect = _a.shouldReconnect;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(event, this.getTooManyFailedReconnectsMessage());\n            return;\n        }\n        var willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(willReconnect, event, SHOULD_RECONNECT_FALSE_MESSAGE);\n        } else {\n            willReconnect.then(function(willReconnectResolved) {\n                if (_this.isClosed) {\n                    return;\n                }\n                _this.handleWillReconnect(willReconnectResolved, event, SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE);\n            });\n        }\n    };\n    SturdyWebSocket.prototype.handleError = function(event) {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    };\n    SturdyWebSocket.prototype.handleWillReconnect = function(willReconnect, event, denialReason) {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    };\n    SturdyWebSocket.prototype.reestablishConnection = function() {\n        var _this = this;\n        var _a = this.options, minReconnectDelay = _a.minReconnectDelay, maxReconnectDelay = _a.maxReconnectDelay, reconnectBackoffFactor = _a.reconnectBackoffFactor;\n        this.reconnectCount++;\n        var retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(minReconnectDelay, Math.min(this.nextRetryTime * reconnectBackoffFactor, maxReconnectDelay));\n        setTimeout(function() {\n            return _this.openNewWebSocket();\n        }, retryTime);\n        var retryTimeSeconds = retryTime / 1000 | 0;\n        this.debugLog(\"WebSocket was closed. Re-opening in \" + retryTimeSeconds + \" seconds.\");\n    };\n    SturdyWebSocket.prototype.stopReconnecting = function(event, debugReason) {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    };\n    SturdyWebSocket.prototype.shutdown = function() {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    };\n    SturdyWebSocket.prototype.disposeSocket = function(closeCode, reason) {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    };\n    SturdyWebSocket.prototype.clearAllTimeouts = function() {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    };\n    SturdyWebSocket.prototype.clearConnectTimeout = function() {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    };\n    SturdyWebSocket.prototype.clearAllClearTimeout = function() {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    };\n    SturdyWebSocket.prototype.dispatchEventOfType = function(type, event) {\n        var _this = this;\n        switch(type){\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type].slice().forEach(function(listener) {\n                return _this.callListener(listener, event);\n            });\n        }\n        return !event || !event.defaultPrevented;\n    };\n    SturdyWebSocket.prototype.callListener = function(listener, event) {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    };\n    SturdyWebSocket.prototype.debugLog = function(message) {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    };\n    SturdyWebSocket.prototype.getTooManyFailedReconnectsMessage = function() {\n        var maxReconnectAttempts = this.options.maxReconnectAttempts;\n        return \"Failed to reconnect after \" + maxReconnectAttempts + \" \" + pluralize(\"attempt\", maxReconnectAttempts) + \". Closing permanently.\";\n    };\n    SturdyWebSocket.DEFAULT_OPTIONS = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: function() {\n            return true;\n        },\n        wsConstructor: undefined\n    };\n    SturdyWebSocket.CONNECTING = 0;\n    SturdyWebSocket.OPEN = 1;\n    SturdyWebSocket.CLOSING = 2;\n    SturdyWebSocket.CLOSED = 3;\n    return SturdyWebSocket;\n}();\nexports[\"default\"] = SturdyWebSocket;\nfunction applyDefaultOptions(options) {\n    var result = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(function(key) {\n        var value = options[key];\n        result[key] = value === undefined ? SturdyWebSocket.DEFAULT_OPTIONS[key] : value;\n    });\n    return result;\n}\nfunction getDataByteLength(data) {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\nfunction pluralize(s, n) {\n    return n === 1 ? s : s + \"s\";\n}\nfunction noop() {\n// Nothing.\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3N0dXJkeS13ZWJzb2NrZXQvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxJQUFJQyxpQ0FBaUM7QUFDckMsSUFBSUMseUNBQXlDO0FBQzdDLElBQUlDLGtCQUFrQixXQUFXLEdBQUk7SUFDakMsU0FBU0EsZ0JBQWdCQyxHQUFHLEVBQUVDLGtCQUFrQixFQUFFQyxPQUFPO1FBQ3JELElBQUlBLFlBQVksS0FBSyxHQUFHO1lBQUVBLFVBQVUsQ0FBQztRQUFHO1FBQ3hDLElBQUksQ0FBQ0YsR0FBRyxHQUFHQTtRQUNYLElBQUksQ0FBQ0csT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFNBQVMsR0FBRztRQUNqQixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHO1FBQ2QsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFDaEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdWLGdCQUFnQlUsVUFBVTtRQUM1QyxJQUFJLENBQUNDLElBQUksR0FBR1gsZ0JBQWdCVyxJQUFJO1FBQ2hDLElBQUksQ0FBQ0MsT0FBTyxHQUFHWixnQkFBZ0JZLE9BQU87UUFDdEMsSUFBSSxDQUFDQyxNQUFNLEdBQUdiLGdCQUFnQmEsTUFBTTtRQUNwQyxJQUFJLENBQUNDLGFBQWEsR0FBRztRQUNyQixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLGFBQWEsR0FBRyxFQUFFO1FBQ3ZCLElBQUksQ0FBQ0MsYUFBYSxHQUFHO1FBQ3JCLElBQUksQ0FBQ0MsY0FBYyxHQUFHO1FBQ3RCLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUc7UUFDM0IsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRztRQUN6QixJQUFJLENBQUNDLFNBQVMsR0FBRyxDQUFDO1FBQ2xCLElBQUluQixzQkFBc0IsUUFDdEIs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VTZELFlBQ0oxRCxnQkFBZ0JrSCxlQUFlLENBQUNNLElBQUksR0FDcEMzSDtJQUNkO0lBQ0EsT0FBT3lIO0FBQ1g7QUFDQSxTQUFTMUUsa0JBQWtCRixJQUFJO0lBQzNCLElBQUksT0FBT0EsU0FBUyxVQUFVO1FBQzFCLDhDQUE4QztRQUM5QyxPQUFPLElBQUlBLEtBQUsrRSxNQUFNO0lBQzFCLE9BQ0ssSUFBSS9FLGdCQUFnQmdGLGFBQWE7UUFDbEMsT0FBT2hGLEtBQUtDLFVBQVU7SUFDMUIsT0FDSyxJQUFJRCxnQkFBZ0JpRixNQUFNO1FBQzNCLE9BQU9qRixLQUFLa0YsSUFBSTtJQUNwQixPQUNLO1FBQ0QsT0FBT2xFO0lBQ1g7QUFDSjtBQUNBLFNBQVN1RCxVQUFVWSxDQUFDLEVBQUVDLENBQUM7SUFDbkIsT0FBT0EsTUFBTSxJQUFJRCxJQUFJQSxJQUFJO0FBQzdCO0FBQ0EsU0FBU3RCO0FBQ0wsV0FBVztBQUNmLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4uL25vZGVfbW9kdWxlcy9zdHVyZHktd2Vic29ja2V0L2Rpc3QvaW5kZXguanM/NGU5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTSE9VTERfUkVDT05ORUNUX0ZBTFNFX01FU1NBR0UgPSBcIlByb3ZpZGVkIHNob3VsZFJlY29ubmVjdCgpIHJldHVybmVkIGZhbHNlLiBDbG9zaW5nIHBlcm1hbmVudGx5LlwiO1xudmFyIFNIT1VMRF9SRUNPTk5FQ1RfUFJPTUlTRV9GQUxTRV9NRVNTQUdFID0gXCJQcm92aWRlZCBzaG91bGRSZWNvbm5lY3QoKSByZXNvbHZlZCB0byBmYWxzZS4gQ2xvc2luZyBwZXJtYW5lbnRseS5cIjtcbnZhciBTdHVyZHlXZWJTb2NrZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3R1cmR5V2ViU29ja2V0KHVybCwgcHJvdG9jb2xzT3JPcHRpb25zLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLm9uY2xvc2UgPSBudWxsO1xuICAgICAgICB0aGlzLm9uZXJyb3IgPSBudWxsO1xuICAgICAgICB0aGlzLm9ubWVzc2FnZSA9IG51bGw7XG4gICAgICAgIHRoaXMub25vcGVuID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbmRvd24gPSBudWxsO1xuICAgICAgICB0aGlzLm9ucmVvcGVuID0gbnVsbDtcbiAgICAgICAgdGhpcy5DT05ORUNUSU5HID0gU3R1cmR5V2ViU29ja2V0LkNPTk5FQ1RJTkc7XG4gICAgICAgIHRoaXMuT1BFTiA9IFN0dXJkeVdlYlNvY2tldC5PUEVOO1xuICAgICAgICB0aGlzLkNMT1NJTkcgPSBTdHVyZHlXZWJTb2NrZXQuQ0xPU0lORztcbiAgICAgICAgdGhpcy5DTE9TRUQgPSBTdHVyZHlXZWJTb2NrZXQuQ0xPU0VEO1xuICAgICAgICB0aGlzLmhhc0JlZW5PcGVuZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0Nsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1lc3NhZ2VCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5uZXh0UmV0cnlUaW1lID0gMDtcbiAgICAgICAgdGhpcy5yZWNvbm5lY3RDb3VudCA9IDA7XG4gICAgICAgIHRoaXMubGFzdEtub3duRXh0ZW5zaW9ucyA9IFwiXCI7XG4gICAgICAgIHRoaXMubGFzdEtub3duUHJvdG9jb2wgPSBcIlwiO1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgICAgICBpZiAocHJvdG9jb2xzT3JPcHRpb25zID09IG51bGwgfHxcbiAgICAgICAgICAgIHR5cGVvZiBwcm90b2NvbHNPck9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkocHJvdG9jb2xzT3JPcHRpb25zKSkge1xuICAgICAgICAgICAgdGhpcy5wcm90b2NvbHMgPSBwcm90b2NvbHNPck9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0gcHJvdG9jb2xzT3JPcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGFwcGx5RGVmYXVsdE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLndzQ29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgV2ViU29ja2V0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLndzQ29uc3RydWN0b3IgPSBXZWJTb2NrZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZWJTb2NrZXQgbm90IHByZXNlbnQgaW4gZ2xvYmFsIHNjb3BlIGFuZCBubyBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwid3NDb25zdHJ1Y3RvciBvcHRpb24gd2FzIHByb3ZpZGVkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wZW5OZXdXZWJTb2NrZXQoKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUsIFwiYmluYXJ5VHlwZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmluYXJ5VHlwZUludGVybmFsIHx8IFwiYmxvYlwiO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChiaW5hcnlUeXBlKSB7XG4gICAgICAgICAgICB0aGlzLmJpbmFyeVR5cGVJbnRlcm5hbCA9IGJpbmFyeVR5cGU7XG4gICAgICAgICAgICBpZiAodGhpcy53cykge1xuICAgICAgICAgICAgICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9IGJpbmFyeVR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLCBcImJ1ZmZlcmVkQW1vdW50XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3VtID0gdGhpcy53cyA/IHRoaXMud3MuYnVmZmVyZWRBbW91bnQgOiAwO1xuICAgICAgICAgICAgdmFyIGhhc1Vua25vd25BbW91bnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZUJ1ZmZlci5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ5dGVMZW5ndGggPSBnZXREYXRhQnl0ZUxlbmd0aChkYXRhKTtcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1bSArPSBieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzVW5rbm93bkFtb3VudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaGFzVW5rbm93bkFtb3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVidWdMb2coXCJTb21lIGJ1ZmZlcmVkIGRhdGEgaGFkIHVua25vd24gbGVuZ3RoLiBidWZmZXJlZEFtb3VudCgpXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIiByZXR1cm4gdmFsdWUgbWF5IGJlIGJlbG93IHRoZSBjb3JyZWN0IGFtb3VudC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3VtO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZSwgXCJleHRlbnNpb25zXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53cyA/IHRoaXMud3MuZXh0ZW5zaW9ucyA6IHRoaXMubGFzdEtub3duRXh0ZW5zaW9ucztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUsIFwicHJvdG9jb2xcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndzID8gdGhpcy53cy5wcm90b2NvbCA6IHRoaXMubGFzdEtub3duUHJvdG9jb2w7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLCBcInJlYWR5U3RhdGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQ2xvc2VkID8gU3R1cmR5V2ViU29ja2V0LkNMT1NFRCA6IFN0dXJkeVdlYlNvY2tldC5PUEVOO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGNvZGUsIHJlYXNvbikge1xuICAgICAgICB0aGlzLmRpc3Bvc2VTb2NrZXQoY29kZSwgcmVhc29uKTtcbiAgICAgICAgdGhpcy5zaHV0ZG93bigpO1xuICAgICAgICB0aGlzLmRlYnVnTG9nKFwiV2ViU29ja2V0IHBlcm1hbmVudGx5IGNsb3NlZCBieSBjbGllbnQuXCIpO1xuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldlYlNvY2tldCBpcyBhbHJlYWR5IGluIENMT1NJTkcgb3IgQ0xPU0VEIHN0YXRlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLndzICYmIHRoaXMud3MucmVhZHlTdGF0ZSA9PT0gdGhpcy5PUEVOKSB7XG4gICAgICAgICAgICB0aGlzLndzLnNlbmQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VCdWZmZXIucHVzaChkYXRhKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY2FsbCByZWNvbm5lY3QoKSBvbiBzb2NrZXQgd2hpY2ggaXMgcGVybWFuZW50bHkgY2xvc2VkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc3Bvc2VTb2NrZXQoMTAwMCwgXCJDbGllbnQgcmVxdWVzdGVkIHJlY29ubmVjdC5cIik7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xvc2UodW5kZWZpbmVkKTtcbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIXRoaXMubGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoRXZlbnRPZlR5cGUoZXZlbnQudHlwZSwgZXZlbnQpO1xuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0gPSB0aGlzLmxpc3RlbmVyc1t0eXBlXS5maWx0ZXIoZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwgIT09IGxpc3RlbmVyOyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5vcGVuTmV3V2ViU29ja2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IHRoaXMub3B0aW9ucywgY29ubmVjdFRpbWVvdXQgPSBfYS5jb25uZWN0VGltZW91dCwgd3NDb25zdHJ1Y3RvciA9IF9hLndzQ29uc3RydWN0b3I7XG4gICAgICAgIHRoaXMuZGVidWdMb2coXCJPcGVuaW5nIG5ldyBXZWJTb2NrZXQgdG8gXCIgKyB0aGlzLnVybCArIFwiLlwiKTtcbiAgICAgICAgdmFyIHdzID0gbmV3IHdzQ29uc3RydWN0b3IodGhpcy51cmwsIHRoaXMucHJvdG9jb2xzKTtcbiAgICAgICAgd3Mub25jbG9zZSA9IGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gX3RoaXMuaGFuZGxlQ2xvc2UoZXZlbnQpOyB9O1xuICAgICAgICB3cy5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5oYW5kbGVFcnJvcihldmVudCk7IH07XG4gICAgICAgIHdzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gX3RoaXMuaGFuZGxlTWVzc2FnZShldmVudCk7IH07XG4gICAgICAgIHdzLm9ub3BlbiA9IGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gX3RoaXMuaGFuZGxlT3BlbihldmVudCk7IH07XG4gICAgICAgIHRoaXMuY29ubmVjdFRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBydW5uaW5nLCB3ZSBzdGlsbCBoYXZlbid0IG9wZW5lZCB0aGUgd2Vic29ja2V0LlxuICAgICAgICAgICAgLy8gS2lsbCBpdCBzbyB3ZSBjYW4gdHJ5IGFnYWluLlxuICAgICAgICAgICAgX3RoaXMuY2xlYXJDb25uZWN0VGltZW91dCgpO1xuICAgICAgICAgICAgX3RoaXMuZGlzcG9zZVNvY2tldCgpO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlQ2xvc2UodW5kZWZpbmVkKTtcbiAgICAgICAgfSwgY29ubmVjdFRpbWVvdXQpO1xuICAgICAgICB0aGlzLndzID0gd3M7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmhhbmRsZU9wZW4gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLndzIHx8IHRoaXMuaXNDbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWxsQ2xlYXJSZXNldFRpbWUgPSB0aGlzLm9wdGlvbnMuYWxsQ2xlYXJSZXNldFRpbWU7XG4gICAgICAgIHRoaXMuZGVidWdMb2coXCJXZWJTb2NrZXQgb3BlbmVkLlwiKTtcbiAgICAgICAgaWYgKHRoaXMuYmluYXJ5VHlwZUludGVybmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9IHRoaXMuYmluYXJ5VHlwZUludGVybmFsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5iaW5hcnlUeXBlSW50ZXJuYWwgPSB0aGlzLndzLmJpbmFyeVR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhckNvbm5lY3RUaW1lb3V0KCk7XG4gICAgICAgIGlmICh0aGlzLmhhc0JlZW5PcGVuZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudE9mVHlwZShcInJlb3BlblwiLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnRPZlR5cGUoXCJvcGVuXCIsIGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuaGFzQmVlbk9wZW5lZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZXNzYWdlQnVmZmVyLmZvckVhY2goZnVuY3Rpb24gKG1lc3NhZ2UpIHsgcmV0dXJuIF90aGlzLnNlbmQobWVzc2FnZSk7IH0pO1xuICAgICAgICB0aGlzLm1lc3NhZ2VCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5hbGxDbGVhclRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY2xlYXJBbGxDbGVhclRpbWVvdXQoKTtcbiAgICAgICAgICAgIF90aGlzLm5leHRSZXRyeVRpbWUgPSAwO1xuICAgICAgICAgICAgX3RoaXMucmVjb25uZWN0Q291bnQgPSAwO1xuICAgICAgICAgICAgdmFyIG9wZW5UaW1lID0gKGFsbENsZWFyUmVzZXRUaW1lIC8gMTAwMCkgfCAwO1xuICAgICAgICAgICAgX3RoaXMuZGVidWdMb2coXCJXZWJTb2NrZXQgcmVtYWluZWQgb3BlbiBmb3IgXCIgKyBvcGVuVGltZSArIFwiIHNlY29uZHMuIFJlc2V0dGluZ1wiICtcbiAgICAgICAgICAgICAgICBcIiByZXRyeSB0aW1lIGFuZCBjb3VudC5cIik7XG4gICAgICAgIH0sIGFsbENsZWFyUmVzZXRUaW1lKTtcbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuaGFuZGxlTWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudE9mVHlwZShcIm1lc3NhZ2VcIiwgZXZlbnQpO1xuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5oYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5pc0Nsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYSA9IHRoaXMub3B0aW9ucywgbWF4UmVjb25uZWN0QXR0ZW1wdHMgPSBfYS5tYXhSZWNvbm5lY3RBdHRlbXB0cywgc2hvdWxkUmVjb25uZWN0ID0gX2Euc2hvdWxkUmVjb25uZWN0O1xuICAgICAgICB0aGlzLmNsZWFyQ29ubmVjdFRpbWVvdXQoKTtcbiAgICAgICAgdGhpcy5jbGVhckFsbENsZWFyVGltZW91dCgpO1xuICAgICAgICBpZiAodGhpcy53cykge1xuICAgICAgICAgICAgdGhpcy5sYXN0S25vd25FeHRlbnNpb25zID0gdGhpcy53cy5leHRlbnNpb25zO1xuICAgICAgICAgICAgdGhpcy5sYXN0S25vd25Qcm90b2NvbCA9IHRoaXMud3MucHJvdG9jb2w7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2VTb2NrZXQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnRPZlR5cGUoXCJkb3duXCIsIGV2ZW50KTtcbiAgICAgICAgaWYgKHRoaXMucmVjb25uZWN0Q291bnQgPj0gbWF4UmVjb25uZWN0QXR0ZW1wdHMpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcFJlY29ubmVjdGluZyhldmVudCwgdGhpcy5nZXRUb29NYW55RmFpbGVkUmVjb25uZWN0c01lc3NhZ2UoKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdpbGxSZWNvbm5lY3QgPSAhZXZlbnQgfHwgc2hvdWxkUmVjb25uZWN0KGV2ZW50KTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aWxsUmVjb25uZWN0ID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVXaWxsUmVjb25uZWN0KHdpbGxSZWNvbm5lY3QsIGV2ZW50LCBTSE9VTERfUkVDT05ORUNUX0ZBTFNFX01FU1NBR0UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2lsbFJlY29ubmVjdC50aGVuKGZ1bmN0aW9uICh3aWxsUmVjb25uZWN0UmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNDbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVXaWxsUmVjb25uZWN0KHdpbGxSZWNvbm5lY3RSZXNvbHZlZCwgZXZlbnQsIFNIT1VMRF9SRUNPTk5FQ1RfUFJPTUlTRV9GQUxTRV9NRVNTQUdFKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmhhbmRsZUVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudE9mVHlwZShcImVycm9yXCIsIGV2ZW50KTtcbiAgICAgICAgdGhpcy5kZWJ1Z0xvZyhcIldlYlNvY2tldCBlbmNvdW50ZXJlZCBhbiBlcnJvci5cIik7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmhhbmRsZVdpbGxSZWNvbm5lY3QgPSBmdW5jdGlvbiAod2lsbFJlY29ubmVjdCwgZXZlbnQsIGRlbmlhbFJlYXNvbikge1xuICAgICAgICBpZiAod2lsbFJlY29ubmVjdCkge1xuICAgICAgICAgICAgdGhpcy5yZWVzdGFibGlzaENvbm5lY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcFJlY29ubmVjdGluZyhldmVudCwgZGVuaWFsUmVhc29uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5yZWVzdGFibGlzaENvbm5lY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRoaXMub3B0aW9ucywgbWluUmVjb25uZWN0RGVsYXkgPSBfYS5taW5SZWNvbm5lY3REZWxheSwgbWF4UmVjb25uZWN0RGVsYXkgPSBfYS5tYXhSZWNvbm5lY3REZWxheSwgcmVjb25uZWN0QmFja29mZkZhY3RvciA9IF9hLnJlY29ubmVjdEJhY2tvZmZGYWN0b3I7XG4gICAgICAgIHRoaXMucmVjb25uZWN0Q291bnQrKztcbiAgICAgICAgdmFyIHJldHJ5VGltZSA9IHRoaXMubmV4dFJldHJ5VGltZTtcbiAgICAgICAgdGhpcy5uZXh0UmV0cnlUaW1lID0gTWF0aC5tYXgobWluUmVjb25uZWN0RGVsYXksIE1hdGgubWluKHRoaXMubmV4dFJldHJ5VGltZSAqIHJlY29ubmVjdEJhY2tvZmZGYWN0b3IsIG1heFJlY29ubmVjdERlbGF5KSk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMub3Blbk5ld1dlYlNvY2tldCgpOyB9LCByZXRyeVRpbWUpO1xuICAgICAgICB2YXIgcmV0cnlUaW1lU2Vjb25kcyA9IChyZXRyeVRpbWUgLyAxMDAwKSB8IDA7XG4gICAgICAgIHRoaXMuZGVidWdMb2coXCJXZWJTb2NrZXQgd2FzIGNsb3NlZC4gUmUtb3BlbmluZyBpbiBcIiArIHJldHJ5VGltZVNlY29uZHMgKyBcIiBzZWNvbmRzLlwiKTtcbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuc3RvcFJlY29ubmVjdGluZyA9IGZ1bmN0aW9uIChldmVudCwgZGVidWdSZWFzb24pIHtcbiAgICAgICAgdGhpcy5kZWJ1Z0xvZyhkZWJ1Z1JlYXNvbik7XG4gICAgICAgIHRoaXMuc2h1dGRvd24oKTtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnRPZlR5cGUoXCJjbG9zZVwiLCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuc2h1dGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNDbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNsZWFyQWxsVGltZW91dHMoKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuZGlzcG9zZVNvY2tldCgpO1xuICAgIH07XG4gICAgU3R1cmR5V2ViU29ja2V0LnByb3RvdHlwZS5kaXNwb3NlU29ja2V0ID0gZnVuY3Rpb24gKGNsb3NlQ29kZSwgcmVhc29uKSB7XG4gICAgICAgIGlmICghdGhpcy53cykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVzZSBub29wIGhhbmRsZXJzIGluc3RlYWQgb2YgbnVsbCBiZWNhdXNlIHNvbWUgV2ViU29ja2V0XG4gICAgICAgIC8vIGltcGxlbWVudGF0aW9ucywgc3VjaCBhcyB0aGUgb25lIGZyb20gaXNvbW9ycGhpYy13cywgcmFpc2UgYSBzdGluayBvblxuICAgICAgICAvLyB1bmhhbmRsZWQgZXZlbnRzLlxuICAgICAgICB0aGlzLndzLm9uZXJyb3IgPSBub29wO1xuICAgICAgICB0aGlzLndzLm9uY2xvc2UgPSBub29wO1xuICAgICAgICB0aGlzLndzLm9ubWVzc2FnZSA9IG5vb3A7XG4gICAgICAgIHRoaXMud3Mub25vcGVuID0gbm9vcDtcbiAgICAgICAgdGhpcy53cy5jbG9zZShjbG9zZUNvZGUsIHJlYXNvbik7XG4gICAgICAgIHRoaXMud3MgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmNsZWFyQWxsVGltZW91dHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJDb25uZWN0VGltZW91dCgpO1xuICAgICAgICB0aGlzLmNsZWFyQWxsQ2xlYXJUaW1lb3V0KCk7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmNsZWFyQ29ubmVjdFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RUaW1lb3V0SWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY29ubmVjdFRpbWVvdXRJZCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuY2xlYXJBbGxDbGVhclRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmFsbENsZWFyVGltZW91dElkICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmFsbENsZWFyVGltZW91dElkKTtcbiAgICAgICAgICAgIHRoaXMuYWxsQ2xlYXJUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudE9mVHlwZSA9IGZ1bmN0aW9uICh0eXBlLCBldmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjbG9zZVwiOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uY2xvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25lcnJvcihldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbm1lc3NhZ2UoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25vcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25vcGVuKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZG93blwiOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uZG93bikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uZG93bihldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJlb3BlblwiOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ucmVvcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25yZW9wZW4oZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSBpbiB0aGlzLmxpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNbdHlwZV1cbiAgICAgICAgICAgICAgICAuc2xpY2UoKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikgeyByZXR1cm4gX3RoaXMuY2FsbExpc3RlbmVyKGxpc3RlbmVyLCBldmVudCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhZXZlbnQgfHwgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmNhbGxMaXN0ZW5lciA9IGZ1bmN0aW9uIChsaXN0ZW5lciwgZXZlbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxpc3RlbmVyLmhhbmRsZUV2ZW50LmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmRlYnVnTG9nID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQucHJvdG90eXBlLmdldFRvb01hbnlGYWlsZWRSZWNvbm5lY3RzTWVzc2FnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1heFJlY29ubmVjdEF0dGVtcHRzID0gdGhpcy5vcHRpb25zLm1heFJlY29ubmVjdEF0dGVtcHRzO1xuICAgICAgICByZXR1cm4gXCJGYWlsZWQgdG8gcmVjb25uZWN0IGFmdGVyIFwiICsgbWF4UmVjb25uZWN0QXR0ZW1wdHMgKyBcIiBcIiArIHBsdXJhbGl6ZShcImF0dGVtcHRcIiwgbWF4UmVjb25uZWN0QXR0ZW1wdHMpICsgXCIuIENsb3NpbmcgcGVybWFuZW50bHkuXCI7XG4gICAgfTtcbiAgICBTdHVyZHlXZWJTb2NrZXQuREVGQVVMVF9PUFRJT05TID0ge1xuICAgICAgICBhbGxDbGVhclJlc2V0VGltZTogNTAwMCxcbiAgICAgICAgY29ubmVjdFRpbWVvdXQ6IDUwMDAsXG4gICAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICAgICAgbWluUmVjb25uZWN0RGVsYXk6IDEwMDAsXG4gICAgICAgIG1heFJlY29ubmVjdERlbGF5OiAzMDAwMCxcbiAgICAgICAgbWF4UmVjb25uZWN0QXR0ZW1wdHM6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgICAgcmVjb25uZWN0QmFja29mZkZhY3RvcjogMS41LFxuICAgICAgICBzaG91bGRSZWNvbm5lY3Q6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgICAgIHdzQ29uc3RydWN0b3I6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIFN0dXJkeVdlYlNvY2tldC5DT05ORUNUSU5HID0gMDtcbiAgICBTdHVyZHlXZWJTb2NrZXQuT1BFTiA9IDE7XG4gICAgU3R1cmR5V2ViU29ja2V0LkNMT1NJTkcgPSAyO1xuICAgIFN0dXJkeVdlYlNvY2tldC5DTE9TRUQgPSAzO1xuICAgIHJldHVybiBTdHVyZHlXZWJTb2NrZXQ7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3R1cmR5V2ViU29ja2V0O1xuZnVuY3Rpb24gYXBwbHlEZWZhdWx0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIE9iamVjdC5rZXlzKFN0dXJkeVdlYlNvY2tldC5ERUZBVUxUX09QVElPTlMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgICAgIHJlc3VsdFtrZXldID1cbiAgICAgICAgICAgIHZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IFN0dXJkeVdlYlNvY2tldC5ERUZBVUxUX09QVElPTlNba2V5XVxuICAgICAgICAgICAgICAgIDogdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldERhdGFCeXRlTGVuZ3RoKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgLy8gVVRGLTE2IHN0cmluZ3MgdXNlIHR3byBieXRlcyBwZXIgY2hhcmFjdGVyLlxuICAgICAgICByZXR1cm4gMiAqIGRhdGEubGVuZ3RoO1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuc2l6ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gcGx1cmFsaXplKHMsIG4pIHtcbiAgICByZXR1cm4gbiA9PT0gMSA/IHMgOiBzICsgXCJzXCI7XG59XG5mdW5jdGlvbiBub29wKCkge1xuICAgIC8vIE5vdGhpbmcuXG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTSE9VTERfUkVDT05ORUNUX0ZBTFNFX01FU1NBR0UiLCJTSE9VTERfUkVDT05ORUNUX1BST01JU0VfRkFMU0VfTUVTU0FHRSIsIlN0dXJkeVdlYlNvY2tldCIsInVybCIsInByb3RvY29sc09yT3B0aW9ucyIsIm9wdGlvbnMiLCJvbmNsb3NlIiwib25lcnJvciIsIm9ubWVzc2FnZSIsIm9ub3BlbiIsIm9uZG93biIsIm9ucmVvcGVuIiwiQ09OTkVDVElORyIsIk9QRU4iLCJDTE9TSU5HIiwiQ0xPU0VEIiwiaGFzQmVlbk9wZW5lZCIsImlzQ2xvc2VkIiwibWVzc2FnZUJ1ZmZlciIsIm5leHRSZXRyeVRpbWUiLCJyZWNvbm5lY3RDb3VudCIsImxhc3RLbm93bkV4dGVuc2lvbnMiLCJsYXN0S25vd25Qcm90b2NvbCIsImxpc3RlbmVycyIsIkFycmF5IiwiaXNBcnJheSIsInByb3RvY29scyIsImFwcGx5RGVmYXVsdE9wdGlvbnMiLCJ3c0NvbnN0cnVjdG9yIiwiV2ViU29ja2V0IiwiRXJyb3IiLCJvcGVuTmV3V2ViU29ja2V0IiwicHJvdG90eXBlIiwiZ2V0IiwiYmluYXJ5VHlwZUludGVybmFsIiwic2V0IiwiYmluYXJ5VHlwZSIsIndzIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsInN1bSIsImJ1ZmZlcmVkQW1vdW50IiwiaGFzVW5rbm93bkFtb3VudCIsImZvckVhY2giLCJkYXRhIiwiYnl0ZUxlbmd0aCIsImdldERhdGFCeXRlTGVuZ3RoIiwiZGVidWdMb2ciLCJleHRlbnNpb25zIiwicHJvdG9jb2wiLCJjbG9zZSIsImNvZGUiLCJyZWFzb24iLCJkaXNwb3NlU29ja2V0Iiwic2h1dGRvd24iLCJzZW5kIiwicmVhZHlTdGF0ZSIsInB1c2giLCJyZWNvbm5lY3QiLCJoYW5kbGVDbG9zZSIsInVuZGVmaW5lZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwiZXZlbnQiLCJkaXNwYXRjaEV2ZW50T2ZUeXBlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImZpbHRlciIsImwiLCJfdGhpcyIsIl9hIiwiY29ubmVjdFRpbWVvdXQiLCJoYW5kbGVFcnJvciIsImhhbmRsZU1lc3NhZ2UiLCJoYW5kbGVPcGVuIiwiY29ubmVjdFRpbWVvdXRJZCIsInNldFRpbWVvdXQiLCJjbGVhckNvbm5lY3RUaW1lb3V0IiwiYWxsQ2xlYXJSZXNldFRpbWUiLCJtZXNzYWdlIiwiYWxsQ2xlYXJUaW1lb3V0SWQiLCJjbGVhckFsbENsZWFyVGltZW91dCIsIm9wZW5UaW1lIiwibWF4UmVjb25uZWN0QXR0ZW1wdHMiLCJzaG91bGRSZWNvbm5lY3QiLCJzdG9wUmVjb25uZWN0aW5nIiwiZ2V0VG9vTWFueUZhaWxlZFJlY29ubmVjdHNNZXNzYWdlIiwid2lsbFJlY29ubmVjdCIsImhhbmRsZVdpbGxSZWNvbm5lY3QiLCJ0aGVuIiwid2lsbFJlY29ubmVjdFJlc29sdmVkIiwiZGVuaWFsUmVhc29uIiwicmVlc3RhYmxpc2hDb25uZWN0aW9uIiwibWluUmVjb25uZWN0RGVsYXkiLCJtYXhSZWNvbm5lY3REZWxheSIsInJlY29ubmVjdEJhY2tvZmZGYWN0b3IiLCJyZXRyeVRpbWUiLCJNYXRoIiwibWF4IiwibWluIiwicmV0cnlUaW1lU2Vjb25kcyIsImRlYnVnUmVhc29uIiwiY2xlYXJBbGxUaW1lb3V0cyIsImNsb3NlQ29kZSIsIm5vb3AiLCJjbGVhclRpbWVvdXQiLCJzbGljZSIsImNhbGxMaXN0ZW5lciIsImRlZmF1bHRQcmV2ZW50ZWQiLCJjYWxsIiwiaGFuZGxlRXZlbnQiLCJkZWJ1ZyIsImNvbnNvbGUiLCJsb2ciLCJwbHVyYWxpemUiLCJERUZBVUxUX09QVElPTlMiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsImRlZmF1bHQiLCJyZXN1bHQiLCJrZXlzIiwia2V5IiwibGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJCbG9iIiwic2l6ZSIsInMiLCJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/sturdy-websocket/dist/index.js\n");

/***/ })

};
;