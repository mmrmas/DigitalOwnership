"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/periscopic";
exports.ids = ["vendor-chunks/periscopic"];
exports.modules = {

/***/ "(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/async.js":
/*!*************************************************************************!*\
  !*** ./node_modules/periscopic/node_modules/estree-walker/src/async.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncWalker: () => (/* binding */ AsyncWalker)\n/* harmony export */ });\n/* harmony import */ var _walker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./walker.js */ \"(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/walker.js\");\n\n/**\n * @typedef { import('estree').Node} Node\n * @typedef { import('./walker.js').WalkerContext} WalkerContext\n * @typedef {(\n *    this: WalkerContext,\n *    node: Node,\n *    parent: Node | null,\n *    key: string | number | symbol | null | undefined,\n *    index: number | null | undefined\n * ) => Promise<void>} AsyncHandler\n */ class AsyncWalker extends _walker_js__WEBPACK_IMPORTED_MODULE_0__.WalkerBase {\n    /**\n\t *\n\t * @param {AsyncHandler} [enter]\n\t * @param {AsyncHandler} [leave]\n\t */ constructor(enter, leave){\n        super();\n        /** @type {boolean} */ this.should_skip = false;\n        /** @type {boolean} */ this.should_remove = false;\n        /** @type {Node | null} */ this.replacement = null;\n        /** @type {WalkerContext} */ this.context = {\n            skip: ()=>this.should_skip = true,\n            remove: ()=>this.should_remove = true,\n            replace: (node)=>this.replacement = node\n        };\n        /** @type {AsyncHandler | undefined} */ this.enter = enter;\n        /** @type {AsyncHandler | undefined} */ this.leave = leave;\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Node} node\n\t * @param {Parent | null} parent\n\t * @param {keyof Parent} [prop]\n\t * @param {number | null} [index]\n\t * @returns {Promise<Node | null>}\n\t */ async visit(node, parent, prop, index) {\n        if (node) {\n            if (this.enter) {\n                const _should_skip = this.should_skip;\n                const _should_remove = this.should_remove;\n                const _replacement = this.replacement;\n                this.should_skip = false;\n                this.should_remove = false;\n                this.replacement = null;\n                await this.enter.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const skipped = this.should_skip;\n                const removed = this.should_remove;\n                this.should_skip = _should_skip;\n                this.should_remove = _should_remove;\n                this.replacement = _replacement;\n                if (skipped) return node;\n                if (removed) return null;\n            }\n            /** @type {keyof Node} */ let key;\n            for(key in node){\n                /** @type {unknown} */ const value = node[key];\n                if (value && typeof value === \"object\") {\n                    if (Array.isArray(value)) {\n                        const nodes = /** @type {Array<unknown>} */ value;\n                        for(let i = 0; i < nodes.length; i += 1){\n                            const item = nodes[i];\n                            if (isNode(item)) {\n                                if (!await this.visit(item, node, key, i)) {\n                                    // removed\n                                    i--;\n                                }\n                            }\n                        }\n                    } else if (isNode(value)) {\n                        await this.visit(value, node, key, null);\n                    }\n                }\n            }\n            if (this.leave) {\n                const _replacement = this.replacement;\n                const _should_remove = this.should_remove;\n                this.replacement = null;\n                this.should_remove = false;\n                await this.leave.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const removed = this.should_remove;\n                this.replacement = _replacement;\n                this.should_remove = _should_remove;\n                if (removed) return null;\n            }\n        }\n        return node;\n    }\n}\n/**\n * Ducktype a node.\n *\n * @param {unknown} value\n * @returns {value is Node}\n */ function isNode(value) {\n    return value !== null && typeof value === \"object\" && \"type\" in value && typeof value.type === \"string\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/periscopic/node_modules/estree-walker/src/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asyncWalk: () => (/* binding */ asyncWalk),\n/* harmony export */   walk: () => (/* binding */ walk)\n/* harmony export */ });\n/* harmony import */ var _sync_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sync.js */ \"(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/sync.js\");\n/* harmony import */ var _async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async.js */ \"(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/async.js\");\n\n\n/**\n * @typedef {import('estree').Node} Node\n * @typedef {import('./sync.js').SyncHandler} SyncHandler\n * @typedef {import('./async.js').AsyncHandler} AsyncHandler\n */ /**\n * @param {Node} ast\n * @param {{\n *   enter?: SyncHandler\n *   leave?: SyncHandler\n * }} walker\n * @returns {Node | null}\n */ function walk(ast, { enter, leave }) {\n    const instance = new _sync_js__WEBPACK_IMPORTED_MODULE_0__.SyncWalker(enter, leave);\n    return instance.visit(ast, null);\n}\n/**\n * @param {Node} ast\n * @param {{\n *   enter?: AsyncHandler\n *   leave?: AsyncHandler\n * }} walker\n * @returns {Promise<Node | null>}\n */ async function asyncWalk(ast, { enter, leave }) {\n    const instance = new _async_js__WEBPACK_IMPORTED_MODULE_1__.AsyncWalker(enter, leave);\n    return await instance.visit(ast, null);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGVyaXNjb3BpYy9ub2RlX21vZHVsZXMvZXN0cmVlLXdhbGtlci9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1QztBQUNFO0FBRXpDOzs7O0NBSUMsR0FFRDs7Ozs7OztDQU9DLEdBQ00sU0FBU0UsS0FBS0MsR0FBRyxFQUFFLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFO0lBQ3pDLE1BQU1DLFdBQVcsSUFBSU4sZ0RBQVVBLENBQUNJLE9BQU9DO0lBQ3ZDLE9BQU9DLFNBQVNDLEtBQUssQ0FBQ0osS0FBSztBQUM1QjtBQUVBOzs7Ozs7O0NBT0MsR0FDTSxlQUFlSyxVQUFVTCxHQUFHLEVBQUUsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUU7SUFDcEQsTUFBTUMsV0FBVyxJQUFJTCxrREFBV0EsQ0FBQ0csT0FBT0M7SUFDeEMsT0FBTyxNQUFNQyxTQUFTQyxLQUFLLENBQUNKLEtBQUs7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvcGVyaXNjb3BpYy9ub2RlX21vZHVsZXMvZXN0cmVlLXdhbGtlci9zcmMvaW5kZXguanM/YTdkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTeW5jV2Fsa2VyIH0gZnJvbSAnLi9zeW5jLmpzJztcbmltcG9ydCB7IEFzeW5jV2Fsa2VyIH0gZnJvbSAnLi9hc3luYy5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnZXN0cmVlJykuTm9kZX0gTm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9zeW5jLmpzJykuU3luY0hhbmRsZXJ9IFN5bmNIYW5kbGVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2FzeW5jLmpzJykuQXN5bmNIYW5kbGVyfSBBc3luY0hhbmRsZXJcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gYXN0XG4gKiBAcGFyYW0ge3tcbiAqICAgZW50ZXI/OiBTeW5jSGFuZGxlclxuICogICBsZWF2ZT86IFN5bmNIYW5kbGVyXG4gKiB9fSB3YWxrZXJcbiAqIEByZXR1cm5zIHtOb2RlIHwgbnVsbH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdhbGsoYXN0LCB7IGVudGVyLCBsZWF2ZSB9KSB7XG5cdGNvbnN0IGluc3RhbmNlID0gbmV3IFN5bmNXYWxrZXIoZW50ZXIsIGxlYXZlKTtcblx0cmV0dXJuIGluc3RhbmNlLnZpc2l0KGFzdCwgbnVsbCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBhc3RcbiAqIEBwYXJhbSB7e1xuICogICBlbnRlcj86IEFzeW5jSGFuZGxlclxuICogICBsZWF2ZT86IEFzeW5jSGFuZGxlclxuICogfX0gd2Fsa2VyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxOb2RlIHwgbnVsbD59XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhc3luY1dhbGsoYXN0LCB7IGVudGVyLCBsZWF2ZSB9KSB7XG5cdGNvbnN0IGluc3RhbmNlID0gbmV3IEFzeW5jV2Fsa2VyKGVudGVyLCBsZWF2ZSk7XG5cdHJldHVybiBhd2FpdCBpbnN0YW5jZS52aXNpdChhc3QsIG51bGwpO1xufVxuIl0sIm5hbWVzIjpbIlN5bmNXYWxrZXIiLCJBc3luY1dhbGtlciIsIndhbGsiLCJhc3QiLCJlbnRlciIsImxlYXZlIiwiaW5zdGFuY2UiLCJ2aXNpdCIsImFzeW5jV2FsayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/sync.js":
/*!************************************************************************!*\
  !*** ./node_modules/periscopic/node_modules/estree-walker/src/sync.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SyncWalker: () => (/* binding */ SyncWalker)\n/* harmony export */ });\n/* harmony import */ var _walker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./walker.js */ \"(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/walker.js\");\n\n/**\n * @typedef { import('estree').Node} Node\n * @typedef { import('./walker.js').WalkerContext} WalkerContext\n * @typedef {(\n *    this: WalkerContext,\n *    node: Node,\n *    parent: Node | null,\n *    key: string | number | symbol | null | undefined,\n *    index: number | null | undefined\n * ) => void} SyncHandler\n */ class SyncWalker extends _walker_js__WEBPACK_IMPORTED_MODULE_0__.WalkerBase {\n    /**\n\t *\n\t * @param {SyncHandler} [enter]\n\t * @param {SyncHandler} [leave]\n\t */ constructor(enter, leave){\n        super();\n        /** @type {boolean} */ this.should_skip = false;\n        /** @type {boolean} */ this.should_remove = false;\n        /** @type {Node | null} */ this.replacement = null;\n        /** @type {WalkerContext} */ this.context = {\n            skip: ()=>this.should_skip = true,\n            remove: ()=>this.should_remove = true,\n            replace: (node)=>this.replacement = node\n        };\n        /** @type {SyncHandler | undefined} */ this.enter = enter;\n        /** @type {SyncHandler | undefined} */ this.leave = leave;\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Node} node\n\t * @param {Parent | null} parent\n\t * @param {keyof Parent} [prop]\n\t * @param {number | null} [index]\n\t * @returns {Node | null}\n\t */ visit(node, parent, prop, index) {\n        if (node) {\n            if (this.enter) {\n                const _should_skip = this.should_skip;\n                const _should_remove = this.should_remove;\n                const _replacement = this.replacement;\n                this.should_skip = false;\n                this.should_remove = false;\n                this.replacement = null;\n                this.enter.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const skipped = this.should_skip;\n                const removed = this.should_remove;\n                this.should_skip = _should_skip;\n                this.should_remove = _should_remove;\n                this.replacement = _replacement;\n                if (skipped) return node;\n                if (removed) return null;\n            }\n            /** @type {keyof Node} */ let key;\n            for(key in node){\n                /** @type {unknown} */ const value = node[key];\n                if (value && typeof value === \"object\") {\n                    if (Array.isArray(value)) {\n                        const nodes = /** @type {Array<unknown>} */ value;\n                        for(let i = 0; i < nodes.length; i += 1){\n                            const item = nodes[i];\n                            if (isNode(item)) {\n                                if (!this.visit(item, node, key, i)) {\n                                    // removed\n                                    i--;\n                                }\n                            }\n                        }\n                    } else if (isNode(value)) {\n                        this.visit(value, node, key, null);\n                    }\n                }\n            }\n            if (this.leave) {\n                const _replacement = this.replacement;\n                const _should_remove = this.should_remove;\n                this.replacement = null;\n                this.should_remove = false;\n                this.leave.call(this.context, node, parent, prop, index);\n                if (this.replacement) {\n                    node = this.replacement;\n                    this.replace(parent, prop, index, node);\n                }\n                if (this.should_remove) {\n                    this.remove(parent, prop, index);\n                }\n                const removed = this.should_remove;\n                this.replacement = _replacement;\n                this.should_remove = _should_remove;\n                if (removed) return null;\n            }\n        }\n        return node;\n    }\n}\n/**\n * Ducktype a node.\n *\n * @param {unknown} value\n * @returns {value is Node}\n */ function isNode(value) {\n    return value !== null && typeof value === \"object\" && \"type\" in value && typeof value.type === \"string\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/walker.js":
/*!**************************************************************************!*\
  !*** ./node_modules/periscopic/node_modules/estree-walker/src/walker.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalkerBase: () => (/* binding */ WalkerBase)\n/* harmony export */ });\n/**\n * @typedef { import('estree').Node} Node\n * @typedef {{\n *   skip: () => void;\n *   remove: () => void;\n *   replace: (node: Node) => void;\n * }} WalkerContext\n */ class WalkerBase {\n    constructor(){\n        /** @type {boolean} */ this.should_skip = false;\n        /** @type {boolean} */ this.should_remove = false;\n        /** @type {Node | null} */ this.replacement = null;\n        /** @type {WalkerContext} */ this.context = {\n            skip: ()=>this.should_skip = true,\n            remove: ()=>this.should_remove = true,\n            replace: (node)=>this.replacement = node\n        };\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Parent | null | undefined} parent\n\t * @param {keyof Parent | null | undefined} prop\n\t * @param {number | null | undefined} index\n\t * @param {Node} node\n\t */ replace(parent, prop, index, node) {\n        if (parent && prop) {\n            if (index != null) {\n                /** @type {Array<Node>} */ parent[prop][index] = node;\n            } else {\n                /** @type {Node} */ parent[prop] = node;\n            }\n        }\n    }\n    /**\n\t * @template {Node} Parent\n\t * @param {Parent | null | undefined} parent\n\t * @param {keyof Parent | null | undefined} prop\n\t * @param {number | null | undefined} index\n\t */ remove(parent, prop, index) {\n        if (parent && prop) {\n            if (index !== null && index !== undefined) {\n                /** @type {Array<Node>} */ parent[prop].splice(index, 1);\n            } else {\n                delete parent[prop];\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGVyaXNjb3BpYy9ub2RlX21vZHVsZXMvZXN0cmVlLXdhbGtlci9zcmMvd2Fsa2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7OztDQU9DLEdBRU0sTUFBTUE7SUFDWkMsYUFBYztRQUNiLG9CQUFvQixHQUNwQixJQUFJLENBQUNDLFdBQVcsR0FBRztRQUVuQixvQkFBb0IsR0FDcEIsSUFBSSxDQUFDQyxhQUFhLEdBQUc7UUFFckIsd0JBQXdCLEdBQ3hCLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBRW5CLDBCQUEwQixHQUMxQixJQUFJLENBQUNDLE9BQU8sR0FBRztZQUNkQyxNQUFNLElBQU8sSUFBSSxDQUFDSixXQUFXLEdBQUc7WUFDaENLLFFBQVEsSUFBTyxJQUFJLENBQUNKLGFBQWEsR0FBRztZQUNwQ0ssU0FBUyxDQUFDQyxPQUFVLElBQUksQ0FBQ0wsV0FBVyxHQUFHSztRQUN4QztJQUNEO0lBRUE7Ozs7OztFQU1DLEdBQ0RELFFBQVFFLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVILElBQUksRUFBRTtRQUNsQyxJQUFJQyxVQUFVQyxNQUFNO1lBQ25CLElBQUlDLFNBQVMsTUFBTTtnQkFDbEIsd0JBQXdCLEdBQUlGLE1BQU0sQ0FBQ0MsS0FBSyxDQUFFQyxNQUFNLEdBQUdIO1lBQ3BELE9BQU87Z0JBQ04saUJBQWlCLEdBQUlDLE1BQU0sQ0FBQ0MsS0FBSyxHQUFJRjtZQUN0QztRQUNEO0lBQ0Q7SUFFQTs7Ozs7RUFLQyxHQUNERixPQUFPRyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFO1FBQzNCLElBQUlGLFVBQVVDLE1BQU07WUFDbkIsSUFBSUMsVUFBVSxRQUFRQSxVQUFVQyxXQUFXO2dCQUMxQyx3QkFBd0IsR0FBSUgsTUFBTSxDQUFDQyxLQUFLLENBQUVHLE1BQU0sQ0FBQ0YsT0FBTztZQUN6RCxPQUFPO2dCQUNOLE9BQU9GLE1BQU0sQ0FBQ0MsS0FBSztZQUNwQjtRQUNEO0lBQ0Q7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy9wZXJpc2NvcGljL25vZGVfbW9kdWxlcy9lc3RyZWUtd2Fsa2VyL3NyYy93YWxrZXIuanM/ZjJhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHsgaW1wb3J0KCdlc3RyZWUnKS5Ob2RlfSBOb2RlXG4gKiBAdHlwZWRlZiB7e1xuICogICBza2lwOiAoKSA9PiB2b2lkO1xuICogICByZW1vdmU6ICgpID0+IHZvaWQ7XG4gKiAgIHJlcGxhY2U6IChub2RlOiBOb2RlKSA9PiB2b2lkO1xuICogfX0gV2Fsa2VyQ29udGV4dFxuICovXG5cbmV4cG9ydCBjbGFzcyBXYWxrZXJCYXNlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0LyoqIEB0eXBlIHtib29sZWFufSAqL1xuXHRcdHRoaXMuc2hvdWxkX3NraXAgPSBmYWxzZTtcblxuXHRcdC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cblx0XHR0aGlzLnNob3VsZF9yZW1vdmUgPSBmYWxzZTtcblxuXHRcdC8qKiBAdHlwZSB7Tm9kZSB8IG51bGx9ICovXG5cdFx0dGhpcy5yZXBsYWNlbWVudCA9IG51bGw7XG5cblx0XHQvKiogQHR5cGUge1dhbGtlckNvbnRleHR9ICovXG5cdFx0dGhpcy5jb250ZXh0ID0ge1xuXHRcdFx0c2tpcDogKCkgPT4gKHRoaXMuc2hvdWxkX3NraXAgPSB0cnVlKSxcblx0XHRcdHJlbW92ZTogKCkgPT4gKHRoaXMuc2hvdWxkX3JlbW92ZSA9IHRydWUpLFxuXHRcdFx0cmVwbGFjZTogKG5vZGUpID0+ICh0aGlzLnJlcGxhY2VtZW50ID0gbm9kZSlcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEB0ZW1wbGF0ZSB7Tm9kZX0gUGFyZW50XG5cdCAqIEBwYXJhbSB7UGFyZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gcGFyZW50XG5cdCAqIEBwYXJhbSB7a2V5b2YgUGFyZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gcHJvcFxuXHQgKiBAcGFyYW0ge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IGluZGV4XG5cdCAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuXHQgKi9cblx0cmVwbGFjZShwYXJlbnQsIHByb3AsIGluZGV4LCBub2RlKSB7XG5cdFx0aWYgKHBhcmVudCAmJiBwcm9wKSB7XG5cdFx0XHRpZiAoaW5kZXggIT0gbnVsbCkge1xuXHRcdFx0XHQvKiogQHR5cGUge0FycmF5PE5vZGU+fSAqLyAocGFyZW50W3Byb3BdKVtpbmRleF0gPSBub2RlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0LyoqIEB0eXBlIHtOb2RlfSAqLyAocGFyZW50W3Byb3BdKSA9IG5vZGU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEB0ZW1wbGF0ZSB7Tm9kZX0gUGFyZW50XG5cdCAqIEBwYXJhbSB7UGFyZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gcGFyZW50XG5cdCAqIEBwYXJhbSB7a2V5b2YgUGFyZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gcHJvcFxuXHQgKiBAcGFyYW0ge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IGluZGV4XG5cdCAqL1xuXHRyZW1vdmUocGFyZW50LCBwcm9wLCBpbmRleCkge1xuXHRcdGlmIChwYXJlbnQgJiYgcHJvcCkge1xuXHRcdFx0aWYgKGluZGV4ICE9PSBudWxsICYmIGluZGV4ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0LyoqIEB0eXBlIHtBcnJheTxOb2RlPn0gKi8gKHBhcmVudFtwcm9wXSkuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBwYXJlbnRbcHJvcF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iXSwibmFtZXMiOlsiV2Fsa2VyQmFzZSIsImNvbnN0cnVjdG9yIiwic2hvdWxkX3NraXAiLCJzaG91bGRfcmVtb3ZlIiwicmVwbGFjZW1lbnQiLCJjb250ZXh0Iiwic2tpcCIsInJlbW92ZSIsInJlcGxhY2UiLCJub2RlIiwicGFyZW50IiwicHJvcCIsImluZGV4IiwidW5kZWZpbmVkIiwic3BsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/walker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/periscopic/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/periscopic/src/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scope: () => (/* binding */ Scope),\n/* harmony export */   analyze: () => (/* binding */ analyze),\n/* harmony export */   extract_identifiers: () => (/* binding */ extract_identifiers),\n/* harmony export */   extract_names: () => (/* binding */ extract_names)\n/* harmony export */ });\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(ssr)/./node_modules/periscopic/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var is_reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! is-reference */ \"(ssr)/./node_modules/is-reference/src/index.js\");\n\n\n/** @param {import('estree').Node} expression */ function analyze(expression) {\n    /** @typedef {import('estree').Node} Node */ /** @type {WeakMap<Node, Scope>} */ const map = new WeakMap();\n    /** @type {Map<string, Node>} */ const globals = new Map();\n    const scope = new Scope(null, false);\n    /** @type {[Scope, import('estree').Identifier][]} */ const references = [];\n    /** @type {Scope} */ let current_scope = scope;\n    (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(expression, {\n        enter (node, parent) {\n            switch(node.type){\n                case \"Identifier\":\n                    if (parent && (0,is_reference__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(node, parent)) {\n                        references.push([\n                            current_scope,\n                            node\n                        ]);\n                    }\n                    break;\n                case \"ImportDeclaration\":\n                    node.specifiers.forEach((specifier)=>{\n                        current_scope.declarations.set(specifier.local.name, specifier);\n                    });\n                    break;\n                case \"FunctionExpression\":\n                case \"FunctionDeclaration\":\n                case \"ArrowFunctionExpression\":\n                    if (node.type === \"FunctionDeclaration\") {\n                        if (node.id) {\n                            current_scope.declarations.set(node.id.name, node);\n                        }\n                        map.set(node, current_scope = new Scope(current_scope, false));\n                    } else {\n                        map.set(node, current_scope = new Scope(current_scope, false));\n                        if (node.type === \"FunctionExpression\" && node.id) {\n                            current_scope.declarations.set(node.id.name, node);\n                        }\n                    }\n                    node.params.forEach((param)=>{\n                        extract_names(param).forEach((name)=>{\n                            current_scope.declarations.set(name, node);\n                        });\n                    });\n                    break;\n                case \"ForStatement\":\n                case \"ForInStatement\":\n                case \"ForOfStatement\":\n                    map.set(node, current_scope = new Scope(current_scope, true));\n                    break;\n                case \"BlockStatement\":\n                    map.set(node, current_scope = new Scope(current_scope, true));\n                    break;\n                case \"ClassDeclaration\":\n                case \"VariableDeclaration\":\n                    current_scope.add_declaration(node);\n                    break;\n                case \"CatchClause\":\n                    map.set(node, current_scope = new Scope(current_scope, true));\n                    if (node.param) {\n                        extract_names(node.param).forEach((name)=>{\n                            if (node.param) {\n                                current_scope.declarations.set(name, node.param);\n                            }\n                        });\n                    }\n                    break;\n            }\n        },\n        leave (node) {\n            if (map.has(node) && current_scope !== null && current_scope.parent) {\n                current_scope = current_scope.parent;\n            }\n        }\n    });\n    for(let i = references.length - 1; i >= 0; --i){\n        const [scope, reference] = references[i];\n        if (!scope.references.has(reference.name)) {\n            add_reference(scope, reference.name);\n        }\n        if (!scope.find_owner(reference.name)) {\n            globals.set(reference.name, reference);\n        }\n    }\n    return {\n        map,\n        scope,\n        globals\n    };\n}\n/**\n * @param {Scope} scope\n * @param {string} name\n */ function add_reference(scope, name) {\n    scope.references.add(name);\n    if (scope.parent) add_reference(scope.parent, name);\n}\nclass Scope {\n    /**\n\t * @param {Scope | null} parent \n\t * @param {boolean} block \n\t */ constructor(parent, block){\n        /** @type {Scope | null} */ this.parent = parent;\n        /** @type {boolean} */ this.block = block;\n        /** @type {Map<string, import('estree').Node>} */ this.declarations = new Map();\n        /** @type {Set<string>} */ this.initialised_declarations = new Set();\n        /** @type {Set<string>} */ this.references = new Set();\n    }\n    /**\n\t * @param {import('estree').VariableDeclaration | import('estree').ClassDeclaration} node\n\t */ add_declaration(node) {\n        if (node.type === \"VariableDeclaration\") {\n            if (node.kind === \"var\" && this.block && this.parent) {\n                this.parent.add_declaration(node);\n            } else {\n                /** @param {import('estree').VariableDeclarator} declarator */ const handle_declarator = (declarator)=>{\n                    extract_names(declarator.id).forEach((name)=>{\n                        this.declarations.set(name, node);\n                        if (declarator.init) this.initialised_declarations.add(name);\n                    });\n                    ;\n                };\n                node.declarations.forEach(handle_declarator);\n            }\n        } else if (node.id) {\n            this.declarations.set(node.id.name, node);\n        }\n    }\n    /**\n\t * @param {string} name\n\t * @returns {Scope | null}\n\t */ find_owner(name) {\n        if (this.declarations.has(name)) return this;\n        return this.parent && this.parent.find_owner(name);\n    }\n    /**\n\t * @param {string} name\n\t * @returns {boolean}\n\t */ has(name) {\n        return this.declarations.has(name) || !!this.parent && this.parent.has(name);\n    }\n}\n/**\n * @param {import('estree').Node} param\n * @returns {string[]}\n */ function extract_names(param) {\n    return extract_identifiers(param).map((node)=>node.name);\n}\n/**\n * @param {import('estree').Node} param\n * @param {import('estree').Identifier[]} nodes\n * @returns {import('estree').Identifier[]}\n */ function extract_identifiers(param, nodes = []) {\n    switch(param.type){\n        case \"Identifier\":\n            nodes.push(param);\n            break;\n        case \"MemberExpression\":\n            let object = param;\n            while(object.type === \"MemberExpression\"){\n                object = /** @type {any} */ object.object;\n            }\n            nodes.push(/** @type {any} */ object);\n            break;\n        case \"ObjectPattern\":\n            /** @param {import('estree').Property | import('estree').RestElement} prop */ const handle_prop = (prop)=>{\n                if (prop.type === \"RestElement\") {\n                    extract_identifiers(prop.argument, nodes);\n                } else {\n                    extract_identifiers(prop.value, nodes);\n                }\n            };\n            param.properties.forEach(handle_prop);\n            break;\n        case \"ArrayPattern\":\n            /** @param {import('estree').Node} element */ const handle_element = (element)=>{\n                if (element) extract_identifiers(element, nodes);\n            };\n            param.elements.forEach((element)=>{\n                if (element) {\n                    handle_element(element);\n                }\n            });\n            break;\n        case \"RestElement\":\n            extract_identifiers(param.argument, nodes);\n            break;\n        case \"AssignmentPattern\":\n            extract_identifiers(param.left, nodes);\n            break;\n    }\n    return nodes;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/periscopic/src/index.js\n");

/***/ })

};
;