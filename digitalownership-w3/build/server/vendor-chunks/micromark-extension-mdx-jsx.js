"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-mdx-jsx";
exports.ids = ["vendor-chunks/micromark-extension-mdx-jsx"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js":
/*!*************************************************************************!*\
  !*** ./node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   factoryTag: () => (/* binding */ factoryTag)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(ssr)/./node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-mdx-expression */ \"(ssr)/./node_modules/micromark-factory-mdx-expression/dev/index.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/micromark-util-symbol/lib/constants.js\");\n/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! vfile-message */ \"(ssr)/./node_modules/vfile-message/lib/index.js\");\n/**\n * @import {Acorn, AcornOptions} from 'micromark-util-events-to-acorn'\n * @import {Code, Effects, State, TokenizeContext, TokenType} from 'micromark-util-types'\n */ \n\n\n\n\n\nconst trouble = \"https://github.com/micromark/micromark-extension-mdx-jsx\";\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {Acorn | null | undefined} acorn\n * @param {AcornOptions | null | undefined} acornOptions\n * @param {boolean | null | undefined} addResult\n * @param {boolean | undefined} allowLazy\n * @param {TokenType} tagType\n * @param {TokenType} tagMarkerType\n * @param {TokenType} tagClosingMarkerType\n * @param {TokenType} tagSelfClosingMarker\n * @param {TokenType} tagNameType\n * @param {TokenType} tagNamePrimaryType\n * @param {TokenType} tagNameMemberMarkerType\n * @param {TokenType} tagNameMemberType\n * @param {TokenType} tagNamePrefixMarkerType\n * @param {TokenType} tagNameLocalType\n * @param {TokenType} tagExpressionAttributeType\n * @param {TokenType} tagExpressionAttributeMarkerType\n * @param {TokenType} tagExpressionAttributeValueType\n * @param {TokenType} tagAttributeType\n * @param {TokenType} tagAttributeNameType\n * @param {TokenType} tagAttributeNamePrimaryType\n * @param {TokenType} tagAttributeNamePrefixMarkerType\n * @param {TokenType} tagAttributeNameLocalType\n * @param {TokenType} tagAttributeInitializerMarkerType\n * @param {TokenType} tagAttributeValueLiteralType\n * @param {TokenType} tagAttributeValueLiteralMarkerType\n * @param {TokenType} tagAttributeValueLiteralValueType\n * @param {TokenType} tagAttributeValueExpressionType\n * @param {TokenType} tagAttributeValueExpressionMarkerType\n * @param {TokenType} tagAttributeValueExpressionValueType\n */ // eslint-disable-next-line max-params\nfunction factoryTag(effects, ok, nok, acorn, acornOptions, addResult, allowLazy, tagType, tagMarkerType, tagClosingMarkerType, tagSelfClosingMarker, tagNameType, tagNamePrimaryType, tagNameMemberMarkerType, tagNameMemberType, tagNamePrefixMarkerType, tagNameLocalType, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, tagAttributeType, tagAttributeNameType, tagAttributeNamePrimaryType, tagAttributeNamePrefixMarkerType, tagAttributeNameLocalType, tagAttributeInitializerMarkerType, tagAttributeValueLiteralType, tagAttributeValueLiteralMarkerType, tagAttributeValueLiteralValueType, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType) {\n    const self = this;\n    /** @type {State} */ let returnState;\n    /** @type {NonNullable<Code> | undefined} */ let marker;\n    return start;\n    /**\n   * Start of MDX: JSX.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */ function start(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, \"expected `<`\");\n        effects.enter(tagType);\n        effects.enter(tagMarkerType);\n        effects.consume(code);\n        effects.exit(tagMarkerType);\n        return startAfter;\n    }\n    /**\n   * After `<`.\n   *\n   * ```markdown\n   * > | a <B /> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function startAfter(code) {\n        // Deviate from JSX, which allows arbitrary whitespace.\n        // See: <https://github.com/micromark/micromark-extension-mdx-jsx/issues/7>.\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code)) {\n            return nok(code);\n        }\n        // Any other ES whitespace does not get this treatment.\n        returnState = nameBefore;\n        return esWhitespaceStart(code);\n    }\n    /**\n   * Before name, self slash, or end of tag for fragments.\n   *\n   * ```markdown\n   * > | a <B> c\n   *        ^\n   * > | a </B> c\n   *        ^\n   * > | a <> b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */ function nameBefore(code) {\n        // Closing tag.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n            effects.enter(tagClosingMarkerType);\n            effects.consume(code);\n            effects.exit(tagClosingMarkerType);\n            returnState = closingTagNameBefore;\n            return esWhitespaceStart;\n        }\n        // Fragment opening tag.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            return tagEnd(code);\n        }\n        // Start of a name.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.enter(tagNameType);\n            effects.enter(tagNamePrimaryType);\n            effects.consume(code);\n            return primaryName;\n        }\n        crash(code, \"before name\", \"a character that can start a name, such as a letter, `$`, or `_`\" + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.exclamationMark ? \" (note: to create a comment in MDX, use `{/* text */}`)\" : \"\"));\n    }\n    /**\n   * Before name of closing tag or end of closing fragment tag.\n   *\n   * ```markdown\n   * > | a </> b\n   *         ^\n   * > | a </B> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function closingTagNameBefore(code) {\n        // Fragment closing tag.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            return tagEnd(code);\n        }\n        // Start of a closing tag name.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.enter(tagNameType);\n            effects.enter(tagNamePrimaryType);\n            effects.consume(code);\n            return primaryName;\n        }\n        crash(code, \"before name\", \"a character that can start a name, such as a letter, `$`, or `_`\" + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ? \" (note: JS comments in JSX tags are not supported in MDX)\" : \"\"));\n    }\n    /**\n   * In primary name.\n   *\n   * ```markdown\n   * > | a <Bc> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function primaryName(code) {\n        // Continuation of name: remain.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {\n            jsx: true\n        })) {\n            effects.consume(code);\n            return primaryName;\n        }\n        // End of name.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n            effects.exit(tagNamePrimaryType);\n            returnState = primaryNameAfter;\n            return esWhitespaceStart(code);\n        }\n        crash(code, \"in name\", \"a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag\" + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign ? \" (note: to create a link in MDX, use `[text](url)`)\" : \"\"));\n    }\n    /**\n   * After primary name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *         ^\n   * > | a <b:c> d\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function primaryNameAfter(code) {\n        // Start of a member name.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {\n            effects.enter(tagNameMemberMarkerType);\n            effects.consume(code);\n            effects.exit(tagNameMemberMarkerType);\n            returnState = memberNameBefore;\n            return esWhitespaceStart;\n        }\n        // Start of a local name.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n            effects.enter(tagNamePrefixMarkerType);\n            effects.consume(code);\n            effects.exit(tagNamePrefixMarkerType);\n            returnState = localNameBefore;\n            return esWhitespaceStart;\n        }\n        // End of name.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace || code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.exit(tagNameType);\n            return attributeBefore(code);\n        }\n        crash(code, \"after name\", \"a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag\");\n    }\n    /**\n   * Before member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function memberNameBefore(code) {\n        // Start of a member name.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.enter(tagNameMemberType);\n            effects.consume(code);\n            return memberName;\n        }\n        crash(code, \"before member name\", \"a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag\");\n    }\n    /**\n   * In member name.\n   *\n   * ```markdown\n   * > | a <b.cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function memberName(code) {\n        // Continuation of name: remain.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {\n            jsx: true\n        })) {\n            effects.consume(code);\n            return memberName;\n        }\n        // End of name.\n        // Note: no `:` allowed here.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n            effects.exit(tagNameMemberType);\n            returnState = memberNameAfter;\n            return esWhitespaceStart(code);\n        }\n        crash(code, \"in member name\", \"a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag\" + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.atSign ? \" (note: to create a link in MDX, use `[text](url)`)\" : \"\"));\n    }\n    /**\n   * After member name.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function memberNameAfter(code) {\n        // Start another member name.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {\n            effects.enter(tagNameMemberMarkerType);\n            effects.consume(code);\n            effects.exit(tagNameMemberMarkerType);\n            returnState = memberNameBefore;\n            return esWhitespaceStart;\n        }\n        // End of name.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace || code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.exit(tagNameType);\n            return attributeBefore(code);\n        }\n        crash(code, \"after member name\", \"a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag\");\n    }\n    /**\n   * Local member name.\n   *\n   * ```markdown\n   * > | a <b:c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function localNameBefore(code) {\n        // Start of a local name.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.enter(tagNameLocalType);\n            effects.consume(code);\n            return localName;\n        }\n        crash(code, \"before local name\", \"a character that can start a name, such as a letter, `$`, or `_`\" + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.plusSign || code !== null && code > micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.dot && code < micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon ? \" (note: to create a link in MDX, use `[text](url)`)\" : \"\"));\n    }\n    /**\n   * In local name.\n   *\n   * ```markdown\n   * > | a <b:cd> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function localName(code) {\n        // Continuation of name: remain.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {\n            jsx: true\n        })) {\n            effects.consume(code);\n            return localName;\n        }\n        // End of local name (note that we don’t expect another colon, or a member).\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n            effects.exit(tagNameLocalType);\n            returnState = localNameAfter;\n            return esWhitespaceStart(code);\n        }\n        crash(code, \"in local name\", \"a name character such as letters, digits, `$`, or `_`; whitespace before attributes; or the end of the tag\");\n    }\n    /**\n   * After local name.\n   *\n   * This is like as `primary_name_after`, but we don’t expect colons or\n   * periods.\n   *\n   * ```markdown\n   * > | a <b.c> d\n   *           ^\n   * > | a <b.c.d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function localNameAfter(code) {\n        // End of name.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace || code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.exit(tagNameType);\n            return attributeBefore(code);\n        }\n        crash(code, \"after local name\", \"a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag\");\n    }\n    /**\n   * Before attribute.\n   *\n   * ```markdown\n   * > | a <b /> c\n   *          ^\n   * > | a <b > c\n   *          ^\n   * > | a <b {...c}> d\n   *          ^\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function attributeBefore(code) {\n        // Self-closing.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {\n            effects.enter(tagSelfClosingMarker);\n            effects.consume(code);\n            effects.exit(tagSelfClosingMarker);\n            returnState = selfClosing;\n            return esWhitespaceStart;\n        }\n        // End of tag.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            return tagEnd(code);\n        }\n        // Attribute expression.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace) {\n            return micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__.factoryMdxExpression.call(self, effects, attributeExpressionAfter, tagExpressionAttributeType, tagExpressionAttributeMarkerType, tagExpressionAttributeValueType, acorn, acornOptions, addResult, true, false, allowLazy)(code);\n        }\n        // Start of an attribute name.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.enter(tagAttributeType);\n            effects.enter(tagAttributeNameType);\n            effects.enter(tagAttributeNamePrimaryType);\n            effects.consume(code);\n            return attributePrimaryName;\n        }\n        crash(code, \"before attribute name\", \"a character that can start an attribute name, such as a letter, `$`, or `_`; whitespace before attributes; or the end of the tag\");\n    }\n    /**\n   * After attribute expression.\n   *\n   * ```markdown\n   * > | a <b {c} d/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function attributeExpressionAfter(code) {\n        returnState = attributeBefore;\n        return esWhitespaceStart(code);\n    }\n    /**\n   * In primary attribute name.\n   *\n   * ```markdown\n   * > | a <b cd/> e\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function attributePrimaryName(code) {\n        // Continuation of name: remain.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {\n            jsx: true\n        })) {\n            effects.consume(code);\n            return attributePrimaryName;\n        }\n        // End of attribute name or tag.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n            effects.exit(tagAttributeNamePrimaryType);\n            returnState = attributePrimaryNameAfter;\n            return esWhitespaceStart(code);\n        }\n        crash(code, \"in attribute name\", \"an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag\");\n    }\n    /**\n   * After primary attribute name.\n   *\n   * ```markdown\n   * > | a <b c/> d\n   *           ^\n   * > | a <b c:d> e\n   *           ^\n   * > | a <b c=d> e\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */ function attributePrimaryNameAfter(code) {\n        // Start of a local name.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {\n            effects.enter(tagAttributeNamePrefixMarkerType);\n            effects.consume(code);\n            effects.exit(tagAttributeNamePrefixMarkerType);\n            returnState = attributeLocalNameBefore;\n            return esWhitespaceStart;\n        }\n        // Initializer: start of an attribute value.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {\n            effects.exit(tagAttributeNameType);\n            effects.enter(tagAttributeInitializerMarkerType);\n            effects.consume(code);\n            effects.exit(tagAttributeInitializerMarkerType);\n            returnState = attributeValueBefore;\n            return esWhitespaceStart;\n        }\n        // End of tag / new attribute.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code) || code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.exit(tagAttributeNameType);\n            effects.exit(tagAttributeType);\n            returnState = attributeBefore;\n            return esWhitespaceStart(code);\n        }\n        crash(code, \"after attribute name\", \"a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag\");\n    }\n    /**\n   * Before local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function attributeLocalNameBefore(code) {\n        // Start of a local name.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.enter(tagAttributeNameLocalType);\n            effects.consume(code);\n            return attributeLocalName;\n        }\n        crash(code, \"before local attribute name\", \"a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag\");\n    }\n    /**\n   * In local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:de/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function attributeLocalName(code) {\n        // Continuation of name: remain.\n        if (code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.cont)(code, {\n            jsx: true\n        })) {\n            effects.consume(code);\n            return attributeLocalName;\n        }\n        // End of local name (note that we don’t expect another colon).\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEndingOrSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n            effects.exit(tagAttributeNameLocalType);\n            effects.exit(tagAttributeNameType);\n            returnState = attributeLocalNameAfter;\n            return esWhitespaceStart(code);\n        }\n        crash(code, \"in local attribute name\", \"an attribute name character such as letters, digits, `$`, or `_`; `=` to initialize a value; whitespace before attributes; or the end of the tag\");\n    }\n    /**\n   * After local attribute name.\n   *\n   * ```markdown\n   * > | a <b c:d/> f\n   *             ^\n   * > | a <b c:d=e/> f\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function attributeLocalNameAfter(code) {\n        // Start of an attribute value.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {\n            effects.enter(tagAttributeInitializerMarkerType);\n            effects.consume(code);\n            effects.exit(tagAttributeInitializerMarkerType);\n            returnState = attributeValueBefore;\n            return esWhitespaceStart;\n        }\n        // End of name.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace || code !== micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof && code >= 0 && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_3__.start)(code)) {\n            effects.exit(tagAttributeType);\n            return attributeBefore(code);\n        }\n        crash(code, \"after local attribute name\", \"a character that can start an attribute name, such as a letter, `$`, or `_`; `=` to initialize a value; or the end of the tag\");\n    }\n    /**\n   * After `=`, before value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * > | a <b c={d}/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function attributeValueBefore(code) {\n        // Start of double- or single quoted value.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe) {\n            effects.enter(tagAttributeValueLiteralType);\n            effects.enter(tagAttributeValueLiteralMarkerType);\n            effects.consume(code);\n            effects.exit(tagAttributeValueLiteralMarkerType);\n            marker = code;\n            return attributeValueQuotedStart;\n        }\n        // Attribute value expression.\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace) {\n            return micromark_factory_mdx_expression__WEBPACK_IMPORTED_MODULE_4__.factoryMdxExpression.call(self, effects, attributeValueExpressionAfter, tagAttributeValueExpressionType, tagAttributeValueExpressionMarkerType, tagAttributeValueExpressionValueType, acorn, acornOptions, addResult, false, false, allowLazy)(code);\n        }\n        crash(code, \"before attribute value\", \"a character that can start an attribute value, such as `\\\"`, `'`, or `{`\" + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan ? \" (note: to use an element or fragment as a prop value in MDX, use `{<element />}`)\" : \"\"));\n    }\n    /**\n   * After attribute value expression.\n   *\n   * ```markdown\n   * > | a <b c={d} e/> f\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */ function attributeValueExpressionAfter(code) {\n        effects.exit(tagAttributeType);\n        returnState = attributeBefore;\n        return esWhitespaceStart(code);\n    }\n    /**\n   * Before quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */ function attributeValueQuotedStart(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(marker !== undefined, \"expected `marker` to be defined\");\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {\n            crash(code, \"in attribute value\", \"a corresponding closing quote `\" + String.fromCodePoint(marker) + \"`\");\n        }\n        if (code === marker) {\n            effects.enter(tagAttributeValueLiteralMarkerType);\n            effects.consume(code);\n            effects.exit(tagAttributeValueLiteralMarkerType);\n            effects.exit(tagAttributeValueLiteralType);\n            effects.exit(tagAttributeType);\n            marker = undefined;\n            returnState = attributeBefore;\n            return esWhitespaceStart;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n            returnState = attributeValueQuotedStart;\n            return esWhitespaceStart(code);\n        }\n        effects.enter(tagAttributeValueLiteralValueType);\n        return attributeValueQuoted(code);\n    }\n    /**\n   * In quoted literal attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"/> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */ function attributeValueQuoted(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === marker || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n            effects.exit(tagAttributeValueLiteralValueType);\n            return attributeValueQuotedStart(code);\n        }\n        effects.consume(code);\n        return attributeValueQuoted;\n    }\n    /**\n   * After self-closing slash.\n   *\n   * ```markdown\n   * > | a <b/> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function selfClosing(code) {\n        if (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {\n            return tagEnd(code);\n        }\n        crash(code, \"after self-closing slash\", \"`>` to end the tag\" + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.asterisk || code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.slash ? \" (note: JS comments in JSX tags are not supported in MDX)\" : \"\"));\n    }\n    /**\n   * At final `>`.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function tagEnd(code) {\n        (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan, \"expected `>`\");\n        effects.enter(tagMarkerType);\n        effects.consume(code);\n        effects.exit(tagMarkerType);\n        effects.exit(tagType);\n        return ok;\n    }\n    /**\n   * Before optional ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */ function esWhitespaceStart(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n            effects.enter(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.lineEnding);\n            effects.consume(code);\n            effects.exit(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.lineEnding);\n            return esWhitespaceEolAfter;\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n            effects.enter(\"esWhitespace\");\n            return esWhitespaceInside(code);\n        }\n        return returnState(code);\n    }\n    /**\n   * In ECMAScript whitespace.\n   *\n   * ```markdown\n   * > | a <a  b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function esWhitespaceInside(code) {\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {\n            effects.exit(\"esWhitespace\");\n            return esWhitespaceStart(code);\n        }\n        if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.unicodeWhitespace)(code)) {\n            effects.consume(code);\n            return esWhitespaceInside;\n        }\n        effects.exit(\"esWhitespace\");\n        return returnState(code);\n    }\n    /**\n   * After eol in whitespace.\n   *\n   * ```markdown\n   * > | a <a\\nb> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */ function esWhitespaceEolAfter(code) {\n        // Lazy continuation in a flow tag is a syntax error.\n        if (!allowLazy && self.parser.lazy[self.now().line]) {\n            const error = new vfile_message__WEBPACK_IMPORTED_MODULE_6__.VFileMessage(\"Unexpected lazy line in container, expected line to be prefixed with `>` when in a block quote, whitespace when in a list, etc\", self.now(), \"micromark-extension-mdx-jsx:unexpected-lazy\");\n            error.url = trouble + \"#unexpected-lazy-line-in-container-expected-line-to-be\";\n            throw error;\n        }\n        return esWhitespaceStart(code);\n    }\n    /**\n   * Crash at a nonconforming character.\n   *\n   * @param {Code} code\n   * @param {string} at\n   * @param {string} expect\n   */ function crash(code, at, expect) {\n        const error = new vfile_message__WEBPACK_IMPORTED_MODULE_6__.VFileMessage(\"Unexpected \" + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof ? \"end of file\" : \"character `\" + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent ? \"` ` `\" : String.fromCodePoint(code)) + \"` (\" + serializeCharCode(code) + \")\") + \" \" + at + \", expected \" + expect, self.now(), \"micromark-extension-mdx-jsx:unexpected-\" + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof ? \"eof\" : \"character\"));\n        error.url = trouble + (code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof ? \"#unexpected-end-of-file-at-expected-expect\" : \"#unexpected-character-at-expected-expect\");\n        throw error;\n    }\n}\n/**\n * @param {NonNullable<Code>} code\n * @returns {string}\n */ function serializeCharCode(code) {\n    return \"U+\" + code.toString(micromark_util_symbol__WEBPACK_IMPORTED_MODULE_7__.constants.numericBaseHexadecimal).toUpperCase().padStart(4, \"0\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js":
/*!**********************************************************************!*\
  !*** ./node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsxFlow: () => (/* binding */ jsxFlow)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(ssr)/./node_modules/devlop/lib/development.js\");\n/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ \"(ssr)/./node_modules/micromark-util-character/dev/index.js\");\n/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ \"(ssr)/./node_modules/micromark-factory-space/dev/index.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/micromark-util-symbol/lib/types.js\");\n/* harmony import */ var _factory_tag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./factory-tag.js */ \"(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\");\n/**\n * @import {Options} from 'micromark-extension-mdx-jsx'\n * @import {Acorn} from 'micromark-util-events-to-acorn'\n * @import {Construct, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */ \n\n\n\n\n/**\n * Parse JSX (flow).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */ function jsxFlow(acorn, options) {\n    return {\n        name: \"mdxJsxFlowTag\",\n        tokenize: tokenizeJsxFlow,\n        concrete: true\n    };\n    /**\n   * MDX JSX (flow).\n   *\n   * ```markdown\n   * > | <A />\n   *     ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */ function tokenizeJsxFlow(effects, ok, nok) {\n        const self = this;\n        return start;\n        /**\n     * Start of MDX: JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function start(code) {\n            // To do: in `markdown-rs`, constructs need to parse the indent themselves.\n            // This should also be introduced in `micromark-js`.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, \"expected `<`\");\n            return before(code);\n        }\n        /**\n     * After optional whitespace, before of MDX JSX (flow).\n     *\n     * ```markdown\n     * > | <A />\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */ function before(code) {\n            return _factory_tag_js__WEBPACK_IMPORTED_MODULE_2__.factoryTag.call(self, effects, after, nok, acorn, options.acornOptions, options.addResult, false, \"mdxJsxFlowTag\", \"mdxJsxFlowTagMarker\", \"mdxJsxFlowTagClosingMarker\", \"mdxJsxFlowTagSelfClosingMarker\", \"mdxJsxFlowTagName\", \"mdxJsxFlowTagNamePrimary\", \"mdxJsxFlowTagNameMemberMarker\", \"mdxJsxFlowTagNameMember\", \"mdxJsxFlowTagNamePrefixMarker\", \"mdxJsxFlowTagNameLocal\", \"mdxJsxFlowTagExpressionAttribute\", \"mdxJsxFlowTagExpressionAttributeMarker\", \"mdxJsxFlowTagExpressionAttributeValue\", \"mdxJsxFlowTagAttribute\", \"mdxJsxFlowTagAttributeName\", \"mdxJsxFlowTagAttributeNamePrimary\", \"mdxJsxFlowTagAttributeNamePrefixMarker\", \"mdxJsxFlowTagAttributeNameLocal\", \"mdxJsxFlowTagAttributeInitializerMarker\", \"mdxJsxFlowTagAttributeValueLiteral\", \"mdxJsxFlowTagAttributeValueLiteralMarker\", \"mdxJsxFlowTagAttributeValueLiteralValue\", \"mdxJsxFlowTagAttributeValueExpression\", \"mdxJsxFlowTagAttributeValueExpressionMarker\", \"mdxJsxFlowTagAttributeValueExpressionValue\")(code);\n        }\n        /**\n     * After an MDX JSX (flow) tag.\n     *\n     * ```markdown\n     * > | <A>\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */ function after(code) {\n            return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code) ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, end, micromark_util_symbol__WEBPACK_IMPORTED_MODULE_5__.types.whitespace)(code) : end(code);\n        }\n        /**\n     * After an MDX JSX (flow) tag, after optional whitespace.\n     *\n     * ```markdown\n     * > | <A> <B>\n     *         ^\n     * ```\n     *\n     * @type {State}\n     */ function end(code) {\n            // We want to allow expressions directly after tags.\n            // See <https://github.com/micromark/micromark-extension-mdx-expression/blob/d5d92b9/packages/micromark-extension-mdx-expression/dev/lib/syntax.js#L183>\n            // for more info.\n            const leftBraceValue = self.parser.constructs.flow[micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace];\n            /* c8 ignore next 5 -- always a list when normalized. */ const constructs = Array.isArray(leftBraceValue) ? leftBraceValue : leftBraceValue ? [\n                leftBraceValue\n            ] : [];\n            const expression = constructs.find((d)=>d.name === \"mdxFlowExpression\");\n            // Another tag.\n            return code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan ? start(code) : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.leftCurlyBrace && expression ? effects.attempt(expression, end, nok)(code) : code === micromark_util_symbol__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code) ? ok(code) : nok(code);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js":
/*!**********************************************************************!*\
  !*** ./node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsxText: () => (/* binding */ jsxText)\n/* harmony export */ });\n/* harmony import */ var _factory_tag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factory-tag.js */ \"(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/factory-tag.js\");\n/**\n * @import {Options} from 'micromark-extension-mdx-jsx'\n * @import {Acorn} from 'micromark-util-events-to-acorn'\n * @import {Construct, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */ \n/**\n * Parse JSX (text).\n *\n * @param {Acorn | undefined} acorn\n *   Acorn parser to use (optional).\n * @param {Options} options\n *   Configuration.\n * @returns {Construct}\n *   Construct.\n */ function jsxText(acorn, options) {\n    return {\n        name: \"mdxJsxTextTag\",\n        tokenize: tokenizeJsxText\n    };\n    /**\n   * MDX JSX (text).\n   *\n   * ```markdown\n   * > | a <b />.\n   *       ^^^^^\n   * ```\n   *\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */ function tokenizeJsxText(effects, ok, nok) {\n        return _factory_tag_js__WEBPACK_IMPORTED_MODULE_0__.factoryTag.call(this, effects, ok, nok, acorn, options.acornOptions, options.addResult, true, \"mdxJsxTextTag\", \"mdxJsxTextTagMarker\", \"mdxJsxTextTagClosingMarker\", \"mdxJsxTextTagSelfClosingMarker\", \"mdxJsxTextTagName\", \"mdxJsxTextTagNamePrimary\", \"mdxJsxTextTagNameMemberMarker\", \"mdxJsxTextTagNameMember\", \"mdxJsxTextTagNamePrefixMarker\", \"mdxJsxTextTagNameLocal\", \"mdxJsxTextTagExpressionAttribute\", \"mdxJsxTextTagExpressionAttributeMarker\", \"mdxJsxTextTagExpressionAttributeValue\", \"mdxJsxTextTagAttribute\", \"mdxJsxTextTagAttributeName\", \"mdxJsxTextTagAttributeNamePrimary\", \"mdxJsxTextTagAttributeNamePrefixMarker\", \"mdxJsxTextTagAttributeNameLocal\", \"mdxJsxTextTagAttributeInitializerMarker\", \"mdxJsxTextTagAttributeValueLiteral\", \"mdxJsxTextTagAttributeValueLiteralMarker\", \"mdxJsxTextTagAttributeValueLiteralValue\", \"mdxJsxTextTagAttributeValueExpression\", \"mdxJsxTextTagAttributeValueExpressionMarker\", \"mdxJsxTextTagAttributeValueExpressionValue\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4L2Rldi9saWIvanN4LXRleHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7OztDQUlDLEdBRTBDO0FBRTNDOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNDLFFBQVFDLEtBQUssRUFBRUMsT0FBTztJQUNwQyxPQUFPO1FBQUNDLE1BQU07UUFBaUJDLFVBQVVDO0lBQWU7SUFFeEQ7Ozs7Ozs7Ozs7R0FVQyxHQUNELFNBQVNBLGdCQUFnQkMsT0FBTyxFQUFFQyxFQUFFLEVBQUVDLEdBQUc7UUFDdkMsT0FBT1QsdURBQVVBLENBQUNVLElBQUksQ0FDcEIsSUFBSSxFQUNKSCxTQUNBQyxJQUNBQyxLQUNBUCxPQUNBQyxRQUFRUSxZQUFZLEVBQ3BCUixRQUFRUyxTQUFTLEVBQ2pCLE1BQ0EsaUJBQ0EsdUJBQ0EsOEJBQ0Esa0NBQ0EscUJBQ0EsNEJBQ0EsaUNBQ0EsMkJBQ0EsaUNBQ0EsMEJBQ0Esb0NBQ0EsMENBQ0EseUNBQ0EsMEJBQ0EsOEJBQ0EscUNBQ0EsMENBQ0EsbUNBQ0EsMkNBQ0Esc0NBQ0EsNENBQ0EsMkNBQ0EseUNBQ0EsK0NBQ0E7SUFFSjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeC9kZXYvbGliL2pzeC10ZXh0LmpzP2QxNGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtPcHRpb25zfSBmcm9tICdtaWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gnXG4gKiBAaW1wb3J0IHtBY29ybn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtZXZlbnRzLXRvLWFjb3JuJ1xuICogQGltcG9ydCB7Q29uc3RydWN0LCBUb2tlbml6ZUNvbnRleHQsIFRva2VuaXplcn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtdHlwZXMnXG4gKi9cblxuaW1wb3J0IHtmYWN0b3J5VGFnfSBmcm9tICcuL2ZhY3RvcnktdGFnLmpzJ1xuXG4vKipcbiAqIFBhcnNlIEpTWCAodGV4dCkuXG4gKlxuICogQHBhcmFtIHtBY29ybiB8IHVuZGVmaW5lZH0gYWNvcm5cbiAqICAgQWNvcm4gcGFyc2VyIHRvIHVzZSAob3B0aW9uYWwpLlxuICogQHBhcmFtIHtPcHRpb25zfSBvcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJucyB7Q29uc3RydWN0fVxuICogICBDb25zdHJ1Y3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBqc3hUZXh0KGFjb3JuLCBvcHRpb25zKSB7XG4gIHJldHVybiB7bmFtZTogJ21keEpzeFRleHRUYWcnLCB0b2tlbml6ZTogdG9rZW5pemVKc3hUZXh0fVxuXG4gIC8qKlxuICAgKiBNRFggSlNYICh0ZXh0KS5cbiAgICpcbiAgICogYGBgbWFya2Rvd25cbiAgICogPiB8IGEgPGIgLz4uXG4gICAqICAgICAgIF5eXl5eXG4gICAqIGBgYFxuICAgKlxuICAgKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0fVxuICAgKiBAdHlwZSB7VG9rZW5pemVyfVxuICAgKi9cbiAgZnVuY3Rpb24gdG9rZW5pemVKc3hUZXh0KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgICByZXR1cm4gZmFjdG9yeVRhZy5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgIGVmZmVjdHMsXG4gICAgICBvayxcbiAgICAgIG5vayxcbiAgICAgIGFjb3JuLFxuICAgICAgb3B0aW9ucy5hY29ybk9wdGlvbnMsXG4gICAgICBvcHRpb25zLmFkZFJlc3VsdCxcbiAgICAgIHRydWUsXG4gICAgICAnbWR4SnN4VGV4dFRhZycsXG4gICAgICAnbWR4SnN4VGV4dFRhZ01hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0Nsb3NpbmdNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdTZWxmQ2xvc2luZ01hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ05hbWUnLFxuICAgICAgJ21keEpzeFRleHRUYWdOYW1lUHJpbWFyeScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ05hbWVNZW1iZXJNYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdOYW1lTWVtYmVyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnTmFtZVByZWZpeE1hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ05hbWVMb2NhbCcsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0V4cHJlc3Npb25BdHRyaWJ1dGUnLFxuICAgICAgJ21keEpzeFRleHRUYWdFeHByZXNzaW9uQXR0cmlidXRlTWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlTmFtZScsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZU5hbWVQcmltYXJ5JyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlTmFtZVByZWZpeE1hcmtlcicsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZU5hbWVMb2NhbCcsXG4gICAgICAnbWR4SnN4VGV4dFRhZ0F0dHJpYnV0ZUluaXRpYWxpemVyTWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlVmFsdWVMaXRlcmFsJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlVmFsdWVMaXRlcmFsTWFya2VyJyxcbiAgICAgICdtZHhKc3hUZXh0VGFnQXR0cmlidXRlVmFsdWVMaXRlcmFsVmFsdWUnLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVWYWx1ZUV4cHJlc3Npb24nLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVWYWx1ZUV4cHJlc3Npb25NYXJrZXInLFxuICAgICAgJ21keEpzeFRleHRUYWdBdHRyaWJ1dGVWYWx1ZUV4cHJlc3Npb25WYWx1ZSdcbiAgICApXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmYWN0b3J5VGFnIiwianN4VGV4dCIsImFjb3JuIiwib3B0aW9ucyIsIm5hbWUiLCJ0b2tlbml6ZSIsInRva2VuaXplSnN4VGV4dCIsImVmZmVjdHMiLCJvayIsIm5vayIsImNhbGwiLCJhY29ybk9wdGlvbnMiLCJhZGRSZXN1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js":
/*!********************************************************************!*\
  !*** ./node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxJsx: () => (/* binding */ mdxJsx)\n/* harmony export */ });\n/* harmony import */ var micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol */ \"(ssr)/./node_modules/micromark-util-symbol/lib/codes.js\");\n/* harmony import */ var _jsx_text_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsx-text.js */ \"(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-text.js\");\n/* harmony import */ var _jsx_flow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jsx-flow.js */ \"(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/jsx-flow.js\");\n/**\n * @import {Options} from 'micromark-extension-mdx-jsx'\n * @import {AcornOptions} from 'micromark-util-events-to-acorn'\n * @import {Extension} from 'micromark-util-types'\n */ \n\n\n/**\n * Create an extension for `micromark` to enable MDX JSX syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable MDX\n *   JSX syntax.\n */ function mdxJsx(options) {\n    const settings = options || {};\n    const acorn = settings.acorn;\n    /** @type {AcornOptions | undefined} */ let acornOptions;\n    if (acorn) {\n        if (!acorn.parse || !acorn.parseExpressionAt) {\n            throw new Error(\"Expected a proper `acorn` instance passed in as `options.acorn`\");\n        }\n        acornOptions = Object.assign({\n            ecmaVersion: 2024,\n            sourceType: \"module\"\n        }, settings.acornOptions, {\n            locations: true\n        });\n    } else if (settings.acornOptions || settings.addResult) {\n        throw new Error(\"Expected an `acorn` instance passed in as `options.acorn`\");\n    }\n    return {\n        flow: {\n            [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: (0,_jsx_flow_js__WEBPACK_IMPORTED_MODULE_1__.jsxFlow)(acorn || undefined, {\n                acornOptions,\n                addResult: settings.addResult || undefined\n            })\n        },\n        text: {\n            [micromark_util_symbol__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: (0,_jsx_text_js__WEBPACK_IMPORTED_MODULE_2__.jsxText)(acorn || undefined, {\n                acornOptions,\n                addResult: settings.addResult || undefined\n            })\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1tZHgtanN4L2Rldi9saWIvc3ludGF4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztDQUlDLEdBRTBDO0FBQ047QUFDQTtBQUVyQzs7Ozs7Ozs7Q0FRQyxHQUNNLFNBQVNHLE9BQU9DLE9BQU87SUFDNUIsTUFBTUMsV0FBV0QsV0FBVyxDQUFDO0lBQzdCLE1BQU1FLFFBQVFELFNBQVNDLEtBQUs7SUFDNUIscUNBQXFDLEdBQ3JDLElBQUlDO0lBRUosSUFBSUQsT0FBTztRQUNULElBQUksQ0FBQ0EsTUFBTUUsS0FBSyxJQUFJLENBQUNGLE1BQU1HLGlCQUFpQixFQUFFO1lBQzVDLE1BQU0sSUFBSUMsTUFDUjtRQUVKO1FBRUFILGVBQWVJLE9BQU9DLE1BQU0sQ0FDMUI7WUFBQ0MsYUFBYTtZQUFNQyxZQUFZO1FBQVEsR0FDeENULFNBQVNFLFlBQVksRUFDckI7WUFBQ1EsV0FBVztRQUFJO0lBRXBCLE9BQU8sSUFBSVYsU0FBU0UsWUFBWSxJQUFJRixTQUFTVyxTQUFTLEVBQUU7UUFDdEQsTUFBTSxJQUFJTixNQUFNO0lBQ2xCO0lBRUEsT0FBTztRQUNMTyxNQUFNO1lBQ0osQ0FBQ2pCLHdEQUFLQSxDQUFDa0IsUUFBUSxDQUFDLEVBQUVoQixxREFBT0EsQ0FBQ0ksU0FBU2EsV0FBVztnQkFDNUNaO2dCQUNBUyxXQUFXWCxTQUFTVyxTQUFTLElBQUlHO1lBQ25DO1FBQ0Y7UUFDQUMsTUFBTTtZQUNKLENBQUNwQix3REFBS0EsQ0FBQ2tCLFFBQVEsQ0FBQyxFQUFFakIscURBQU9BLENBQUNLLFNBQVNhLFdBQVc7Z0JBQzVDWjtnQkFDQVMsV0FBV1gsU0FBU1csU0FBUyxJQUFJRztZQUNuQztRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2lwdC13My8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1keC1qc3gvZGV2L2xpYi9zeW50YXguanM/ZDY3MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge09wdGlvbnN9IGZyb20gJ21pY3JvbWFyay1leHRlbnNpb24tbWR4LWpzeCdcbiAqIEBpbXBvcnQge0Fjb3JuT3B0aW9uc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtZXZlbnRzLXRvLWFjb3JuJ1xuICogQGltcG9ydCB7RXh0ZW5zaW9ufSBmcm9tICdtaWNyb21hcmstdXRpbC10eXBlcydcbiAqL1xuXG5pbXBvcnQge2NvZGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wnXG5pbXBvcnQge2pzeFRleHR9IGZyb20gJy4vanN4LXRleHQuanMnXG5pbXBvcnQge2pzeEZsb3d9IGZyb20gJy4vanN4LWZsb3cuanMnXG5cbi8qKlxuICogQ3JlYXRlIGFuIGV4dGVuc2lvbiBmb3IgYG1pY3JvbWFya2AgdG8gZW5hYmxlIE1EWCBKU1ggc3ludGF4LlxuICpcbiAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7RXh0ZW5zaW9ufVxuICogICBFeHRlbnNpb24gZm9yIGBtaWNyb21hcmtgIHRoYXQgY2FuIGJlIHBhc3NlZCBpbiBgZXh0ZW5zaW9uc2AgdG8gZW5hYmxlIE1EWFxuICogICBKU1ggc3ludGF4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWR4SnN4KG9wdGlvbnMpIHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG4gIGNvbnN0IGFjb3JuID0gc2V0dGluZ3MuYWNvcm5cbiAgLyoqIEB0eXBlIHtBY29ybk9wdGlvbnMgfCB1bmRlZmluZWR9ICovXG4gIGxldCBhY29ybk9wdGlvbnNcblxuICBpZiAoYWNvcm4pIHtcbiAgICBpZiAoIWFjb3JuLnBhcnNlIHx8ICFhY29ybi5wYXJzZUV4cHJlc3Npb25BdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgYSBwcm9wZXIgYGFjb3JuYCBpbnN0YW5jZSBwYXNzZWQgaW4gYXMgYG9wdGlvbnMuYWNvcm5gJ1xuICAgICAgKVxuICAgIH1cblxuICAgIGFjb3JuT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7ZWNtYVZlcnNpb246IDIwMjQsIHNvdXJjZVR5cGU6ICdtb2R1bGUnfSxcbiAgICAgIHNldHRpbmdzLmFjb3JuT3B0aW9ucyxcbiAgICAgIHtsb2NhdGlvbnM6IHRydWV9XG4gICAgKVxuICB9IGVsc2UgaWYgKHNldHRpbmdzLmFjb3JuT3B0aW9ucyB8fCBzZXR0aW5ncy5hZGRSZXN1bHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGFuIGBhY29ybmAgaW5zdGFuY2UgcGFzc2VkIGluIGFzIGBvcHRpb25zLmFjb3JuYCcpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZsb3c6IHtcbiAgICAgIFtjb2Rlcy5sZXNzVGhhbl06IGpzeEZsb3coYWNvcm4gfHwgdW5kZWZpbmVkLCB7XG4gICAgICAgIGFjb3JuT3B0aW9ucyxcbiAgICAgICAgYWRkUmVzdWx0OiBzZXR0aW5ncy5hZGRSZXN1bHQgfHwgdW5kZWZpbmVkXG4gICAgICB9KVxuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgW2NvZGVzLmxlc3NUaGFuXToganN4VGV4dChhY29ybiB8fCB1bmRlZmluZWQsIHtcbiAgICAgICAgYWNvcm5PcHRpb25zLFxuICAgICAgICBhZGRSZXN1bHQ6IHNldHRpbmdzLmFkZFJlc3VsdCB8fCB1bmRlZmluZWRcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiY29kZXMiLCJqc3hUZXh0IiwianN4RmxvdyIsIm1keEpzeCIsIm9wdGlvbnMiLCJzZXR0aW5ncyIsImFjb3JuIiwiYWNvcm5PcHRpb25zIiwicGFyc2UiLCJwYXJzZUV4cHJlc3Npb25BdCIsIkVycm9yIiwiT2JqZWN0IiwiYXNzaWduIiwiZWNtYVZlcnNpb24iLCJzb3VyY2VUeXBlIiwibG9jYXRpb25zIiwiYWRkUmVzdWx0IiwiZmxvdyIsImxlc3NUaGFuIiwidW5kZWZpbmVkIiwidGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-mdx-jsx/dev/lib/syntax.js\n");

/***/ })

};
;