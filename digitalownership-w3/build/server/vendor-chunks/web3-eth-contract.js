"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-eth-contract";
exports.ids = ["vendor-chunks/web3-eth-contract"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/contract.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/contract.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Contract: () => (/* binding */ Contract)\n/* harmony export */ });\n/* harmony import */ var web3_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/web3-core/lib/esm/index.js\");\n/* harmony import */ var web3_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-errors */ \"(ssr)/./node_modules/web3-errors/lib/esm/index.js\");\n/* harmony import */ var web3_eth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3-eth */ \"(ssr)/./node_modules/web3-eth/lib/esm/index.js\");\n/* harmony import */ var web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-eth-abi */ \"(ssr)/./node_modules/web3-eth-abi/lib/esm/index.js\");\n/* harmony import */ var web3_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! web3-types */ \"(ssr)/./node_modules/web3-types/lib/esm/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var web3_validator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! web3-validator */ \"(ssr)/./node_modules/web3-validator/lib/esm/index.js\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./encoding.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\");\n/* harmony import */ var _log_subscription_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./log_subscription.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst contractSubscriptions = {\n    logs: _log_subscription_js__WEBPACK_IMPORTED_MODULE_8__.LogsSubscription,\n    newHeads: web3_eth__WEBPACK_IMPORTED_MODULE_2__.NewHeadsSubscription,\n    newBlockHeaders: web3_eth__WEBPACK_IMPORTED_MODULE_2__.NewHeadsSubscription\n};\n/**\n * The `web3.eth.Contract` makes it easy to interact with smart contracts on the ethereum blockchain.\n * For using contract package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that contracts features can be used as mentioned in following snippet.\n * ```ts\n *\n * import { Web3 } from 'web3';\n *\n * const web3 = new Web3('https://127.0.0.1:4545');\n * const abi = [...] as const; // your contract ABI\n *\n * let contract = new web3.eth.Contract(abi,'0xdAC17F958D2ee523a2206206994597C13D831ec7');\n * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();\n * ```\n * For using individual package install `web3-eth-contract` and `web3-core` packages using: `npm i web3-eth-contract web3-core` or `yarn add web3-eth-contract web3-core`. This is more efficient approach for building lightweight applications.\n * ```ts\n *\n * import { Web3Context } from 'web3-core';\n * import { Contract } from 'web3-eth-contract';\n *\n * const abi = [...] as const; // your contract ABI\n *\n * let contract = new web3.eth.Contract(\n * \tabi,\n * \t'0xdAC17F958D2ee523a2206206994597C13D831ec7'\n * \t new Web3Context('http://127.0.0.1:8545'));\n *\n * await contract.methods.balanceOf('0xdAC17F958D2ee523a2206206994597C13D831ec7').call();\n * ```\n * ## Generated Methods\n * Following methods are generated by web3.js contract object for each of contract functions by using its ABI.\n *\n * ### send\n * This is used to send a transaction to the smart contract and execute its method. Note this can alter the smart contract state.\n *\n * #### Parameters\n * options?: PayableTxOptions | NonPayableTxOptions\n *\n * #### Returns\n * [Web3PromiEvent](/api/web3/namespace/core#Web3PromiEvent) : Web3 Promi Event\n *\n * ```ts\n * // using the promise\n * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n * \t.then(function(receipt){\n * \t\t// other parts of code to use receipt\n * \t});\n *\n *\n * // using the event emitter\n * myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n * \t.on('transactionHash', function(hash){\n * \t\t// ...\n * \t})\n * \t.on('confirmation', function(confirmationNumber, receipt){\n * \t\t// ...\n * \t})\n * \t.on('receipt', function(receipt){\n * \t\t// ...\n * \t})\n * \t.on('error', function(error, receipt) {\n * \t\t// ...\n * \t});\n *\n * ```\n *\n * ### call\n * This will execute smart contract method in the EVM without sending any transaction. Note calling cannot alter the smart contract state.\n *\n * #### Parameters\n * options?: PayableCallOptions | NonPayableCallOptions,\n * block?: BlockNumberOrTag,\n *\n * #### Returns\n * Promise : having results of call\n *\n * ```ts\n *\n * let myContract = new web3.eth.Contract(abi, address);\n *\n * myContract.methods.myFunction().call()\n * .then(console.log);\n *\n * ```\n * ### estimateGas\n * Returns the amount of gas consumed by executing the method in EVM without creating a new transaction on the blockchain. The returned amount can be used as a gas estimate for executing the transaction publicly. The actual gas used can be different when sending the transaction later, as the state of the smart contract can be different at that time.\n *\n * #### Parameters\n * options?: PayableCallOptions,\n * returnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n *\n * #### Returns\n * Promise: The gas amount estimated.\n *\n * ```ts\n * const estimatedGas = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)\n *     .estimateGas();\n *\n * ```\n *\n * ### encodeABI\n * Encodes the ABI for this method. The resulting hex string is 32-bit function signature hash plus the passed parameters in Solidity tightly packed format. This can be used to send a transaction, call a method, or pass it into another smart contractâ€™s method as arguments. Set the data field on web3.eth.sendTransaction options as the encodeABI() result and it is the same as calling the contract method with contract.myMethod.send().\n *\n * Some use cases for encodeABI() include: preparing a smart contract transaction for a multisignature wallet, working with offline wallets and cold storage and creating transaction payload for complex smart contract proxy calls.\n *\n * #### Parameters\n * None\n *\n * #### Returns\n * String: The encoded ABI.\n *\n * ```ts\n * const encodedABI = await contract.methods.approve('0xdAC17F958D2ee523a2206206994597C13D831ec7', 300)\n *     .encodeABI();\n *\n * ```\n *\n\n * ### decodeMethodData\n * Decodes the given ABI-encoded data, revealing both the method name and the parameters used in the smart contract call.\n * This function reverses the encoding process happens at the method `encodeABI`.\n * It's particularly useful for debugging and understanding the interactions with and between smart contracts.\n *\n * #### Parameters\n *\n * - `data` **HexString**: The string of ABI-encoded data that needs to be decoded. This should include the method signature and the encoded parameters.\n *\n * #### Returns\n *\n * - **Object**: This object combines both the decoded parameters and the method name in a readable format. Specifically, the returned object contains:\n *   - `__method__` **String**: The name of the contract method, reconstructed from the ABI.\n *   - `__length__` **Number**: The number of parameters decoded.\n *   - Additional properties representing each parameter by name, as well as their position and values.\n *\n * #### Example\n *\n * Given an ABI-encoded string from a transaction, you can decode this data to identify the method called and the parameters passed.\n * Here's a simplified example:\n *\n *\n * ```typescript\n * const GreeterAbi = [\n * \t{\n * \t\tinputs: [\n * \t\t\t{\n * \t\t\t\tinternalType: 'string',\n * \t\t\t\tname: '_greeting',\n * \t\t\t\ttype: 'string',\n * \t\t\t},\n * \t\t],\n * \t\tname: 'setGreeting',\n * \t\toutputs: [],\n * \t\ttype: 'function',\n * \t},\n * ];\n * const contract = new Contract(GreeterAbi); // Initialize with your contract's ABI\n *\n * // The ABI-encoded data string for \"setGreeting('Hello World')\"\n * const encodedData =\n * \t'0xa41368620000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b48656c6c6f20576f726c64000000000000000000000000000000000000000000';\n *\n * try {\n * \tconst decoded = contract.decodeMethodData(encodedData);\n * \tconsole.log(decoded.__method__); // Outputs: \"setGreeting(string)\"\n * \tconsole.log(decoded); // Outputs the detailed parameter data\n * \t// This tells that the method called was `setGreeting` with a single string parameter \"Hello World\":\n * \t// {\n * \t//   __method__: 'setGreeting(string)',\n * \t//   __length__: 1,\n * \t//   '0': 'Hello World',\n * \t//   _greeting: 'Hello World'\n * \t// }\n * } catch (error) {\n * \tconsole.error(error);\n * }\n * ```\n *\n\n * ### createAccessList\n * This will create an access list a method execution will access when executed in the EVM.\n * Note: You must specify a from address and gas if itâ€™s not specified in options when instantiating parent contract object.\n *\n * #### Parameters\n * options?: PayableCallOptions | NonPayableCallOptions,\n * block?: BlockNumberOrTag,\n *\n * #### Returns\n * Promise: The generated access list for transaction.\n *\n * ```ts\n * const accessList = await contract.methods.approve('0xbEe634C21c16F05B03B704BaE071536121e6cFeA', 300)\n *     .createAccessList({\n *         from: \"0x9992695e1053bb737d3cfae4743dcfc4b94f203d\"\n *    });\n * ```\n *\n */ class Contract extends web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Context {\n    constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat){\n        var _a, _b, _c;\n        // eslint-disable-next-line no-nested-ternary\n        const options = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isContractInitOptions)(addressOrOptionsOrContext) ? addressOrOptionsOrContext : (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isContractInitOptions)(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : undefined;\n        let contractContext;\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.isWeb3ContractContext)(addressOrOptionsOrContext)) {\n            contractContext = addressOrOptionsOrContext;\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.isWeb3ContractContext)(optionsOrContextOrReturnFormat)) {\n            contractContext = optionsOrContextOrReturnFormat;\n        } else {\n            contractContext = contextOrReturnFormat;\n        }\n        let provider;\n        if (typeof addressOrOptionsOrContext === \"object\" && \"provider\" in addressOrOptionsOrContext) {\n            provider = addressOrOptionsOrContext.provider;\n        } else if (typeof optionsOrContextOrReturnFormat === \"object\" && \"provider\" in optionsOrContextOrReturnFormat) {\n            provider = optionsOrContextOrReturnFormat.provider;\n        } else if (typeof contextOrReturnFormat === \"object\" && \"provider\" in contextOrReturnFormat) {\n            provider = contextOrReturnFormat.provider;\n        } else {\n            provider = Contract.givenProvider;\n        }\n        super(Object.assign(Object.assign({}, contractContext), {\n            provider,\n            registeredSubscriptions: contractSubscriptions\n        }));\n        /**\n         * Set to true if you want contracts' defaults to sync with global defaults.\n         */ this.syncWithContext = false;\n        this._functions = {};\n        // Init protected properties\n        if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.wallet) {\n            this._wallet = contractContext.wallet;\n        }\n        if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.accountProvider) {\n            this._accountProvider = contractContext.accountProvider;\n        }\n        if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(options) && !(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(options.data) && !(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(options.input) && this.config.contractDataInputFill !== \"both\") throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractTransactionDataAndInputError({\n            data: options.data,\n            input: options.input\n        });\n        this._overloadedMethodAbis = new Map();\n        // eslint-disable-next-line no-nested-ternary\n        const returnDataFormat = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(contextOrReturnFormat) ? contextOrReturnFormat : (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : returnFormat !== null && returnFormat !== void 0 ? returnFormat : this.defaultReturnFormat;\n        const address = typeof addressOrOptionsOrContext === \"string\" ? addressOrOptionsOrContext : undefined;\n        this.config.contractDataInputFill = (_a = options === null || options === void 0 ? void 0 : options.dataInputFill) !== null && _a !== void 0 ? _a : this.config.contractDataInputFill;\n        this._parseAndSetJsonInterface(jsonInterface, returnDataFormat);\n        if (this.defaultReturnFormat !== returnDataFormat) {\n            this.defaultReturnFormat = returnDataFormat;\n        }\n        if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(address)) {\n            this._parseAndSetAddress(address, returnDataFormat);\n        }\n        this.options = {\n            address,\n            jsonInterface: this._jsonInterface,\n            gas: (_b = options === null || options === void 0 ? void 0 : options.gas) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.gasLimit,\n            gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,\n            from: options === null || options === void 0 ? void 0 : options.from,\n            input: options === null || options === void 0 ? void 0 : options.input,\n            data: options === null || options === void 0 ? void 0 : options.data\n        };\n        this.syncWithContext = (_c = options === null || options === void 0 ? void 0 : options.syncWithContext) !== null && _c !== void 0 ? _c : false;\n        if (contractContext instanceof web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Context) {\n            this.subscribeToContextEvents(contractContext);\n        }\n        Object.defineProperty(this.options, \"address\", {\n            set: (value)=>this._parseAndSetAddress(value, returnDataFormat),\n            get: ()=>this._address\n        });\n        Object.defineProperty(this.options, \"jsonInterface\", {\n            set: (value)=>this._parseAndSetJsonInterface(value, returnDataFormat),\n            get: ()=>this._jsonInterface\n        });\n        if (contractContext instanceof web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Context) {\n            contractContext.on(web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3ConfigEvent.CONFIG_CHANGE, (event)=>{\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                this.setConfig({\n                    [event.name]: event.newValue\n                });\n            });\n        }\n    }\n    /**\n     * Subscribe to an event.\n     *\n     * ```ts\n     * await myContract.events.MyEvent([options])\n     * ```\n     *\n     * There is a special event `allEvents` that can be used to subscribe all events.\n     *\n     * ```ts\n     * await myContract.events.allEvents([options])\n     * ```\n     *\n     * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object\n     */ get events() {\n        return this._events;\n    }\n    /**\n     * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.\n     *\n     * The methods of this smart contract are available through:\n     *\n     * The name: `myContract.methods.myMethod(123)`\n     * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`\n     * The signature `myContract.methods['0x58cf5f10'](123)`\n     *\n     * This allows calling functions with same name but different parameters from the JavaScript contract object.\n     *\n     * \\> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.\n     *\n     * ```ts\n     * // calling a method\n     * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n     *\n     * // or sending and using a promise\n     * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n     *\n     * // or sending and using the events\n     * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});\n     * sendObject.on('transactionHash', function(hash){\n     *   ...\n     * });\n     * sendObject.on('receipt', function(receipt){\n     *   ...\n     * });\n     * sendObject.on('confirmation', function(confirmationNumber, receipt){\n     *   ...\n     * });\n     * sendObject.on('error', function(error, receipt) {\n     *   ...\n     * });\n     * ```\n     *\n     * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.\n     */ get methods() {\n        return this._methods;\n    }\n    /**\n     * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.\n     *\n     * @returns - The new contract instance.\n     *\n     * ```ts\n     * const contract1 = new web3.eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});\n     *\n     * const contract2 = contract1.clone();\n     * contract2.options.address = '0xdAC17F958D2ee523a2206206994597C13D831ec7';\n     *\n     * (contract1.options.address !== contract2.options.address);\n     * > true\n     * ```\n     */ clone() {\n        let newContract;\n        if (this.options.address) {\n            newContract = new Contract([\n                ...this._jsonInterface,\n                ...this._errorsInterface\n            ], this.options.address, {\n                gas: this.options.gas,\n                gasPrice: this.options.gasPrice,\n                from: this.options.from,\n                input: this.options.input,\n                data: this.options.data,\n                provider: this.currentProvider,\n                syncWithContext: this.syncWithContext,\n                dataInputFill: this.config.contractDataInputFill\n            }, this.getContextObject());\n        } else {\n            newContract = new Contract([\n                ...this._jsonInterface,\n                ...this._errorsInterface\n            ], {\n                gas: this.options.gas,\n                gasPrice: this.options.gasPrice,\n                from: this.options.from,\n                input: this.options.input,\n                data: this.options.data,\n                provider: this.currentProvider,\n                syncWithContext: this.syncWithContext,\n                dataInputFill: this.config.contractDataInputFill\n            }, this.getContextObject());\n        }\n        if (this.context) newContract.subscribeToContextEvents(this.context);\n        return newContract;\n    }\n    /**\n     * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.\n     *\n     * ```ts\n     * myContract.deploy({\n     *   input: '0x12345...', // data keyword can be used, too.\n     *   arguments: [123, 'My String']\n     * })\n     * .send({\n     *   from: '0x1234567890123456789012345678901234567891',\n     *   gas: 1500000,\n     *   gasPrice: '30000000000000'\n     * }, function(error, transactionHash){ ... })\n     * .on('error', function(error){ ... })\n     * .on('transactionHash', function(transactionHash){ ... })\n     * .on('receipt', function(receipt){\n     *  console.log(receipt.contractAddress) // contains the new contract address\n     * })\n     * .on('confirmation', function(confirmationNumber, receipt){ ... })\n     * .then(function(newContractInstance){\n     *   console.log(newContractInstance.options.address) // instance with the new contract address\n     * });\n     *\n     *\n     * // When the data is already set as an option to the contract itself\n     * myContract.options.data = '0x12345...';\n     *\n     * myContract.deploy({\n     *   arguments: [123, 'My String']\n     * })\n     * .send({\n     *   from: '0x1234567890123456789012345678901234567891',\n     *   gas: 1500000,\n     *   gasPrice: '30000000000000'\n     * })\n     * .then(function(newContractInstance){\n     *   console.log(newContractInstance.options.address) // instance with the new contract address\n     * });\n     *\n     *\n     * // Simply encoding\n     * myContract.deploy({\n     *   input: '0x12345...',\n     *   arguments: [123, 'My String']\n     * })\n     * .encodeABI();\n     * > '0x12345...0000012345678765432'\n     *\n     *\n     * // decoding\n     * myContract.deploy({\n     *   input: '0x12345...',\n     *   // arguments: [123, 'My Greeting'] if you just need to decode the data, you can skip the arguments\n     * })\n     * .decodeData('0x12345...0000012345678765432');\n     * > {\n     *      __method__: 'constructor',\n     *      __length__: 2,\n     *      '0': '123',\n     *      _id: '123',\n     *      '1': 'My Greeting',\n     *      _greeting: 'My Greeting',\n     *   }\n     *\n     *\n     * // Gas estimation\n     * myContract.deploy({\n     *   input: '0x12345...',\n     *   arguments: [123, 'My String']\n     * })\n     * .estimateGas(function(err, gas){\n     *   console.log(gas);\n     * });\n     * ```\n     *\n     * @returns - The transaction object\n     */ deploy(deployOptions) {\n        var _a, _b, _c;\n        let abi = this._jsonInterface.find((j)=>j.type === \"constructor\");\n        if (!abi) {\n            abi = {\n                type: \"constructor\",\n                stateMutability: \"\"\n            };\n        }\n        const _input = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n            format: \"bytes\"\n        }, (_a = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.input) !== null && _a !== void 0 ? _a : this.options.input, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT);\n        const _data = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n            format: \"bytes\"\n        }, (_b = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.data) !== null && _b !== void 0 ? _b : this.options.data, web3_types__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_RETURN_FORMAT);\n        if ((!_input || _input.trim() === \"0x\") && (!_data || _data.trim() === \"0x\")) {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(\"contract creation without any data provided.\");\n        }\n        const args = (_c = deployOptions === null || deployOptions === void 0 ? void 0 : deployOptions.arguments) !== null && _c !== void 0 ? _c : [];\n        const contractOptions = Object.assign(Object.assign({}, this.options), {\n            input: _input,\n            data: _data\n        });\n        const deployData = _input !== null && _input !== void 0 ? _input : _data;\n        return {\n            arguments: args,\n            send: (options)=>{\n                const modifiedOptions = Object.assign({}, options);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return this._contractMethodDeploySend(abi, args, modifiedOptions, contractOptions);\n            },\n            estimateGas: (options, returnFormat = this.defaultReturnFormat)=>__awaiter(this, void 0, void 0, function*() {\n                    const modifiedOptions = Object.assign({}, options);\n                    return this._contractMethodEstimateGas({\n                        abi: abi,\n                        params: args,\n                        returnFormat,\n                        options: modifiedOptions,\n                        contractOptions\n                    });\n                }),\n            encodeABI: ()=>(0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeMethodABI)(abi, args, (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n                    format: \"bytes\"\n                }, deployData, this.defaultReturnFormat)),\n            decodeData: (data)=>Object.assign(Object.assign({}, (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.decodeMethodParams)(abi, data.replace(deployData, \"\"), false)), {\n                    __method__: abi.type\n                })\n        };\n    }\n    getPastEvents(param1, param2, param3) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const eventName = typeof param1 === \"string\" ? param1 : web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS;\n            const options = // eslint-disable-next-line no-nested-ternary\n            typeof param1 !== \"string\" && !(0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param1) ? param1 : !(0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param2) ? param2 : {};\n            // eslint-disable-next-line no-nested-ternary\n            const returnFormat = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param1) ? param1 : (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.isDataFormat)(param2) ? param2 : param3 !== null && param3 !== void 0 ? param3 : this.defaultReturnFormat;\n            const abi = eventName === \"allEvents\" || eventName === web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS ? web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS_ABI : this._jsonInterface.find((j)=>\"name\" in j && j.name === eventName);\n            if (!abi) {\n                throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(`Event ${eventName} not found.`);\n            }\n            const { fromBlock, toBlock, topics, address } = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeEventABI)(this.options, abi, options !== null && options !== void 0 ? options : {});\n            const logs = yield (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.getLogs)(this, {\n                fromBlock,\n                toBlock,\n                topics,\n                address\n            }, returnFormat);\n            const decodedLogs = logs ? logs.map((log)=>typeof log === \"string\" ? log : (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.decodeEventABI)(abi, log, this._jsonInterface, returnFormat)) : [];\n            const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};\n            const filterKeys = Object.keys(filter);\n            if (filterKeys.length > 0) {\n                return decodedLogs.filter((log)=>{\n                    if (typeof log === \"string\") return true;\n                    return filterKeys.every((key)=>{\n                        var _a;\n                        if (Array.isArray(filter[key])) {\n                            return filter[key].some((v)=>String(log.returnValues[key]).toUpperCase() === String(v).toUpperCase());\n                        }\n                        const inputAbi = (_a = abi.inputs) === null || _a === void 0 ? void 0 : _a.filter((input)=>input.name === key)[0];\n                        if ((inputAbi === null || inputAbi === void 0 ? void 0 : inputAbi.indexed) && inputAbi.type === \"string\") {\n                            const hashedIndexedString = (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.keccak256)(filter[key]);\n                            if (hashedIndexedString === String(log.returnValues[key])) return true;\n                        }\n                        return String(log.returnValues[key]).toUpperCase() === String(filter[key]).toUpperCase();\n                    });\n                });\n            }\n            return decodedLogs;\n        });\n    }\n    _parseAndSetAddress(value, returnFormat = this.defaultReturnFormat) {\n        this._address = value ? (0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.toChecksumAddress)((0,web3_utils__WEBPACK_IMPORTED_MODULE_5__.format)({\n            format: \"address\"\n        }, value, returnFormat)) : value;\n    }\n    decodeMethodData(data) {\n        const methodSignature = data.slice(0, 10);\n        const functionsAbis = this._jsonInterface.filter((j)=>j.type !== \"error\");\n        const abi = functionsAbis.find((a)=>methodSignature === (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.encodeFunctionSignature)((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.jsonInterfaceMethodToString)(a)));\n        if (!abi) {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(`The ABI for the provided method signature ${methodSignature} was not found.`);\n        }\n        return Object.assign(Object.assign({}, (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.decodeMethodParams)(abi, data)), {\n            __method__: (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.jsonInterfaceMethodToString)(abi)\n        });\n    }\n    _parseAndSetJsonInterface(abis, returnFormat = this.defaultReturnFormat) {\n        var _a, _b, _c, _d, _e;\n        this._functions = {};\n        this._methods = {};\n        this._events = {};\n        let result = [];\n        const functionsAbi = abis.filter((abi)=>abi.type !== \"error\");\n        const errorsAbi = abis.filter((abi)=>(0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.isAbiErrorFragment)(abi));\n        for (const a of functionsAbi){\n            const abi = Object.assign(Object.assign({}, a), {\n                signature: \"\"\n            });\n            if ((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.isAbiFunctionFragment)(abi)) {\n                const methodName = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.jsonInterfaceMethodToString)(abi);\n                const methodSignature = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.encodeFunctionSignature)(methodName);\n                abi.methodNameWithInputs = methodName;\n                abi.signature = methodSignature;\n                // make constant and payable backwards compatible\n                abi.constant = (_b = (_a = abi.stateMutability === \"view\") !== null && _a !== void 0 ? _a : abi.stateMutability === \"pure\") !== null && _b !== void 0 ? _b : abi.constant;\n                abi.payable = (_c = abi.stateMutability === \"payable\") !== null && _c !== void 0 ? _c : abi.payable;\n                this._overloadedMethodAbis.set(abi.name, [\n                    ...(_d = this._overloadedMethodAbis.get(abi.name)) !== null && _d !== void 0 ? _d : [],\n                    abi\n                ]);\n                const abiFragment = (_e = this._overloadedMethodAbis.get(abi.name)) !== null && _e !== void 0 ? _e : [];\n                const contractMethod = this._createContractMethod(abiFragment, errorsAbi);\n                const exactContractMethod = this._createContractMethod(abiFragment, errorsAbi, true);\n                this._functions[methodName] = {\n                    signature: methodSignature,\n                    method: exactContractMethod\n                };\n                // We don't know a particular type of the Abi method so can't type check\n                this._methods[abi.name] = contractMethod;\n                // We don't know a particular type of the Abi method so can't type check\n                this._methods[methodName] = exactContractMethod;\n                // We don't know a particular type of the Abi method so can't type check\n                this._methods[methodSignature] = exactContractMethod;\n            } else if ((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.isAbiEventFragment)(abi)) {\n                const eventName = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.jsonInterfaceMethodToString)(abi);\n                const eventSignature = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.encodeEventSignature)(eventName);\n                const event = this._createContractEvent(abi, returnFormat);\n                abi.signature = eventSignature;\n                if (!(eventName in this._events) || abi.name === \"bound\") {\n                    // It's a private type and we don't want to expose it and no need to check\n                    this._events[eventName] = event;\n                }\n                // It's a private type and we don't want to expose it and no need to check\n                this._events[abi.name] = event;\n                // It's a private type and we don't want to expose it and no need to check\n                this._events[eventSignature] = event;\n            }\n            result = [\n                ...result,\n                abi\n            ];\n        }\n        this._events.allEvents = this._createContractEvent(web3_eth__WEBPACK_IMPORTED_MODULE_2__.ALL_EVENTS_ABI, returnFormat);\n        this._jsonInterface = [\n            ...result\n        ];\n        this._errorsInterface = errorsAbi;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    _getAbiParams(abi, params) {\n        var _a;\n        try {\n            return web3_validator__WEBPACK_IMPORTED_MODULE_6__.utils.transformJsonDataToAbiFormat((_a = abi.inputs) !== null && _a !== void 0 ? _a : [], params);\n        } catch (error) {\n            throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(`Invalid parameters for method ${abi.name}: ${error.message}`);\n        }\n    }\n    _createContractMethod(abiArr, errorsAbis, exact = false) {\n        const abi = abiArr[abiArr.length - 1];\n        return (...params)=>{\n            var _a, _b, _c;\n            let abiParams;\n            const abis = (_b = exact ? (_a = this._overloadedMethodAbis.get(abi.name)) === null || _a === void 0 ? void 0 : _a.filter((_abi)=>_abi.signature === abi.signature) : this._overloadedMethodAbis.get(abi.name)) !== null && _b !== void 0 ? _b : [];\n            let methodAbi = abis[0];\n            const internalErrorsAbis = errorsAbis;\n            const arrayOfAbis = abis.filter((_abi)=>{\n                var _a;\n                return ((_a = _abi.inputs) !== null && _a !== void 0 ? _a : []).length === params.length;\n            });\n            if (abis.length === 1 || arrayOfAbis.length === 0) {\n                abiParams = this._getAbiParams(methodAbi, params);\n                web3_validator__WEBPACK_IMPORTED_MODULE_6__.validator.validate((_c = abi.inputs) !== null && _c !== void 0 ? _c : [], abiParams);\n            } else {\n                const errors = [];\n                // all the methods that have is valid for the given inputs\n                const applicableMethodAbi = [];\n                for (const _abi of arrayOfAbis){\n                    try {\n                        abiParams = this._getAbiParams(_abi, params);\n                        web3_validator__WEBPACK_IMPORTED_MODULE_6__.validator.validate(_abi.inputs, abiParams);\n                        applicableMethodAbi.push(_abi);\n                    } catch (e) {\n                        errors.push(e);\n                    }\n                }\n                if (applicableMethodAbi.length === 1) {\n                    [methodAbi] = applicableMethodAbi; // take the first item that is the only item in the array\n                } else if (applicableMethodAbi.length > 1) {\n                    [methodAbi] = applicableMethodAbi; // take the first item in the array\n                    console.warn(`Multiple methods found that is compatible with the given inputs.\\n\\tFound ${applicableMethodAbi.length} compatible methods: ${JSON.stringify(applicableMethodAbi.map((m)=>`${m.methodNameWithInputs} (signature: ${m.signature})`))} \\n\\tThe first one will be used: ${methodAbi.methodNameWithInputs}`);\n                // TODO: 5.x Should throw a new error with the list of methods found.\n                // Related issue: https://github.com/web3/web3.js/issues/6923\n                // This is in order to provide an error message when there is more than one method found that fits the inputs.\n                // To do that, replace the pervious line of code with something like the following line:\n                // throw new Web3ValidatorError({ message: 'Multiple methods found',  ... list of applicable methods }));\n                }\n                if (errors.length === arrayOfAbis.length) {\n                    throw new web3_validator__WEBPACK_IMPORTED_MODULE_6__.Web3ValidatorError(errors);\n                }\n            }\n            const methods = {\n                arguments: abiParams,\n                call: (options, block)=>__awaiter(this, void 0, void 0, function*() {\n                        return this._contractMethodCall(methodAbi, abiParams, internalErrorsAbis, options, block);\n                    }),\n                send: (options)=>this._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),\n                estimateGas: (options, returnFormat = this.defaultReturnFormat)=>__awaiter(this, void 0, void 0, function*() {\n                        return this._contractMethodEstimateGas({\n                            abi: methodAbi,\n                            params: abiParams,\n                            returnFormat,\n                            options\n                        });\n                    }),\n                encodeABI: ()=>(0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeMethodABI)(methodAbi, abiParams),\n                decodeData: (data)=>(0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.decodeMethodParams)(methodAbi, data),\n                createAccessList: (options, block)=>__awaiter(this, void 0, void 0, function*() {\n                        return this._contractMethodCreateAccessList(methodAbi, abiParams, internalErrorsAbis, options, block);\n                    })\n            };\n            if (methodAbi.stateMutability === \"payable\") {\n                return methods;\n            }\n            return methods;\n        };\n    }\n    _contractMethodCall(abi, params, errorsAbi, options, block) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getEthTxCallParams)({\n                abi,\n                params,\n                options: Object.assign(Object.assign({}, options), {\n                    dataInputFill: this.config.contractDataInputFill\n                }),\n                contractOptions: Object.assign(Object.assign({}, this.options), {\n                    from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n                })\n            });\n            try {\n                const result = yield (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.call)(this, tx, block, this.defaultReturnFormat);\n                return (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.decodeMethodReturn)(abi, result);\n            } catch (error) {\n                if (error instanceof web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractExecutionError) {\n                    // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n                    (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.decodeContractErrorData)(errorsAbi, error.cause);\n                }\n                throw error;\n            }\n        });\n    }\n    _contractMethodCreateAccessList(abi, params, errorsAbi, options, block) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getCreateAccessListParams)({\n                abi,\n                params,\n                options: Object.assign(Object.assign({}, options), {\n                    dataInputFill: this.config.contractDataInputFill\n                }),\n                contractOptions: Object.assign(Object.assign({}, this.options), {\n                    from: (_a = this.options.from) !== null && _a !== void 0 ? _a : this.config.defaultAccount\n                })\n            });\n            try {\n                return (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.createAccessList)(this, tx, block, this.defaultReturnFormat);\n            } catch (error) {\n                if (error instanceof web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractExecutionError) {\n                    // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n                    (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.decodeContractErrorData)(errorsAbi, error.cause);\n                }\n                throw error;\n            }\n        });\n    }\n    _contractMethodSend(abi, params, errorsAbi, options, contractOptions) {\n        var _a, _b;\n        let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n        modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n            input: undefined,\n            from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n        });\n        const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getSendTxParams)({\n            abi,\n            params,\n            options: Object.assign(Object.assign({}, options), {\n                dataInputFill: this.config.contractDataInputFill\n            }),\n            contractOptions: modifiedContractOptions\n        });\n        const transactionToSend = (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.sendTransaction)(this, tx, this.defaultReturnFormat, {\n            // TODO Should make this configurable by the user\n            checkRevertBeforeSending: false,\n            contractAbi: this._jsonInterface\n        });\n        // eslint-disable-next-line no-void\n        void transactionToSend.on(\"error\", (error)=>{\n            if (error instanceof web3_errors__WEBPACK_IMPORTED_MODULE_1__.ContractExecutionError) {\n                // this will parse the error data by trying to decode the ABI error inputs according to EIP-838\n                (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_3__.decodeContractErrorData)(errorsAbi, error.cause);\n            }\n        });\n        return transactionToSend;\n    }\n    _contractMethodDeploySend(abi, params, options, contractOptions) {\n        var _a, _b;\n        let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;\n        modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), {\n            from: (_b = (_a = modifiedContractOptions.from) !== null && _a !== void 0 ? _a : this.defaultAccount) !== null && _b !== void 0 ? _b : undefined\n        });\n        const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getSendTxParams)({\n            abi,\n            params,\n            options: Object.assign(Object.assign({}, options), {\n                dataInputFill: this.contractDataInputFill\n            }),\n            contractOptions: modifiedContractOptions\n        });\n        return (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.sendTransaction)(this, tx, this.defaultReturnFormat, {\n            transactionResolver: (receipt)=>{\n                if (receipt.status === BigInt(0)) {\n                    throw new web3_errors__WEBPACK_IMPORTED_MODULE_1__.Web3ContractError(\"code couldn't be stored\", receipt);\n                }\n                const newContract = this.clone();\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                newContract.options.address = receipt.contractAddress;\n                return newContract;\n            },\n            contractAbi: this._jsonInterface,\n            // TODO Should make this configurable by the user\n            checkRevertBeforeSending: false\n        });\n    }\n    _contractMethodEstimateGas({ abi, params, returnFormat, options, contractOptions }) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const tx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_9__.getEstimateGasParams)({\n                abi,\n                params,\n                options: Object.assign(Object.assign({}, options), {\n                    dataInputFill: this.config.contractDataInputFill\n                }),\n                contractOptions: contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options\n            });\n            return (0,web3_eth__WEBPACK_IMPORTED_MODULE_2__.estimateGas)(this, tx, web3_types__WEBPACK_IMPORTED_MODULE_4__.BlockTags.LATEST, returnFormat !== null && returnFormat !== void 0 ? returnFormat : this.defaultReturnFormat);\n        });\n    }\n    // eslint-disable-next-line class-methods-use-this\n    _createContractEvent(abi, returnFormat = this.defaultReturnFormat) {\n        return (...params)=>{\n            var _a;\n            const { topics, fromBlock } = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_7__.encodeEventABI)(this.options, abi, params[0]);\n            const sub = new _log_subscription_js__WEBPACK_IMPORTED_MODULE_8__.LogsSubscription({\n                address: this.options.address,\n                topics,\n                abi,\n                jsonInterface: this._jsonInterface\n            }, {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                subscriptionManager: this.subscriptionManager,\n                returnFormat\n            });\n            if (!(0,web3_validator__WEBPACK_IMPORTED_MODULE_6__.isNullish)(fromBlock)) {\n                // emit past events when fromBlock is defined\n                this.getPastEvents(abi.name, {\n                    fromBlock,\n                    topics\n                }, returnFormat).then((logs)=>{\n                    if (logs) {\n                        logs.forEach((log)=>sub.emit(\"data\", log));\n                    }\n                }).catch((error)=>{\n                    sub.emit(\"error\", new web3_errors__WEBPACK_IMPORTED_MODULE_1__.SubscriptionError(\"Failed to get past events.\", error));\n                });\n            }\n            (_a = this.subscriptionManager) === null || _a === void 0 ? void 0 : _a.addSubscription(sub).catch((error)=>{\n                sub.emit(\"error\", new web3_errors__WEBPACK_IMPORTED_MODULE_1__.SubscriptionError(\"Failed to subscribe.\", error));\n            });\n            return sub;\n        };\n    }\n    subscribeToContextEvents(context) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const contractThis = this;\n        this.context = context;\n        if (contractThis.syncWithContext) {\n            context.on(web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3ConfigEvent.CONFIG_CHANGE, (event)=>{\n                contractThis.setConfig({\n                    [event.name]: event.newValue\n                });\n            });\n        }\n    }\n} //# sourceMappingURL=contract.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js":
/*!************************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/encoding.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeEventABI: () => (/* reexport safe */ web3_eth__WEBPACK_IMPORTED_MODULE_3__.decodeEventABI),\n/* harmony export */   decodeMethodParams: () => (/* binding */ decodeMethodParams),\n/* harmony export */   decodeMethodReturn: () => (/* binding */ decodeMethodReturn),\n/* harmony export */   encodeEventABI: () => (/* binding */ encodeEventABI),\n/* harmony export */   encodeMethodABI: () => (/* binding */ encodeMethodABI)\n/* harmony export */ });\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var web3_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-types */ \"(ssr)/./node_modules/web3-types/lib/esm/index.js\");\n/* harmony import */ var web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3-eth-abi */ \"(ssr)/./node_modules/web3-eth-abi/lib/esm/index.js\");\n/* harmony import */ var web3_eth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! web3-eth */ \"(ssr)/./node_modules/web3-eth/lib/esm/index.js\");\n/* harmony import */ var web3_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! web3-errors */ \"(ssr)/./node_modules/web3-errors/lib/esm/index.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\n\n\n\nconst encodeEventABI = ({ address }, event, options)=>{\n    var _a, _b;\n    const topics = options === null || options === void 0 ? void 0 : options.topics;\n    const filter = (_a = options === null || options === void 0 ? void 0 : options.filter) !== null && _a !== void 0 ? _a : {};\n    const opts = {};\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.isNullish)(options === null || options === void 0 ? void 0 : options.fromBlock)) {\n        opts.fromBlock = (0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.format)(web3_eth__WEBPACK_IMPORTED_MODULE_3__.blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.fromBlock, {\n            number: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_NUMBER.HEX,\n            bytes: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_BYTES.HEX\n        });\n    }\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.isNullish)(options === null || options === void 0 ? void 0 : options.toBlock)) {\n        opts.toBlock = (0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.format)(web3_eth__WEBPACK_IMPORTED_MODULE_3__.blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.toBlock, {\n            number: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_NUMBER.HEX,\n            bytes: web3_types__WEBPACK_IMPORTED_MODULE_1__.FMT_BYTES.HEX\n        });\n    }\n    if (topics && Array.isArray(topics)) {\n        opts.topics = [\n            ...topics\n        ];\n    } else {\n        opts.topics = [];\n        // add event signature\n        if (event && !event.anonymous && ![\n            web3_eth__WEBPACK_IMPORTED_MODULE_3__.ALL_EVENTS,\n            \"allEvents\"\n        ].includes(event.name)) {\n            opts.topics.push((_b = event.signature) !== null && _b !== void 0 ? _b : (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeEventSignature)((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.jsonInterfaceMethodToString)(event)));\n        }\n        // add event topics (indexed arguments)\n        if (![\n            web3_eth__WEBPACK_IMPORTED_MODULE_3__.ALL_EVENTS,\n            \"allEvents\"\n        ].includes(event.name) && event.inputs) {\n            for (const input of event.inputs){\n                if (!input.indexed) {\n                    continue;\n                }\n                const value = filter[input.name];\n                if (!value) {\n                    // eslint-disable-next-line no-null/no-null\n                    opts.topics.push(null);\n                    continue;\n                }\n                // TODO: https://github.com/ethereum/web3.js/issues/344\n                // TODO: deal properly with components\n                if (Array.isArray(value)) {\n                    opts.topics.push(value.map((v)=>(0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeParameter)(input.type, v)));\n                } else if (input.type === \"string\") {\n                    opts.topics.push((0,web3_utils__WEBPACK_IMPORTED_MODULE_0__.keccak256)(value));\n                } else {\n                    opts.topics.push((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeParameter)(input.type, value));\n                }\n            }\n        }\n    }\n    if (!opts.topics.length) delete opts.topics;\n    if (address) {\n        opts.address = address.toLowerCase();\n    }\n    return opts;\n};\nconst encodeMethodABI = (abi, args, deployData)=>{\n    const inputLength = Array.isArray(abi.inputs) ? abi.inputs.length : 0;\n    if (abi.inputs && inputLength !== args.length) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_4__.Web3ContractError(`The number of arguments is not matching the methods required number. You need to pass ${inputLength} arguments.`);\n    }\n    let params;\n    if (abi.inputs) {\n        params = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeParameters)(Array.isArray(abi.inputs) ? abi.inputs : [], args).replace(\"0x\", \"\");\n    } else {\n        params = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.inferTypesAndEncodeParameters)(args).replace(\"0x\", \"\");\n    }\n    if ((0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.isAbiConstructorFragment)(abi)) {\n        if (!deployData) throw new web3_errors__WEBPACK_IMPORTED_MODULE_4__.Web3ContractError(\"The contract has no contract data option set. This is necessary to append the constructor parameters.\");\n        if (!deployData.startsWith(\"0x\")) {\n            return `0x${deployData}${params}`;\n        }\n        return `${deployData}${params}`;\n    }\n    return `${(0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.encodeFunctionSignature)(abi)}${params}`;\n};\nconst decodeMethodParams = (abi, data, methodSignatureProvided = true)=>{\n    const value = methodSignatureProvided && data && data.length >= 10 && data.startsWith(\"0x\") ? data.slice(10) : data;\n    if (!abi.inputs) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_4__.Web3ContractError(\"No inputs found in the ABI\");\n    }\n    const result = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.decodeParameters)([\n        ...abi.inputs\n    ], value);\n    return result;\n};\nconst decodeMethodReturn = (abi, returnValues)=>{\n    // If it was constructor then we need to return contract address\n    if (abi.type === \"constructor\") {\n        return returnValues;\n    }\n    if (!returnValues) {\n        // Using \"null\" value intentionally to match legacy behavior\n        // eslint-disable-next-line no-null/no-null\n        return null;\n    }\n    const value = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;\n    if (!abi.outputs) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n    }\n    const result = (0,web3_eth_abi__WEBPACK_IMPORTED_MODULE_2__.decodeParameters)([\n        ...abi.outputs\n    ], value);\n    if (result.__length__ === 1) {\n        return result[0];\n    }\n    return result;\n}; //# sourceMappingURL=encoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Contract: () => (/* reexport safe */ _contract_js__WEBPACK_IMPORTED_MODULE_0__.Contract),\n/* harmony export */   LogsSubscription: () => (/* reexport safe */ _log_subscription_js__WEBPACK_IMPORTED_MODULE_2__.LogsSubscription),\n/* harmony export */   decodeEventABI: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeEventABI),\n/* harmony export */   decodeMethodParams: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeMethodParams),\n/* harmony export */   decodeMethodReturn: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.decodeMethodReturn),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   encodeEventABI: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.encodeEventABI),\n/* harmony export */   encodeMethodABI: () => (/* reexport safe */ _encoding_js__WEBPACK_IMPORTED_MODULE_1__.encodeMethodABI),\n/* harmony export */   getCreateAccessListParams: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.getCreateAccessListParams),\n/* harmony export */   getEstimateGasParams: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.getEstimateGasParams),\n/* harmony export */   getEthTxCallParams: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.getEthTxCallParams),\n/* harmony export */   getSendTxParams: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.getSendTxParams),\n/* harmony export */   isWeb3ContractContext: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_4__.isWeb3ContractContext)\n/* harmony export */ });\n/* harmony import */ var _contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contract.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/contract.js\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encoding.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\");\n/* harmony import */ var _log_subscription_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./log_subscription.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/types.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ /**\n * The `web3.eth.Contract` object makes it easy to interact with smart contracts on the Ethereum blockchain.\n * When you create a new contract object you give it the JSON interface of the respective smart contract and\n * web3 will auto convert all calls into low level ABI calls over RPC for you.\n * This allows you to interact with smart contracts as if they were JavaScript objects.\n *\n * To use it standalone:\n *\n * ```ts\n * const Contract = require('web3-eth-contract');\n *\n * // set provider for all later instances to use\n * Contract.setProvider('ws://localhost:8546');\n *\n * const contract = new Contract(jsonInterface, address);\n *\n * contract.methods.somFunc().send({from: ....})\n * .on('receipt', function(){\n *    ...\n * });\n * ```\n */ /**\n * This comment _supports3_ [Markdown](https://marked.js.org/)\n */ \n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_contract_js__WEBPACK_IMPORTED_MODULE_0__.Contract); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsR0FDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBcUJDLEdBQ0Q7O0NBRUMsR0FDd0M7QUFDWDtBQUNBO0FBQ1E7QUFDWDtBQUNBO0FBQzNCLGlFQUFlQSxrREFBUUEsRUFBQyxDQUN4QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS9pbmRleC5qcz8zNDY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBUaGUgYHdlYjMuZXRoLkNvbnRyYWN0YCBvYmplY3QgbWFrZXMgaXQgZWFzeSB0byBpbnRlcmFjdCB3aXRoIHNtYXJ0IGNvbnRyYWN0cyBvbiB0aGUgRXRoZXJldW0gYmxvY2tjaGFpbi5cbiAqIFdoZW4geW91IGNyZWF0ZSBhIG5ldyBjb250cmFjdCBvYmplY3QgeW91IGdpdmUgaXQgdGhlIEpTT04gaW50ZXJmYWNlIG9mIHRoZSByZXNwZWN0aXZlIHNtYXJ0IGNvbnRyYWN0IGFuZFxuICogd2ViMyB3aWxsIGF1dG8gY29udmVydCBhbGwgY2FsbHMgaW50byBsb3cgbGV2ZWwgQUJJIGNhbGxzIG92ZXIgUlBDIGZvciB5b3UuXG4gKiBUaGlzIGFsbG93cyB5b3UgdG8gaW50ZXJhY3Qgd2l0aCBzbWFydCBjb250cmFjdHMgYXMgaWYgdGhleSB3ZXJlIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqXG4gKiBUbyB1c2UgaXQgc3RhbmRhbG9uZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgQ29udHJhY3QgPSByZXF1aXJlKCd3ZWIzLWV0aC1jb250cmFjdCcpO1xuICpcbiAqIC8vIHNldCBwcm92aWRlciBmb3IgYWxsIGxhdGVyIGluc3RhbmNlcyB0byB1c2VcbiAqIENvbnRyYWN0LnNldFByb3ZpZGVyKCd3czovL2xvY2FsaG9zdDo4NTQ2Jyk7XG4gKlxuICogY29uc3QgY29udHJhY3QgPSBuZXcgQ29udHJhY3QoanNvbkludGVyZmFjZSwgYWRkcmVzcyk7XG4gKlxuICogY29udHJhY3QubWV0aG9kcy5zb21GdW5jKCkuc2VuZCh7ZnJvbTogLi4uLn0pXG4gKiAub24oJ3JlY2VpcHQnLCBmdW5jdGlvbigpe1xuICogICAgLi4uXG4gKiB9KTtcbiAqIGBgYFxuICovXG4vKipcbiAqIFRoaXMgY29tbWVudCBfc3VwcG9ydHMzXyBbTWFya2Rvd25dKGh0dHBzOi8vbWFya2VkLmpzLm9yZy8pXG4gKi9cbmltcG9ydCB7IENvbnRyYWN0IH0gZnJvbSAnLi9jb250cmFjdC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2VuY29kaW5nLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vY29udHJhY3QuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9sb2dfc3Vic2NyaXB0aW9uLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBDb250cmFjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJDb250cmFjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js":
/*!********************************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/log_subscription.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogsSubscription: () => (/* binding */ LogsSubscription)\n/* harmony export */ });\n/* harmony import */ var web3_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-core */ \"(ssr)/./node_modules/web3-core/lib/esm/index.js\");\n/* harmony import */ var web3_eth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-eth */ \"(ssr)/./node_modules/web3-eth/lib/esm/index.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n/**\n * LogSubscription to be used to subscribe to events logs.\n *\n * Following events are supported and can be accessed with either {@link LogsSubscription.once} or ${@link LogsSubscription.on} methods.\n *\n * - **connected**: Emitted when the subscription is connected.\n * - **data**: Fires on each incoming event with the event object as argument.\n * - **changed**: Fires on each event which was removed from the blockchain. The event will have the additional property `removed: true`.\n * - **error**: Fires on each error.\n *\n * ```ts\n * const subscription = await myContract.events.MyEvent({\n *   filter: {myIndexedParam: [20,23], myOtherIndexedParam: '0x123456789...'}, // Using an array means OR: e.g. 20 or 23\n *   fromBlock: 0\n * });\n *\n * subscription.on(\"connected\", function(subscriptionId){\n *   console.log(subscriptionId);\n * });\n *\n * subscription.on('data', function(event){\n *   console.log(event); // same results as the optional callback above\n * });\n *\n * subscription.on('changed', function(event){\n *   // remove event from local database\n * })\n *\n * subscription.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\n *   ...\n * });\n *\n * // event output example\n * > {\n *   returnValues: {\n *       myIndexedParam: 20,\n *       myOtherIndexedParam: '0x123456789...',\n *       myNonIndexParam: 'My String'\n *   },\n *   raw: {\n *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n *   },\n *   event: 'MyEvent',\n *   signature: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n *   logIndex: 0,\n *   transactionIndex: 0,\n *   transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n *   blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n *   blockNumber: 1234,\n *   address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n * }\n * ```\n */ class LogsSubscription extends web3_core__WEBPACK_IMPORTED_MODULE_0__.Web3Subscription {\n    constructor(args, options){\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        super(args, options);\n        this.address = args.address;\n        this.topics = args.topics;\n        this.abi = args.abi;\n        this.jsonInterface = args.jsonInterface;\n    }\n    _buildSubscriptionParams() {\n        return [\n            \"logs\",\n            {\n                address: this.address,\n                topics: this.topics\n            }\n        ];\n    }\n    formatSubscriptionResult(data) {\n        return (0,web3_eth__WEBPACK_IMPORTED_MODULE_1__.decodeEventABI)(this.abi, data, this.jsonInterface, super.returnFormat);\n    }\n} //# sourceMappingURL=log_subscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS9sb2dfc3Vic2NyaXB0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxHQUM2QztBQUNIO0FBQzFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFEQyxHQUNNLE1BQU1FLHlCQUF5QkYsdURBQWdCQTtJQUNsREcsWUFBWUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDdkIsaUVBQWlFO1FBQ2pFLEtBQUssQ0FBQ0QsTUFBTUM7UUFDWixJQUFJLENBQUNDLE9BQU8sR0FBR0YsS0FBS0UsT0FBTztRQUMzQixJQUFJLENBQUNDLE1BQU0sR0FBR0gsS0FBS0csTUFBTTtRQUN6QixJQUFJLENBQUNDLEdBQUcsR0FBR0osS0FBS0ksR0FBRztRQUNuQixJQUFJLENBQUNDLGFBQWEsR0FBR0wsS0FBS0ssYUFBYTtJQUMzQztJQUNBQywyQkFBMkI7UUFDdkIsT0FBTztZQUFDO1lBQVE7Z0JBQUVKLFNBQVMsSUFBSSxDQUFDQSxPQUFPO2dCQUFFQyxRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUFDO1NBQUU7SUFDbkU7SUFDQUkseUJBQXlCQyxJQUFJLEVBQUU7UUFDM0IsT0FBT1gsd0RBQWNBLENBQUMsSUFBSSxDQUFDTyxHQUFHLEVBQUVJLE1BQU0sSUFBSSxDQUFDSCxhQUFhLEVBQUUsS0FBSyxDQUFDSTtJQUNwRTtBQUNKLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaXB0LXczLy4vbm9kZV9tb2R1bGVzL3dlYjMtZXRoLWNvbnRyYWN0L2xpYi9lc20vbG9nX3N1YnNjcmlwdGlvbi5qcz9jYjY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuaW1wb3J0IHsgV2ViM1N1YnNjcmlwdGlvbiB9IGZyb20gJ3dlYjMtY29yZSc7XG5pbXBvcnQgeyBkZWNvZGVFdmVudEFCSSB9IGZyb20gJ3dlYjMtZXRoJztcbi8qKlxuICogTG9nU3Vic2NyaXB0aW9uIHRvIGJlIHVzZWQgdG8gc3Vic2NyaWJlIHRvIGV2ZW50cyBsb2dzLlxuICpcbiAqIEZvbGxvd2luZyBldmVudHMgYXJlIHN1cHBvcnRlZCBhbmQgY2FuIGJlIGFjY2Vzc2VkIHdpdGggZWl0aGVyIHtAbGluayBMb2dzU3Vic2NyaXB0aW9uLm9uY2V9IG9yICR7QGxpbmsgTG9nc1N1YnNjcmlwdGlvbi5vbn0gbWV0aG9kcy5cbiAqXG4gKiAtICoqY29ubmVjdGVkKio6IEVtaXR0ZWQgd2hlbiB0aGUgc3Vic2NyaXB0aW9uIGlzIGNvbm5lY3RlZC5cbiAqIC0gKipkYXRhKio6IEZpcmVzIG9uIGVhY2ggaW5jb21pbmcgZXZlbnQgd2l0aCB0aGUgZXZlbnQgb2JqZWN0IGFzIGFyZ3VtZW50LlxuICogLSAqKmNoYW5nZWQqKjogRmlyZXMgb24gZWFjaCBldmVudCB3aGljaCB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBibG9ja2NoYWluLiBUaGUgZXZlbnQgd2lsbCBoYXZlIHRoZSBhZGRpdGlvbmFsIHByb3BlcnR5IGByZW1vdmVkOiB0cnVlYC5cbiAqIC0gKiplcnJvcioqOiBGaXJlcyBvbiBlYWNoIGVycm9yLlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBzdWJzY3JpcHRpb24gPSBhd2FpdCBteUNvbnRyYWN0LmV2ZW50cy5NeUV2ZW50KHtcbiAqICAgZmlsdGVyOiB7bXlJbmRleGVkUGFyYW06IFsyMCwyM10sIG15T3RoZXJJbmRleGVkUGFyYW06ICcweDEyMzQ1Njc4OS4uLid9LCAvLyBVc2luZyBhbiBhcnJheSBtZWFucyBPUjogZS5nLiAyMCBvciAyM1xuICogICBmcm9tQmxvY2s6IDBcbiAqIH0pO1xuICpcbiAqIHN1YnNjcmlwdGlvbi5vbihcImNvbm5lY3RlZFwiLCBmdW5jdGlvbihzdWJzY3JpcHRpb25JZCl7XG4gKiAgIGNvbnNvbGUubG9nKHN1YnNjcmlwdGlvbklkKTtcbiAqIH0pO1xuICpcbiAqIHN1YnNjcmlwdGlvbi5vbignZGF0YScsIGZ1bmN0aW9uKGV2ZW50KXtcbiAqICAgY29uc29sZS5sb2coZXZlbnQpOyAvLyBzYW1lIHJlc3VsdHMgYXMgdGhlIG9wdGlvbmFsIGNhbGxiYWNrIGFib3ZlXG4gKiB9KTtcbiAqXG4gKiBzdWJzY3JpcHRpb24ub24oJ2NoYW5nZWQnLCBmdW5jdGlvbihldmVudCl7XG4gKiAgIC8vIHJlbW92ZSBldmVudCBmcm9tIGxvY2FsIGRhdGFiYXNlXG4gKiB9KVxuICpcbiAqIHN1YnNjcmlwdGlvbi5vbignZXJyb3InLCBmdW5jdGlvbihlcnJvciwgcmVjZWlwdCkgeyAvLyBJZiB0aGUgdHJhbnNhY3Rpb24gd2FzIHJlamVjdGVkIGJ5IHRoZSBuZXR3b3JrIHdpdGggYSByZWNlaXB0LCB0aGUgc2Vjb25kIHBhcmFtZXRlciB3aWxsIGJlIHRoZSByZWNlaXB0LlxuICogICAuLi5cbiAqIH0pO1xuICpcbiAqIC8vIGV2ZW50IG91dHB1dCBleGFtcGxlXG4gKiA+IHtcbiAqICAgcmV0dXJuVmFsdWVzOiB7XG4gKiAgICAgICBteUluZGV4ZWRQYXJhbTogMjAsXG4gKiAgICAgICBteU90aGVySW5kZXhlZFBhcmFtOiAnMHgxMjM0NTY3ODkuLi4nLFxuICogICAgICAgbXlOb25JbmRleFBhcmFtOiAnTXkgU3RyaW5nJ1xuICogICB9LFxuICogICByYXc6IHtcbiAqICAgICAgIGRhdGE6ICcweDdmOWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3OWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3YzJjMmViN2IxMWE5MTM4NScsXG4gKiAgICAgICB0b3BpY3M6IFsnMHhmZDQzYWRlMWMwOWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3YzJjMmViN2IxMWE5MWZmZGQ1N2E3YWY2NmFiNGVhZDcnLCAnMHg3ZjlmYWRlMWMwZDU3YTdhZjY2YWI0ZWFkNzlmYWRlMWMwZDU3YTdhZjY2YWI0ZWFkN2MyYzJlYjdiMTFhOTEzODUnXVxuICogICB9LFxuICogICBldmVudDogJ015RXZlbnQnLFxuICogICBzaWduYXR1cmU6ICcweGZkNDNhZGUxYzA5ZmFkZTFjMGQ1N2E3YWY2NmFiNGVhZDdjMmMyZWI3YjExYTkxZmZkZDU3YTdhZjY2YWI0ZWFkNycsXG4gKiAgIGxvZ0luZGV4OiAwLFxuICogICB0cmFuc2FjdGlvbkluZGV4OiAwLFxuICogICB0cmFuc2FjdGlvbkhhc2g6ICcweDdmOWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3OWZhZGUxYzBkNTdhN2FmNjZhYjRlYWQ3YzJjMmViN2IxMWE5MTM4NScsXG4gKiAgIGJsb2NrSGFzaDogJzB4ZmQ0M2FkZTFjMDlmYWRlMWMwZDU3YTdhZjY2YWI0ZWFkN2MyYzJlYjdiMTFhOTFmZmRkNTdhN2FmNjZhYjRlYWQ3JyxcbiAqICAgYmxvY2tOdW1iZXI6IDEyMzQsXG4gKiAgIGFkZHJlc3M6ICcweGRlMEIyOTU2NjlhOUZEOTNkNUYyOEQ5RWM4NUU0MGY0Y2I2OTdCQWUnXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIExvZ3NTdWJzY3JpcHRpb24gZXh0ZW5kcyBXZWIzU3Vic2NyaXB0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgIHN1cGVyKGFyZ3MsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhcmdzLmFkZHJlc3M7XG4gICAgICAgIHRoaXMudG9waWNzID0gYXJncy50b3BpY3M7XG4gICAgICAgIHRoaXMuYWJpID0gYXJncy5hYmk7XG4gICAgICAgIHRoaXMuanNvbkludGVyZmFjZSA9IGFyZ3MuanNvbkludGVyZmFjZTtcbiAgICB9XG4gICAgX2J1aWxkU3Vic2NyaXB0aW9uUGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gWydsb2dzJywgeyBhZGRyZXNzOiB0aGlzLmFkZHJlc3MsIHRvcGljczogdGhpcy50b3BpY3MgfV07XG4gICAgfVxuICAgIGZvcm1hdFN1YnNjcmlwdGlvblJlc3VsdChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVFdmVudEFCSSh0aGlzLmFiaSwgZGF0YSwgdGhpcy5qc29uSW50ZXJmYWNlLCBzdXBlci5yZXR1cm5Gb3JtYXQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ19zdWJzY3JpcHRpb24uanMubWFwIl0sIm5hbWVzIjpbIldlYjNTdWJzY3JpcHRpb24iLCJkZWNvZGVFdmVudEFCSSIsIkxvZ3NTdWJzY3JpcHRpb24iLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJvcHRpb25zIiwiYWRkcmVzcyIsInRvcGljcyIsImFiaSIsImpzb25JbnRlcmZhY2UiLCJfYnVpbGRTdWJzY3JpcHRpb25QYXJhbXMiLCJmb3JtYXRTdWJzY3JpcHRpb25SZXN1bHQiLCJkYXRhIiwicmV0dXJuRm9ybWF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/log_subscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/  //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztBQWVBLEdBQ1UsQ0FDVixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pcHQtdzMvLi9ub2RlX21vZHVsZXMvd2ViMy1ldGgtY29udHJhY3QvbGliL2VzbS90eXBlcy5qcz9hZjMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG53ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbml0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxudGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbihhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbndlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbmJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG5NRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG5HTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG5hbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/web3-eth-contract/lib/esm/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCreateAccessListParams: () => (/* binding */ getCreateAccessListParams),\n/* harmony export */   getEstimateGasParams: () => (/* binding */ getEstimateGasParams),\n/* harmony export */   getEthTxCallParams: () => (/* binding */ getEthTxCallParams),\n/* harmony export */   getSendTxParams: () => (/* binding */ getSendTxParams),\n/* harmony export */   isWeb3ContractContext: () => (/* binding */ isWeb3ContractContext)\n/* harmony export */ });\n/* harmony import */ var web3_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3-errors */ \"(ssr)/./node_modules/web3-errors/lib/esm/index.js\");\n/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3-utils */ \"(ssr)/./node_modules/web3-utils/lib/esm/index.js\");\n/* harmony import */ var _encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encoding.js */ \"(ssr)/./node_modules/web3-eth-contract/lib/esm/encoding.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/ \n\n\nconst dataInputEncodeMethodHelper = (txParams, abi, params, dataInputFill)=>{\n    var _a, _b;\n    const tx = {};\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(txParams.data) || dataInputFill === \"both\") {\n        tx.data = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMethodABI)(abi, params, (_a = txParams.data) !== null && _a !== void 0 ? _a : txParams.input);\n    }\n    if (!(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(txParams.input) || dataInputFill === \"both\") {\n        tx.input = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMethodABI)(abi, params, (_b = txParams.input) !== null && _b !== void 0 ? _b : txParams.data);\n    }\n    // if input and data is empty, use web3config default\n    if ((0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(tx.input) && (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(tx.data)) {\n        tx[dataInputFill] = (0,_encoding_js__WEBPACK_IMPORTED_MODULE_2__.encodeMethodABI)(abi, params);\n    }\n    return {\n        data: tx.data,\n        input: tx.input\n    };\n};\nconst getSendTxParams = ({ abi, params, options, contractOptions })=>{\n    var _a, _b, _c;\n    const deploymentCall = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input) !== null && _c !== void 0 ? _c : contractOptions.data;\n    if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError(\"Contract address not specified\");\n    }\n    if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError('Contract \"from\" address not specified');\n    }\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n        maxFeePerGas: contractOptions.maxFeePerGas,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n};\nconst getEthTxCallParams = ({ abi, params, options, contractOptions })=>{\n    if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError(\"Contract address not specified\");\n    }\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n        maxFeePerGas: contractOptions.maxFeePerGas,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n};\nconst getEstimateGasParams = ({ abi, params, options, contractOptions })=>{\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n};\nconst isWeb3ContractContext = (options)=>typeof options === \"object\" && !(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isNullish)(options) && Object.keys(options).length !== 0 && !(0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.isContractInitOptions)(options);\nconst getCreateAccessListParams = ({ abi, params, options, contractOptions })=>{\n    if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError(\"Contract address not specified\");\n    }\n    if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n        throw new web3_errors__WEBPACK_IMPORTED_MODULE_0__.Web3ContractError('Contract \"from\" address not specified');\n    }\n    let txParams = (0,web3_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)({\n        to: contractOptions.address,\n        gas: contractOptions.gas,\n        gasPrice: contractOptions.gasPrice,\n        from: contractOptions.from,\n        input: contractOptions.input,\n        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n        maxFeePerGas: contractOptions.maxFeePerGas,\n        data: contractOptions.data\n    }, options);\n    const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n    txParams = Object.assign(Object.assign({}, txParams), {\n        data: dataInput.data,\n        input: dataInput.input\n    });\n    return txParams;\n}; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-eth-contract/lib/esm/utils.js\n");

/***/ })

};
;